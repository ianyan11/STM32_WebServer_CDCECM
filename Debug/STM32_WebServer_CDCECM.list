
STM32_WebServer_CDCECM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003210  08016878  08016878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a88  08019a88  0001b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019a88  08019a88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a90  08019a90  0001b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a90  08019a90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019a94  08019a94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08019a98  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001b184  2**0
                  CONTENTS
 10 .bss          0000564c  20000184  20000184  0001b184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057d0  200057d0  0001b184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001b184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023746  00000000  00000000  0001b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006eec  00000000  00000000  0003e8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  000457e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c8  00000000  00000000  00047140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c29a  00000000  00000000  00048508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027d39  00000000  00000000  000747a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd25  00000000  00000000  0009c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a200  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c94  00000000  00000000  0016a244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00170ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000184 	.word	0x20000184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016860 	.word	0x08016860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000188 	.word	0x20000188
 80001cc:	08016860 	.word	0x08016860

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <MX_GPIO_Init+0xb4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <MX_GPIO_Init+0xb4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_GPIO_Init+0xb4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_GPIO_Init+0xb4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2104      	movs	r1, #4
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000658:	f000 fd7a 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800065c:	2304      	movs	r3, #4
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000674:	f000 fbd0 	bl	8000e18 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400

08000688 <MX_LWIP_Init>:
#include "lwip/apps/httpd.h"

struct netif gnetif;

void MX_LWIP_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af04      	add	r7, sp, #16
    ip4_addr_t ipaddr;
    ip4_addr_t netmask;
    ip4_addr_t gw;

    /* Initialize the LwIP stack */
    lwip_init();
 800068e:	f006 fd9d 	bl	80071cc <lwip_init>

    /* Set static IP address */
    IP4_ADDR(&ipaddr, 192, 168, 7, 1);  // STM32 IP address
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_LWIP_Init+0x4c>)
 8000694:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, 255, 255, 255, 0); // Subnet mask
 8000696:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800069a:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, 192, 168, 7, 1);      // Gateway (can be itself)
 800069c:	4b0d      	ldr	r3, [pc, #52]	@ (80006d4 <MX_LWIP_Init+0x4c>)
 800069e:	607b      	str	r3, [r7, #4]

    /* Add network interface */
    netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, cdc_ecm_netif_init, ethernet_input);
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	f107 0208 	add.w	r2, r7, #8
 80006a6:	f107 010c 	add.w	r1, r7, #12
 80006aa:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <MX_LWIP_Init+0x50>)
 80006ac:	9002      	str	r0, [sp, #8]
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_LWIP_Init+0x54>)
 80006b0:	9001      	str	r0, [sp, #4]
 80006b2:	2000      	movs	r0, #0
 80006b4:	9000      	str	r0, [sp, #0]
 80006b6:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <MX_LWIP_Init+0x58>)
 80006b8:	f006 ff3a 	bl	8007530 <netif_add>

    /* Set it as default */
    netif_set_default(&gnetif);
 80006bc:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <MX_LWIP_Init+0x58>)
 80006be:	f007 f8ed 	bl	800789c <netif_set_default>

    /* Bring it up */
    netif_set_up(&gnetif);
 80006c2:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <MX_LWIP_Init+0x58>)
 80006c4:	f007 f8fa 	bl	80078bc <netif_set_up>

    /* Initialize the HTTP server */
    httpd_init();
 80006c8:	f006 f84a 	bl	8006760 <httpd_init>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0107a8c0 	.word	0x0107a8c0
 80006d8:	08013e59 	.word	0x08013e59
 80006dc:	08014091 	.word	0x08014091
 80006e0:	200001a0 	.word	0x200001a0

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 f9ee 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f814 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff6c 	bl	80005cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006f4:	f013 fd66 	bl	80141c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MX_LWIP_Init();
 80006f8:	f7ff ffc6 	bl	8000688 <MX_LWIP_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//MX_LWIP_Process();  // to handle timeouts and packet processing
	sys_check_timeouts();
 80006fc:	f00e fb50 	bl	800eda0 <sys_check_timeouts>
    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);  // Blink the blue LED!
 8000700:	2104      	movs	r1, #4
 8000702:	4804      	ldr	r0, [pc, #16]	@ (8000714 <main+0x30>)
 8000704:	f000 fd3d 	bl	8001182 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000708:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800070c:	f000 fa4e 	bl	8000bac <HAL_Delay>
  {
 8000710:	bf00      	nop
 8000712:	e7f3      	b.n	80006fc <main+0x18>
 8000714:	40020400 	.word	0x40020400

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	@ 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	@ 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f015 fa8f 	bl	8015c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000796:	2307      	movs	r3, #7
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 ff5c 	bl	800265c <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007aa:	f000 f81f 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2105      	movs	r1, #5
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f9bd 	bl	8002b4c <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d8:	f000 f808 	bl	80007ec <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	@ 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	@ 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <MemManage_Handler+0x4>

08000860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <UsageFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f965 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <OTG_FS_IRQHandler+0x10>)
 80008ae:	f000 fdc6 	bl	800143e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004f80 	.word	0x20004f80

080008bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return 1;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_kill>:

int _kill(int pid, int sig)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <_kill+0x20>)
 80008d8:	2216      	movs	r2, #22
 80008da:	601a      	str	r2, [r3, #0]
  return -1;
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200057c8 	.word	0x200057c8

080008f0 <_exit>:

void _exit (int status)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffe5 	bl	80008cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000902:	bf00      	nop
 8000904:	e7fd      	b.n	8000902 <_exit+0x12>

08000906 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	e00a      	b.n	800092e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000918:	f3af 8000 	nop.w
 800091c:	4601      	mov	r1, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	60ba      	str	r2, [r7, #8]
 8000924:	b2ca      	uxtb	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbf0      	blt.n	8000918 <_read+0x12>
  }

  return len;
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e009      	b.n	8000966 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	60ba      	str	r2, [r7, #8]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf1      	blt.n	8000952 <_write+0x12>
  }
  return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_close>:

int _close(int file)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a0:	605a      	str	r2, [r3, #4]
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_isatty>:

int _isatty(int file)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d205      	bcs.n	8000a1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <_sbrk+0x6c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a06      	ldr	r2, [pc, #24]	@ (8000a44 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	200001d4 	.word	0x200001d4
 8000a48:	200057d0 	.word	0x200057d0
 8000a4c:	200057c8 	.word	0x200057c8

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f015 f94f 	bl	8015d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fe1d 	bl	80006e4 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ab8:	08019a98 	.word	0x08019a98
  ldr r2, =_sbss
 8000abc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ac0:	200057d0 	.word	0x200057d0

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f94f 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe7c 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f967 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	f000 f92f 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200001d8 	.word	0x200001d8

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200001d8 	.word	0x200001d8

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff29 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff3e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff31 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffa2 	bl	8000d50 <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	@ 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e16b      	b.n	800110c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 815a 	bne.w	8001106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d005      	beq.n	8000e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d017      	beq.n	8000f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80b4 	beq.w	8001106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b60      	ldr	r3, [pc, #384]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <HAL_GPIO_Init+0x30c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a5b      	ldr	r2, [pc, #364]	@ (8001128 <HAL_GPIO_Init+0x310>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_GPIO_Init+0x314>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	@ (8001130 <HAL_GPIO_Init+0x318>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a50      	ldr	r2, [pc, #320]	@ (8001134 <HAL_GPIO_Init+0x31c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <HAL_GPIO_Init+0x320>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	@ (800113c <HAL_GPIO_Init+0x324>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	@ (8001140 <HAL_GPIO_Init+0x328>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	@ (8001144 <HAL_GPIO_Init+0x32c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	@ (8001148 <HAL_GPIO_Init+0x330>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x20a>
 800101e:	2307      	movs	r3, #7
 8001020:	e00e      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001022:	2308      	movs	r3, #8
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	@ (8001128 <HAL_GPIO_Init+0x310>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a32      	ldr	r2, [pc, #200]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <HAL_GPIO_Init+0x334>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_GPIO_Init+0x334>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae90 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	041a      	lsls	r2, r3, #16
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43d9      	mvns	r1, r3
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	400b      	ands	r3, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	619a      	str	r2, [r3, #24]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e101      	b.n	80013cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f013 fffa 	bl	80151dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011f6:	d102      	bne.n	80011fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ffb1 	bl	800316a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7c1a      	ldrb	r2, [r3, #16]
 8001210:	f88d 2000 	strb.w	r2, [sp]
 8001214:	3304      	adds	r3, #4
 8001216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001218:	f001 fe90 	bl	8002f3c <USB_CoreInit>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2202      	movs	r2, #2
 8001226:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0ce      	b.n	80013cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ffa9 	bl	800318c <USB_SetCurrentMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e0bf      	b.n	80013cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e04a      	b.n	80012e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	3315      	adds	r3, #21
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3314      	adds	r3, #20
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	b298      	uxth	r0, r3
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	332e      	adds	r3, #46	@ 0x2e
 800128e:	4602      	mov	r2, r0
 8001290:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	3318      	adds	r3, #24
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	331c      	adds	r3, #28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	3320      	adds	r3, #32
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3324      	adds	r3, #36	@ 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3af      	bcc.n	8001252 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e044      	b.n	8001382 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	3301      	adds	r3, #1
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3b5      	bcc.n	80012f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7c1a      	ldrb	r2, [r3, #16]
 8001394:	f88d 2000 	strb.w	r2, [sp]
 8001398:	3304      	adds	r3, #4
 800139a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139c:	f001 ff42 	bl	8003224 <USB_DevInit>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00c      	b.n	80013cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 ff8c 	bl	80042e2 <USB_DevDisconnect>

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_PCD_Start+0x1c>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e022      	b.n	8001436 <HAL_PCD_Start+0x62>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001410:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fe93 	bl	8003148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 ff3a 	bl	80042a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800143e:	b590      	push	{r4, r7, lr}
 8001440:	b08d      	sub	sp, #52	@ 0x34
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fff8 	bl	800444a <USB_GetMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 848c 	bne.w	8001d7a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f002 ff5c 	bl	8004324 <USB_ReadInterrupts>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8482 	beq.w	8001d78 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f002 ff49 	bl	8004324 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b02      	cmp	r3, #2
 800149a:	d107      	bne.n	80014ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f002 0202 	and.w	r2, r2, #2
 80014aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 ff37 	bl	8004324 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b10      	cmp	r3, #16
 80014be:	d161      	bne.n	8001584 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0210 	bic.w	r2, r2, #16
 80014ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	f003 020f 	and.w	r2, r3, #15
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	3304      	adds	r3, #4
 80014ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80014f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014fa:	d124      	bne.n	8001546 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d035      	beq.n	8001574 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	6a38      	ldr	r0, [r7, #32]
 800151c:	f002 fd6e 	bl	8003ffc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153e:	441a      	add	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	e016      	b.n	8001574 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800154c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001550:	d110      	bne.n	8001574 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001558:	2208      	movs	r2, #8
 800155a:	4619      	mov	r1, r3
 800155c:	6a38      	ldr	r0, [r7, #32]
 800155e:	f002 fd4d 	bl	8003ffc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800156e:	441a      	add	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0210 	orr.w	r2, r2, #16
 8001582:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fecb 	bl	8004324 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001594:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001598:	f040 80a7 	bne.w	80016ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fed0 	bl	800434a <USB_ReadDevAllOutEpInterrupt>
 80015aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80015ac:	e099      	b.n	80016e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 808e 	beq.w	80016d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fef4 	bl	80043b2 <USB_ReadDevOutEPInterrupt>
 80015ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015e2:	461a      	mov	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fea4 	bl	8002338 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001606:	461a      	mov	r2, r3
 8001608:	2308      	movs	r3, #8
 800160a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800160c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 ff7a 	bl	8002508 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800162a:	461a      	mov	r2, r3
 800162c:	2310      	movs	r3, #16
 800162e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d030      	beq.n	800169c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001642:	2b80      	cmp	r3, #128	@ 0x80
 8001644:	d109      	bne.n	800165a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001654:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001658:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800165a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d108      	bne.n	800168a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2200      	movs	r2, #0
 800167c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f013 feaf 	bl	80153e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	2302      	movs	r3, #2
 800169a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016b2:	461a      	mov	r2, r3
 80016b4:	2320      	movs	r3, #32
 80016b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ce:	461a      	mov	r2, r3
 80016d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f af62 	bne.w	80015ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fe18 	bl	8004324 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016fe:	f040 80db 	bne.w	80018b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fe39 	bl	800437e <USB_ReadDevAllInEpInterrupt>
 800170c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001712:	e0cd      	b.n	80018b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80c2 	beq.w	80018a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fe5f 	bl	80043ee <USB_ReadDevInEPInterrupt>
 8001730:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d057      	beq.n	80017ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	2201      	movs	r2, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43db      	mvns	r3, r3
 8001756:	69f9      	ldr	r1, [r7, #28]
 8001758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800175c:	4013      	ands	r3, r2
 800175e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800176c:	461a      	mov	r2, r3
 800176e:	2301      	movs	r3, #1
 8001770:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	799b      	ldrb	r3, [r3, #6]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d132      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3320      	adds	r3, #32
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4403      	add	r3, r0
 800179a:	331c      	adds	r3, #28
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4419      	add	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4403      	add	r3, r0
 80017ae:	3320      	adds	r3, #32
 80017b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d113      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x3a2>
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017bc:	4613      	mov	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3324      	adds	r3, #36	@ 0x24
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017d8:	461a      	mov	r2, r3
 80017da:	2101      	movs	r1, #1
 80017dc:	f002 fe66 	bl	80044ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f013 fd79 	bl	80152de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001802:	461a      	mov	r2, r3
 8001804:	2308      	movs	r3, #8
 8001806:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800181e:	461a      	mov	r2, r3
 8001820:	2310      	movs	r3, #16
 8001822:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800183a:	461a      	mov	r2, r3
 800183c:	2340      	movs	r3, #64	@ 0x40
 800183e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d023      	beq.n	8001892 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800184a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800184c:	6a38      	ldr	r0, [r7, #32]
 800184e:	f001 fe4d 	bl	80034ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	3310      	adds	r3, #16
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f013 fdc6 	bl	801540c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188c:	461a      	mov	r2, r3
 800188e:	2302      	movs	r3, #2
 8001890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800189c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fcbd 	bl	800221e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	3301      	adds	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f af2e 	bne.w	8001714 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fd31 	bl	8004324 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018cc:	d122      	bne.n	8001914 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fea4 	bl	8002644 <HAL_PCDEx_LPM_Callback>
 80018fc:	e002      	b.n	8001904 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f013 fd64 	bl	80153cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fd03 	bl	8004324 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001928:	d112      	bne.n	8001950 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f013 fd20 	bl	8015380 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800194e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fce5 	bl	8004324 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001964:	f040 80b7 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2110      	movs	r1, #16
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fdb2 	bl	80034ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800198c:	e046      	b.n	8001a1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800199a:	461a      	mov	r2, r3
 800199c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019b2:	0151      	lsls	r1, r2, #5
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	440a      	add	r2, r1
 80019b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ce:	461a      	mov	r2, r3
 80019d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e6:	0151      	lsls	r1, r2, #5
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	440a      	add	r2, r1
 80019ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a06:	0151      	lsls	r1, r2, #5
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	440a      	add	r2, r1
 8001a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d3b2      	bcc.n	800198e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a36:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7bdb      	ldrb	r3, [r3, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d016      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a54:	f043 030b 	orr.w	r3, r3, #11
 8001a58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a6a:	f043 030b 	orr.w	r3, r3, #11
 8001a6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a70:	e015      	b.n	8001a9e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a84:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a98:	f043 030b 	orr.w	r3, r3, #11
 8001a9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ab0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f002 fcf3 	bl	80044ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fc22 	bl	8004324 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aea:	d123      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fcb8 	bl	8004466 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fd6f 	bl	80035de <USB_GetDevSpeed>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	f001 fa0a 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8001b10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b16:	461a      	mov	r2, r3
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f001 fa73 	bl	8003004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f013 fc05 	bl	801532e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fbf3 	bl	8004324 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d10a      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f013 fbe2 	bl	8015312 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 0208 	and.w	r2, r2, #8
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fbde 	bl	8004324 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b6e:	2b80      	cmp	r3, #128	@ 0x80
 8001b70:	d123      	bne.n	8001bba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b7e:	2301      	movs	r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b82:	e014      	b.n	8001bae <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fb0a 	bl	80021bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	3301      	adds	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d3e4      	bcc.n	8001b84 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fbb0 	bl	8004324 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bce:	d13c      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd4:	e02b      	b.n	8001c2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	015a      	lsls	r2, r3, #5
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d115      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da12      	bge.n	8001c28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3317      	adds	r3, #23
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 faca 	bl	80021bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	791b      	ldrb	r3, [r3, #4]
 8001c32:	461a      	mov	r2, r3
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d3cd      	bcc.n	8001bd6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fb68 	bl	8004324 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c5e:	d156      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	e045      	b.n	8001cf2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d12e      	bne.n	8001cec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da2b      	bge.n	8001cec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ca0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d121      	bne.n	8001cec <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ce4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce8:	6053      	str	r3, [r2, #4]
            break;
 8001cea:	e008      	b.n	8001cfe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	3301      	adds	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	791b      	ldrb	r3, [r3, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d3b3      	bcc.n	8001c66 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fb06 	bl	8004324 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d22:	d10a      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f013 fb83 	bl	8015430 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 faf0 	bl	8004324 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d115      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f013 fb73 	bl	801544c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	e000      	b.n	8001d7a <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d78:	bf00      	nop
    }
  }
}
 8001d7a:	3734      	adds	r7, #52	@ 0x34
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_PCD_SetAddress+0x1a>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e012      	b.n	8001dc0 <HAL_PCD_SetAddress+0x40>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fa4f 	bl	8004254 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	70fb      	strb	r3, [r7, #3]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	803b      	strh	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da0f      	bge.n	8001e0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
 8001e0c:	e00f      	b.n	8001e2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	3304      	adds	r3, #4
 8001e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e3a:	883b      	ldrh	r3, [r7, #0]
 8001e3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	78ba      	ldrb	r2, [r7, #2]
 8001e48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e5c:	78bb      	ldrb	r3, [r7, #2]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_PCD_EP_Open+0xae>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e00e      	b.n	8001e94 <HAL_PCD_EP_Open+0xcc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fbcf 	bl	8003628 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e92:	7afb      	ldrb	r3, [r7, #11]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	da0f      	bge.n	8001ed0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00f      	b.n	8001ef0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_PCD_EP_Close+0x6e>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e00e      	b.n	8001f28 <HAL_PCD_EP_Close+0x8c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 fc0d 	bl	8003738 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	799b      	ldrb	r3, [r3, #6]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	799b      	ldrb	r3, [r3, #6]
 8001f94:	461a      	mov	r2, r3
 8001f96:	6979      	ldr	r1, [r7, #20]
 8001f98:	f001 fcaa 	bl	80038f0 <USB_EPStartXfer>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001fc8:	681b      	ldr	r3, [r3, #0]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3310      	adds	r3, #16
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	b2da      	uxtb	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	799b      	ldrb	r3, [r3, #6]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	799b      	ldrb	r3, [r3, #6]
 8002038:	461a      	mov	r2, r3
 800203a:	6979      	ldr	r1, [r7, #20]
 800203c:	f001 fc58 	bl	80038f0 <USB_EPStartXfer>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	7912      	ldrb	r2, [r2, #4]
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e04f      	b.n	8002108 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	da0f      	bge.n	8002090 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3310      	adds	r3, #16
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	705a      	strb	r2, [r3, #1]
 800208e:	e00d      	b.n	80020ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_PCD_EP_SetStall+0x82>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e01d      	b.n	8002108 <HAL_PCD_EP_SetStall+0xbe>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 ffe6 	bl	80040ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7999      	ldrb	r1, [r3, #6]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020f8:	461a      	mov	r2, r3
 80020fa:	f002 f9d7 	bl	80044ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	7912      	ldrb	r2, [r2, #4]
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e042      	b.n	80021b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800212e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da0f      	bge.n	8002156 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 020f 	and.w	r2, r3, #15
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3310      	adds	r3, #16
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	705a      	strb	r2, [r3, #1]
 8002154:	e00f      	b.n	8002176 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_PCD_EP_ClrStall+0x86>
 8002192:	2302      	movs	r3, #2
 8002194:	e00e      	b.n	80021b4 <HAL_PCD_EP_ClrStall+0xa4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 ffef 	bl	8004188 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da0c      	bge.n	80021ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	3310      	adds	r3, #16
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e00c      	b.n	8002204 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fe0e 	bl	8003e2c <USB_EPStopXfer>
 8002210:	4603      	mov	r3, r0
 8002212:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b08a      	sub	sp, #40	@ 0x28
 8002222:	af02      	add	r7, sp, #8
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	3310      	adds	r3, #16
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	429a      	cmp	r2, r3
 8002250:	d901      	bls.n	8002256 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	d902      	bls.n	8002272 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3303      	adds	r3, #3
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800227a:	e02a      	b.n	80022d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	429a      	cmp	r2, r3
 8002290:	d902      	bls.n	8002298 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3303      	adds	r3, #3
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68d9      	ldr	r1, [r3, #12]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4603      	mov	r3, r0
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f001 fe63 	bl	8003f80 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	441a      	add	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d809      	bhi.n	80022fc <PCD_WriteEmptyTxFifo+0xde>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d203      	bcs.n	80022fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1bf      	bne.n	800227c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	d811      	bhi.n	800232c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	2201      	movs	r2, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800231c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	43db      	mvns	r3, r3
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002328:	4013      	ands	r3, r2
 800232a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	333c      	adds	r3, #60	@ 0x3c
 8002350:	3304      	adds	r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	799b      	ldrb	r3, [r3, #6]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d17b      	bne.n	8002466 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a61      	ldr	r2, [pc, #388]	@ (8002500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	f240 80b9 	bls.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b3 	beq.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a0:	6093      	str	r3, [r2, #8]
 80023a2:	e0a7      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e098      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 8093 	bne.w	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002500 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d90f      	bls.n	80023f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e07e      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	440b      	add	r3, r1
 8002418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	f002 f832 	bl	80044ac <USB_EP0_OutStart>
 8002448:	e006      	b.n	8002458 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	441a      	add	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f012 ff22 	bl	80152a8 <HAL_PCD_DataOutStageCallback>
 8002464:	e046      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d124      	bne.n	80024b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e032      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	2320      	movs	r3, #32
 80024a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f012 fef9 	bl	80152a8 <HAL_PCD_DataOutStageCallback>
 80024b6:	e01d      	b.n	80024f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024e0:	461a      	mov	r2, r3
 80024e2:	2100      	movs	r1, #0
 80024e4:	f001 ffe2 	bl	80044ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f012 feda 	bl	80152a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	4f54300a 	.word	0x4f54300a
 8002504:	4f54310a 	.word	0x4f54310a

08002508 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	333c      	adds	r3, #60	@ 0x3c
 8002520:	3304      	adds	r3, #4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a15      	ldr	r2, [pc, #84]	@ (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d90e      	bls.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800255a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f012 fe91 	bl	8015284 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <PCD_EP_OutSetupPacket_int+0x88>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d90c      	bls.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	799b      	ldrb	r3, [r3, #6]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800257c:	461a      	mov	r2, r3
 800257e:	2101      	movs	r1, #1
 8002580:	f001 ff94 	bl	80044ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	4f54300a 	.word	0x4f54300a

08002594 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d107      	bne.n	80025c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025b2:	883b      	ldrh	r3, [r7, #0]
 80025b4:	0419      	lsls	r1, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28
 80025c0:	e028      	b.n	8002614 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e00d      	b.n	80025f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3340      	adds	r3, #64	@ 0x40
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3ec      	bcc.n	80025d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025fc:	883b      	ldrh	r3, [r7, #0]
 80025fe:	0418      	lsls	r0, r3, #16
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	3b01      	subs	r3, #1
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4302      	orrs	r2, r0
 800260c:	3340      	adds	r3, #64	@ 0x40
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e267      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800267a:	4b88      	ldr	r3, [pc, #544]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b85      	ldr	r3, [pc, #532]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b82      	ldr	r3, [pc, #520]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b7e      	ldr	r3, [pc, #504]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e242      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b76      	ldr	r3, [pc, #472]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b70      	ldr	r3, [pc, #448]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6f      	ldr	r2, [pc, #444]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6d      	ldr	r3, [pc, #436]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6c      	ldr	r2, [pc, #432]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b69      	ldr	r3, [pc, #420]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b66      	ldr	r3, [pc, #408]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fa3e 	bl	8000b94 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fa3a 	bl	8000b94 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e207      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5b      	ldr	r3, [pc, #364]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fa2a 	bl	8000b94 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fa26 	bl	8000b94 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b51      	ldr	r3, [pc, #324]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002772:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b44      	ldr	r3, [pc, #272]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c7      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4937      	ldr	r1, [pc, #220]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_OscConfig+0x244>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe f9df 	bl	8000b94 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe f9db 	bl	8000b94 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b28      	ldr	r3, [pc, #160]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4925      	ldr	r1, [pc, #148]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <HAL_RCC_OscConfig+0x244>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe f9be 	bl	8000b94 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe f9ba 	bl	8000b94 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e187      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_RCC_OscConfig+0x248>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe f99e 	bl	8000b94 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe f99a 	bl	8000b94 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e167      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_OscConfig+0x240>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e01b      	b.n	80028b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_RCC_OscConfig+0x248>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe f987 	bl	8000b94 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e00e      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe f983 	bl	8000b94 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e150      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470000 	.word	0x42470000
 80028a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ea      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8097 	beq.w	80029f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b81      	ldr	r3, [pc, #516]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b7d      	ldr	r3, [pc, #500]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	4a7c      	ldr	r2, [pc, #496]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e2:	4b7a      	ldr	r3, [pc, #488]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b77      	ldr	r3, [pc, #476]	@ (8002ad0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b74      	ldr	r3, [pc, #464]	@ (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	@ (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7fe f943 	bl	8000b94 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7fe f93f 	bl	8000b94 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e10c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ea>
 8002938:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a63      	ldr	r2, [pc, #396]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x30c>
 800294e:	4b5f      	ldr	r3, [pc, #380]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a5e      	ldr	r2, [pc, #376]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
 800295a:	4b5c      	ldr	r3, [pc, #368]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a5b      	ldr	r2, [pc, #364]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002968:	4b58      	ldr	r3, [pc, #352]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a57      	ldr	r2, [pc, #348]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4a54      	ldr	r2, [pc, #336]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe f904 	bl	8000b94 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe f900 	bl	8000b94 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0cb      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	4b49      	ldr	r3, [pc, #292]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x334>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe f8ee 	bl	8000b94 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe f8ea 	bl	8000b94 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b5      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a38      	ldr	r2, [pc, #224]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d05c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d141      	bne.n	8002a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe f8be 	bl	8000b94 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe f8ba 	bl	8000b94 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e087      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	491b      	ldr	r1, [pc, #108]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe f893 	bl	8000b94 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe f88f 	bl	8000b94 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e05c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x416>
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe f87c 	bl	8000b94 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe f878 	bl	8000b94 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e045      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e038      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd ffaa 	bl	8000b94 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fd ffa6 	bl	8000b94 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd ff0a 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08019720 	.word	0x08019720
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b094      	sub	sp, #80	@ 0x50
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b79      	ldr	r3, [pc, #484]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80e1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e0db      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b73      	ldr	r3, [pc, #460]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d50:	e0db      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b73      	ldr	r3, [pc, #460]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d56:	e0d8      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	6139      	str	r1, [r7, #16]
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4651      	mov	r1, sl
 8002dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dea:	4690      	mov	r8, r2
 8002dec:	4699      	mov	r9, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	eb18 0303 	adds.w	r3, r8, r3
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	462b      	mov	r3, r5
 8002df8:	eb49 0303 	adc.w	r3, r9, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	024b      	lsls	r3, r1, #9
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e14:	4621      	mov	r1, r4
 8002e16:	024a      	lsls	r2, r1, #9
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e28:	f7fd fa3a 	bl	80002a0 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	e058      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b38      	ldr	r3, [pc, #224]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4611      	mov	r1, r2
 8002e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6e:	4649      	mov	r1, r9
 8002e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e88:	ebb2 040a 	subs.w	r4, r2, sl
 8002e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00eb      	lsls	r3, r5, #3
 8002e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9e:	00e2      	lsls	r2, r4, #3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	18e3      	adds	r3, r4, r3
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	eb45 0303 	adc.w	r3, r5, r3
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	61fa      	str	r2, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	f7fd f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3750      	adds	r7, #80	@ 0x50
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	f107 001c 	add.w	r0, r7, #28
 8002f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d123      	bne.n	8002f9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 fae8 	bl	8004568 <USB_CoreReset>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e01b      	b.n	8002fd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 fadc 	bl	8004568 <USB_CoreReset>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fc8:	e005      	b.n	8002fd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fd6:	7fbb      	ldrb	r3, [r7, #30]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10b      	bne.n	8002ff4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f043 0206 	orr.w	r2, r3, #6
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003000:	b004      	add	sp, #16
 8003002:	4770      	bx	lr

08003004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d165      	bne.n	80030e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <USB_SetTurnaroundTime+0x11c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d906      	bls.n	800302e <USB_SetTurnaroundTime+0x2a>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <USB_SetTurnaroundTime+0x120>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d202      	bcs.n	800302e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003028:	230f      	movs	r3, #15
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e062      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	4a3c      	ldr	r2, [pc, #240]	@ (8003124 <USB_SetTurnaroundTime+0x120>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d306      	bcc.n	8003044 <USB_SetTurnaroundTime+0x40>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a3b      	ldr	r2, [pc, #236]	@ (8003128 <USB_SetTurnaroundTime+0x124>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d202      	bcs.n	8003044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800303e:	230e      	movs	r3, #14
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e057      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4a38      	ldr	r2, [pc, #224]	@ (8003128 <USB_SetTurnaroundTime+0x124>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d306      	bcc.n	800305a <USB_SetTurnaroundTime+0x56>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a37      	ldr	r2, [pc, #220]	@ (800312c <USB_SetTurnaroundTime+0x128>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d202      	bcs.n	800305a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003054:	230d      	movs	r3, #13
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e04c      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4a33      	ldr	r2, [pc, #204]	@ (800312c <USB_SetTurnaroundTime+0x128>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d306      	bcc.n	8003070 <USB_SetTurnaroundTime+0x6c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4a32      	ldr	r2, [pc, #200]	@ (8003130 <USB_SetTurnaroundTime+0x12c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d802      	bhi.n	8003070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800306a:	230c      	movs	r3, #12
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e041      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4a2f      	ldr	r2, [pc, #188]	@ (8003130 <USB_SetTurnaroundTime+0x12c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d906      	bls.n	8003086 <USB_SetTurnaroundTime+0x82>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4a2e      	ldr	r2, [pc, #184]	@ (8003134 <USB_SetTurnaroundTime+0x130>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d802      	bhi.n	8003086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003080:	230b      	movs	r3, #11
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e036      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4a2a      	ldr	r2, [pc, #168]	@ (8003134 <USB_SetTurnaroundTime+0x130>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d906      	bls.n	800309c <USB_SetTurnaroundTime+0x98>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4a29      	ldr	r2, [pc, #164]	@ (8003138 <USB_SetTurnaroundTime+0x134>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003096:	230a      	movs	r3, #10
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e02b      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <USB_SetTurnaroundTime+0x134>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d906      	bls.n	80030b2 <USB_SetTurnaroundTime+0xae>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4a25      	ldr	r2, [pc, #148]	@ (800313c <USB_SetTurnaroundTime+0x138>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d202      	bcs.n	80030b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030ac:	2309      	movs	r3, #9
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e020      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4a21      	ldr	r2, [pc, #132]	@ (800313c <USB_SetTurnaroundTime+0x138>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d306      	bcc.n	80030c8 <USB_SetTurnaroundTime+0xc4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4a20      	ldr	r2, [pc, #128]	@ (8003140 <USB_SetTurnaroundTime+0x13c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d802      	bhi.n	80030c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80030c2:	2308      	movs	r3, #8
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	e015      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <USB_SetTurnaroundTime+0x13c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d906      	bls.n	80030de <USB_SetTurnaroundTime+0xda>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <USB_SetTurnaroundTime+0x140>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d202      	bcs.n	80030de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80030d8:	2307      	movs	r3, #7
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e00a      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80030de:	2306      	movs	r3, #6
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e007      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80030ea:	2309      	movs	r3, #9
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e001      	b.n	80030f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80030f0:	2309      	movs	r3, #9
 80030f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	00d8acbf 	.word	0x00d8acbf
 8003124:	00e4e1c0 	.word	0x00e4e1c0
 8003128:	00f42400 	.word	0x00f42400
 800312c:	01067380 	.word	0x01067380
 8003130:	011a499f 	.word	0x011a499f
 8003134:	01312cff 	.word	0x01312cff
 8003138:	014ca43f 	.word	0x014ca43f
 800313c:	016e3600 	.word	0x016e3600
 8003140:	01a6ab1f 	.word	0x01a6ab1f
 8003144:	01e84800 	.word	0x01e84800

08003148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d115      	bne.n	80031da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80031ba:	200a      	movs	r0, #10
 80031bc:	f7fd fcf6 	bl	8000bac <HAL_Delay>
      ms += 10U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	330a      	adds	r3, #10
 80031c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f001 f93f 	bl	800444a <USB_GetMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d01e      	beq.n	8003210 <USB_SetCurrentMode+0x84>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80031d6:	d9f0      	bls.n	80031ba <USB_SetCurrentMode+0x2e>
 80031d8:	e01a      	b.n	8003210 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d115      	bne.n	800320c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80031ec:	200a      	movs	r0, #10
 80031ee:	f7fd fcdd 	bl	8000bac <HAL_Delay>
      ms += 10U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	330a      	adds	r3, #10
 80031f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f001 f926 	bl	800444a <USB_GetMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <USB_SetCurrentMode+0x84>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2bc7      	cmp	r3, #199	@ 0xc7
 8003208:	d9f0      	bls.n	80031ec <USB_SetCurrentMode+0x60>
 800320a:	e001      	b.n	8003210 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e005      	b.n	800321c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2bc8      	cmp	r3, #200	@ 0xc8
 8003214:	d101      	bne.n	800321a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003224:	b084      	sub	sp, #16
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	e009      	b.n	8003258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3340      	adds	r3, #64	@ 0x40
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	2200      	movs	r2, #0
 8003250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	3301      	adds	r3, #1
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b0e      	cmp	r3, #14
 800325c:	d9f2      	bls.n	8003244 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800325e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11c      	bne.n	80032a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003296:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	@ 0x38
 800329e:	e00b      	b.n	80032b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80032be:	461a      	mov	r2, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10d      	bne.n	80032e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032d4:	2100      	movs	r1, #0
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f968 	bl	80035ac <USB_SetDevSpeed>
 80032dc:	e008      	b.n	80032f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032de:	2101      	movs	r1, #1
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f963 	bl	80035ac <USB_SetDevSpeed>
 80032e6:	e003      	b.n	80032f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032e8:	2103      	movs	r1, #3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f95e 	bl	80035ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032f0:	2110      	movs	r1, #16
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8fa 	bl	80034ec <USB_FlushTxFifo>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f924 	bl	8003550 <USB_FlushRxFifo>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003318:	461a      	mov	r2, r3
 800331a:	2300      	movs	r3, #0
 800331c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003324:	461a      	mov	r2, r3
 8003326:	2300      	movs	r3, #0
 8003328:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003330:	461a      	mov	r2, r3
 8003332:	2300      	movs	r3, #0
 8003334:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e043      	b.n	80033c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800334e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003352:	d118      	bne.n	8003386 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003366:	461a      	mov	r2, r3
 8003368:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e013      	b.n	8003398 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337c:	461a      	mov	r2, r3
 800337e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e008      	b.n	8003398 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003392:	461a      	mov	r2, r3
 8003394:	2300      	movs	r3, #0
 8003396:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	2300      	movs	r3, #0
 80033a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b6:	461a      	mov	r2, r3
 80033b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3301      	adds	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033c8:	461a      	mov	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d3b5      	bcc.n	800333c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e043      	b.n	800345e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ec:	d118      	bne.n	8003420 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	e013      	b.n	8003432 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e008      	b.n	8003432 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003450:	461a      	mov	r2, r3
 8003452:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003456:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003462:	461a      	mov	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4293      	cmp	r3, r2
 8003468:	d3b5      	bcc.n	80033d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800347c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800348a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800348c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <USB_DevInit+0x2c4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f043 0208 	orr.w	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr
 80034e8:	803c3800 	.word	0x803c3800

080034ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003506:	d901      	bls.n	800350c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e01b      	b.n	8003544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	daf2      	bge.n	80034fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003530:	d901      	bls.n	8003536 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e006      	b.n	8003544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d0f0      	beq.n	8003524 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3301      	adds	r3, #1
 8003560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003568:	d901      	bls.n	800356e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e018      	b.n	80035a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	daf2      	bge.n	800355c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2210      	movs	r2, #16
 800357e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800358c:	d901      	bls.n	8003592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e006      	b.n	80035a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d0f0      	beq.n	8003580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80035de:	b480      	push	{r7}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0306 	and.w	r3, r3, #6
 80035f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
 8003602:	e00a      	b.n	800361a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d002      	beq.n	8003610 <USB_GetDevSpeed+0x32>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b06      	cmp	r3, #6
 800360e:	d102      	bne.n	8003616 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003610:	2302      	movs	r3, #2
 8003612:	75fb      	strb	r3, [r7, #23]
 8003614:	e001      	b.n	800361a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003616:	230f      	movs	r3, #15
 8003618:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d13a      	bne.n	80036ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	b29b      	uxth	r3, r3
 800365c:	68f9      	ldr	r1, [r7, #12]
 800365e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003662:	4313      	orrs	r3, r2
 8003664:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d155      	bne.n	8003728 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	791b      	ldrb	r3, [r3, #4]
 8003696:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003698:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	059b      	lsls	r3, r3, #22
 800369e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036a0:	4313      	orrs	r3, r2
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e036      	b.n	8003728 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036d8:	4313      	orrs	r3, r2
 80036da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11a      	bne.n	8003728 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	791b      	ldrb	r3, [r3, #4]
 800370c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800370e:	430b      	orrs	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003726:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d161      	bne.n	8003818 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800376a:	d11f      	bne.n	80037ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003786:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800378a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	0151      	lsls	r1, r2, #5
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	440a      	add	r2, r1
 80037a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	2101      	movs	r1, #1
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037cc:	4013      	ands	r3, r2
 80037ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037f0:	4013      	ands	r3, r2
 80037f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0159      	lsls	r1, r3, #5
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	440b      	add	r3, r1
 800380a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380e:	4619      	mov	r1, r3
 8003810:	4b35      	ldr	r3, [pc, #212]	@ (80038e8 <USB_DeactivateEndpoint+0x1b0>)
 8003812:	4013      	ands	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
 8003816:	e060      	b.n	80038da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800382a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800382e:	d11f      	bne.n	8003870 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800384a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800384e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800386a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800386e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	43db      	mvns	r3, r3
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003890:	4013      	ands	r3, r2
 8003892:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	43db      	mvns	r3, r3
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038b4:	4013      	ands	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d2:	4619      	mov	r1, r3
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <USB_DeactivateEndpoint+0x1b4>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	ec337800 	.word	0xec337800
 80038ec:	eff37800 	.word	0xeff37800

080038f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 817f 	bne.w	8003c10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d132      	bne.n	8003980 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003934:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003938:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800393c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	440a      	add	r2, r1
 8003954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800395c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003978:	0cdb      	lsrs	r3, r3, #19
 800397a:	04db      	lsls	r3, r3, #19
 800397c:	6113      	str	r3, [r2, #16]
 800397e:	e097      	b.n	8003ab0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	440a      	add	r2, r1
 8003996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800399a:	0cdb      	lsrs	r3, r3, #19
 800399c:	04db      	lsls	r3, r3, #19
 800399e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80039be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80039c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11a      	bne.n	8003a00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d903      	bls.n	80039de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039fc:	6113      	str	r3, [r2, #16]
 80039fe:	e044      	b.n	8003a8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	8afb      	ldrh	r3, [r7, #22]
 8003a26:	04d9      	lsls	r1, r3, #19
 8003a28:	4ba4      	ldr	r3, [pc, #656]	@ (8003cbc <USB_EPStartXfer+0x3cc>)
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	0148      	lsls	r0, r1, #5
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	4401      	add	r1, r0
 8003a34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d122      	bne.n	8003a8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	8afb      	ldrh	r3, [r7, #22]
 8003a74:	075b      	lsls	r3, r3, #29
 8003a76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	0148      	lsls	r0, r1, #5
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	4401      	add	r1, r0
 8003a82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	0148      	lsls	r0, r1, #5
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d14b      	bne.n	8003b4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aca:	461a      	mov	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d128      	bne.n	8003b2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d110      	bne.n	8003b0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00f      	b.n	8003b2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e166      	b.n	8003e1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	791b      	ldrb	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d015      	beq.n	8003ba2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 814e 	beq.w	8003e1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	69f9      	ldr	r1, [r7, #28]
 8003b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	634b      	str	r3, [r1, #52]	@ 0x34
 8003ba0:	e13c      	b.n	8003e1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00f      	b.n	8003bf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	b298      	uxth	r0, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4603      	mov	r3, r0
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f9b9 	bl	8003f80 <USB_WritePacket>
 8003c0e:	e105      	b.n	8003e1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c2a:	0cdb      	lsrs	r3, r3, #19
 8003c2c:	04db      	lsls	r3, r3, #19
 8003c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003c4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003c52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d132      	bne.n	8003cc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	0148      	lsls	r0, r1, #5
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	4401      	add	r1, r0
 8003c90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cb6:	6113      	str	r3, [r2, #16]
 8003cb8:	e062      	b.n	8003d80 <USB_EPStartXfer+0x490>
 8003cba:	bf00      	nop
 8003cbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d123      	bne.n	8003d10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	0148      	lsls	r0, r1, #5
 8003ce2:	69f9      	ldr	r1, [r7, #28]
 8003ce4:	4401      	add	r1, r0
 8003ce6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	0151      	lsls	r1, r2, #5
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	440a      	add	r2, r1
 8003d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d0c:	6113      	str	r3, [r2, #16]
 8003d0e:	e037      	b.n	8003d80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	1e5a      	subs	r2, r3, #1
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	8afa      	ldrh	r2, [r7, #22]
 8003d2c:	fb03 f202 	mul.w	r2, r3, r2
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	04d9      	lsls	r1, r3, #19
 8003d46:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <USB_EPStartXfer+0x538>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	0148      	lsls	r0, r1, #5
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	4401      	add	r1, r0
 8003d52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d56:	4313      	orrs	r3, r2
 8003d58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d70:	69b9      	ldr	r1, [r7, #24]
 8003d72:	0148      	lsls	r0, r1, #5
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	4401      	add	r1, r0
 8003d78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10d      	bne.n	8003da2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	68d9      	ldr	r1, [r3, #12]
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9e:	460a      	mov	r2, r1
 8003da0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	791b      	ldrb	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d128      	bne.n	8003dfc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d110      	bne.n	8003ddc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00f      	b.n	8003dfc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	1ff80000 	.word	0x1ff80000

08003e2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d14a      	bne.n	8003ee0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e62:	f040 8086 	bne.w	8003f72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d902      	bls.n	8003ec4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8003ec2:	e056      	b.n	8003f72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003edc:	d0e7      	beq.n	8003eae <USB_EPStopXfer+0x82>
 8003ede:	e048      	b.n	8003f72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ef8:	d13b      	bne.n	8003f72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d902      	bls.n	8003f58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
          break;
 8003f56:	e00c      	b.n	8003f72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f70:	d0e7      	beq.n	8003f42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	@ 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	460b      	mov	r3, r1
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d123      	bne.n	8003fee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	3303      	adds	r3, #3
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e018      	b.n	8003fe6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	031a      	lsls	r2, r3, #12
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3e2      	bcc.n	8003fb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3724      	adds	r7, #36	@ 0x24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b08b      	sub	sp, #44	@ 0x2c
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	b29b      	uxth	r3, r3
 8004018:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	e014      	b.n	8004052 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	601a      	str	r2, [r3, #0]
    pDest++;
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	3301      	adds	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	3301      	adds	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	3301      	adds	r3, #1
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	3301      	adds	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	3301      	adds	r3, #1
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	6a3a      	ldr	r2, [r7, #32]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3e6      	bcc.n	8004028 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800405a:	8bfb      	ldrh	r3, [r7, #30]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01e      	beq.n	800409e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	461a      	mov	r2, r3
 800406c:	f107 0310 	add.w	r3, r7, #16
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	701a      	strb	r2, [r3, #0]
      i++;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	3301      	adds	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
      pDest++;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	3301      	adds	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004092:	8bfb      	ldrh	r3, [r7, #30]
 8004094:	3b01      	subs	r3, #1
 8004096:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004098:	8bfb      	ldrh	r3, [r7, #30]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ea      	bne.n	8004074 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	372c      	adds	r7, #44	@ 0x2c
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d12c      	bne.n	8004122 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	db12      	blt.n	8004100 <USB_EPSetStall+0x54>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800411a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e02b      	b.n	800417a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	db12      	blt.n	800415a <USB_EPSetStall+0xae>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	440a      	add	r2, r1
 8004150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004154:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004158:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004174:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004178:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d128      	bne.n	80041f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d003      	beq.n	80041d4 <USB_EPClearStall+0x4c>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	791b      	ldrb	r3, [r3, #4]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d138      	bne.n	8004246 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e027      	b.n	8004246 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004210:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004214:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	791b      	ldrb	r3, [r3, #4]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d003      	beq.n	8004226 <USB_EPClearStall+0x9e>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	791b      	ldrb	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d10f      	bne.n	8004246 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004244:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004272:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004276:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ce:	f023 0302 	bic.w	r3, r3, #2
 80042d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042fc:	f023 0303 	bic.w	r3, r3, #3
 8004300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	0c1b      	lsrs	r3, r3, #16
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	b29b      	uxth	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4013      	ands	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043e0:	68bb      	ldr	r3, [r7, #8]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	01db      	lsls	r3, r3, #7
 8004420:	b2db      	uxtb	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800443c:	68bb      	ldr	r3, [r7, #8]
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004480:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004484:	f023 0307 	bic.w	r3, r3, #7
 8004488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	460b      	mov	r3, r1
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	333c      	adds	r3, #60	@ 0x3c
 80044c2:	3304      	adds	r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4a26      	ldr	r2, [pc, #152]	@ (8004564 <USB_EP0_OutStart+0xb8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d90a      	bls.n	80044e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e0:	d101      	bne.n	80044e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e037      	b.n	8004556 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	2300      	movs	r3, #0
 80044f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004514:	f043 0318 	orr.w	r3, r3, #24
 8004518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004528:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800452c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800452e:	7afb      	ldrb	r3, [r7, #11]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10f      	bne.n	8004554 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800454e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	4f54300a 	.word	0x4f54300a

08004568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004580:	d901      	bls.n	8004586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e01b      	b.n	80045be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	daf2      	bge.n	8004574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3301      	adds	r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045aa:	d901      	bls.n	80045b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e006      	b.n	80045be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d0f0      	beq.n	800459e <USB_CoreReset+0x36>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80045de:	2303      	movs	r3, #3
 80045e0:	e01f      	b.n	8004622 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f010 ff26 	bl	8015468 <USBD_LL_Init>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800463e:	2303      	movs	r3, #3
 8004640:	e025      	b.n	800468e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	32ae      	adds	r2, #174	@ 0xae
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00f      	beq.n	800467e <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	32ae      	adds	r2, #174	@ 0xae
 8004668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	f107 020e 	add.w	r2, r7, #14
 8004672:	4610      	mov	r0, r2
 8004674:	4798      	blx	r3
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f010 ff2e 	bl	8015500 <USBD_LL_Start>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80046b6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4611      	mov	r1, r2
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	4611      	mov	r1, r2
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004722:	2303      	movs	r3, #3
 8004724:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004740:	6839      	ldr	r1, [r7, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f001 f933 	bl	80059ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2b02      	cmp	r3, #2
 800476a:	d01a      	beq.n	80047a2 <USBD_LL_SetupStage+0x72>
 800476c:	2b02      	cmp	r3, #2
 800476e:	d822      	bhi.n	80047b6 <USBD_LL_SetupStage+0x86>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <USBD_LL_SetupStage+0x4a>
 8004774:	2b01      	cmp	r3, #1
 8004776:	d00a      	beq.n	800478e <USBD_LL_SetupStage+0x5e>
 8004778:	e01d      	b.n	80047b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fb64 	bl	8004e50 <USBD_StdDevReq>
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]
      break;
 800478c:	e020      	b.n	80047d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fbcc 	bl	8004f34 <USBD_StdItfReq>
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e016      	b.n	80047d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fc2e 	bl	800500c <USBD_StdEPReq>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e00c      	b.n	80047d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80047bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f010 fefb 	bl	80155c0 <USBD_LL_StallEP>
 80047ca:	4603      	mov	r3, r0
 80047cc:	73fb      	strb	r3, [r7, #15]
      break;
 80047ce:	bf00      	nop
  }

  return ret;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	460b      	mov	r3, r1
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d16e      	bne.n	80048d0 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80047f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004800:	2b03      	cmp	r3, #3
 8004802:	f040 8098 	bne.w	8004936 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	429a      	cmp	r2, r3
 8004810:	d913      	bls.n	800483a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4293      	cmp	r3, r2
 800482a:	bf28      	it	cs
 800482c:	4613      	movcs	r3, r2
 800482e:	461a      	mov	r2, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f001 f9bb 	bl	8005bae <USBD_CtlContinueRx>
 8004838:	e07d      	b.n	8004936 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	2b02      	cmp	r3, #2
 8004846:	d014      	beq.n	8004872 <USBD_LL_DataOutStage+0x98>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d81d      	bhi.n	8004888 <USBD_LL_DataOutStage+0xae>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <USBD_LL_DataOutStage+0x7c>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d003      	beq.n	800485c <USBD_LL_DataOutStage+0x82>
 8004854:	e018      	b.n	8004888 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	75bb      	strb	r3, [r7, #22]
            break;
 800485a:	e018      	b.n	800488e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004862:	b2db      	uxtb	r3, r3
 8004864:	4619      	mov	r1, r3
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fa64 	bl	8004d34 <USBD_CoreFindIF>
 800486c:	4603      	mov	r3, r0
 800486e:	75bb      	strb	r3, [r7, #22]
            break;
 8004870:	e00d      	b.n	800488e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004878:	b2db      	uxtb	r3, r3
 800487a:	4619      	mov	r1, r3
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa66 	bl	8004d4e <USBD_CoreFindEP>
 8004882:	4603      	mov	r3, r0
 8004884:	75bb      	strb	r3, [r7, #22]
            break;
 8004886:	e002      	b.n	800488e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	75bb      	strb	r3, [r7, #22]
            break;
 800488c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800488e:	7dbb      	ldrb	r3, [r7, #22]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d119      	bne.n	80048c8 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b03      	cmp	r3, #3
 800489e:	d113      	bne.n	80048c8 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80048a0:	7dba      	ldrb	r2, [r7, #22]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	32ae      	adds	r2, #174	@ 0xae
 80048a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80048b0:	7dba      	ldrb	r2, [r7, #22]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80048b8:	7dba      	ldrb	r2, [r7, #22]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	32ae      	adds	r2, #174	@ 0xae
 80048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 f981 	bl	8005bd0 <USBD_CtlSendStatus>
 80048ce:	e032      	b.n	8004936 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	4619      	mov	r1, r3
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa37 	bl	8004d4e <USBD_CoreFindEP>
 80048e0:	4603      	mov	r3, r0
 80048e2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048e4:	7dbb      	ldrb	r3, [r7, #22]
 80048e6:	2bff      	cmp	r3, #255	@ 0xff
 80048e8:	d025      	beq.n	8004936 <USBD_LL_DataOutStage+0x15c>
 80048ea:	7dbb      	ldrb	r3, [r7, #22]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d122      	bne.n	8004936 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d117      	bne.n	800492c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80048fc:	7dba      	ldrb	r2, [r7, #22]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	32ae      	adds	r2, #174	@ 0xae
 8004902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00f      	beq.n	800492c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800490c:	7dba      	ldrb	r2, [r7, #22]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004914:	7dba      	ldrb	r2, [r7, #22]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	32ae      	adds	r2, #174	@ 0xae
 800491a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	7afa      	ldrb	r2, [r7, #11]
 8004922:	4611      	mov	r1, r2
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	4798      	blx	r3
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	e000      	b.n	8004938 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	460b      	mov	r3, r1
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800494e:	7afb      	ldrb	r3, [r7, #11]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d16f      	bne.n	8004a34 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3314      	adds	r3, #20
 8004958:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004960:	2b02      	cmp	r3, #2
 8004962:	d15a      	bne.n	8004a1a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d914      	bls.n	800499a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	1ad2      	subs	r2, r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	461a      	mov	r2, r3
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f001 f8e3 	bl	8005b52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800498c:	2300      	movs	r3, #0
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f010 febe 	bl	8015714 <USBD_LL_PrepareReceive>
 8004998:	e03f      	b.n	8004a1a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11c      	bne.n	80049e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d316      	bcc.n	80049e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80049bc:	429a      	cmp	r2, r3
 80049be:	d20f      	bcs.n	80049e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80049c0:	2200      	movs	r2, #0
 80049c2:	2100      	movs	r1, #0
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f001 f8c4 	bl	8005b52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049d2:	2300      	movs	r3, #0
 80049d4:	2200      	movs	r2, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f010 fe9b 	bl	8015714 <USBD_LL_PrepareReceive>
 80049de:	e01c      	b.n	8004a1a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10f      	bne.n	8004a0c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d009      	beq.n	8004a0c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a0c:	2180      	movs	r1, #128	@ 0x80
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f010 fdd6 	bl	80155c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f001 f8ee 	bl	8005bf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03a      	beq.n	8004a9a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fe42 	bl	80046ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004a32:	e032      	b.n	8004a9a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004a34:	7afb      	ldrb	r3, [r7, #11]
 8004a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f985 	bl	8004d4e <USBD_CoreFindEP>
 8004a44:	4603      	mov	r3, r0
 8004a46:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
 8004a4a:	2bff      	cmp	r3, #255	@ 0xff
 8004a4c:	d025      	beq.n	8004a9a <USBD_LL_DataInStage+0x15a>
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d122      	bne.n	8004a9a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d11c      	bne.n	8004a9a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004a60:	7dfa      	ldrb	r2, [r7, #23]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	32ae      	adds	r2, #174	@ 0xae
 8004a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d014      	beq.n	8004a9a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004a70:	7dfa      	ldrb	r2, [r7, #23]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004a78:	7dfa      	ldrb	r2, [r7, #23]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	32ae      	adds	r2, #174	@ 0xae
 8004a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	7afa      	ldrb	r2, [r7, #11]
 8004a86:	4611      	mov	r1, r2
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	4798      	blx	r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004a96:	7dbb      	ldrb	r3, [r7, #22]
 8004a98:	e000      	b.n	8004a9c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d014      	beq.n	8004b0a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	4611      	mov	r1, r2
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004b06:	2303      	movs	r3, #3
 8004b08:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b0a:	2340      	movs	r3, #64	@ 0x40
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f010 fd10 	bl	8015536 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2240      	movs	r2, #64	@ 0x40
 8004b22:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b26:	2340      	movs	r3, #64	@ 0x40
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	@ 0x80
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f010 fd02 	bl	8015536 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2240      	movs	r2, #64	@ 0x40
 8004b3c:	621a      	str	r2, [r3, #32]

  return ret;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d006      	beq.n	8004b8a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d106      	bne.n	8004bc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d110      	bne.n	8004c06 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	32ae      	adds	r2, #174	@ 0xae
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e01c      	b.n	8004c6c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d115      	bne.n	8004c6a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	32ae      	adds	r2, #174	@ 0xae
 8004c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	32ae      	adds	r2, #174	@ 0xae
 8004c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	4611      	mov	r1, r2
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	32ae      	adds	r2, #174	@ 0xae
 8004c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e01c      	b.n	8004cd0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d115      	bne.n	8004cce <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	32ae      	adds	r2, #174	@ 0xae
 8004cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	32ae      	adds	r2, #174	@ 0xae
 8004cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6852      	ldr	r2, [r2, #4]
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004d26:	2303      	movs	r3, #3
 8004d28:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004d40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004d5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	885b      	ldrh	r3, [r3, #2]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d91f      	bls.n	8004dce <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004d94:	e013      	b.n	8004dbe <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004d96:	f107 030a 	add.w	r3, r7, #10
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6978      	ldr	r0, [r7, #20]
 8004d9e:	f000 f81b 	bl	8004dd8 <USBD_GetNextDesc>
 8004da2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d108      	bne.n	8004dbe <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	789b      	ldrb	r3, [r3, #2]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d008      	beq.n	8004dcc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	885b      	ldrh	r3, [r3, #2]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	897b      	ldrh	r3, [r7, #10]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d8e5      	bhi.n	8004d96 <USBD_GetEpDesc+0x2e>
 8004dca:	e000      	b.n	8004dce <USBD_GetEpDesc+0x66>
          break;
 8004dcc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004dce:	693b      	ldr	r3, [r7, #16]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	3301      	adds	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004e2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	b21a      	sxth	r2, r3
 8004e36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	b21b      	sxth	r3, r3
 8004e3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004e40:	89fb      	ldrh	r3, [r7, #14]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d005      	beq.n	8004e76 <USBD_StdDevReq+0x26>
 8004e6a:	2b40      	cmp	r3, #64	@ 0x40
 8004e6c:	d857      	bhi.n	8004f1e <USBD_StdDevReq+0xce>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00f      	beq.n	8004e92 <USBD_StdDevReq+0x42>
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d153      	bne.n	8004f1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	32ae      	adds	r2, #174	@ 0xae
 8004e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	e04a      	b.n	8004f28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b09      	cmp	r3, #9
 8004e98:	d83b      	bhi.n	8004f12 <USBD_StdDevReq+0xc2>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <USBD_StdDevReq+0x50>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004f13 	.word	0x08004f13
 8004eac:	08004eff 	.word	0x08004eff
 8004eb0:	08004f13 	.word	0x08004f13
 8004eb4:	08004ed3 	.word	0x08004ed3
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004f13 	.word	0x08004f13
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004edd 	.word	0x08004edd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004ec8:	6839      	ldr	r1, [r7, #0]
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa3c 	bl	8005348 <USBD_GetDescriptor>
          break;
 8004ed0:	e024      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fbc7 	bl	8005668 <USBD_SetAddress>
          break;
 8004eda:	e01f      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fc06 	bl	80056f0 <USBD_SetConfig>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee8:	e018      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fca9 	bl	8005844 <USBD_GetConfig>
          break;
 8004ef2:	e013      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fcda 	bl	80058b0 <USBD_GetStatus>
          break;
 8004efc:	e00e      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fd09 	bl	8005918 <USBD_SetFeature>
          break;
 8004f06:	e009      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fd2d 	bl	800596a <USBD_ClrFeature>
          break;
 8004f10:	e004      	b.n	8004f1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fd84 	bl	8005a22 <USBD_CtlError>
          break;
 8004f1a:	bf00      	nop
      }
      break;
 8004f1c:	e004      	b.n	8004f28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fd7e 	bl	8005a22 <USBD_CtlError>
      break;
 8004f26:	bf00      	nop
  }

  return ret;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop

08004f34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f4a:	2b40      	cmp	r3, #64	@ 0x40
 8004f4c:	d005      	beq.n	8004f5a <USBD_StdItfReq+0x26>
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d852      	bhi.n	8004ff8 <USBD_StdItfReq+0xc4>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <USBD_StdItfReq+0x26>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d14e      	bne.n	8004ff8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d840      	bhi.n	8004fea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	889b      	ldrh	r3, [r3, #4]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d836      	bhi.n	8004fe0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	889b      	ldrh	r3, [r3, #4]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff feda 	bl	8004d34 <USBD_CoreFindIF>
 8004f80:	4603      	mov	r3, r0
 8004f82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2bff      	cmp	r3, #255	@ 0xff
 8004f88:	d01d      	beq.n	8004fc6 <USBD_StdItfReq+0x92>
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11a      	bne.n	8004fc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8004f90:	7bba      	ldrb	r2, [r7, #14]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	32ae      	adds	r2, #174	@ 0xae
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8004fa0:	7bba      	ldrb	r2, [r7, #14]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004fa8:	7bba      	ldrb	r2, [r7, #14]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	32ae      	adds	r2, #174	@ 0xae
 8004fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004fbe:	e004      	b.n	8004fca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004fc4:	e001      	b.n	8004fca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d110      	bne.n	8004ff4 <USBD_StdItfReq+0xc0>
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fdf9 	bl	8005bd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004fde:	e009      	b.n	8004ff4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fd1d 	bl	8005a22 <USBD_CtlError>
          break;
 8004fe8:	e004      	b.n	8004ff4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fd18 	bl	8005a22 <USBD_CtlError>
          break;
 8004ff2:	e000      	b.n	8004ff6 <USBD_StdItfReq+0xc2>
          break;
 8004ff4:	bf00      	nop
      }
      break;
 8004ff6:	e004      	b.n	8005002 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fd11 	bl	8005a22 <USBD_CtlError>
      break;
 8005000:	bf00      	nop
  }

  return ret;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	889b      	ldrh	r3, [r3, #4]
 800501e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d007      	beq.n	800503c <USBD_StdEPReq+0x30>
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	f200 817f 	bhi.w	8005330 <USBD_StdEPReq+0x324>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d02a      	beq.n	800508c <USBD_StdEPReq+0x80>
 8005036:	2b20      	cmp	r3, #32
 8005038:	f040 817a 	bne.w	8005330 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fe84 	bl	8004d4e <USBD_CoreFindEP>
 8005046:	4603      	mov	r3, r0
 8005048:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800504a:	7b7b      	ldrb	r3, [r7, #13]
 800504c:	2bff      	cmp	r3, #255	@ 0xff
 800504e:	f000 8174 	beq.w	800533a <USBD_StdEPReq+0x32e>
 8005052:	7b7b      	ldrb	r3, [r7, #13]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 8170 	bne.w	800533a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800505a:	7b7a      	ldrb	r2, [r7, #13]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005062:	7b7a      	ldrb	r2, [r7, #13]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	32ae      	adds	r2, #174	@ 0xae
 8005068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8163 	beq.w	800533a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005074:	7b7a      	ldrb	r2, [r7, #13]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	32ae      	adds	r2, #174	@ 0xae
 800507a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800508a:	e156      	b.n	800533a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d008      	beq.n	80050a6 <USBD_StdEPReq+0x9a>
 8005094:	2b03      	cmp	r3, #3
 8005096:	f300 8145 	bgt.w	8005324 <USBD_StdEPReq+0x318>
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 809b 	beq.w	80051d6 <USBD_StdEPReq+0x1ca>
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d03c      	beq.n	800511e <USBD_StdEPReq+0x112>
 80050a4:	e13e      	b.n	8005324 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d002      	beq.n	80050b8 <USBD_StdEPReq+0xac>
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d016      	beq.n	80050e4 <USBD_StdEPReq+0xd8>
 80050b6:	e02c      	b.n	8005112 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050b8:	7bbb      	ldrb	r3, [r7, #14]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <USBD_StdEPReq+0xce>
 80050be:	7bbb      	ldrb	r3, [r7, #14]
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d00a      	beq.n	80050da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80050c4:	7bbb      	ldrb	r3, [r7, #14]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f010 fa79 	bl	80155c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f010 fa75 	bl	80155c0 <USBD_LL_StallEP>
 80050d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050d8:	e020      	b.n	800511c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fca0 	bl	8005a22 <USBD_CtlError>
              break;
 80050e2:	e01b      	b.n	800511c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	885b      	ldrh	r3, [r3, #2]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <USBD_StdEPReq+0xfe>
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	2b80      	cmp	r3, #128	@ 0x80
 80050f6:	d008      	beq.n	800510a <USBD_StdEPReq+0xfe>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	88db      	ldrh	r3, [r3, #6]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f010 fa5b 	bl	80155c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fd60 	bl	8005bd0 <USBD_CtlSendStatus>

              break;
 8005110:	e004      	b.n	800511c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fc84 	bl	8005a22 <USBD_CtlError>
              break;
 800511a:	bf00      	nop
          }
          break;
 800511c:	e107      	b.n	800532e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d002      	beq.n	8005130 <USBD_StdEPReq+0x124>
 800512a:	2b03      	cmp	r3, #3
 800512c:	d016      	beq.n	800515c <USBD_StdEPReq+0x150>
 800512e:	e04b      	b.n	80051c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005130:	7bbb      	ldrb	r3, [r7, #14]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <USBD_StdEPReq+0x146>
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d00a      	beq.n	8005152 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f010 fa3d 	bl	80155c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f010 fa39 	bl	80155c0 <USBD_LL_StallEP>
 800514e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005150:	e040      	b.n	80051d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fc64 	bl	8005a22 <USBD_CtlError>
              break;
 800515a:	e03b      	b.n	80051d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	885b      	ldrh	r3, [r3, #2]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d136      	bne.n	80051d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800516e:	7bbb      	ldrb	r3, [r7, #14]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f010 fa43 	bl	80155fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fd29 	bl	8005bd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800517e:	7bbb      	ldrb	r3, [r7, #14]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fde3 	bl	8004d4e <USBD_CoreFindEP>
 8005188:	4603      	mov	r3, r0
 800518a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800518c:	7b7b      	ldrb	r3, [r7, #13]
 800518e:	2bff      	cmp	r3, #255	@ 0xff
 8005190:	d01f      	beq.n	80051d2 <USBD_StdEPReq+0x1c6>
 8005192:	7b7b      	ldrb	r3, [r7, #13]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d11c      	bne.n	80051d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005198:	7b7a      	ldrb	r2, [r7, #13]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80051a0:	7b7a      	ldrb	r2, [r7, #13]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	32ae      	adds	r2, #174	@ 0xae
 80051a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80051b0:	7b7a      	ldrb	r2, [r7, #13]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	32ae      	adds	r2, #174	@ 0xae
 80051b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80051c6:	e004      	b.n	80051d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fc29 	bl	8005a22 <USBD_CtlError>
              break;
 80051d0:	e000      	b.n	80051d4 <USBD_StdEPReq+0x1c8>
              break;
 80051d2:	bf00      	nop
          }
          break;
 80051d4:	e0ab      	b.n	800532e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d002      	beq.n	80051e8 <USBD_StdEPReq+0x1dc>
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d032      	beq.n	800524c <USBD_StdEPReq+0x240>
 80051e6:	e097      	b.n	8005318 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <USBD_StdEPReq+0x1f2>
 80051ee:	7bbb      	ldrb	r3, [r7, #14]
 80051f0:	2b80      	cmp	r3, #128	@ 0x80
 80051f2:	d004      	beq.n	80051fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fc13 	bl	8005a22 <USBD_CtlError>
                break;
 80051fc:	e091      	b.n	8005322 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da0b      	bge.n	800521e <USBD_StdEPReq+0x212>
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3310      	adds	r3, #16
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	e00b      	b.n	8005236 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	3304      	adds	r3, #4
 8005236:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2202      	movs	r2, #2
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fc69 	bl	8005b1c <USBD_CtlSendData>
              break;
 800524a:	e06a      	b.n	8005322 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800524c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005250:	2b00      	cmp	r3, #0
 8005252:	da11      	bge.n	8005278 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005254:	7bbb      	ldrb	r3, [r7, #14]
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	3324      	adds	r3, #36	@ 0x24
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d117      	bne.n	800529e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fbd6 	bl	8005a22 <USBD_CtlError>
                  break;
 8005276:	e054      	b.n	8005322 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fbc3 	bl	8005a22 <USBD_CtlError>
                  break;
 800529c:	e041      	b.n	8005322 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800529e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da0b      	bge.n	80052be <USBD_StdEPReq+0x2b2>
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	3310      	adds	r3, #16
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	3304      	adds	r3, #4
 80052bc:	e00b      	b.n	80052d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <USBD_StdEPReq+0x2d8>
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	2b80      	cmp	r3, #128	@ 0x80
 80052e2:	d103      	bne.n	80052ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e00e      	b.n	800530a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f010 f9a3 	bl	801563c <USBD_LL_IsStallEP>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e002      	b.n	800530a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2202      	movs	r2, #2
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fc03 	bl	8005b1c <USBD_CtlSendData>
              break;
 8005316:	e004      	b.n	8005322 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb81 	bl	8005a22 <USBD_CtlError>
              break;
 8005320:	bf00      	nop
          }
          break;
 8005322:	e004      	b.n	800532e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fb7b 	bl	8005a22 <USBD_CtlError>
          break;
 800532c:	bf00      	nop
      }
      break;
 800532e:	e005      	b.n	800533c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fb75 	bl	8005a22 <USBD_CtlError>
      break;
 8005338:	e000      	b.n	800533c <USBD_StdEPReq+0x330>
      break;
 800533a:	bf00      	nop
  }

  return ret;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	885b      	ldrh	r3, [r3, #2]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	2b06      	cmp	r3, #6
 800536a:	f200 814f 	bhi.w	800560c <USBD_GetDescriptor+0x2c4>
 800536e:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <USBD_GetDescriptor+0x2c>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005391 	.word	0x08005391
 8005378:	080053a9 	.word	0x080053a9
 800537c:	080053e9 	.word	0x080053e9
 8005380:	0800560d 	.word	0x0800560d
 8005384:	0800560d 	.word	0x0800560d
 8005388:	080055ad 	.word	0x080055ad
 800538c:	080055d9 	.word	0x080055d9
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	7c12      	ldrb	r2, [r2, #16]
 800539c:	f107 010a 	add.w	r1, r7, #10
 80053a0:	4610      	mov	r0, r2
 80053a2:	4798      	blx	r3
 80053a4:	6178      	str	r0, [r7, #20]
      break;
 80053a6:	e139      	b.n	800561c <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7c1b      	ldrb	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f107 020a 	add.w	r2, r7, #10
 80053bc:	4610      	mov	r0, r2
 80053be:	4798      	blx	r3
 80053c0:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	3301      	adds	r3, #1
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80053ca:	e127      	b.n	800561c <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	f107 020a 	add.w	r2, r7, #10
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
 80053dc:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3301      	adds	r3, #1
 80053e2:	2202      	movs	r2, #2
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e119      	b.n	800561c <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	885b      	ldrh	r3, [r3, #2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	f200 80ac 	bhi.w	800554c <USBD_GetDescriptor+0x204>
 80053f4:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <USBD_GetDescriptor+0xb4>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005415 	.word	0x08005415
 8005400:	08005449 	.word	0x08005449
 8005404:	0800547d 	.word	0x0800547d
 8005408:	080054b1 	.word	0x080054b1
 800540c:	080054e5 	.word	0x080054e5
 8005410:	08005519 	.word	0x08005519
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	7c12      	ldrb	r2, [r2, #16]
 800542c:	f107 010a 	add.w	r1, r7, #10
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
 8005434:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005436:	e0b8      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 faf1 	bl	8005a22 <USBD_CtlError>
            err++;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	3301      	adds	r3, #1
 8005444:	74fb      	strb	r3, [r7, #19]
          break;
 8005446:	e0b0      	b.n	80055aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	7c12      	ldrb	r2, [r2, #16]
 8005460:	f107 010a 	add.w	r1, r7, #10
 8005464:	4610      	mov	r0, r2
 8005466:	4798      	blx	r3
 8005468:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800546a:	e09e      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fad7 	bl	8005a22 <USBD_CtlError>
            err++;
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	3301      	adds	r3, #1
 8005478:	74fb      	strb	r3, [r7, #19]
          break;
 800547a:	e096      	b.n	80055aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	7c12      	ldrb	r2, [r2, #16]
 8005494:	f107 010a 	add.w	r1, r7, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4798      	blx	r3
 800549c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800549e:	e084      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fabd 	bl	8005a22 <USBD_CtlError>
            err++;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	3301      	adds	r3, #1
 80054ac:	74fb      	strb	r3, [r7, #19]
          break;
 80054ae:	e07c      	b.n	80055aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	7c12      	ldrb	r2, [r2, #16]
 80054c8:	f107 010a 	add.w	r1, r7, #10
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
 80054d0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054d2:	e06a      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 faa3 	bl	8005a22 <USBD_CtlError>
            err++;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	3301      	adds	r3, #1
 80054e0:	74fb      	strb	r3, [r7, #19]
          break;
 80054e2:	e062      	b.n	80055aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	7c12      	ldrb	r2, [r2, #16]
 80054fc:	f107 010a 	add.w	r1, r7, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005506:	e050      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa89 	bl	8005a22 <USBD_CtlError>
            err++;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	3301      	adds	r3, #1
 8005514:	74fb      	strb	r3, [r7, #19]
          break;
 8005516:	e048      	b.n	80055aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	7c12      	ldrb	r2, [r2, #16]
 8005530:	f107 010a 	add.w	r1, r7, #10
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
 8005538:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800553a:	e036      	b.n	80055aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa6f 	bl	8005a22 <USBD_CtlError>
            err++;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	3301      	adds	r3, #1
 8005548:	74fb      	strb	r3, [r7, #19]
          break;
 800554a:	e02e      	b.n	80055aa <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e020      	b.n	8005598 <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	32ae      	adds	r2, #174	@ 0xae
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d015      	beq.n	8005592 <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	32ae      	adds	r2, #174	@ 0xae
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	8852      	ldrh	r2, [r2, #2]
 800557e:	b2d1      	uxtb	r1, r2
 8005580:	f107 020a 	add.w	r2, r7, #10
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
 8005588:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <USBD_GetDescriptor+0x25e>
              {
                continue;
 8005590:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d3d8      	bcc.n	8005556 <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80055a4:	e000      	b.n	80055a8 <USBD_GetDescriptor+0x260>
                break;
 80055a6:	bf00      	nop
          break;
 80055a8:	bf00      	nop
      }
      break;
 80055aa:	e037      	b.n	800561c <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7c1b      	ldrb	r3, [r3, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	f107 020a 	add.w	r2, r7, #10
 80055c0:	4610      	mov	r0, r2
 80055c2:	4798      	blx	r3
 80055c4:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055c6:	e029      	b.n	800561c <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa29 	bl	8005a22 <USBD_CtlError>
        err++;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	3301      	adds	r3, #1
 80055d4:	74fb      	strb	r3, [r7, #19]
      break;
 80055d6:	e021      	b.n	800561c <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	7c1b      	ldrb	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10d      	bne.n	80055fc <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	f107 020a 	add.w	r2, r7, #10
 80055ec:	4610      	mov	r0, r2
 80055ee:	4798      	blx	r3
 80055f0:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3301      	adds	r3, #1
 80055f6:	2207      	movs	r2, #7
 80055f8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055fa:	e00f      	b.n	800561c <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa0f 	bl	8005a22 <USBD_CtlError>
        err++;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	3301      	adds	r3, #1
 8005608:	74fb      	strb	r3, [r7, #19]
      break;
 800560a:	e007      	b.n	800561c <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa07 	bl	8005a22 <USBD_CtlError>
      err++;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	3301      	adds	r3, #1
 8005618:	74fb      	strb	r3, [r7, #19]
      break;
 800561a:	bf00      	nop
  }

  if (err != 0U)
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d11e      	bne.n	8005660 <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	88db      	ldrh	r3, [r3, #6]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 800562a:	897b      	ldrh	r3, [r7, #10]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00e      	beq.n	800564e <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	88da      	ldrh	r2, [r3, #6]
 8005634:	897b      	ldrh	r3, [r7, #10]
 8005636:	4293      	cmp	r3, r2
 8005638:	bf28      	it	cs
 800563a:	4613      	movcs	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005640:	897b      	ldrh	r3, [r7, #10]
 8005642:	461a      	mov	r2, r3
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa68 	bl	8005b1c <USBD_CtlSendData>
 800564c:	e009      	b.n	8005662 <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9e6 	bl	8005a22 <USBD_CtlError>
 8005656:	e004      	b.n	8005662 <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fab9 	bl	8005bd0 <USBD_CtlSendStatus>
 800565e:	e000      	b.n	8005662 <USBD_GetDescriptor+0x31a>
    return;
 8005660:	bf00      	nop
  }
}
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	889b      	ldrh	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d131      	bne.n	80056de <USBD_SetAddress+0x76>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88db      	ldrh	r3, [r3, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d12d      	bne.n	80056de <USBD_SetAddress+0x76>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	885b      	ldrh	r3, [r3, #2]
 8005686:	2b7f      	cmp	r3, #127	@ 0x7f
 8005688:	d829      	bhi.n	80056de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	885b      	ldrh	r3, [r3, #2]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d104      	bne.n	80056ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9bc 	bl	8005a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056aa:	e01d      	b.n	80056e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7bfa      	ldrb	r2, [r7, #15]
 80056b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f00f ffeb 	bl	8015694 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa86 	bl	8005bd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d2:	e009      	b.n	80056e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056dc:	e004      	b.n	80056e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f99e 	bl	8005a22 <USBD_CtlError>
  }
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4b4e      	ldr	r3, [pc, #312]	@ (8005840 <USBD_SetConfig+0x150>)
 8005706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005708:	4b4d      	ldr	r3, [pc, #308]	@ (8005840 <USBD_SetConfig+0x150>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d905      	bls.n	800571c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f985 	bl	8005a22 <USBD_CtlError>
    return USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	e08c      	b.n	8005836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d002      	beq.n	800572e <USBD_SetConfig+0x3e>
 8005728:	2b03      	cmp	r3, #3
 800572a:	d029      	beq.n	8005780 <USBD_SetConfig+0x90>
 800572c:	e075      	b.n	800581a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800572e:	4b44      	ldr	r3, [pc, #272]	@ (8005840 <USBD_SetConfig+0x150>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d020      	beq.n	8005778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005736:	4b42      	ldr	r3, [pc, #264]	@ (8005840 <USBD_SetConfig+0x150>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005740:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <USBD_SetConfig+0x150>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe ffbc 	bl	80046c4 <USBD_SetClassConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f962 	bl	8005a22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005766:	e065      	b.n	8005834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa31 	bl	8005bd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2203      	movs	r2, #3
 8005772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005776:	e05d      	b.n	8005834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa29 	bl	8005bd0 <USBD_CtlSendStatus>
      break;
 800577e:	e059      	b.n	8005834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005780:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <USBD_SetConfig+0x150>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d112      	bne.n	80057ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005790:	4b2b      	ldr	r3, [pc, #172]	@ (8005840 <USBD_SetConfig+0x150>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800579a:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <USBD_SetConfig+0x150>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fe ffab 	bl	80046fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa12 	bl	8005bd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80057ac:	e042      	b.n	8005834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <USBD_SetConfig+0x150>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d02a      	beq.n	8005812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fe ff99 	bl	80046fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80057ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <USBD_SetConfig+0x150>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <USBD_SetConfig+0x150>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fe ff72 	bl	80046c4 <USBD_SetClassConfig>
 80057e0:	4603      	mov	r3, r0
 80057e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00f      	beq.n	800580a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f918 	bl	8005a22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fe ff7e 	bl	80046fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005808:	e014      	b.n	8005834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9e0 	bl	8005bd0 <USBD_CtlSendStatus>
      break;
 8005810:	e010      	b.n	8005834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9dc 	bl	8005bd0 <USBD_CtlSendStatus>
      break;
 8005818:	e00c      	b.n	8005834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f900 	bl	8005a22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <USBD_SetConfig+0x150>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fe ff67 	bl	80046fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800582e:	2303      	movs	r3, #3
 8005830:	73fb      	strb	r3, [r7, #15]
      break;
 8005832:	bf00      	nop
  }

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	200001dc 	.word	0x200001dc

08005844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d004      	beq.n	8005860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8e2 	bl	8005a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800585e:	e023      	b.n	80058a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	dc02      	bgt.n	8005872 <USBD_GetConfig+0x2e>
 800586c:	2b00      	cmp	r3, #0
 800586e:	dc03      	bgt.n	8005878 <USBD_GetConfig+0x34>
 8005870:	e015      	b.n	800589e <USBD_GetConfig+0x5a>
 8005872:	2b03      	cmp	r3, #3
 8005874:	d00b      	beq.n	800588e <USBD_GetConfig+0x4a>
 8005876:	e012      	b.n	800589e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3308      	adds	r3, #8
 8005882:	2201      	movs	r2, #1
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f948 	bl	8005b1c <USBD_CtlSendData>
        break;
 800588c:	e00c      	b.n	80058a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2201      	movs	r2, #1
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f940 	bl	8005b1c <USBD_CtlSendData>
        break;
 800589c:	e004      	b.n	80058a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f8be 	bl	8005a22 <USBD_CtlError>
        break;
 80058a6:	bf00      	nop
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d81e      	bhi.n	8005906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	88db      	ldrh	r3, [r3, #6]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d004      	beq.n	80058da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8a5 	bl	8005a22 <USBD_CtlError>
        break;
 80058d8:	e01a      	b.n	8005910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f043 0202 	orr.w	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	330c      	adds	r3, #12
 80058fa:	2202      	movs	r2, #2
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f90c 	bl	8005b1c <USBD_CtlSendData>
      break;
 8005904:	e004      	b.n	8005910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f88a 	bl	8005a22 <USBD_CtlError>
      break;
 800590e:	bf00      	nop
  }
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	885b      	ldrh	r3, [r3, #2]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f94c 	bl	8005bd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005938:	e013      	b.n	8005962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	885b      	ldrh	r3, [r3, #2]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d10b      	bne.n	800595a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	889b      	ldrh	r3, [r3, #4]
 8005946:	0a1b      	lsrs	r3, r3, #8
 8005948:	b29b      	uxth	r3, r3
 800594a:	b2da      	uxtb	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f93c 	bl	8005bd0 <USBD_CtlSendStatus>
}
 8005958:	e003      	b.n	8005962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f860 	bl	8005a22 <USBD_CtlError>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	2b02      	cmp	r3, #2
 8005980:	d80b      	bhi.n	800599a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	885b      	ldrh	r3, [r3, #2]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d10c      	bne.n	80059a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f91c 	bl	8005bd0 <USBD_CtlSendStatus>
      }
      break;
 8005998:	e004      	b.n	80059a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f840 	bl	8005a22 <USBD_CtlError>
      break;
 80059a2:	e000      	b.n	80059a6 <USBD_ClrFeature+0x3c>
      break;
 80059a4:	bf00      	nop
  }
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fa19 	bl	8004e10 <SWAPBYTE>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff fa0c 	bl	8004e10 <SWAPBYTE>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff f9ff 	bl	8004e10 <SWAPBYTE>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	80da      	strh	r2, [r3, #6]
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a2c:	2180      	movs	r1, #128	@ 0x80
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f00f fdc6 	bl	80155c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f00f fdc2 	bl	80155c0 <USBD_LL_StallEP>
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d042      	beq.n	8005ae0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005a5e:	6938      	ldr	r0, [r7, #16]
 8005a60:	f000 f842 	bl	8005ae8 <USBD_GetLen>
 8005a64:	4603      	mov	r3, r0
 8005a66:	3301      	adds	r3, #1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6e:	d808      	bhi.n	8005a82 <USBD_GetString+0x3e>
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f000 f839 	bl	8005ae8 <USBD_GetLen>
 8005a76:	4603      	mov	r3, r0
 8005a78:	3301      	adds	r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	e001      	b.n	8005a86 <USBD_GetString+0x42>
 8005a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4413      	add	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	7812      	ldrb	r2, [r2, #0]
 8005a94:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	701a      	strb	r2, [r3, #0]
  idx++;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005aac:	e013      	b.n	8005ad6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
    idx++;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
    idx++;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e7      	bne.n	8005aae <USBD_GetString+0x6a>
 8005ade:	e000      	b.n	8005ae2 <USBD_GetString+0x9e>
    return;
 8005ae0:	bf00      	nop
  }
}
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005af8:	e005      	b.n	8005b06 <USBD_GetLen+0x1e>
  {
    len++;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	3301      	adds	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f5      	bne.n	8005afa <USBD_GetLen+0x12>
  }

  return len;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	2100      	movs	r1, #0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f00f fdc5 	bl	80156d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	2100      	movs	r1, #0
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f00f fdb4 	bl	80156d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f00f fdb8 	bl	8015714 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f00f fda7 	bl	8015714 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005be0:	2300      	movs	r3, #0
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f00f fd73 	bl	80156d2 <USBD_LL_Transmit>

  return USBD_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2205      	movs	r2, #5
 8005c02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c06:	2300      	movs	r3, #0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f00f fd81 	bl	8015714 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8005c24:	222c      	movs	r2, #44	@ 0x2c
 8005c26:	2100      	movs	r1, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f010 f80e 	bl	8015c4a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005c3c:	202c      	movs	r0, #44	@ 0x2c
 8005c3e:	f001 faf1 	bl	8007224 <mem_malloc>
 8005c42:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <http_state_alloc+0x1a>
    http_state_init(ret);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ffe6 	bl	8005c1c <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fdcc 	bl	800680c <fs_close>
    hs->handle = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f002 f9fc 	bl	8008084 <pbuf_free>
    hs->req = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <http_state_free+0x1a>
    http_state_eof(hs);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ffd6 	bl	8005c5a <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fae4 	bl	800727c <mem_free>
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <http_write+0x22>
 8005cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8005d84 <http_write+0xc8>)
 8005cd2:	f240 2219 	movw	r2, #537	@ 0x219
 8005cd6:	492c      	ldr	r1, [pc, #176]	@ (8005d88 <http_write+0xcc>)
 8005cd8:	482c      	ldr	r0, [pc, #176]	@ (8005d8c <http_write+0xd0>)
 8005cda:	f00f ff51 	bl	8015b80 <iprintf>
  len = *length;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005ce4:	8afb      	ldrh	r3, [r7, #22]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <http_write+0x32>
    return ERR_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e045      	b.n	8005d7a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005cf4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005cf6:	8aba      	ldrh	r2, [r7, #20]
 8005cf8:	8afb      	ldrh	r3, [r7, #22]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d201      	bcs.n	8005d02 <http_write+0x46>
    len = max_len;
 8005cfe:	8abb      	ldrh	r3, [r7, #20]
 8005d00:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8005d0a:	8afa      	ldrh	r2, [r7, #22]
 8005d0c:	8abb      	ldrh	r3, [r7, #20]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d901      	bls.n	8005d16 <http_write+0x5a>
    len = max_len;
 8005d12:	8abb      	ldrh	r3, [r7, #20]
 8005d14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	8afa      	ldrh	r2, [r7, #22]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f007 f97b 	bl	800d018 <tcp_write>
 8005d22:	4603      	mov	r3, r0
 8005d24:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d2e:	d10f      	bne.n	8005d50 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	d902      	bls.n	8005d4a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005d44:	2301      	movs	r3, #1
 8005d46:	82fb      	strh	r3, [r7, #22]
 8005d48:	e002      	b.n	8005d50 <http_write+0x94>
      } else {
        len /= 2;
 8005d4a:	8afb      	ldrh	r3, [r7, #22]
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005d50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d58:	d102      	bne.n	8005d60 <http_write+0xa4>
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d8da      	bhi.n	8005d16 <http_write+0x5a>

  if (err == ERR_OK) {
 8005d60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8afa      	ldrh	r2, [r7, #22]
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005d76:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	080168b8 	.word	0x080168b8
 8005d88:	080168f0 	.word	0x080168f0
 8005d8c:	08016900 	.word	0x08016900

08005d90 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005d9e:	2100      	movs	r1, #0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f004 f95f 	bl	800a064 <tcp_arg>
  altcp_recv(pcb, NULL);
 8005da6:	2100      	movs	r1, #0
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f004 f96d 	bl	800a088 <tcp_recv>
  altcp_err(pcb, NULL);
 8005dae:	2100      	movs	r1, #0
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f004 f9ad 	bl	800a110 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f004 f9e2 	bl	800a184 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f004 f982 	bl	800a0cc <tcp_sent>
  if (hs != NULL) {
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005dce:	68b8      	ldr	r0, [r7, #8]
 8005dd0:	f7ff ff63 	bl	8005c9a <http_state_free>
  }

  if (abort_conn) {
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f003 f858 	bl	8008e90 <tcp_abort>
    return ERR_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e00f      	b.n	8005e04 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f002 ff69 	bl	8008cbc <tcp_close>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005df6:	2204      	movs	r2, #4
 8005df8:	4904      	ldr	r1, [pc, #16]	@ (8005e0c <http_close_or_abort_conn+0x7c>)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f004 f9c2 	bl	800a184 <tcp_poll>
  }
  return err;
 8005e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	080064d3 	.word	0x080064d3

08005e10 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ffb6 	bl	8005d90 <http_close_or_abort_conn>
 8005e24:	4603      	mov	r3, r0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff ffe8 	bl	8005e10 <http_close_conn>
  }
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ffe6 	bl	8005e2e <http_eof>
    return 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e016      	b.n	8005e94 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fcd8 	bl	8006820 <fs_bytes_left>
 8005e70:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dc05      	bgt.n	8005e84 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ffd7 	bl	8005e2e <http_eof>
    return 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e007      	b.n	8005e94 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <http_check_eof+0x54>)
 8005e86:	f240 429d 	movw	r2, #1181	@ 0x49d
 8005e8a:	4905      	ldr	r1, [pc, #20]	@ (8005ea0 <http_check_eof+0x58>)
 8005e8c:	4805      	ldr	r0, [pc, #20]	@ (8005ea4 <http_check_eof+0x5c>)
 8005e8e:	f00f fe77 	bl	8015b80 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005e92:	2301      	movs	r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	080168b8 	.word	0x080168b8
 8005ea0:	08016928 	.word	0x08016928
 8005ea4:	08016900 	.word	0x08016900

08005ea8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d803      	bhi.n	8005eca <http_send_data_nonssi+0x22>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	e001      	b.n	8005ece <http_send_data_nonssi+0x26>
 8005eca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ece:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	f107 020c 	add.w	r2, r7, #12
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff feee 	bl	8005cbc <http_write>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	89ba      	ldrh	r2, [r7, #12]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	89ba      	ldrh	r2, [r7, #12]
 8005f02:	1a9a      	subs	r2, r3, r2
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <http_send+0x18>
    return 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e025      	b.n	8005f76 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff87 	bl	8005e48 <http_check_eof>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <http_send+0x32>
      return 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e018      	b.n	8005f76 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ffae 	bl	8005ea8 <http_send_data_nonssi>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10d      	bne.n	8005f74 <http_send+0x62>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fc5f 	bl	8006820 <fs_bytes_left>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc05      	bgt.n	8005f74 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ff5f 	bl	8005e2e <http_eof>
    return 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006000 <http_get_404_file+0x80>)
 8005f8e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fc01 	bl	80067a0 <fs_open>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d024      	beq.n	8005ff4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <http_get_404_file+0x84>)
 8005fae:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 fbf1 	bl	80067a0 <fs_open>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d014      	beq.n	8005ff4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8006008 <http_get_404_file+0x88>)
 8005fce:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f000 fbe1 	bl	80067a0 <fs_open>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d004      	beq.n	8005ff4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
        return NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005ff4:	687b      	ldr	r3, [r7, #4]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	08016960 	.word	0x08016960
 8006004:	0801696c 	.word	0x0801696c
 8006008:	08016978 	.word	0x08016978

0800600c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	@ 0x38
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <http_parse_request+0x24>
 8006022:	4b65      	ldr	r3, [pc, #404]	@ (80061b8 <http_parse_request+0x1ac>)
 8006024:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8006028:	4964      	ldr	r1, [pc, #400]	@ (80061bc <http_parse_request+0x1b0>)
 800602a:	4865      	ldr	r0, [pc, #404]	@ (80061c0 <http_parse_request+0x1b4>)
 800602c:	f00f fda8 	bl	8015b80 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <http_parse_request+0x38>
 8006036:	4b60      	ldr	r3, [pc, #384]	@ (80061b8 <http_parse_request+0x1ac>)
 8006038:	f240 72af 	movw	r2, #1967	@ 0x7af
 800603c:	4961      	ldr	r1, [pc, #388]	@ (80061c4 <http_parse_request+0x1b8>)
 800603e:	4860      	ldr	r0, [pc, #384]	@ (80061c0 <http_parse_request+0x1b4>)
 8006040:	f00f fd9e 	bl	8015b80 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <http_parse_request+0x48>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006054:	f06f 0307 	mvn.w	r3, #7
 8006058:	e0a9      	b.n	80061ae <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d103      	bne.n	800606a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006066:	621a      	str	r2, [r3, #32]
 8006068:	e005      	b.n	8006076 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006070:	4618      	mov	r0, r3
 8006072:	f002 f8d5 	bl	8008220 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006078:	f002 f8aa 	bl	80081d0 <pbuf_ref>

  if (hs->req->next != NULL) {
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d012      	beq.n	80060ac <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	891b      	ldrh	r3, [r3, #8]
 800608c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006090:	4293      	cmp	r3, r2
 8006092:	bf28      	it	cs
 8006094:	4613      	movcs	r3, r2
 8006096:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6a18      	ldr	r0, [r3, #32]
 800609c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800609e:	2300      	movs	r3, #0
 80060a0:	4949      	ldr	r1, [pc, #292]	@ (80061c8 <http_parse_request+0x1bc>)
 80060a2:	f002 f9f5 	bl	8008490 <pbuf_copy_partial>
    data = httpd_req_buf;
 80060a6:	4b48      	ldr	r3, [pc, #288]	@ (80061c8 <http_parse_request+0x1bc>)
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	e005      	b.n	80060b8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	895b      	ldrh	r3, [r3, #10]
 80060b6:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80060b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d962      	bls.n	8006184 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80060be:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80060c0:	461a      	mov	r2, r3
 80060c2:	4942      	ldr	r1, [pc, #264]	@ (80061cc <http_parse_request+0x1c0>)
 80060c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80060c6:	f000 fbe6 	bl	8006896 <lwip_strnstr>
 80060ca:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d058      	beq.n	8006184 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80060d6:	2204      	movs	r2, #4
 80060d8:	493d      	ldr	r1, [pc, #244]	@ (80061d0 <http_parse_request+0x1c4>)
 80060da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80060dc:	f00f fdca 	bl	8015c74 <strncmp>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d116      	bne.n	8006114 <http_parse_request+0x108>
        sp1 = data + 3;
 80060e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e8:	3303      	adds	r3, #3
 80060ea:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	3301      	adds	r3, #1
 8006100:	8b7a      	ldrh	r2, [r7, #26]
 8006102:	4934      	ldr	r1, [pc, #208]	@ (80061d4 <http_parse_request+0x1c8>)
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fbc6 	bl	8006896 <lwip_strnstr>
 800610a:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d111      	bne.n	8006136 <http_parse_request+0x12a>
 8006112:	e006      	b.n	8006122 <http_parse_request+0x116>
        data[4] = 0;
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	3304      	adds	r3, #4
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800611c:	f06f 030f 	mvn.w	r3, #15
 8006120:	e045      	b.n	80061ae <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	8b7a      	ldrh	r2, [r7, #26]
 8006128:	4928      	ldr	r1, [pc, #160]	@ (80061cc <http_parse_request+0x1c0>)
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fbb3 	bl	8006896 <lwip_strnstr>
 8006130:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01e      	beq.n	8006184 <http_parse_request+0x178>
 8006146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	429a      	cmp	r2, r3
 800614c:	d91a      	bls.n	8006184 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800614e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006150:	461a      	mov	r2, r3
 8006152:	4921      	ldr	r1, [pc, #132]	@ (80061d8 <http_parse_request+0x1cc>)
 8006154:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006156:	f000 fb9e 	bl	8006896 <lwip_strnstr>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d011      	beq.n	8006184 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	3301      	adds	r3, #1
 8006164:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800616c:	8b3b      	ldrh	r3, [r7, #24]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006178:	6979      	ldr	r1, [r7, #20]
 800617a:	68b8      	ldr	r0, [r7, #8]
 800617c:	f000 f82e 	bl	80061dc <http_find_file>
 8006180:	4603      	mov	r3, r0
 8006182:	e014      	b.n	80061ae <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	4618      	mov	r0, r3
 800618a:	f002 f809 	bl	80081a0 <pbuf_clen>
 800618e:	4603      	mov	r3, r0
 8006190:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	891b      	ldrh	r3, [r3, #8]
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619c:	d205      	bcs.n	80061aa <http_parse_request+0x19e>
 800619e:	8a7b      	ldrh	r3, [r7, #18]
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	d802      	bhi.n	80061aa <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80061a4:	f06f 0304 	mvn.w	r3, #4
 80061a8:	e001      	b.n	80061ae <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80061aa:	f06f 030f 	mvn.w	r3, #15
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3738      	adds	r7, #56	@ 0x38
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	080168b8 	.word	0x080168b8
 80061bc:	08016984 	.word	0x08016984
 80061c0:	08016900 	.word	0x08016900
 80061c4:	08016990 	.word	0x08016990
 80061c8:	200001e0 	.word	0x200001e0
 80061cc:	0801699c 	.word	0x0801699c
 80061d0:	080169a0 	.word	0x080169a0
 80061d4:	080169a8 	.word	0x080169a8
 80061d8:	080169ac 	.word	0x080169ac

080061dc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b092      	sub	sp, #72	@ 0x48
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7f9 fff3 	bl	80001e4 <strlen>
 80061fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d06b      	beq.n	80062de <http_find_file+0x102>
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b2f      	cmp	r3, #47	@ 0x2f
 8006212:	d164      	bne.n	80062de <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006214:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006216:	4a53      	ldr	r2, [pc, #332]	@ (8006364 <http_find_file+0x188>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	2b01      	cmp	r3, #1
 8006220:	d15d      	bne.n	80062de <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	2b3f      	cmp	r3, #63	@ 0x3f
 8006228:	bf28      	it	cs
 800622a:	233f      	movcs	r3, #63	@ 0x3f
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	4619      	mov	r1, r3
 800623a:	484a      	ldr	r0, [pc, #296]	@ (8006364 <http_find_file+0x188>)
 800623c:	f00f fda9 	bl	8015d92 <memcpy>
      http_uri_buf[copy_len] = 0;
 8006240:	4a48      	ldr	r2, [pc, #288]	@ (8006364 <http_find_file+0x188>)
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800624a:	2300      	movs	r3, #0
 800624c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800624e:	e043      	b.n	80062d8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d028      	beq.n	80062a8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800625c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01e      	beq.n	80062a2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006264:	4a40      	ldr	r2, [pc, #256]	@ (8006368 <http_find_file+0x18c>)
 8006266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800626c:	4618      	mov	r0, r3
 800626e:	f7f9 ffb9 	bl	80001e4 <strlen>
 8006272:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	4293      	cmp	r3, r2
 800627a:	bf28      	it	cs
 800627c:	4613      	movcs	r3, r2
 800627e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	4a38      	ldr	r2, [pc, #224]	@ (8006364 <http_find_file+0x188>)
 8006284:	1898      	adds	r0, r3, r2
 8006286:	4a38      	ldr	r2, [pc, #224]	@ (8006368 <http_find_file+0x18c>)
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4619      	mov	r1, r3
 8006292:	f00f fd7e 	bl	8015d92 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	4413      	add	r3, r2
 800629c:	4a31      	ldr	r2, [pc, #196]	@ (8006364 <http_find_file+0x188>)
 800629e:	2100      	movs	r1, #0
 80062a0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80062a2:	4b30      	ldr	r3, [pc, #192]	@ (8006364 <http_find_file+0x188>)
 80062a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a6:	e004      	b.n	80062b2 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80062a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006368 <http_find_file+0x18c>)
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fa72 	bl	80067a0 <fs_open>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 80062c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <http_find_file+0xf6>
        uri = file_name;
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80062d0:	e005      	b.n	80062de <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80062d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d4:	3301      	adds	r3, #1
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d9b8      	bls.n	8006250 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d124      	bne.n	800632e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	213f      	movs	r1, #63	@ 0x3f
 80062e8:	4618      	mov	r0, r3
 80062ea:	f00f fcb6 	bl	8015c5a <strchr>
 80062ee:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80062f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
      params++;
 80062fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fe:	3301      	adds	r3, #1
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fa49 	bl	80067a0 <fs_open>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8006312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <http_find_file+0x144>
      file = &hs->file_handle;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800631e:	e006      	b.n	800632e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	4619      	mov	r1, r3
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fe2a 	bl	8005f80 <http_get_404_file>
 800632c:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800632e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	4619      	mov	r1, r3
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fe20 	bl	8005f80 <http_get_404_file>
 8006340:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f809 	bl	800636c <http_init_file>
 800635a:	4603      	mov	r3, r0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3740      	adds	r7, #64	@ 0x40
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200005e0 	.word	0x200005e0
 8006368:	08019860 	.word	0x08019860

0800636c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05c      	beq.n	800643a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <http_init_file+0x2a>
 8006388:	4b35      	ldr	r3, [pc, #212]	@ (8006460 <http_init_file+0xf4>)
 800638a:	f640 120b 	movw	r2, #2315	@ 0x90b
 800638e:	4935      	ldr	r1, [pc, #212]	@ (8006464 <http_init_file+0xf8>)
 8006390:	4835      	ldr	r0, [pc, #212]	@ (8006468 <http_init_file+0xfc>)
 8006392:	f00f fbf5 	bl	8015b80 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da06      	bge.n	80063ba <http_init_file+0x4e>
 80063ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006460 <http_init_file+0xf4>)
 80063ae:	f640 1234 	movw	r2, #2356	@ 0x934
 80063b2:	492e      	ldr	r1, [pc, #184]	@ (800646c <http_init_file+0x100>)
 80063b4:	482c      	ldr	r0, [pc, #176]	@ (8006468 <http_init_file+0xfc>)
 80063b6:	f00f fbe3 	bl	8015b80 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	7c1b      	ldrb	r3, [r3, #16]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <http_init_file+0x7c>
 80063da:	4b21      	ldr	r3, [pc, #132]	@ (8006460 <http_init_file+0xf4>)
 80063dc:	f640 1243 	movw	r2, #2371	@ 0x943
 80063e0:	4923      	ldr	r1, [pc, #140]	@ (8006470 <http_init_file+0x104>)
 80063e2:	4821      	ldr	r0, [pc, #132]	@ (8006468 <http_init_file+0xfc>)
 80063e4:	f00f fbcc 	bl	8015b80 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d032      	beq.n	8006454 <http_init_file+0xe8>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	7c1b      	ldrb	r3, [r3, #16]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d02b      	beq.n	8006454 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6998      	ldr	r0, [r3, #24]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	461a      	mov	r2, r3
 8006406:	491b      	ldr	r1, [pc, #108]	@ (8006474 <http_init_file+0x108>)
 8006408:	f000 fa45 	bl	8006896 <lwip_strnstr>
 800640c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01f      	beq.n	8006454 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	441a      	add	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	625a      	str	r2, [r3, #36]	@ 0x24
 8006438:	e00c      	b.n	8006454 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	080168b8 	.word	0x080168b8
 8006464:	080169b4 	.word	0x080169b4
 8006468:	08016900 	.word	0x08016900
 800646c:	080169c8 	.word	0x080169c8
 8006470:	080169e8 	.word	0x080169e8
 8006474:	080169ac 	.word	0x080169ac

08006478 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <http_err+0x1c>
    http_state_free(hs);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff fc03 	bl	8005c9a <http_state_free>
  }
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <http_sent+0x1c>
    return ERR_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	e008      	b.n	80064ca <http_sent+0x2e>
  }

  hs->retries = 0;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	68b8      	ldr	r0, [r7, #8]
 80064c4:	f7ff fd25 	bl	8005f12 <http_send>

  return ERR_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80064e6:	2100      	movs	r1, #0
 80064e8:	6838      	ldr	r0, [r7, #0]
 80064ea:	f7ff fc91 	bl	8005e10 <http_close_conn>
 80064ee:	4603      	mov	r3, r0
 80064f0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e021      	b.n	800653a <http_poll+0x68>
  } else {
    hs->retries++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064fc:	3301      	adds	r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800650c:	2b04      	cmp	r3, #4
 800650e:	d105      	bne.n	800651c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	6838      	ldr	r0, [r7, #0]
 8006514:	f7ff fc7c 	bl	8005e10 <http_close_conn>
      return ERR_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e00e      	b.n	800653a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d009      	beq.n	8006538 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	6838      	ldr	r0, [r7, #0]
 8006528:	f7ff fcf3 	bl	8005f12 <http_send>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8006532:	6838      	ldr	r0, [r7, #0]
 8006534:	f007 fb80 	bl	800dc38 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <http_recv+0x26>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <http_recv+0x26>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d111      	bne.n	800658e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	891b      	ldrh	r3, [r3, #8]
 8006574:	4619      	mov	r1, r3
 8006576:	68b8      	ldr	r0, [r7, #8]
 8006578:	f002 fe64 	bl	8009244 <tcp_recved>
      pbuf_free(p);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fd81 	bl	8008084 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006582:	6979      	ldr	r1, [r7, #20]
 8006584:	68b8      	ldr	r0, [r7, #8]
 8006586:	f7ff fc43 	bl	8005e10 <http_close_conn>
    return ERR_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	e055      	b.n	800663a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	891b      	ldrh	r3, [r3, #8]
 8006592:	4619      	mov	r1, r3
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f002 fe55 	bl	8009244 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d147      	bne.n	8006632 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	6979      	ldr	r1, [r7, #20]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fd30 	bl	800600c <http_parse_request>
 80065ac:	4603      	mov	r3, r0
 80065ae:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80065b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <http_recv+0xa0>
 80065b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065bc:	f113 0f05 	cmn.w	r3, #5
 80065c0:	d010      	beq.n	80065e4 <http_recv+0xa0>
 80065c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065c6:	f113 0f10 	cmn.w	r3, #16
 80065ca:	d00b      	beq.n	80065e4 <http_recv+0xa0>
 80065cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065d0:	f113 0f08 	cmn.w	r3, #8
 80065d4:	d006      	beq.n	80065e4 <http_recv+0xa0>
 80065d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006644 <http_recv+0x100>)
 80065d8:	f640 2204 	movw	r2, #2564	@ 0xa04
 80065dc:	491a      	ldr	r1, [pc, #104]	@ (8006648 <http_recv+0x104>)
 80065de:	481b      	ldr	r0, [pc, #108]	@ (800664c <http_recv+0x108>)
 80065e0:	f00f face 	bl	8015b80 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80065e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065e8:	f113 0f05 	cmn.w	r3, #5
 80065ec:	d00b      	beq.n	8006606 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <http_recv+0xc2>
          pbuf_free(hs->req);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fd42 	bl	8008084 <pbuf_free>
          hs->req = NULL;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fd3c 	bl	8008084 <pbuf_free>
      if (parsed == ERR_OK) {
 800660c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d104      	bne.n	800661e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006614:	6979      	ldr	r1, [r7, #20]
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	f7ff fc7b 	bl	8005f12 <http_send>
 800661c:	e00c      	b.n	8006638 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800661e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006622:	f113 0f10 	cmn.w	r3, #16
 8006626:	d107      	bne.n	8006638 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	68b8      	ldr	r0, [r7, #8]
 800662c:	f7ff fbf0 	bl	8005e10 <http_close_conn>
 8006630:	e002      	b.n	8006638 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fd26 	bl	8008084 <pbuf_free>
    }
  }
  return ERR_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	080168b8 	.word	0x080168b8
 8006648:	08016a14 	.word	0x08016a14
 800664c:	08016900 	.word	0x08016900

08006650 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800665e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <http_accept+0x1c>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <http_accept+0x22>
    return ERR_VAL;
 800666c:	f06f 0305 	mvn.w	r3, #5
 8006670:	e025      	b.n	80066be <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006672:	2101      	movs	r1, #1
 8006674:	68b8      	ldr	r0, [r7, #8]
 8006676:	f003 facb 	bl	8009c10 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800667a:	f7ff fadc 	bl	8005c36 <http_state_alloc>
 800667e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800668a:	e018      	b.n	80066be <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	68b8      	ldr	r0, [r7, #8]
 8006696:	f003 fce5 	bl	800a064 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800669a:	490b      	ldr	r1, [pc, #44]	@ (80066c8 <http_accept+0x78>)
 800669c:	68b8      	ldr	r0, [r7, #8]
 800669e:	f003 fcf3 	bl	800a088 <tcp_recv>
  altcp_err(pcb, http_err);
 80066a2:	490a      	ldr	r1, [pc, #40]	@ (80066cc <http_accept+0x7c>)
 80066a4:	68b8      	ldr	r0, [r7, #8]
 80066a6:	f003 fd33 	bl	800a110 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80066aa:	2204      	movs	r2, #4
 80066ac:	4908      	ldr	r1, [pc, #32]	@ (80066d0 <http_accept+0x80>)
 80066ae:	68b8      	ldr	r0, [r7, #8]
 80066b0:	f003 fd68 	bl	800a184 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80066b4:	4907      	ldr	r1, [pc, #28]	@ (80066d4 <http_accept+0x84>)
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	f003 fd08 	bl	800a0cc <tcp_sent>

  return ERR_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	08006545 	.word	0x08006545
 80066cc:	08006479 	.word	0x08006479
 80066d0:	080064d3 	.word	0x080064d3
 80066d4:	0800649d 	.word	0x0800649d

080066d8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d029      	beq.n	800673e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80066ea:	2101      	movs	r1, #1
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f003 fa8f 	bl	8009c10 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80066f2:	887b      	ldrh	r3, [r7, #2]
 80066f4:	461a      	mov	r2, r3
 80066f6:	4914      	ldr	r1, [pc, #80]	@ (8006748 <httpd_init_pcb+0x70>)
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f002 fbd5 	bl	8008ea8 <tcp_bind>
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <httpd_init_pcb+0x40>
 800670a:	4b10      	ldr	r3, [pc, #64]	@ (800674c <httpd_init_pcb+0x74>)
 800670c:	f640 2257 	movw	r2, #2647	@ 0xa57
 8006710:	490f      	ldr	r1, [pc, #60]	@ (8006750 <httpd_init_pcb+0x78>)
 8006712:	4810      	ldr	r0, [pc, #64]	@ (8006754 <httpd_init_pcb+0x7c>)
 8006714:	f00f fa34 	bl	8015b80 <iprintf>
    pcb = altcp_listen(pcb);
 8006718:	21ff      	movs	r1, #255	@ 0xff
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f002 fc7c 	bl	8009018 <tcp_listen_with_backlog>
 8006720:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <httpd_init_pcb+0x5e>
 8006728:	4b08      	ldr	r3, [pc, #32]	@ (800674c <httpd_init_pcb+0x74>)
 800672a:	f640 2259 	movw	r2, #2649	@ 0xa59
 800672e:	490a      	ldr	r1, [pc, #40]	@ (8006758 <httpd_init_pcb+0x80>)
 8006730:	4808      	ldr	r0, [pc, #32]	@ (8006754 <httpd_init_pcb+0x7c>)
 8006732:	f00f fa25 	bl	8015b80 <iprintf>
    altcp_accept(pcb, http_accept);
 8006736:	4909      	ldr	r1, [pc, #36]	@ (800675c <httpd_init_pcb+0x84>)
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f003 fd0b 	bl	800a154 <tcp_accept>
  }
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	08019994 	.word	0x08019994
 800674c:	080168b8 	.word	0x080168b8
 8006750:	08016a40 	.word	0x08016a40
 8006754:	08016900 	.word	0x08016900
 8006758:	08016a5c 	.word	0x08016a5c
 800675c:	08006651 	.word	0x08006651

08006760 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006766:	202e      	movs	r0, #46	@ 0x2e
 8006768:	f003 fc6e 	bl	800a048 <tcp_new_ip_type>
 800676c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <httpd_init+0x22>
 8006774:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <httpd_init+0x34>)
 8006776:	f640 2272 	movw	r2, #2674	@ 0xa72
 800677a:	4907      	ldr	r1, [pc, #28]	@ (8006798 <httpd_init+0x38>)
 800677c:	4807      	ldr	r0, [pc, #28]	@ (800679c <httpd_init+0x3c>)
 800677e:	f00f f9ff 	bl	8015b80 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006782:	2150      	movs	r1, #80	@ 0x50
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ffa7 	bl	80066d8 <httpd_init_pcb>
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	080168b8 	.word	0x080168b8
 8006798:	08016a7c 	.word	0x08016a7c
 800679c:	08016900 	.word	0x08016900

080067a0 <fs_open>:

extern const struct fsdata_file file__index_html;
#define FS_ROOT &file__index_html

err_t fs_open(struct fs_file *file, const char *name)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
    const struct fsdata_file *f;

    for (f = FS_ROOT; f != NULL; f = f->next)
 80067aa:	4b17      	ldr	r3, [pc, #92]	@ (8006808 <fs_open+0x68>)
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e021      	b.n	80067f4 <fs_open+0x54>
    {
        if (!strcmp(name, (const char *)f->name))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6838      	ldr	r0, [r7, #0]
 80067b8:	f7f9 fd0a 	bl	80001d0 <strcmp>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d115      	bne.n	80067ee <fs_open+0x4e>
        {
            file->data = (const char *)f->data;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689a      	ldr	r2, [r3, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
            file->len = f->len;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	605a      	str	r2, [r3, #4]
            file->index = f->data;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	609a      	str	r2, [r3, #8]
            file->pextension = NULL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	60da      	str	r2, [r3, #12]
            file->flags = f->flags;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	7c1a      	ldrb	r2, [r3, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	741a      	strb	r2, [r3, #16]
            return ERR_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e007      	b.n	80067fe <fs_open+0x5e>
    for (f = FS_ROOT; f != NULL; f = f->next)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1da      	bne.n	80067b0 <fs_open+0x10>
        }
    }
    return ERR_ARG;
 80067fa:	f06f 030f 	mvn.w	r3, #15
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0801984c 	.word	0x0801984c

0800680c <fs_close>:

void fs_close(struct fs_file *file)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(file);
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <fs_bytes_left>:

int fs_bytes_left(struct fs_file *file)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    return file->len;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	b21a      	sxth	r2, r3
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	b29b      	uxth	r3, r3
 8006850:	b21b      	sxth	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	b21b      	sxth	r3, r3
 8006856:	b29b      	uxth	r3, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	061a      	lsls	r2, r3, #24
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0e1b      	lsrs	r3, r3, #24
 8006888:	4313      	orrs	r3, r2
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80068a2:	68b8      	ldr	r0, [r7, #8]
 80068a4:	f7f9 fc9e 	bl	80001e4 <strlen>
 80068a8:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e022      	b.n	80068fa <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e012      	b.n	80068e0 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d109      	bne.n	80068da <lwip_strnstr+0x44>
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	6978      	ldr	r0, [r7, #20]
 80068cc:	f00f f9d2 	bl	8015c74 <strncmp>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	e00f      	b.n	80068fa <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3301      	adds	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <lwip_strnstr+0x62>
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	441a      	add	r2, r3
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	440b      	add	r3, r1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d9e0      	bls.n	80068ba <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8006902:	b480      	push	{r7}
 8006904:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d80f      	bhi.n	8006942 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	4909      	ldr	r1, [pc, #36]	@ (8006950 <dns_setserver+0x40>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8006934:	e005      	b.n	8006942 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	4905      	ldr	r1, [pc, #20]	@ (8006950 <dns_setserver+0x40>)
 800693a:	4a06      	ldr	r2, [pc, #24]	@ (8006954 <dns_setserver+0x44>)
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000aa0 	.word	0x20000aa0
 8006954:	08019994 	.word	0x08019994

08006958 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800695c:	f000 faa8 	bl	8006eb0 <dns_check_entries>
}
 8006960:	bf00      	nop
 8006962:	bd80      	pop	{r7, pc}

08006964 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b090      	sub	sp, #64	@ 0x40
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800696e:	79fa      	ldrb	r2, [r7, #7]
 8006970:	4613      	mov	r3, r2
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	4413      	add	r3, r2
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4a6c      	ldr	r2, [pc, #432]	@ (8006b2c <dns_send+0x1c8>)
 800697a:	4413      	add	r3, r2
 800697c:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	7adb      	ldrb	r3, [r3, #11]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d906      	bls.n	8006994 <dns_send+0x30>
 8006986:	4b6a      	ldr	r3, [pc, #424]	@ (8006b30 <dns_send+0x1cc>)
 8006988:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800698c:	4969      	ldr	r1, [pc, #420]	@ (8006b34 <dns_send+0x1d0>)
 800698e:	486a      	ldr	r0, [pc, #424]	@ (8006b38 <dns_send+0x1d4>)
 8006990:	f00f f8f6 	bl	8015b80 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	7adb      	ldrb	r3, [r3, #11]
 8006998:	461a      	mov	r2, r3
 800699a:	4b68      	ldr	r3, [pc, #416]	@ (8006b3c <dns_send+0x1d8>)
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2100      	movs	r1, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 f8cb 	bl	8006b44 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	2200      	movs	r2, #0
 80069b2:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e0b4      	b.n	8006b22 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	3310      	adds	r3, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	f7f9 fc11 	bl	80001e4 <strlen>
 80069c2:	4603      	mov	r3, r0
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3312      	adds	r3, #18
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80069ce:	4619      	mov	r1, r3
 80069d0:	2036      	movs	r0, #54	@ 0x36
 80069d2:	f001 f875 	bl	8007ac0 <pbuf_alloc>
 80069d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8095 	beq.w	8006b0a <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80069e0:	f107 0310 	add.w	r3, r7, #16
 80069e4:	220c      	movs	r2, #12
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f00f f92e 	bl	8015c4a <memset>
    hdr.id = lwip_htons(entry->txid);
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	891b      	ldrh	r3, [r3, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff ff20 	bl	8006838 <lwip_htons>
 80069f8:	4603      	mov	r3, r0
 80069fa:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80069fc:	2301      	movs	r3, #1
 80069fe:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8006a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a04:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006a06:	f107 0310 	add.w	r3, r7, #16
 8006a0a:	220c      	movs	r2, #12
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a10:	f001 fdec 	bl	80085ec <pbuf_take>
    hostname = entry->name;
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	3310      	adds	r3, #16
 8006a18:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8006a20:	230c      	movs	r3, #12
 8006a22:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	3301      	adds	r3, #1
 8006a28:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006a34:	e007      	b.n	8006a46 <dns_send+0xe2>
        ++n;
 8006a36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	3301      	adds	r3, #1
 8006a44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a4c:	d003      	beq.n	8006a56 <dns_send+0xf2>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ef      	bne.n	8006a36 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8006a56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8006a5e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a64:	4413      	add	r3, r2
 8006a66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	dc53      	bgt.n	8006b16 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8006a6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006a72:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a74:	4619      	mov	r1, r3
 8006a76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a78:	f001 fee6 	bl	8008848 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006a7c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a88:	f001 fe42 	bl	8008710 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a94:	4413      	add	r3, r2
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3301      	adds	r3, #1
 8006a9a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1bf      	bne.n	8006a24 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8006aa4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006aac:	f001 fecc 	bl	8008848 <pbuf_put_at>
    query_idx++;
 8006ab0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006aba:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ac0:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006ac2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ac4:	f107 010c 	add.w	r1, r7, #12
 8006ac8:	2204      	movs	r2, #4
 8006aca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006acc:	f001 fe20 	bl	8008710 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	7bdb      	ldrb	r3, [r3, #15]
 8006ad4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8006ad8:	2335      	movs	r3, #53	@ 0x35
 8006ada:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	7adb      	ldrb	r3, [r3, #11]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <dns_send+0x1d8>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006ae8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aec:	4a14      	ldr	r2, [pc, #80]	@ (8006b40 <dns_send+0x1dc>)
 8006aee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006af2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006af4:	69fa      	ldr	r2, [r7, #28]
 8006af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af8:	f008 fbbc 	bl	800f274 <udp_sendto>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 8006b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b04:	f001 fabe 	bl	8008084 <pbuf_free>
 8006b08:	e002      	b.n	8006b10 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8006b0a:	23ff      	movs	r3, #255	@ 0xff
 8006b0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8006b10:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b14:	e005      	b.n	8006b22 <dns_send+0x1be>
        goto overflow_return;
 8006b16:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8006b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b1a:	f001 fab3 	bl	8008084 <pbuf_free>
  return ERR_VAL;
 8006b1e:	f06f 0305 	mvn.w	r3, #5
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3740      	adds	r7, #64	@ 0x40
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000630 	.word	0x20000630
 8006b30:	08016a98 	.word	0x08016a98
 8006b34:	08016ac8 	.word	0x08016ac8
 8006b38:	08016ae0 	.word	0x08016ae0
 8006b3c:	20000aa0 	.word	0x20000aa0
 8006b40:	20000620 	.word	0x20000620

08006b44 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e03d      	b.n	8006bd2 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8006b56:	7bfa      	ldrb	r2, [r7, #15]
 8006b58:	4957      	ldr	r1, [pc, #348]	@ (8006cb8 <dns_call_found+0x174>)
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d030      	beq.n	8006bcc <dns_call_found+0x88>
 8006b6a:	7bfa      	ldrb	r2, [r7, #15]
 8006b6c:	4952      	ldr	r1, [pc, #328]	@ (8006cb8 <dns_call_found+0x174>)
 8006b6e:	4613      	mov	r3, r2
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	3308      	adds	r3, #8
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	79fa      	ldrb	r2, [r7, #7]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d124      	bne.n	8006bcc <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006b82:	7bfa      	ldrb	r2, [r7, #15]
 8006b84:	494c      	ldr	r1, [pc, #304]	@ (8006cb8 <dns_call_found+0x174>)
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	681c      	ldr	r4, [r3, #0]
 8006b92:	79fa      	ldrb	r2, [r7, #7]
 8006b94:	4613      	mov	r3, r2
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	4413      	add	r3, r2
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	3310      	adds	r3, #16
 8006b9e:	4a47      	ldr	r2, [pc, #284]	@ (8006cbc <dns_call_found+0x178>)
 8006ba0:	1898      	adds	r0, r3, r2
 8006ba2:	7bfa      	ldrb	r2, [r7, #15]
 8006ba4:	4944      	ldr	r1, [pc, #272]	@ (8006cb8 <dns_call_found+0x174>)
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006bba:	7bfa      	ldrb	r2, [r7, #15]
 8006bbc:	493e      	ldr	r1, [pc, #248]	@ (8006cb8 <dns_call_found+0x174>)
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d9be      	bls.n	8006b56 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	e031      	b.n	8006c42 <dns_call_found+0xfe>
    if (i == idx) {
 8006bde:	7bfa      	ldrb	r2, [r7, #15]
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d029      	beq.n	8006c3a <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006be6:	7bfa      	ldrb	r2, [r7, #15]
 8006be8:	4934      	ldr	r1, [pc, #208]	@ (8006cbc <dns_call_found+0x178>)
 8006bea:	4613      	mov	r3, r2
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	4413      	add	r3, r2
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	440b      	add	r3, r1
 8006bf4:	330a      	adds	r3, #10
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d11f      	bne.n	8006c3c <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006bfc:	7bfa      	ldrb	r2, [r7, #15]
 8006bfe:	492f      	ldr	r1, [pc, #188]	@ (8006cbc <dns_call_found+0x178>)
 8006c00:	4613      	mov	r3, r2
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	440b      	add	r3, r1
 8006c0a:	330f      	adds	r3, #15
 8006c0c:	7819      	ldrb	r1, [r3, #0]
 8006c0e:	79fa      	ldrb	r2, [r7, #7]
 8006c10:	482a      	ldr	r0, [pc, #168]	@ (8006cbc <dns_call_found+0x178>)
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4413      	add	r3, r2
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	4403      	add	r3, r0
 8006c1c:	330f      	adds	r3, #15
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	4299      	cmp	r1, r3
 8006c22:	d10b      	bne.n	8006c3c <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006c24:	79fa      	ldrb	r2, [r7, #7]
 8006c26:	4925      	ldr	r1, [pc, #148]	@ (8006cbc <dns_call_found+0x178>)
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	4413      	add	r3, r2
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	440b      	add	r3, r1
 8006c32:	330f      	adds	r3, #15
 8006c34:	2204      	movs	r2, #4
 8006c36:	701a      	strb	r2, [r3, #0]
        break;
 8006c38:	e006      	b.n	8006c48 <dns_call_found+0x104>
      continue; /* only check other requests */
 8006c3a:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	73fb      	strb	r3, [r7, #15]
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d9ca      	bls.n	8006bde <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8006c48:	79fa      	ldrb	r2, [r7, #7]
 8006c4a:	491c      	ldr	r1, [pc, #112]	@ (8006cbc <dns_call_found+0x178>)
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	4413      	add	r3, r2
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	440b      	add	r3, r1
 8006c56:	330f      	adds	r3, #15
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d827      	bhi.n	8006cae <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006c5e:	79fa      	ldrb	r2, [r7, #7]
 8006c60:	4916      	ldr	r1, [pc, #88]	@ (8006cbc <dns_call_found+0x178>)
 8006c62:	4613      	mov	r3, r2
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	4413      	add	r3, r2
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	440b      	add	r3, r1
 8006c6c:	330f      	adds	r3, #15
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b13      	ldr	r3, [pc, #76]	@ (8006cc0 <dns_call_found+0x17c>)
 8006c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f008 fdf5 	bl	800f868 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8006c7e:	79fa      	ldrb	r2, [r7, #7]
 8006c80:	490e      	ldr	r1, [pc, #56]	@ (8006cbc <dns_call_found+0x178>)
 8006c82:	4613      	mov	r3, r2
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	4413      	add	r3, r2
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	440b      	add	r3, r1
 8006c8c:	330f      	adds	r3, #15
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4619      	mov	r1, r3
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <dns_call_found+0x17c>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006c9a:	79fa      	ldrb	r2, [r7, #7]
 8006c9c:	4907      	ldr	r1, [pc, #28]	@ (8006cbc <dns_call_found+0x178>)
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	440b      	add	r3, r1
 8006ca8:	330f      	adds	r3, #15
 8006caa:	2204      	movs	r2, #4
 8006cac:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd90      	pop	{r4, r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000a70 	.word	0x20000a70
 8006cbc:	20000630 	.word	0x20000630
 8006cc0:	20000620 	.word	0x20000620

08006cc4 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8006cca:	f00e fe59 	bl	8015980 <rand>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	e01a      	b.n	8006d0e <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006cd8:	79fa      	ldrb	r2, [r7, #7]
 8006cda:	4911      	ldr	r1, [pc, #68]	@ (8006d20 <dns_create_txid+0x5c>)
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	4413      	add	r3, r2
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	440b      	add	r3, r1
 8006ce6:	330a      	adds	r3, #10
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d10c      	bne.n	8006d08 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	490b      	ldr	r1, [pc, #44]	@ (8006d20 <dns_create_txid+0x5c>)
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	4413      	add	r3, r2
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006d00:	88ba      	ldrh	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d100      	bne.n	8006d08 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8006d06:	e7e0      	b.n	8006cca <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	71fb      	strb	r3, [r7, #7]
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d9e1      	bls.n	8006cd8 <dns_create_txid+0x14>
    }
  }

  return txid;
 8006d14:	88bb      	ldrh	r3, [r7, #4]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000630 	.word	0x20000630

08006d24 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00d      	beq.n	8006d52 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7adb      	ldrb	r3, [r3, #11]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <dns_backupserver_available+0x2e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7adb      	ldrb	r3, [r3, #11]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a06      	ldr	r2, [pc, #24]	@ (8006d60 <dns_backupserver_available+0x3c>)
 8006d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <dns_backupserver_available+0x2e>
      ret = 1;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000aa0 	.word	0x20000aa0

08006d64 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8006d6e:	79fa      	ldrb	r2, [r7, #7]
 8006d70:	4613      	mov	r3, r2
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	4413      	add	r3, r2
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	4a48      	ldr	r2, [pc, #288]	@ (8006e9c <dns_check_entry+0x138>)
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d906      	bls.n	8006d92 <dns_check_entry+0x2e>
 8006d84:	4b46      	ldr	r3, [pc, #280]	@ (8006ea0 <dns_check_entry+0x13c>)
 8006d86:	f240 421c 	movw	r2, #1052	@ 0x41c
 8006d8a:	4946      	ldr	r1, [pc, #280]	@ (8006ea4 <dns_check_entry+0x140>)
 8006d8c:	4846      	ldr	r0, [pc, #280]	@ (8006ea8 <dns_check_entry+0x144>)
 8006d8e:	f00e fef7 	bl	8015b80 <iprintf>

  switch (entry->state) {
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7a9b      	ldrb	r3, [r3, #10]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d86f      	bhi.n	8006e7a <dns_check_entry+0x116>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <dns_check_entry+0x3c>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006e8b 	.word	0x08006e8b
 8006da4:	08006db1 	.word	0x08006db1
 8006da8:	08006de3 	.word	0x08006de3
 8006dac:	08006e59 	.word	0x08006e59
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006db0:	f7ff ff88 	bl	8006cc4 <dns_create_txid>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff fdc4 	bl	8006964 <dns_send>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8006de0:	e058      	b.n	8006e94 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	7b1b      	ldrb	r3, [r3, #12]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	731a      	strb	r2, [r3, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	7b1b      	ldrb	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d14b      	bne.n	8006e8e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	7b5b      	ldrb	r3, [r3, #13]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	735a      	strb	r2, [r3, #13]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	7b5b      	ldrb	r3, [r3, #13]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d11b      	bne.n	8006e42 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff ff8a 	bl	8006d24 <dns_backupserver_available>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	7adb      	ldrb	r3, [r3, #11]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	735a      	strb	r2, [r3, #13]
 8006e2e:	e00c      	b.n	8006e4a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2100      	movs	r1, #0
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff fe85 	bl	8006b44 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	729a      	strb	r2, [r3, #10]
            break;
 8006e40:	e028      	b.n	8006e94 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	7b5a      	ldrb	r2, [r3, #13]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fd89 	bl	8006964 <dns_send>
 8006e52:	4603      	mov	r3, r0
 8006e54:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8006e56:	e01a      	b.n	8006e8e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <dns_check_entry+0x10e>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	1e5a      	subs	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	729a      	strb	r2, [r3, #10]
      }
      break;
 8006e78:	e00b      	b.n	8006e92 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <dns_check_entry+0x13c>)
 8006e7c:	f240 425b 	movw	r2, #1115	@ 0x45b
 8006e80:	490a      	ldr	r1, [pc, #40]	@ (8006eac <dns_check_entry+0x148>)
 8006e82:	4809      	ldr	r0, [pc, #36]	@ (8006ea8 <dns_check_entry+0x144>)
 8006e84:	f00e fe7c 	bl	8015b80 <iprintf>
      break;
 8006e88:	e004      	b.n	8006e94 <dns_check_entry+0x130>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <dns_check_entry+0x130>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <dns_check_entry+0x130>
      break;
 8006e92:	bf00      	nop
  }
}
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000630 	.word	0x20000630
 8006ea0:	08016a98 	.word	0x08016a98
 8006ea4:	08016b08 	.word	0x08016b08
 8006ea8:	08016ae0 	.word	0x08016ae0
 8006eac:	08016b24 	.word	0x08016b24

08006eb0 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	71fb      	strb	r3, [r7, #7]
 8006eba:	e006      	b.n	8006eca <dns_check_entries+0x1a>
    dns_check_entry(i);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff ff50 	bl	8006d64 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	71fb      	strb	r3, [r7, #7]
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d9f5      	bls.n	8006ebc <dns_check_entries+0xc>
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b089      	sub	sp, #36	@ 0x24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <lwip_standard_chksum+0x40>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dd0a      	ble.n	8006f1a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	1c53      	adds	r3, r2, #1
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	f107 030e 	add.w	r3, r7, #14
 8006f0e:	3301      	adds	r3, #1
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	701a      	strb	r2, [r3, #0]
    len--;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006f1e:	e00a      	b.n	8006f36 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	61ba      	str	r2, [r7, #24]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	3b02      	subs	r3, #2
 8006f34:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	dcf1      	bgt.n	8006f20 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dd04      	ble.n	8006f4c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006f42:	f107 030e 	add.w	r3, r7, #14
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006f4c:	89fb      	ldrh	r3, [r7, #14]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4413      	add	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	0c1a      	lsrs	r2, r3, #16
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4413      	add	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	0c1a      	lsrs	r2, r3, #16
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4413      	add	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d007      	beq.n	8006f84 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	b29b      	uxth	r3, r3
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3724      	adds	r7, #36	@ 0x24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	607b      	str	r3, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	72fb      	strb	r3, [r7, #11]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	e02b      	b.n	8007008 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	895b      	ldrh	r3, [r3, #10]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7ff ff8d 	bl	8006eda <lwip_standard_chksum>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	0c1a      	lsrs	r2, r3, #16
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	895b      	ldrh	r3, [r3, #10]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bf0c      	ite	eq
 8006fea:	2301      	moveq	r3, #1
 8006fec:	2300      	movne	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	0a1b      	lsrs	r3, r3, #8
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1d0      	bne.n	8006fb0 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d007      	beq.n	8007024 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	b29a      	uxth	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	b2db      	uxtb	r3, r3
 8007020:	4313      	orrs	r3, r2
 8007022:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8007024:	7afb      	ldrb	r3, [r7, #11]
 8007026:	b29b      	uxth	r3, r3
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fc05 	bl	8006838 <lwip_htons>
 800702e:	4603      	mov	r3, r0
 8007030:	461a      	mov	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8007038:	893b      	ldrh	r3, [r7, #8]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fbfc 	bl	8006838 <lwip_htons>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0c1a      	lsrs	r2, r3, #16
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	b29b      	uxth	r3, r3
 8007052:	4413      	add	r3, r2
 8007054:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0c1a      	lsrs	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	b29b      	uxth	r3, r3
 800705e:	4413      	add	r3, r2
 8007060:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	b29b      	uxth	r3, r3
 8007066:	43db      	mvns	r3, r3
 8007068:	b29b      	uxth	r3, r3
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	607b      	str	r3, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	72fb      	strb	r3, [r7, #11]
 8007080:	4613      	mov	r3, r2
 8007082:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	b29b      	uxth	r3, r3
 800708e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	0c1b      	lsrs	r3, r3, #16
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	0c1a      	lsrs	r2, r3, #16
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4413      	add	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	0c1a      	lsrs	r2, r3, #16
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80070cc:	893a      	ldrh	r2, [r7, #8]
 80070ce:	7af9      	ldrb	r1, [r7, #11]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff ff5e 	bl	8006f94 <inet_cksum_pseudo_base>
 80070d8:	4603      	mov	r3, r0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af02      	add	r7, sp, #8
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	72fb      	strb	r3, [r7, #11]
 80070f0:	4613      	mov	r3, r2
 80070f2:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80070f4:	893a      	ldrh	r2, [r7, #8]
 80070f6:	7af9      	ldrb	r1, [r7, #11]
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff ffb7 	bl	8007072 <inet_chksum_pseudo>
 8007104:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800711a:	887b      	ldrh	r3, [r7, #2]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fedb 	bl	8006eda <lwip_standard_chksum>
 8007124:	4603      	mov	r3, r0
 8007126:	43db      	mvns	r3, r3
 8007128:	b29b      	uxth	r3, r3
}
 800712a:	4618      	mov	r0, r3
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	e02b      	b.n	80071a0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7ff fec1 	bl	8006eda <lwip_standard_chksum>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	0c1a      	lsrs	r2, r3, #16
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	b29b      	uxth	r3, r3
 800716a:	4413      	add	r3, r2
 800716c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	895b      	ldrh	r3, [r3, #10]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf0c      	ite	eq
 8007182:	2301      	moveq	r3, #1
 8007184:	2300      	movne	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	b29a      	uxth	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	b2db      	uxtb	r3, r3
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1d0      	bne.n	8007148 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	43db      	mvns	r3, r3
 80071c2:	b29b      	uxth	r3, r3
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80071d6:	f001 fb59 	bl	800888c <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80071da:	f000 f810 	bl	80071fe <mem_init>
  memp_init();
 80071de:	f000 f8ab 	bl	8007338 <memp_init>
  pbuf_init();
  netif_init();
 80071e2:	f000 f99d 	bl	8007520 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80071e6:	f007 fe1d 	bl	800ee24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80071ea:	f001 fb57 	bl	800889c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80071ee:	f7ff fb88 	bl	8006902 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80071f2:	f007 fd8d 	bl	800ed10 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80071f6:	bf00      	nop
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <mem_init>:
/** mem_init is not used when using pools instead of a heap or using
 * C library malloc().
 */
void
mem_init(void)
{
 80071fe:	b480      	push	{r7}
 8007200:	af00      	add	r7, sp, #0
}
 8007202:	bf00      	nop
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <mem_trim>:
 * C library malloc(): we can't free part of a pool element and the stack
 * support mem_trim() to return a different pointer
 */
void *
mem_trim(void *mem, mem_size_t size)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  LWIP_UNUSED_ARG(size);
  return mem;
 8007216:	687b      	ldr	r3, [r7, #4]
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  void *ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f00e fae9 	bl	8015804 <malloc>
 8007232:	4603      	mov	r3, r0
 8007234:	60fb      	str	r3, [r7, #12]
  if (ret == NULL) {
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d106      	bne.n	800724a <mem_malloc+0x26>
    MEM_STATS_INC_LOCKED(err);
 800723c:	f00c ff15 	bl	801406a <sys_arch_protect>
 8007240:	60b8      	str	r0, [r7, #8]
 8007242:	68b8      	ldr	r0, [r7, #8]
 8007244:	f00c ff19 	bl	801407a <sys_arch_unprotect>
 8007248:	e00d      	b.n	8007266 <mem_malloc+0x42>
  } else {
    LWIP_ASSERT("malloc() must return aligned memory", LWIP_MEM_ALIGN(ret) == ret);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3303      	adds	r3, #3
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	461a      	mov	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4293      	cmp	r3, r2
 8007258:	d005      	beq.n	8007266 <mem_malloc+0x42>
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <mem_malloc+0x4c>)
 800725c:	22d5      	movs	r2, #213	@ 0xd5
 800725e:	4905      	ldr	r1, [pc, #20]	@ (8007274 <mem_malloc+0x50>)
 8007260:	4805      	ldr	r0, [pc, #20]	@ (8007278 <mem_malloc+0x54>)
 8007262:	f00e fc8d 	bl	8015b80 <iprintf>
    *(mem_size_t *)ret = size;
    ret = (u8_t *)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED_LOCKED(used, size);
#endif
  }
  return ret;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08016b44 	.word	0x08016b44
 8007274:	08016b74 	.word	0x08016b74
 8007278:	08016b98 	.word	0x08016b98

0800727c <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("rmem != NULL", (rmem != NULL));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <mem_free+0x1a>
 800728a:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <mem_free+0x44>)
 800728c:	22e6      	movs	r2, #230	@ 0xe6
 800728e:	490d      	ldr	r1, [pc, #52]	@ (80072c4 <mem_free+0x48>)
 8007290:	480d      	ldr	r0, [pc, #52]	@ (80072c8 <mem_free+0x4c>)
 8007292:	f00e fc75 	bl	8015b80 <iprintf>
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3303      	adds	r3, #3
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d005      	beq.n	80072b2 <mem_free+0x36>
 80072a6:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <mem_free+0x44>)
 80072a8:	22e7      	movs	r2, #231	@ 0xe7
 80072aa:	4908      	ldr	r1, [pc, #32]	@ (80072cc <mem_free+0x50>)
 80072ac:	4806      	ldr	r0, [pc, #24]	@ (80072c8 <mem_free+0x4c>)
 80072ae:	f00e fc67 	bl	8015b80 <iprintf>
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t *)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED_LOCKED(used, *(mem_size_t *)rmem);
#endif
  mem_clib_free(rmem);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f00e faae 	bl	8015814 <free>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	08016b44 	.word	0x08016b44
 80072c4:	08016bc0 	.word	0x08016bc0
 80072c8:	08016b98 	.word	0x08016b98
 80072cc:	08016bd0 	.word	0x08016bd0

080072d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	3303      	adds	r3, #3
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e011      	b.n	8007316 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	889b      	ldrh	r3, [r3, #4]
 8007308:	461a      	mov	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4413      	add	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	88db      	ldrh	r3, [r3, #6]
 800731a:	461a      	mov	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4293      	cmp	r3, r2
 8007320:	dbe7      	blt.n	80072f2 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	88da      	ldrh	r2, [r3, #6]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	605a      	str	r2, [r3, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800732c:	bf00      	nop
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800733e:	2300      	movs	r3, #0
 8007340:	80fb      	strh	r3, [r7, #6]
 8007342:	e013      	b.n	800736c <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	4a0d      	ldr	r2, [pc, #52]	@ (800737c <memp_init+0x44>)
 8007348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ffbf 	bl	80072d0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	4a09      	ldr	r2, [pc, #36]	@ (800737c <memp_init+0x44>)
 8007356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	4908      	ldr	r1, [pc, #32]	@ (8007380 <memp_init+0x48>)
 8007360:	332a      	adds	r3, #42	@ 0x2a
 8007362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	3301      	adds	r3, #1
 800736a:	80fb      	strh	r3, [r7, #6]
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	2b08      	cmp	r3, #8
 8007370:	d9e8      	bls.n	8007344 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08019918 	.word	0x08019918
 8007380:	20003a9c 	.word	0x20003a9c

08007384 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800738c:	f00c fe6d 	bl	801406a <sys_arch_protect>
 8007390:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d028      	beq.n	80073f2 <do_memp_malloc_pool+0x6e>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d006      	beq.n	80073c2 <do_memp_malloc_pool+0x3e>
 80073b4:	4b16      	ldr	r3, [pc, #88]	@ (8007410 <do_memp_malloc_pool+0x8c>)
 80073b6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80073ba:	4916      	ldr	r1, [pc, #88]	@ (8007414 <do_memp_malloc_pool+0x90>)
 80073bc:	4816      	ldr	r0, [pc, #88]	@ (8007418 <do_memp_malloc_pool+0x94>)
 80073be:	f00e fbdf 	bl	8015b80 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	3201      	adds	r2, #1
 80073ca:	609a      	str	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d905      	bls.n	80073e8 <do_memp_malloc_pool+0x64>
      desc->stats->max = desc->stats->used;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6892      	ldr	r2, [r2, #8]
 80073e6:	60da      	str	r2, [r3, #12]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f00c fe46 	bl	801407a <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	e009      	b.n	8007406 <do_memp_malloc_pool+0x82>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	881a      	ldrh	r2, [r3, #0]
 80073f8:	3201      	adds	r2, #1
 80073fa:	b292      	uxth	r2, r2
 80073fc:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f00c fe3b 	bl	801407a <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	08016be8 	.word	0x08016be8
 8007414:	08016c18 	.word	0x08016c18
 8007418:	08016c3c 	.word	0x08016c3c

0800741c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d908      	bls.n	800743e <memp_malloc+0x22>
 800742c:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <memp_malloc+0x3c>)
 800742e:	f240 1257 	movw	r2, #343	@ 0x157
 8007432:	490a      	ldr	r1, [pc, #40]	@ (800745c <memp_malloc+0x40>)
 8007434:	480a      	ldr	r0, [pc, #40]	@ (8007460 <memp_malloc+0x44>)
 8007436:	f00e fba3 	bl	8015b80 <iprintf>
 800743a:	2300      	movs	r3, #0
 800743c:	e008      	b.n	8007450 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	4a08      	ldr	r2, [pc, #32]	@ (8007464 <memp_malloc+0x48>)
 8007442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff ff9c 	bl	8007384 <do_memp_malloc_pool>
 800744c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800744e:	68fb      	ldr	r3, [r7, #12]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08016be8 	.word	0x08016be8
 800745c:	08016c78 	.word	0x08016c78
 8007460:	08016c3c 	.word	0x08016c3c
 8007464:	08019918 	.word	0x08019918

08007468 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d006      	beq.n	800748a <do_memp_free_pool+0x22>
 800747c:	4b10      	ldr	r3, [pc, #64]	@ (80074c0 <do_memp_free_pool+0x58>)
 800747e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007482:	4910      	ldr	r1, [pc, #64]	@ (80074c4 <do_memp_free_pool+0x5c>)
 8007484:	4810      	ldr	r0, [pc, #64]	@ (80074c8 <do_memp_free_pool+0x60>)
 8007486:	f00e fb7b 	bl	8015b80 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800748e:	f00c fdec 	bl	801406a <sys_arch_protect>
 8007492:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	3a01      	subs	r2, #1
 800749c:	609a      	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80074b0:	68b8      	ldr	r0, [r7, #8]
 80074b2:	f00c fde2 	bl	801407a <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	08016be8 	.word	0x08016be8
 80074c4:	08016c98 	.word	0x08016c98
 80074c8:	08016c3c 	.word	0x08016c3c

080074cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b08      	cmp	r3, #8
 80074dc:	d907      	bls.n	80074ee <memp_free+0x22>
 80074de:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <memp_free+0x44>)
 80074e0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80074e4:	490b      	ldr	r1, [pc, #44]	@ (8007514 <memp_free+0x48>)
 80074e6:	480c      	ldr	r0, [pc, #48]	@ (8007518 <memp_free+0x4c>)
 80074e8:	f00e fb4a 	bl	8015b80 <iprintf>
 80074ec:	e00c      	b.n	8007508 <memp_free+0x3c>

  if (mem == NULL) {
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	4a09      	ldr	r2, [pc, #36]	@ (800751c <memp_free+0x50>)
 80074f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff ffb2 	bl	8007468 <do_memp_free_pool>
 8007504:	e000      	b.n	8007508 <memp_free+0x3c>
    return;
 8007506:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	08016be8 	.word	0x08016be8
 8007514:	08016cb8 	.word	0x08016cb8
 8007518:	08016c3c 	.word	0x08016c3c
 800751c:	08019918 	.word	0x08019918

08007520 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d108      	bne.n	8007556 <netif_add+0x26>
 8007544:	4b59      	ldr	r3, [pc, #356]	@ (80076ac <netif_add+0x17c>)
 8007546:	f240 1227 	movw	r2, #295	@ 0x127
 800754a:	4959      	ldr	r1, [pc, #356]	@ (80076b0 <netif_add+0x180>)
 800754c:	4859      	ldr	r0, [pc, #356]	@ (80076b4 <netif_add+0x184>)
 800754e:	f00e fb17 	bl	8015b80 <iprintf>
 8007552:	2300      	movs	r3, #0
 8007554:	e0a6      	b.n	80076a4 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d108      	bne.n	800756e <netif_add+0x3e>
 800755c:	4b53      	ldr	r3, [pc, #332]	@ (80076ac <netif_add+0x17c>)
 800755e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007562:	4955      	ldr	r1, [pc, #340]	@ (80076b8 <netif_add+0x188>)
 8007564:	4853      	ldr	r0, [pc, #332]	@ (80076b4 <netif_add+0x184>)
 8007566:	f00e fb0b 	bl	8015b80 <iprintf>
 800756a:	2300      	movs	r3, #0
 800756c:	e09a      	b.n	80076a4 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007574:	4b51      	ldr	r3, [pc, #324]	@ (80076bc <netif_add+0x18c>)
 8007576:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800757e:	4b4f      	ldr	r3, [pc, #316]	@ (80076bc <netif_add+0x18c>)
 8007580:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007588:	4b4c      	ldr	r3, [pc, #304]	@ (80076bc <netif_add+0x18c>)
 800758a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a47      	ldr	r2, [pc, #284]	@ (80076c0 <netif_add+0x190>)
 80075a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3320      	adds	r3, #32
 80075b6:	2204      	movs	r2, #4
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f00e fb45 	bl	8015c4a <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80075c6:	4b3f      	ldr	r3, [pc, #252]	@ (80076c4 <netif_add+0x194>)
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68b9      	ldr	r1, [r7, #8]
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f913 	bl	8007808 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	4798      	blx	r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <netif_add+0xc2>
    return NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e058      	b.n	80076a4 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075f8:	2bff      	cmp	r3, #255	@ 0xff
 80075fa:	d103      	bne.n	8007604 <netif_add+0xd4>
        netif->num = 0;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007608:	4b2f      	ldr	r3, [pc, #188]	@ (80076c8 <netif_add+0x198>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	e02b      	b.n	8007668 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	429a      	cmp	r2, r3
 8007616:	d106      	bne.n	8007626 <netif_add+0xf6>
 8007618:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <netif_add+0x17c>)
 800761a:	f240 128b 	movw	r2, #395	@ 0x18b
 800761e:	492b      	ldr	r1, [pc, #172]	@ (80076cc <netif_add+0x19c>)
 8007620:	4824      	ldr	r0, [pc, #144]	@ (80076b4 <netif_add+0x184>)
 8007622:	f00e faad 	bl	8015b80 <iprintf>
        num_netifs++;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3301      	adds	r3, #1
 800762a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2bff      	cmp	r3, #255	@ 0xff
 8007630:	dd06      	ble.n	8007640 <netif_add+0x110>
 8007632:	4b1e      	ldr	r3, [pc, #120]	@ (80076ac <netif_add+0x17c>)
 8007634:	f240 128d 	movw	r2, #397	@ 0x18d
 8007638:	4925      	ldr	r1, [pc, #148]	@ (80076d0 <netif_add+0x1a0>)
 800763a:	481e      	ldr	r0, [pc, #120]	@ (80076b4 <netif_add+0x184>)
 800763c:	f00e faa0 	bl	8015b80 <iprintf>
        if (netif2->num == netif->num) {
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800764c:	429a      	cmp	r2, r3
 800764e:	d108      	bne.n	8007662 <netif_add+0x132>
          netif->num++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007656:	3301      	adds	r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007660:	e005      	b.n	800766e <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1d0      	bne.n	8007610 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1be      	bne.n	80075f2 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800767a:	2bfe      	cmp	r3, #254	@ 0xfe
 800767c:	d103      	bne.n	8007686 <netif_add+0x156>
    netif_num = 0;
 800767e:	4b11      	ldr	r3, [pc, #68]	@ (80076c4 <netif_add+0x194>)
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e006      	b.n	8007694 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800768c:	3301      	adds	r3, #1
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <netif_add+0x194>)
 8007692:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007694:	4b0c      	ldr	r3, [pc, #48]	@ (80076c8 <netif_add+0x198>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800769c:	4a0a      	ldr	r2, [pc, #40]	@ (80076c8 <netif_add+0x198>)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80076a2:	68fb      	ldr	r3, [r7, #12]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	08016cd4 	.word	0x08016cd4
 80076b0:	08016d68 	.word	0x08016d68
 80076b4:	08016d24 	.word	0x08016d24
 80076b8:	08016d84 	.word	0x08016d84
 80076bc:	08019994 	.word	0x08019994
 80076c0:	08007995 	.word	0x08007995
 80076c4:	20003a98 	.word	0x20003a98
 80076c8:	20003a90 	.word	0x20003a90
 80076cc:	08016da8 	.word	0x08016da8
 80076d0:	08016dbc 	.word	0x08016dbc

080076d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 fef5 	bl	800a4d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f008 f917 	bl	800f91c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <netif_do_set_ipaddr+0x20>
 800770a:	4b1d      	ldr	r3, [pc, #116]	@ (8007780 <netif_do_set_ipaddr+0x88>)
 800770c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007710:	491c      	ldr	r1, [pc, #112]	@ (8007784 <netif_do_set_ipaddr+0x8c>)
 8007712:	481d      	ldr	r0, [pc, #116]	@ (8007788 <netif_do_set_ipaddr+0x90>)
 8007714:	f00e fa34 	bl	8015b80 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <netif_do_set_ipaddr+0x34>
 800771e:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <netif_do_set_ipaddr+0x88>)
 8007720:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007724:	4917      	ldr	r1, [pc, #92]	@ (8007784 <netif_do_set_ipaddr+0x8c>)
 8007726:	4818      	ldr	r0, [pc, #96]	@ (8007788 <netif_do_set_ipaddr+0x90>)
 8007728:	f00e fa2a 	bl	8015b80 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3304      	adds	r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d01c      	beq.n	8007774 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3304      	adds	r3, #4
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800774a:	f107 0314 	add.w	r3, r7, #20
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ffbf 	bl	80076d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <netif_do_set_ipaddr+0x6a>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	e000      	b.n	8007764 <netif_do_set_ipaddr+0x6c>
 8007762:	2300      	movs	r3, #0
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007768:	2101      	movs	r1, #1
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f8d2 	bl	8007914 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	08016cd4 	.word	0x08016cd4
 8007784:	08016dec 	.word	0x08016dec
 8007788:	08016d24 	.word	0x08016d24

0800778c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3308      	adds	r3, #8
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d00a      	beq.n	80077bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <netif_do_set_netmask+0x26>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	e000      	b.n	80077b4 <netif_do_set_netmask+0x28>
 80077b2:	2300      	movs	r3, #0
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	330c      	adds	r3, #12
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d00a      	beq.n	80077fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <netif_do_set_gw+0x26>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	e000      	b.n	80077f2 <netif_do_set_gw+0x28>
 80077f0:	2300      	movs	r3, #0
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007824:	4b1c      	ldr	r3, [pc, #112]	@ (8007898 <netif_set_addr+0x90>)
 8007826:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800782e:	4b1a      	ldr	r3, [pc, #104]	@ (8007898 <netif_set_addr+0x90>)
 8007830:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007838:	4b17      	ldr	r3, [pc, #92]	@ (8007898 <netif_set_addr+0x90>)
 800783a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <netif_set_addr+0x42>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <netif_set_addr+0x46>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <netif_set_addr+0x48>
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007858:	f107 0310 	add.w	r3, r7, #16
 800785c:	461a      	mov	r2, r3
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ff49 	bl	80076f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f7ff ff8e 	bl	800778c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff ffa8 	bl	80077ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d106      	bne.n	800788e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007880:	f107 0310 	add.w	r3, r7, #16
 8007884:	461a      	mov	r2, r3
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff ff35 	bl	80076f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800788e:	bf00      	nop
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	08019994 	.word	0x08019994

0800789c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80078a4:	4a04      	ldr	r2, [pc, #16]	@ (80078b8 <netif_set_default+0x1c>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20003a94 	.word	0x20003a94

080078bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <netif_set_up+0x1e>
 80078ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <netif_set_up+0x4c>)
 80078cc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80078d0:	490e      	ldr	r1, [pc, #56]	@ (800790c <netif_set_up+0x50>)
 80078d2:	480f      	ldr	r0, [pc, #60]	@ (8007910 <netif_set_up+0x54>)
 80078d4:	f00e f954 	bl	8015b80 <iprintf>
 80078d8:	e013      	b.n	8007902 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80078fa:	2103      	movs	r1, #3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f809 	bl	8007914 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08016cd4 	.word	0x08016cd4
 800790c:	08016e5c 	.word	0x08016e5c
 8007910:	08016d24 	.word	0x08016d24

08007914 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <netif_issue_reports+0x20>
 8007926:	4b18      	ldr	r3, [pc, #96]	@ (8007988 <netif_issue_reports+0x74>)
 8007928:	f240 326d 	movw	r2, #877	@ 0x36d
 800792c:	4917      	ldr	r1, [pc, #92]	@ (800798c <netif_issue_reports+0x78>)
 800792e:	4818      	ldr	r0, [pc, #96]	@ (8007990 <netif_issue_reports+0x7c>)
 8007930:	f00e f926 	bl	8015b80 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01e      	beq.n	8007980 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007948:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800794c:	2b00      	cmp	r3, #0
 800794e:	d017      	beq.n	8007980 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d013      	beq.n	8007982 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3304      	adds	r3, #4
 800795e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f00a fdef 	bl	801255c <etharp_request>
 800797e:	e000      	b.n	8007982 <netif_issue_reports+0x6e>
    return;
 8007980:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08016cd4 	.word	0x08016cd4
 800798c:	08016e78 	.word	0x08016e78
 8007990:	08016d24 	.word	0x08016d24

08007994 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80079a0:	f06f 030b 	mvn.w	r3, #11
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d013      	beq.n	80079e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80079c0:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <netif_get_by_index+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e00c      	b.n	80079e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079ce:	3301      	adds	r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	79fa      	ldrb	r2, [r7, #7]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d101      	bne.n	80079dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	e006      	b.n	80079ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ef      	bne.n	80079c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20003a90 	.word	0x20003a90

080079fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007a02:	f00c fb32 	bl	801406a <sys_arch_protect>
 8007a06:	6038      	str	r0, [r7, #0]
 8007a08:	4b0d      	ldr	r3, [pc, #52]	@ (8007a40 <pbuf_free_ooseq+0x44>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f00c fb33 	bl	801407a <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a14:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <pbuf_free_ooseq+0x48>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	e00a      	b.n	8007a32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f002 fd91 	bl	800a54c <tcp_free_ooseq>
      return;
 8007a2a:	e005      	b.n	8007a38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f1      	bne.n	8007a1c <pbuf_free_ooseq+0x20>
    }
  }
}
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20003a99 	.word	0x20003a99
 8007a44:	20003b74 	.word	0x20003b74

08007a48 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007a4e:	f00c fb0c 	bl	801406a <sys_arch_protect>
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	4b04      	ldr	r3, [pc, #16]	@ (8007a68 <pbuf_pool_is_empty+0x20>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f00c fb0d 	bl	801407a <sys_arch_unprotect>
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	20003a99 	.word	0x20003a99

08007a6c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4611      	mov	r1, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	80fb      	strh	r3, [r7, #6]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	88ba      	ldrh	r2, [r7, #4]
 8007a98:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007a9a:	8b3b      	ldrh	r3, [r7, #24]
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	7f3a      	ldrb	r2, [r7, #28]
 8007aa6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	73da      	strb	r2, [r3, #15]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	@ 0x30
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
 8007aca:	460b      	mov	r3, r1
 8007acc:	80bb      	strh	r3, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007adc:	d07f      	beq.n	8007bde <pbuf_alloc+0x11e>
 8007ade:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007ae2:	f300 80c7 	bgt.w	8007c74 <pbuf_alloc+0x1b4>
 8007ae6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007aea:	d010      	beq.n	8007b0e <pbuf_alloc+0x4e>
 8007aec:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007af0:	f300 80c0 	bgt.w	8007c74 <pbuf_alloc+0x1b4>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d002      	beq.n	8007afe <pbuf_alloc+0x3e>
 8007af8:	2b41      	cmp	r3, #65	@ 0x41
 8007afa:	f040 80bb 	bne.w	8007c74 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007afe:	887a      	ldrh	r2, [r7, #2]
 8007b00:	88bb      	ldrh	r3, [r7, #4]
 8007b02:	4619      	mov	r1, r3
 8007b04:	2000      	movs	r0, #0
 8007b06:	f000 f8d1 	bl	8007cac <pbuf_alloc_reference>
 8007b0a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007b0c:	e0bc      	b.n	8007c88 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007b1a:	2008      	movs	r0, #8
 8007b1c:	f7ff fc7e 	bl	800741c <memp_malloc>
 8007b20:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007b28:	f7ff ff8e 	bl	8007a48 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007b32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b34:	f000 faa6 	bl	8008084 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e0a6      	b.n	8007c8a <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b3e:	3303      	adds	r3, #3
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f023 0303 	bic.w	r3, r3, #3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	8b7a      	ldrh	r2, [r7, #26]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	bf28      	it	cs
 8007b54:	4613      	movcs	r3, r2
 8007b56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b58:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b5a:	3310      	adds	r3, #16
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3303      	adds	r3, #3
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	4618      	mov	r0, r3
 8007b68:	89f9      	ldrh	r1, [r7, #14]
 8007b6a:	8b7a      	ldrh	r2, [r7, #26]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	460b      	mov	r3, r1
 8007b76:	4601      	mov	r1, r0
 8007b78:	6938      	ldr	r0, [r7, #16]
 8007b7a:	f7ff ff77 	bl	8007a6c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d006      	beq.n	8007b98 <pbuf_alloc+0xd8>
 8007b8a:	4b42      	ldr	r3, [pc, #264]	@ (8007c94 <pbuf_alloc+0x1d4>)
 8007b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b90:	4941      	ldr	r1, [pc, #260]	@ (8007c98 <pbuf_alloc+0x1d8>)
 8007b92:	4842      	ldr	r0, [pc, #264]	@ (8007c9c <pbuf_alloc+0x1dc>)
 8007b94:	f00d fff4 	bl	8015b80 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007b98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b9a:	3303      	adds	r3, #3
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007ba4:	d106      	bne.n	8007bb4 <pbuf_alloc+0xf4>
 8007ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8007c94 <pbuf_alloc+0x1d4>)
 8007ba8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007bac:	493c      	ldr	r1, [pc, #240]	@ (8007ca0 <pbuf_alloc+0x1e0>)
 8007bae:	483b      	ldr	r0, [pc, #236]	@ (8007c9c <pbuf_alloc+0x1dc>)
 8007bb0:	f00d ffe6 	bl	8015b80 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bbe:	e002      	b.n	8007bc6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007bca:	8b7a      	ldrh	r2, [r7, #26]
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007bd6:	8b7b      	ldrh	r3, [r7, #26]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d19e      	bne.n	8007b1a <pbuf_alloc+0x5a>
      break;
 8007bdc:	e054      	b.n	8007c88 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007be0:	3303      	adds	r3, #3
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	f023 0303 	bic.w	r3, r3, #3
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	88bb      	ldrh	r3, [r7, #4]
 8007bec:	3303      	adds	r3, #3
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007bfa:	8b3b      	ldrh	r3, [r7, #24]
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c00:	8b3a      	ldrh	r2, [r7, #24]
 8007c02:	88bb      	ldrh	r3, [r7, #4]
 8007c04:	3303      	adds	r3, #3
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d306      	bcc.n	8007c1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	3303      	adds	r3, #3
 8007c12:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d201      	bcs.n	8007c20 <pbuf_alloc+0x160>
        return NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e034      	b.n	8007c8a <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007c20:	6978      	ldr	r0, [r7, #20]
 8007c22:	f7ff faff 	bl	8007224 <mem_malloc>
 8007c26:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <pbuf_alloc+0x172>
        return NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e02b      	b.n	8007c8a <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007c32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c34:	3310      	adds	r3, #16
 8007c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c38:	4413      	add	r3, r2
 8007c3a:	3303      	adds	r3, #3
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	4618      	mov	r0, r3
 8007c42:	88b9      	ldrh	r1, [r7, #4]
 8007c44:	88ba      	ldrh	r2, [r7, #4]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4601      	mov	r1, r0
 8007c52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c54:	f7ff ff0a 	bl	8007a6c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d010      	beq.n	8007c86 <pbuf_alloc+0x1c6>
 8007c64:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <pbuf_alloc+0x1d4>)
 8007c66:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007c6a:	490e      	ldr	r1, [pc, #56]	@ (8007ca4 <pbuf_alloc+0x1e4>)
 8007c6c:	480b      	ldr	r0, [pc, #44]	@ (8007c9c <pbuf_alloc+0x1dc>)
 8007c6e:	f00d ff87 	bl	8015b80 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007c72:	e008      	b.n	8007c86 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007c74:	4b07      	ldr	r3, [pc, #28]	@ (8007c94 <pbuf_alloc+0x1d4>)
 8007c76:	f240 1227 	movw	r2, #295	@ 0x127
 8007c7a:	490b      	ldr	r1, [pc, #44]	@ (8007ca8 <pbuf_alloc+0x1e8>)
 8007c7c:	4807      	ldr	r0, [pc, #28]	@ (8007c9c <pbuf_alloc+0x1dc>)
 8007c7e:	f00d ff7f 	bl	8015b80 <iprintf>
      return NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e001      	b.n	8007c8a <pbuf_alloc+0x1ca>
      break;
 8007c86:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3728      	adds	r7, #40	@ 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	08016f04 	.word	0x08016f04
 8007c98:	08016f34 	.word	0x08016f34
 8007c9c:	08016f64 	.word	0x08016f64
 8007ca0:	08016f8c 	.word	0x08016f8c
 8007ca4:	08016fc0 	.word	0x08016fc0
 8007ca8:	08016fec 	.word	0x08016fec

08007cac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	807b      	strh	r3, [r7, #2]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007cbc:	883b      	ldrh	r3, [r7, #0]
 8007cbe:	2b41      	cmp	r3, #65	@ 0x41
 8007cc0:	d009      	beq.n	8007cd6 <pbuf_alloc_reference+0x2a>
 8007cc2:	883b      	ldrh	r3, [r7, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d006      	beq.n	8007cd6 <pbuf_alloc_reference+0x2a>
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d08 <pbuf_alloc_reference+0x5c>)
 8007cca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007cce:	490f      	ldr	r1, [pc, #60]	@ (8007d0c <pbuf_alloc_reference+0x60>)
 8007cd0:	480f      	ldr	r0, [pc, #60]	@ (8007d10 <pbuf_alloc_reference+0x64>)
 8007cd2:	f00d ff55 	bl	8015b80 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007cd6:	2007      	movs	r0, #7
 8007cd8:	f7ff fba0 	bl	800741c <memp_malloc>
 8007cdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e00b      	b.n	8007d00 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007ce8:	8879      	ldrh	r1, [r7, #2]
 8007cea:	887a      	ldrh	r2, [r7, #2]
 8007cec:	2300      	movs	r3, #0
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	883b      	ldrh	r3, [r7, #0]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff feb7 	bl	8007a6c <pbuf_init_alloced_pbuf>
  return p;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08016f04 	.word	0x08016f04
 8007d0c:	08017008 	.word	0x08017008
 8007d10:	08016f64 	.word	0x08016f64

08007d14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	460b      	mov	r3, r1
 8007d22:	81bb      	strh	r3, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
 8007d2e:	3303      	adds	r3, #3
 8007d30:	f023 0203 	bic.w	r2, r3, #3
 8007d34:	89bb      	ldrh	r3, [r7, #12]
 8007d36:	441a      	add	r2, r3
 8007d38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d901      	bls.n	8007d42 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e018      	b.n	8007d74 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007d48:	8a7b      	ldrh	r3, [r7, #18]
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	6a3a      	ldr	r2, [r7, #32]
 8007d52:	4413      	add	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	e001      	b.n	8007d5c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	89b9      	ldrh	r1, [r7, #12]
 8007d60:	89ba      	ldrh	r2, [r7, #12]
 8007d62:	2302      	movs	r3, #2
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	897b      	ldrh	r3, [r7, #10]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	f7ff fe7d 	bl	8007a6c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007d72:	687b      	ldr	r3, [r7, #4]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <pbuf_realloc+0x20>
 8007d8e:	4b39      	ldr	r3, [pc, #228]	@ (8007e74 <pbuf_realloc+0xf8>)
 8007d90:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007d94:	4938      	ldr	r1, [pc, #224]	@ (8007e78 <pbuf_realloc+0xfc>)
 8007d96:	4839      	ldr	r0, [pc, #228]	@ (8007e7c <pbuf_realloc+0x100>)
 8007d98:	f00d fef2 	bl	8015b80 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	891b      	ldrh	r3, [r3, #8]
 8007da0:	887a      	ldrh	r2, [r7, #2]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d261      	bcs.n	8007e6a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	891a      	ldrh	r2, [r3, #8]
 8007daa:	887b      	ldrh	r3, [r7, #2]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007db0:	887b      	ldrh	r3, [r7, #2]
 8007db2:	817b      	strh	r3, [r7, #10]
  q = p;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007db8:	e018      	b.n	8007dec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	895b      	ldrh	r3, [r3, #10]
 8007dbe:	897a      	ldrh	r2, [r7, #10]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	891a      	ldrh	r2, [r3, #8]
 8007dc8:	893b      	ldrh	r3, [r7, #8]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <pbuf_realloc+0x70>
 8007dde:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <pbuf_realloc+0xf8>)
 8007de0:	f240 12af 	movw	r2, #431	@ 0x1af
 8007de4:	4926      	ldr	r1, [pc, #152]	@ (8007e80 <pbuf_realloc+0x104>)
 8007de6:	4825      	ldr	r0, [pc, #148]	@ (8007e7c <pbuf_realloc+0x100>)
 8007de8:	f00d feca 	bl	8015b80 <iprintf>
  while (rem_len > q->len) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	895b      	ldrh	r3, [r3, #10]
 8007df0:	897a      	ldrh	r2, [r7, #10]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d8e1      	bhi.n	8007dba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	7b1b      	ldrb	r3, [r3, #12]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d11f      	bne.n	8007e42 <pbuf_realloc+0xc6>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	895b      	ldrh	r3, [r3, #10]
 8007e06:	897a      	ldrh	r2, [r7, #10]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d01a      	beq.n	8007e42 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	7b5b      	ldrb	r3, [r3, #13]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d114      	bne.n	8007e42 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	897b      	ldrh	r3, [r7, #10]
 8007e22:	4413      	add	r3, r2
 8007e24:	4619      	mov	r1, r3
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff f9f0 	bl	800720c <mem_trim>
 8007e2c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d106      	bne.n	8007e42 <pbuf_realloc+0xc6>
 8007e34:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <pbuf_realloc+0xf8>)
 8007e36:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007e3a:	4912      	ldr	r1, [pc, #72]	@ (8007e84 <pbuf_realloc+0x108>)
 8007e3c:	480f      	ldr	r0, [pc, #60]	@ (8007e7c <pbuf_realloc+0x100>)
 8007e3e:	f00d fe9f 	bl	8015b80 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	897a      	ldrh	r2, [r7, #10]
 8007e46:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	895a      	ldrh	r2, [r3, #10]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f911 	bl	8008084 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e000      	b.n	8007e6c <pbuf_realloc+0xf0>
    return;
 8007e6a:	bf00      	nop

}
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	08016f04 	.word	0x08016f04
 8007e78:	0801701c 	.word	0x0801701c
 8007e7c:	08016f64 	.word	0x08016f64
 8007e80:	08017034 	.word	0x08017034
 8007e84:	0801704c 	.word	0x0801704c

08007e88 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <pbuf_add_header_impl+0x22>
 8007e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f4c <pbuf_add_header_impl+0xc4>)
 8007e9e:	f240 12df 	movw	r2, #479	@ 0x1df
 8007ea2:	492b      	ldr	r1, [pc, #172]	@ (8007f50 <pbuf_add_header_impl+0xc8>)
 8007ea4:	482b      	ldr	r0, [pc, #172]	@ (8007f54 <pbuf_add_header_impl+0xcc>)
 8007ea6:	f00d fe6b 	bl	8015b80 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <pbuf_add_header_impl+0x30>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb6:	d301      	bcc.n	8007ebc <pbuf_add_header_impl+0x34>
    return 1;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e043      	b.n	8007f44 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <pbuf_add_header_impl+0x3e>
    return 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e03e      	b.n	8007f44 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	891a      	ldrh	r2, [r3, #8]
 8007ece:	8a7b      	ldrh	r3, [r7, #18]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8a7a      	ldrh	r2, [r7, #18]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d901      	bls.n	8007ede <pbuf_add_header_impl+0x56>
    return 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e032      	b.n	8007f44 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7b1b      	ldrb	r3, [r3, #12]
 8007ee2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007ee4:	8a3b      	ldrh	r3, [r7, #16]
 8007ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3310      	adds	r3, #16
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d20d      	bcs.n	8007f20 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e01d      	b.n	8007f44 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	425b      	negs	r3, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e001      	b.n	8007f20 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e011      	b.n	8007f44 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	895a      	ldrh	r2, [r3, #10]
 8007f2a:	8a7b      	ldrh	r3, [r7, #18]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	891a      	ldrh	r2, [r3, #8]
 8007f38:	8a7b      	ldrh	r3, [r7, #18]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	811a      	strh	r2, [r3, #8]


  return 0;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	08016f04 	.word	0x08016f04
 8007f50:	08017068 	.word	0x08017068
 8007f54:	08016f64 	.word	0x08016f64

08007f58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007f62:	2200      	movs	r2, #0
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff ff8e 	bl	8007e88 <pbuf_add_header_impl>
 8007f6c:	4603      	mov	r3, r0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <pbuf_remove_header+0x1e>
 8007f88:	4b20      	ldr	r3, [pc, #128]	@ (800800c <pbuf_remove_header+0x94>)
 8007f8a:	f240 224b 	movw	r2, #587	@ 0x24b
 8007f8e:	4920      	ldr	r1, [pc, #128]	@ (8008010 <pbuf_remove_header+0x98>)
 8007f90:	4820      	ldr	r0, [pc, #128]	@ (8008014 <pbuf_remove_header+0x9c>)
 8007f92:	f00d fdf5 	bl	8015b80 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <pbuf_remove_header+0x2c>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa2:	d301      	bcc.n	8007fa8 <pbuf_remove_header+0x30>
    return 1;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e02c      	b.n	8008002 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <pbuf_remove_header+0x3a>
    return 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e027      	b.n	8008002 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	895b      	ldrh	r3, [r3, #10]
 8007fba:	89fa      	ldrh	r2, [r7, #14]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d908      	bls.n	8007fd2 <pbuf_remove_header+0x5a>
 8007fc0:	4b12      	ldr	r3, [pc, #72]	@ (800800c <pbuf_remove_header+0x94>)
 8007fc2:	f240 2255 	movw	r2, #597	@ 0x255
 8007fc6:	4914      	ldr	r1, [pc, #80]	@ (8008018 <pbuf_remove_header+0xa0>)
 8007fc8:	4812      	ldr	r0, [pc, #72]	@ (8008014 <pbuf_remove_header+0x9c>)
 8007fca:	f00d fdd9 	bl	8015b80 <iprintf>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e017      	b.n	8008002 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	441a      	add	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	895a      	ldrh	r2, [r3, #10]
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	891a      	ldrh	r2, [r3, #8]
 8007ff6:	89fb      	ldrh	r3, [r7, #14]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08016f04 	.word	0x08016f04
 8008010:	08017068 	.word	0x08017068
 8008014:	08016f64 	.word	0x08016f64
 8008018:	08017074 	.word	0x08017074

0800801c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	807b      	strh	r3, [r7, #2]
 8008028:	4613      	mov	r3, r2
 800802a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800802c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008030:	2b00      	cmp	r3, #0
 8008032:	da08      	bge.n	8008046 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008038:	425b      	negs	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ff9b 	bl	8007f78 <pbuf_remove_header>
 8008042:	4603      	mov	r3, r0
 8008044:	e007      	b.n	8008056 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800804a:	787a      	ldrb	r2, [r7, #1]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ff1a 	bl	8007e88 <pbuf_add_header_impl>
 8008054:	4603      	mov	r3, r0
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800806a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800806e:	2201      	movs	r2, #1
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff ffd2 	bl	800801c <pbuf_header_impl>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d106      	bne.n	80080a6 <pbuf_free+0x22>
 8008098:	4b3b      	ldr	r3, [pc, #236]	@ (8008188 <pbuf_free+0x104>)
 800809a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800809e:	493b      	ldr	r1, [pc, #236]	@ (800818c <pbuf_free+0x108>)
 80080a0:	483b      	ldr	r0, [pc, #236]	@ (8008190 <pbuf_free+0x10c>)
 80080a2:	f00d fd6d 	bl	8015b80 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e069      	b.n	800817e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80080ae:	e062      	b.n	8008176 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80080b0:	f00b ffdb 	bl	801406a <sys_arch_protect>
 80080b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	7b9b      	ldrb	r3, [r3, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <pbuf_free+0x48>
 80080be:	4b32      	ldr	r3, [pc, #200]	@ (8008188 <pbuf_free+0x104>)
 80080c0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80080c4:	4933      	ldr	r1, [pc, #204]	@ (8008194 <pbuf_free+0x110>)
 80080c6:	4832      	ldr	r0, [pc, #200]	@ (8008190 <pbuf_free+0x10c>)
 80080c8:	f00d fd5a 	bl	8015b80 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	7b9b      	ldrb	r3, [r3, #14]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	739a      	strb	r2, [r3, #14]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7b9b      	ldrb	r3, [r3, #14]
 80080dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80080de:	69b8      	ldr	r0, [r7, #24]
 80080e0:	f00b ffcb 	bl	801407a <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d143      	bne.n	8008172 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7b1b      	ldrb	r3, [r3, #12]
 80080f4:	f003 030f 	and.w	r3, r3, #15
 80080f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7b5b      	ldrb	r3, [r3, #13]
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d106      	bne.n	8008120 <pbuf_free+0x9c>
 8008112:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <pbuf_free+0x104>)
 8008114:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008118:	491f      	ldr	r1, [pc, #124]	@ (8008198 <pbuf_free+0x114>)
 800811a:	481d      	ldr	r0, [pc, #116]	@ (8008190 <pbuf_free+0x10c>)
 800811c:	f00d fd30 	bl	8015b80 <iprintf>
        pc->custom_free_function(p);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	e01d      	b.n	8008166 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d104      	bne.n	800813a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	2008      	movs	r0, #8
 8008134:	f7ff f9ca 	bl	80074cc <memp_free>
 8008138:	e015      	b.n	8008166 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d104      	bne.n	800814a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	2007      	movs	r0, #7
 8008144:	f7ff f9c2 	bl	80074cc <memp_free>
 8008148:	e00d      	b.n	8008166 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <pbuf_free+0xd4>
          mem_free(p);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff f893 	bl	800727c <mem_free>
 8008156:	e006      	b.n	8008166 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008158:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <pbuf_free+0x104>)
 800815a:	f240 320f 	movw	r2, #783	@ 0x30f
 800815e:	490f      	ldr	r1, [pc, #60]	@ (800819c <pbuf_free+0x118>)
 8008160:	480b      	ldr	r0, [pc, #44]	@ (8008190 <pbuf_free+0x10c>)
 8008162:	f00d fd0d 	bl	8015b80 <iprintf>
        }
      }
      count++;
 8008166:	7ffb      	ldrb	r3, [r7, #31]
 8008168:	3301      	adds	r3, #1
 800816a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	607b      	str	r3, [r7, #4]
 8008170:	e001      	b.n	8008176 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d199      	bne.n	80080b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800817c:	7ffb      	ldrb	r3, [r7, #31]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	08016f04 	.word	0x08016f04
 800818c:	08017068 	.word	0x08017068
 8008190:	08016f64 	.word	0x08016f64
 8008194:	08017094 	.word	0x08017094
 8008198:	080170ac 	.word	0x080170ac
 800819c:	080170d0 	.word	0x080170d0

080081a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80081ac:	e005      	b.n	80081ba <pbuf_clen+0x1a>
    ++len;
 80081ae:	89fb      	ldrh	r3, [r7, #14]
 80081b0:	3301      	adds	r3, #1
 80081b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f6      	bne.n	80081ae <pbuf_clen+0xe>
  }
  return len;
 80081c0:	89fb      	ldrh	r3, [r7, #14]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d016      	beq.n	800820c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80081de:	f00b ff44 	bl	801406a <sys_arch_protect>
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	7b9b      	ldrb	r3, [r3, #14]
 80081e8:	3301      	adds	r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	739a      	strb	r2, [r3, #14]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f00b ff42 	bl	801407a <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7b9b      	ldrb	r3, [r3, #14]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <pbuf_ref+0x3c>
 80081fe:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <pbuf_ref+0x44>)
 8008200:	f240 3242 	movw	r2, #834	@ 0x342
 8008204:	4904      	ldr	r1, [pc, #16]	@ (8008218 <pbuf_ref+0x48>)
 8008206:	4805      	ldr	r0, [pc, #20]	@ (800821c <pbuf_ref+0x4c>)
 8008208:	f00d fcba 	bl	8015b80 <iprintf>
  }
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08016f04 	.word	0x08016f04
 8008218:	080170e4 	.word	0x080170e4
 800821c:	08016f64 	.word	0x08016f64

08008220 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <pbuf_cat+0x16>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d107      	bne.n	8008246 <pbuf_cat+0x26>
 8008236:	4b20      	ldr	r3, [pc, #128]	@ (80082b8 <pbuf_cat+0x98>)
 8008238:	f240 3259 	movw	r2, #857	@ 0x359
 800823c:	491f      	ldr	r1, [pc, #124]	@ (80082bc <pbuf_cat+0x9c>)
 800823e:	4820      	ldr	r0, [pc, #128]	@ (80082c0 <pbuf_cat+0xa0>)
 8008240:	f00d fc9e 	bl	8015b80 <iprintf>
 8008244:	e034      	b.n	80082b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	e00a      	b.n	8008262 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	891a      	ldrh	r2, [r3, #8]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	891b      	ldrh	r3, [r3, #8]
 8008254:	4413      	add	r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f0      	bne.n	800824c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	891a      	ldrh	r2, [r3, #8]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	895b      	ldrh	r3, [r3, #10]
 8008272:	429a      	cmp	r2, r3
 8008274:	d006      	beq.n	8008284 <pbuf_cat+0x64>
 8008276:	4b10      	ldr	r3, [pc, #64]	@ (80082b8 <pbuf_cat+0x98>)
 8008278:	f240 3262 	movw	r2, #866	@ 0x362
 800827c:	4911      	ldr	r1, [pc, #68]	@ (80082c4 <pbuf_cat+0xa4>)
 800827e:	4810      	ldr	r0, [pc, #64]	@ (80082c0 <pbuf_cat+0xa0>)
 8008280:	f00d fc7e 	bl	8015b80 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d006      	beq.n	800829a <pbuf_cat+0x7a>
 800828c:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <pbuf_cat+0x98>)
 800828e:	f240 3263 	movw	r2, #867	@ 0x363
 8008292:	490d      	ldr	r1, [pc, #52]	@ (80082c8 <pbuf_cat+0xa8>)
 8008294:	480a      	ldr	r0, [pc, #40]	@ (80082c0 <pbuf_cat+0xa0>)
 8008296:	f00d fc73 	bl	8015b80 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	891a      	ldrh	r2, [r3, #8]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	891b      	ldrh	r3, [r3, #8]
 80082a2:	4413      	add	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	08016f04 	.word	0x08016f04
 80082bc:	080170f8 	.word	0x080170f8
 80082c0:	08016f64 	.word	0x08016f64
 80082c4:	08017130 	.word	0x08017130
 80082c8:	08017160 	.word	0x08017160

080082cc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff ffa1 	bl	8008220 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f7ff ff76 	bl	80081d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <pbuf_copy+0x2a>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <pbuf_copy+0x2a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	891a      	ldrh	r2, [r3, #8]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	891b      	ldrh	r3, [r3, #8]
 8008312:	429a      	cmp	r2, r3
 8008314:	d209      	bcs.n	800832a <pbuf_copy+0x3e>
 8008316:	4b57      	ldr	r3, [pc, #348]	@ (8008474 <pbuf_copy+0x188>)
 8008318:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800831c:	4956      	ldr	r1, [pc, #344]	@ (8008478 <pbuf_copy+0x18c>)
 800831e:	4857      	ldr	r0, [pc, #348]	@ (800847c <pbuf_copy+0x190>)
 8008320:	f00d fc2e 	bl	8015b80 <iprintf>
 8008324:	f06f 030f 	mvn.w	r3, #15
 8008328:	e09f      	b.n	800846a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	895b      	ldrh	r3, [r3, #10]
 800832e:	461a      	mov	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	1ad2      	subs	r2, r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	895b      	ldrh	r3, [r3, #10]
 8008338:	4619      	mov	r1, r3
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1acb      	subs	r3, r1, r3
 800833e:	429a      	cmp	r2, r3
 8008340:	d306      	bcc.n	8008350 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	895b      	ldrh	r3, [r3, #10]
 8008346:	461a      	mov	r2, r3
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	e005      	b.n	800835c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	895b      	ldrh	r3, [r3, #10]
 8008354:	461a      	mov	r2, r3
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	18d0      	adds	r0, r2, r3
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	4413      	add	r3, r2
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4619      	mov	r1, r3
 8008370:	f00d fd0f 	bl	8015d92 <memcpy>
    offset_to += len;
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	895b      	ldrh	r3, [r3, #10]
 8008388:	461a      	mov	r2, r3
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4293      	cmp	r3, r2
 800838e:	d906      	bls.n	800839e <pbuf_copy+0xb2>
 8008390:	4b38      	ldr	r3, [pc, #224]	@ (8008474 <pbuf_copy+0x188>)
 8008392:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008396:	493a      	ldr	r1, [pc, #232]	@ (8008480 <pbuf_copy+0x194>)
 8008398:	4838      	ldr	r0, [pc, #224]	@ (800847c <pbuf_copy+0x190>)
 800839a:	f00d fbf1 	bl	8015b80 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	895b      	ldrh	r3, [r3, #10]
 80083a2:	461a      	mov	r2, r3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d906      	bls.n	80083b8 <pbuf_copy+0xcc>
 80083aa:	4b32      	ldr	r3, [pc, #200]	@ (8008474 <pbuf_copy+0x188>)
 80083ac:	f240 32da 	movw	r2, #986	@ 0x3da
 80083b0:	4934      	ldr	r1, [pc, #208]	@ (8008484 <pbuf_copy+0x198>)
 80083b2:	4832      	ldr	r0, [pc, #200]	@ (800847c <pbuf_copy+0x190>)
 80083b4:	f00d fbe4 	bl	8015b80 <iprintf>
    if (offset_from >= p_from->len) {
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	895b      	ldrh	r3, [r3, #10]
 80083bc:	461a      	mov	r2, r3
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d304      	bcc.n	80083ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	895b      	ldrh	r3, [r3, #10]
 80083d2:	461a      	mov	r2, r3
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d114      	bne.n	8008404 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10c      	bne.n	8008404 <pbuf_copy+0x118>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <pbuf_copy+0x118>
 80083f0:	4b20      	ldr	r3, [pc, #128]	@ (8008474 <pbuf_copy+0x188>)
 80083f2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80083f6:	4924      	ldr	r1, [pc, #144]	@ (8008488 <pbuf_copy+0x19c>)
 80083f8:	4820      	ldr	r0, [pc, #128]	@ (800847c <pbuf_copy+0x190>)
 80083fa:	f00d fbc1 	bl	8015b80 <iprintf>
 80083fe:	f06f 030f 	mvn.w	r3, #15
 8008402:	e032      	b.n	800846a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d013      	beq.n	8008432 <pbuf_copy+0x146>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	895a      	ldrh	r2, [r3, #10]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	891b      	ldrh	r3, [r3, #8]
 8008412:	429a      	cmp	r2, r3
 8008414:	d10d      	bne.n	8008432 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <pbuf_copy+0x146>
 800841e:	4b15      	ldr	r3, [pc, #84]	@ (8008474 <pbuf_copy+0x188>)
 8008420:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008424:	4919      	ldr	r1, [pc, #100]	@ (800848c <pbuf_copy+0x1a0>)
 8008426:	4815      	ldr	r0, [pc, #84]	@ (800847c <pbuf_copy+0x190>)
 8008428:	f00d fbaa 	bl	8015b80 <iprintf>
 800842c:	f06f 0305 	mvn.w	r3, #5
 8008430:	e01b      	b.n	800846a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <pbuf_copy+0x174>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	895a      	ldrh	r2, [r3, #10]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	891b      	ldrh	r3, [r3, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	d10d      	bne.n	8008460 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <pbuf_copy+0x174>
 800844c:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <pbuf_copy+0x188>)
 800844e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008452:	490e      	ldr	r1, [pc, #56]	@ (800848c <pbuf_copy+0x1a0>)
 8008454:	4809      	ldr	r0, [pc, #36]	@ (800847c <pbuf_copy+0x190>)
 8008456:	f00d fb93 	bl	8015b80 <iprintf>
 800845a:	f06f 0305 	mvn.w	r3, #5
 800845e:	e004      	b.n	800846a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f47f af61 	bne.w	800832a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	08016f04 	.word	0x08016f04
 8008478:	080171ac 	.word	0x080171ac
 800847c:	08016f64 	.word	0x08016f64
 8008480:	080171dc 	.word	0x080171dc
 8008484:	080171f4 	.word	0x080171f4
 8008488:	08017210 	.word	0x08017210
 800848c:	08017220 	.word	0x08017220

08008490 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4611      	mov	r1, r2
 800849c:	461a      	mov	r2, r3
 800849e:	460b      	mov	r3, r1
 80084a0:	80fb      	strh	r3, [r7, #6]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d108      	bne.n	80084c6 <pbuf_copy_partial+0x36>
 80084b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008564 <pbuf_copy_partial+0xd4>)
 80084b6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80084ba:	492b      	ldr	r1, [pc, #172]	@ (8008568 <pbuf_copy_partial+0xd8>)
 80084bc:	482b      	ldr	r0, [pc, #172]	@ (800856c <pbuf_copy_partial+0xdc>)
 80084be:	f00d fb5f 	bl	8015b80 <iprintf>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e04a      	b.n	800855c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d108      	bne.n	80084de <pbuf_copy_partial+0x4e>
 80084cc:	4b25      	ldr	r3, [pc, #148]	@ (8008564 <pbuf_copy_partial+0xd4>)
 80084ce:	f240 420b 	movw	r2, #1035	@ 0x40b
 80084d2:	4927      	ldr	r1, [pc, #156]	@ (8008570 <pbuf_copy_partial+0xe0>)
 80084d4:	4825      	ldr	r0, [pc, #148]	@ (800856c <pbuf_copy_partial+0xdc>)
 80084d6:	f00d fb53 	bl	8015b80 <iprintf>
 80084da:	2300      	movs	r3, #0
 80084dc:	e03e      	b.n	800855c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e034      	b.n	800854e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80084e4:	88bb      	ldrh	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <pbuf_copy_partial+0x70>
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	895b      	ldrh	r3, [r3, #10]
 80084ee:	88ba      	ldrh	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d305      	bcc.n	8008500 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	895b      	ldrh	r3, [r3, #10]
 80084f8:	88ba      	ldrh	r2, [r7, #4]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	80bb      	strh	r3, [r7, #4]
 80084fe:	e023      	b.n	8008548 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	895a      	ldrh	r2, [r3, #10]
 8008504:	88bb      	ldrh	r3, [r7, #4]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800850a:	8b3a      	ldrh	r2, [r7, #24]
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	429a      	cmp	r2, r3
 8008510:	d901      	bls.n	8008516 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008516:	8b7b      	ldrh	r3, [r7, #26]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	18d0      	adds	r0, r2, r3
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	88bb      	ldrh	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	8b3a      	ldrh	r2, [r7, #24]
 8008526:	4619      	mov	r1, r3
 8008528:	f00d fc33 	bl	8015d92 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800852c:	8afa      	ldrh	r2, [r7, #22]
 800852e:	8b3b      	ldrh	r3, [r7, #24]
 8008530:	4413      	add	r3, r2
 8008532:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008534:	8b7a      	ldrh	r2, [r7, #26]
 8008536:	8b3b      	ldrh	r3, [r7, #24]
 8008538:	4413      	add	r3, r2
 800853a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	8b3b      	ldrh	r3, [r7, #24]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <pbuf_copy_partial+0xca>
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1c4      	bne.n	80084e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800855a:	8afb      	ldrh	r3, [r7, #22]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3720      	adds	r7, #32
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	08016f04 	.word	0x08016f04
 8008568:	0801724c 	.word	0x0801724c
 800856c:	08016f64 	.word	0x08016f64
 8008570:	0801726c 	.word	0x0801726c

08008574 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	460b      	mov	r3, r1
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8008582:	897b      	ldrh	r3, [r7, #10]
 8008584:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800858a:	e007      	b.n	800859c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	895b      	ldrh	r3, [r3, #10]
 8008590:	8afa      	ldrh	r2, [r7, #22]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <pbuf_skip_const+0x38>
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	895b      	ldrh	r3, [r3, #10]
 80085a6:	8afa      	ldrh	r2, [r7, #22]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d2ef      	bcs.n	800858c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8afa      	ldrh	r2, [r7, #22]
 80085b6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80085b8:	693b      	ldr	r3, [r7, #16]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	460b      	mov	r3, r1
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80085d4:	897b      	ldrh	r3, [r7, #10]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	4619      	mov	r1, r3
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff ffca 	bl	8008574 <pbuf_skip_const>
 80085e0:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80085e2:	697b      	ldr	r3, [r7, #20]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <pbuf_take+0x30>
 8008608:	4b3a      	ldr	r3, [pc, #232]	@ (80086f4 <pbuf_take+0x108>)
 800860a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800860e:	493a      	ldr	r1, [pc, #232]	@ (80086f8 <pbuf_take+0x10c>)
 8008610:	483a      	ldr	r0, [pc, #232]	@ (80086fc <pbuf_take+0x110>)
 8008612:	f00d fab5 	bl	8015b80 <iprintf>
 8008616:	f06f 030f 	mvn.w	r3, #15
 800861a:	e067      	b.n	80086ec <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <pbuf_take+0x4a>
 8008622:	4b34      	ldr	r3, [pc, #208]	@ (80086f4 <pbuf_take+0x108>)
 8008624:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8008628:	4935      	ldr	r1, [pc, #212]	@ (8008700 <pbuf_take+0x114>)
 800862a:	4834      	ldr	r0, [pc, #208]	@ (80086fc <pbuf_take+0x110>)
 800862c:	f00d faa8 	bl	8015b80 <iprintf>
 8008630:	f06f 030f 	mvn.w	r3, #15
 8008634:	e05a      	b.n	80086ec <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	429a      	cmp	r2, r3
 800863e:	d909      	bls.n	8008654 <pbuf_take+0x68>
 8008640:	4b2c      	ldr	r3, [pc, #176]	@ (80086f4 <pbuf_take+0x108>)
 8008642:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8008646:	492f      	ldr	r1, [pc, #188]	@ (8008704 <pbuf_take+0x118>)
 8008648:	482c      	ldr	r0, [pc, #176]	@ (80086fc <pbuf_take+0x110>)
 800864a:	f00d fa99 	bl	8015b80 <iprintf>
 800864e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008652:	e04b      	b.n	80086ec <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <pbuf_take+0x7e>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <pbuf_take+0x7e>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	891b      	ldrh	r3, [r3, #8]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	429a      	cmp	r2, r3
 8008668:	d902      	bls.n	8008670 <pbuf_take+0x84>
    return ERR_ARG;
 800866a:	f06f 030f 	mvn.w	r3, #15
 800866e:	e03d      	b.n	80086ec <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e028      	b.n	80086c8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <pbuf_take+0x9e>
 800867c:	4b1d      	ldr	r3, [pc, #116]	@ (80086f4 <pbuf_take+0x108>)
 800867e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8008682:	4921      	ldr	r1, [pc, #132]	@ (8008708 <pbuf_take+0x11c>)
 8008684:	481d      	ldr	r0, [pc, #116]	@ (80086fc <pbuf_take+0x110>)
 8008686:	f00d fa7b 	bl	8015b80 <iprintf>
    buf_copy_len = total_copy_len;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	895b      	ldrh	r3, [r3, #10]
 8008692:	461a      	mov	r2, r3
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	4293      	cmp	r3, r2
 8008698:	d902      	bls.n	80086a0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	895b      	ldrh	r3, [r3, #10]
 800869e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	6858      	ldr	r0, [r3, #4]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	4413      	add	r3, r2
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4619      	mov	r1, r3
 80086ae:	f00d fb70 	bl	8015d92 <memcpy>
    total_copy_len -= buf_copy_len;
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	4413      	add	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1d3      	bne.n	8008676 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <pbuf_take+0xf0>
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d006      	beq.n	80086ea <pbuf_take+0xfe>
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <pbuf_take+0x108>)
 80086de:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80086e2:	490a      	ldr	r1, [pc, #40]	@ (800870c <pbuf_take+0x120>)
 80086e4:	4805      	ldr	r0, [pc, #20]	@ (80086fc <pbuf_take+0x110>)
 80086e6:	f00d fa4b 	bl	8015b80 <iprintf>
  return ERR_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3720      	adds	r7, #32
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	08016f04 	.word	0x08016f04
 80086f8:	080172dc 	.word	0x080172dc
 80086fc:	08016f64 	.word	0x08016f64
 8008700:	080172f4 	.word	0x080172f4
 8008704:	08017310 	.word	0x08017310
 8008708:	08017330 	.word	0x08017330
 800870c:	08017348 	.word	0x08017348

08008710 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4611      	mov	r1, r2
 800871c:	461a      	mov	r2, r3
 800871e:	460b      	mov	r3, r1
 8008720:	80fb      	strh	r3, [r7, #6]
 8008722:	4613      	mov	r3, r2
 8008724:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008726:	f107 0210 	add.w	r2, r7, #16
 800872a:	88bb      	ldrh	r3, [r7, #4]
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff ff49 	bl	80085c6 <pbuf_skip>
 8008734:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d047      	beq.n	80087cc <pbuf_take_at+0xbc>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	891b      	ldrh	r3, [r3, #8]
 8008740:	461a      	mov	r2, r3
 8008742:	8a3b      	ldrh	r3, [r7, #16]
 8008744:	4619      	mov	r1, r3
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	440b      	add	r3, r1
 800874a:	429a      	cmp	r2, r3
 800874c:	db3e      	blt.n	80087cc <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	895a      	ldrh	r2, [r3, #10]
 800875a:	8a3b      	ldrh	r3, [r7, #16]
 800875c:	429a      	cmp	r2, r3
 800875e:	d806      	bhi.n	800876e <pbuf_take_at+0x5e>
 8008760:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <pbuf_take_at+0xc8>)
 8008762:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8008766:	491d      	ldr	r1, [pc, #116]	@ (80087dc <pbuf_take_at+0xcc>)
 8008768:	481d      	ldr	r0, [pc, #116]	@ (80087e0 <pbuf_take_at+0xd0>)
 800876a:	f00d fa09 	bl	8015b80 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	895b      	ldrh	r3, [r3, #10]
 8008772:	461a      	mov	r2, r3
 8008774:	8a3b      	ldrh	r3, [r7, #16]
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	429a      	cmp	r2, r3
 800877c:	da05      	bge.n	800878a <pbuf_take_at+0x7a>
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	895a      	ldrh	r2, [r3, #10]
 8008782:	8a3b      	ldrh	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	b29b      	uxth	r3, r3
 8008788:	e000      	b.n	800878c <pbuf_take_at+0x7c>
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	8a3a      	ldrh	r2, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	8a7a      	ldrh	r2, [r7, #18]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f00d faf9 	bl	8015d92 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80087a0:	8b7a      	ldrh	r2, [r7, #26]
 80087a2:	8a7b      	ldrh	r3, [r7, #18]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80087a8:	8a7b      	ldrh	r3, [r7, #18]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80087b0:	8b7b      	ldrh	r3, [r7, #26]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	8b7a      	ldrh	r2, [r7, #26]
 80087bc:	6979      	ldr	r1, [r7, #20]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff ff14 	bl	80085ec <pbuf_take>
 80087c4:	4603      	mov	r3, r0
 80087c6:	e003      	b.n	80087d0 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e001      	b.n	80087d0 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80087cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	08016f04 	.word	0x08016f04
 80087dc:	08017360 	.word	0x08017360
 80087e0:	08016f64 	.word	0x08016f64

080087e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	603a      	str	r2, [r7, #0]
 80087ee:	71fb      	strb	r3, [r7, #7]
 80087f0:	460b      	mov	r3, r1
 80087f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	8919      	ldrh	r1, [r3, #8]
 80087f8:	88ba      	ldrh	r2, [r7, #4]
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff f95f 	bl	8007ac0 <pbuf_alloc>
 8008802:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <pbuf_clone+0x2a>
    return NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	e011      	b.n	8008832 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff fd6b 	bl	80082ec <pbuf_copy>
 8008816:	4603      	mov	r3, r0
 8008818:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800881a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <pbuf_clone+0x4c>
 8008822:	4b06      	ldr	r3, [pc, #24]	@ (800883c <pbuf_clone+0x58>)
 8008824:	f240 5224 	movw	r2, #1316	@ 0x524
 8008828:	4905      	ldr	r1, [pc, #20]	@ (8008840 <pbuf_clone+0x5c>)
 800882a:	4806      	ldr	r0, [pc, #24]	@ (8008844 <pbuf_clone+0x60>)
 800882c:	f00d f9a8 	bl	8015b80 <iprintf>
  return q;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	08016f04 	.word	0x08016f04
 8008840:	08017378 	.word	0x08017378
 8008844:	08016f64 	.word	0x08016f64

08008848 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	807b      	strh	r3, [r7, #2]
 8008854:	4613      	mov	r3, r2
 8008856:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8008858:	f107 020a 	add.w	r2, r7, #10
 800885c:	887b      	ldrh	r3, [r7, #2]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff feb0 	bl	80085c6 <pbuf_skip>
 8008866:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <pbuf_put_at+0x3c>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	895a      	ldrh	r2, [r3, #10]
 8008872:	897b      	ldrh	r3, [r7, #10]
 8008874:	429a      	cmp	r2, r3
 8008876:	d905      	bls.n	8008884 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	897a      	ldrh	r2, [r7, #10]
 800887e:	4413      	add	r3, r2
 8008880:	787a      	ldrb	r2, [r7, #1]
 8008882:	701a      	strb	r2, [r3, #0]
  }
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8008890:	bf00      	nop
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80088a0:	f00d f86e 	bl	8015980 <rand>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	4b01      	ldr	r3, [pc, #4]	@ (80088bc <tcp_init+0x20>)
 80088b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80088b8:	bf00      	nop
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	2000000a 	.word	0x2000000a

080088c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	7d1b      	ldrb	r3, [r3, #20]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d105      	bne.n	80088dc <tcp_free+0x1c>
 80088d0:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <tcp_free+0x2c>)
 80088d2:	22d4      	movs	r2, #212	@ 0xd4
 80088d4:	4906      	ldr	r1, [pc, #24]	@ (80088f0 <tcp_free+0x30>)
 80088d6:	4807      	ldr	r0, [pc, #28]	@ (80088f4 <tcp_free+0x34>)
 80088d8:	f00d f952 	bl	8015b80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	2001      	movs	r0, #1
 80088e0:	f7fe fdf4 	bl	80074cc <memp_free>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	08017404 	.word	0x08017404
 80088f0:	08017434 	.word	0x08017434
 80088f4:	08017448 	.word	0x08017448

080088f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7d1b      	ldrb	r3, [r3, #20]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d105      	bne.n	8008914 <tcp_free_listen+0x1c>
 8008908:	4b06      	ldr	r3, [pc, #24]	@ (8008924 <tcp_free_listen+0x2c>)
 800890a:	22df      	movs	r2, #223	@ 0xdf
 800890c:	4906      	ldr	r1, [pc, #24]	@ (8008928 <tcp_free_listen+0x30>)
 800890e:	4807      	ldr	r0, [pc, #28]	@ (800892c <tcp_free_listen+0x34>)
 8008910:	f00d f936 	bl	8015b80 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	2002      	movs	r0, #2
 8008918:	f7fe fdd8 	bl	80074cc <memp_free>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	08017404 	.word	0x08017404
 8008928:	08017470 	.word	0x08017470
 800892c:	08017448 	.word	0x08017448

08008930 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008934:	f001 f85e 	bl	80099f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008938:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <tcp_tmr+0x28>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	3301      	adds	r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4b05      	ldr	r3, [pc, #20]	@ (8008958 <tcp_tmr+0x28>)
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <tcp_tmr+0x28>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008950:	f000 fd0e 	bl	8009370 <tcp_slowtmr>
  }
}
 8008954:	bf00      	nop
 8008956:	bd80      	pop	{r7, pc}
 8008958:	20003b7d 	.word	0x20003b7d

0800895c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <tcp_remove_listener+0x1c>
 800896c:	4b0d      	ldr	r3, [pc, #52]	@ (80089a4 <tcp_remove_listener+0x48>)
 800896e:	22ff      	movs	r2, #255	@ 0xff
 8008970:	490d      	ldr	r1, [pc, #52]	@ (80089a8 <tcp_remove_listener+0x4c>)
 8008972:	480e      	ldr	r0, [pc, #56]	@ (80089ac <tcp_remove_listener+0x50>)
 8008974:	f00d f904 	bl	8015b80 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e00a      	b.n	8008994 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	429a      	cmp	r2, r3
 8008986:	d102      	bne.n	800898e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f1      	bne.n	800897e <tcp_remove_listener+0x22>
    }
  }
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	08017404 	.word	0x08017404
 80089a8:	0801748c 	.word	0x0801748c
 80089ac:	08017448 	.word	0x08017448

080089b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <tcp_listen_closed+0x1c>
 80089be:	4b14      	ldr	r3, [pc, #80]	@ (8008a10 <tcp_listen_closed+0x60>)
 80089c0:	f240 1211 	movw	r2, #273	@ 0x111
 80089c4:	4913      	ldr	r1, [pc, #76]	@ (8008a14 <tcp_listen_closed+0x64>)
 80089c6:	4814      	ldr	r0, [pc, #80]	@ (8008a18 <tcp_listen_closed+0x68>)
 80089c8:	f00d f8da 	bl	8015b80 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7d1b      	ldrb	r3, [r3, #20]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d006      	beq.n	80089e2 <tcp_listen_closed+0x32>
 80089d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008a10 <tcp_listen_closed+0x60>)
 80089d6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80089da:	4910      	ldr	r1, [pc, #64]	@ (8008a1c <tcp_listen_closed+0x6c>)
 80089dc:	480e      	ldr	r0, [pc, #56]	@ (8008a18 <tcp_listen_closed+0x68>)
 80089de:	f00d f8cf 	bl	8015b80 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80089e2:	2301      	movs	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
 80089e6:	e00b      	b.n	8008a00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80089e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008a20 <tcp_listen_closed+0x70>)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff ffb1 	bl	800895c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d9f0      	bls.n	80089e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	08017404 	.word	0x08017404
 8008a14:	080174b4 	.word	0x080174b4
 8008a18:	08017448 	.word	0x08017448
 8008a1c:	080174c0 	.word	0x080174c0
 8008a20:	08019954 	.word	0x08019954

08008a24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008a24:	b5b0      	push	{r4, r5, r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af04      	add	r7, sp, #16
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <tcp_close_shutdown+0x20>
 8008a36:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <tcp_close_shutdown+0x1a0>)
 8008a38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008a3c:	4962      	ldr	r1, [pc, #392]	@ (8008bc8 <tcp_close_shutdown+0x1a4>)
 8008a3e:	4863      	ldr	r0, [pc, #396]	@ (8008bcc <tcp_close_shutdown+0x1a8>)
 8008a40:	f00d f89e 	bl	8015b80 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d066      	beq.n	8008b18 <tcp_close_shutdown+0xf4>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7d1b      	ldrb	r3, [r3, #20]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d003      	beq.n	8008a5a <tcp_close_shutdown+0x36>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7d1b      	ldrb	r3, [r3, #20]
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	d15e      	bne.n	8008b18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <tcp_close_shutdown+0x48>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a66:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008a6a:	d055      	beq.n	8008b18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8b5b      	ldrh	r3, [r3, #26]
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <tcp_close_shutdown+0x62>
 8008a78:	4b52      	ldr	r3, [pc, #328]	@ (8008bc4 <tcp_close_shutdown+0x1a0>)
 8008a7a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008a7e:	4954      	ldr	r1, [pc, #336]	@ (8008bd0 <tcp_close_shutdown+0x1ac>)
 8008a80:	4852      	ldr	r0, [pc, #328]	@ (8008bcc <tcp_close_shutdown+0x1a8>)
 8008a82:	f00d f87d 	bl	8015b80 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008a8e:	687d      	ldr	r5, [r7, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	8ad2      	ldrh	r2, [r2, #22]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	8b09      	ldrh	r1, [r1, #24]
 8008a9c:	9102      	str	r1, [sp, #8]
 8008a9e:	9201      	str	r2, [sp, #4]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	462b      	mov	r3, r5
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f005 feaf 	bl	800e80c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fb98 	bl	800a1e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008ab4:	4b47      	ldr	r3, [pc, #284]	@ (8008bd4 <tcp_close_shutdown+0x1b0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d105      	bne.n	8008aca <tcp_close_shutdown+0xa6>
 8008abe:	4b45      	ldr	r3, [pc, #276]	@ (8008bd4 <tcp_close_shutdown+0x1b0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a43      	ldr	r2, [pc, #268]	@ (8008bd4 <tcp_close_shutdown+0x1b0>)
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e013      	b.n	8008af2 <tcp_close_shutdown+0xce>
 8008aca:	4b42      	ldr	r3, [pc, #264]	@ (8008bd4 <tcp_close_shutdown+0x1b0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e00c      	b.n	8008aec <tcp_close_shutdown+0xc8>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d104      	bne.n	8008ae6 <tcp_close_shutdown+0xc2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	60da      	str	r2, [r3, #12]
 8008ae4:	e005      	b.n	8008af2 <tcp_close_shutdown+0xce>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1ef      	bne.n	8008ad2 <tcp_close_shutdown+0xae>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	60da      	str	r2, [r3, #12]
 8008af8:	4b37      	ldr	r3, [pc, #220]	@ (8008bd8 <tcp_close_shutdown+0x1b4>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008afe:	4b37      	ldr	r3, [pc, #220]	@ (8008bdc <tcp_close_shutdown+0x1b8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d102      	bne.n	8008b0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008b08:	f004 f8b6 	bl	800cc78 <tcp_trigger_input_pcb_close>
 8008b0c:	e002      	b.n	8008b14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fed6 	bl	80088c0 <tcp_free>
      }
      return ERR_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e050      	b.n	8008bba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d03b      	beq.n	8008b98 <tcp_close_shutdown+0x174>
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	dc44      	bgt.n	8008bae <tcp_close_shutdown+0x18a>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <tcp_close_shutdown+0x10a>
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d02a      	beq.n	8008b82 <tcp_close_shutdown+0x15e>
 8008b2c:	e03f      	b.n	8008bae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	8adb      	ldrh	r3, [r3, #22]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d021      	beq.n	8008b7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b36:	4b2a      	ldr	r3, [pc, #168]	@ (8008be0 <tcp_close_shutdown+0x1bc>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d105      	bne.n	8008b4c <tcp_close_shutdown+0x128>
 8008b40:	4b27      	ldr	r3, [pc, #156]	@ (8008be0 <tcp_close_shutdown+0x1bc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4a26      	ldr	r2, [pc, #152]	@ (8008be0 <tcp_close_shutdown+0x1bc>)
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	e013      	b.n	8008b74 <tcp_close_shutdown+0x150>
 8008b4c:	4b24      	ldr	r3, [pc, #144]	@ (8008be0 <tcp_close_shutdown+0x1bc>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60bb      	str	r3, [r7, #8]
 8008b52:	e00c      	b.n	8008b6e <tcp_close_shutdown+0x14a>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d104      	bne.n	8008b68 <tcp_close_shutdown+0x144>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	e005      	b.n	8008b74 <tcp_close_shutdown+0x150>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1ef      	bne.n	8008b54 <tcp_close_shutdown+0x130>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fea0 	bl	80088c0 <tcp_free>
      break;
 8008b80:	e01a      	b.n	8008bb8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff ff14 	bl	80089b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4816      	ldr	r0, [pc, #88]	@ (8008be4 <tcp_close_shutdown+0x1c0>)
 8008b8c:	f001 fb7a 	bl	800a284 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff feb1 	bl	80088f8 <tcp_free_listen>
      break;
 8008b96:	e00f      	b.n	8008bb8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	480e      	ldr	r0, [pc, #56]	@ (8008bd4 <tcp_close_shutdown+0x1b0>)
 8008b9c:	f001 fb72 	bl	800a284 <tcp_pcb_remove>
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd8 <tcp_close_shutdown+0x1b4>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff fe8a 	bl	80088c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008bac:	e004      	b.n	8008bb8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f81a 	bl	8008be8 <tcp_close_shutdown_fin>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	e000      	b.n	8008bba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08017404 	.word	0x08017404
 8008bc8:	080174d8 	.word	0x080174d8
 8008bcc:	08017448 	.word	0x08017448
 8008bd0:	080174f8 	.word	0x080174f8
 8008bd4:	20003b74 	.word	0x20003b74
 8008bd8:	20003b7c 	.word	0x20003b7c
 8008bdc:	20003bb4 	.word	0x20003bb4
 8008be0:	20003b6c 	.word	0x20003b6c
 8008be4:	20003b70 	.word	0x20003b70

08008be8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <tcp_close_shutdown_fin+0x1c>
 8008bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8008cb0 <tcp_close_shutdown_fin+0xc8>)
 8008bf8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008bfc:	492d      	ldr	r1, [pc, #180]	@ (8008cb4 <tcp_close_shutdown_fin+0xcc>)
 8008bfe:	482e      	ldr	r0, [pc, #184]	@ (8008cb8 <tcp_close_shutdown_fin+0xd0>)
 8008c00:	f00c ffbe 	bl	8015b80 <iprintf>

  switch (pcb->state) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	7d1b      	ldrb	r3, [r3, #20]
 8008c08:	2b07      	cmp	r3, #7
 8008c0a:	d020      	beq.n	8008c4e <tcp_close_shutdown_fin+0x66>
 8008c0c:	2b07      	cmp	r3, #7
 8008c0e:	dc2b      	bgt.n	8008c68 <tcp_close_shutdown_fin+0x80>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d002      	beq.n	8008c1a <tcp_close_shutdown_fin+0x32>
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d00d      	beq.n	8008c34 <tcp_close_shutdown_fin+0x4c>
 8008c18:	e026      	b.n	8008c68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f004 febc 	bl	800d998 <tcp_send_fin>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11f      	bne.n	8008c6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2205      	movs	r2, #5
 8008c30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c32:	e01b      	b.n	8008c6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f004 feaf 	bl	800d998 <tcp_send_fin>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d114      	bne.n	8008c70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2205      	movs	r2, #5
 8008c4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c4c:	e010      	b.n	8008c70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f004 fea2 	bl	800d998 <tcp_send_fin>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2209      	movs	r2, #9
 8008c64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008c66:	e005      	b.n	8008c74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e01c      	b.n	8008ca6 <tcp_close_shutdown_fin+0xbe>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e002      	b.n	8008c76 <tcp_close_shutdown_fin+0x8e>
      break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <tcp_close_shutdown_fin+0x8e>
      break;
 8008c74:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f004 ffda 	bl	800dc38 <tcp_output>
 8008c84:	e00d      	b.n	8008ca2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c8e:	d108      	bne.n	8008ca2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	8b5b      	ldrh	r3, [r3, #26]
 8008c94:	f043 0308 	orr.w	r3, r3, #8
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e001      	b.n	8008ca6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	08017404 	.word	0x08017404
 8008cb4:	080174b4 	.word	0x080174b4
 8008cb8:	08017448 	.word	0x08017448

08008cbc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <tcp_close+0x22>
 8008cca:	4b0f      	ldr	r3, [pc, #60]	@ (8008d08 <tcp_close+0x4c>)
 8008ccc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008cd0:	490e      	ldr	r1, [pc, #56]	@ (8008d0c <tcp_close+0x50>)
 8008cd2:	480f      	ldr	r0, [pc, #60]	@ (8008d10 <tcp_close+0x54>)
 8008cd4:	f00c ff54 	bl	8015b80 <iprintf>
 8008cd8:	f06f 030f 	mvn.w	r3, #15
 8008cdc:	e00f      	b.n	8008cfe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7d1b      	ldrb	r3, [r3, #20]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d006      	beq.n	8008cf4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	8b5b      	ldrh	r3, [r3, #26]
 8008cea:	f043 0310 	orr.w	r3, r3, #16
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fe94 	bl	8008a24 <tcp_close_shutdown>
 8008cfc:	4603      	mov	r3, r0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08017404 	.word	0x08017404
 8008d0c:	08017514 	.word	0x08017514
 8008d10:	08017448 	.word	0x08017448

08008d14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08e      	sub	sp, #56	@ 0x38
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d107      	bne.n	8008d34 <tcp_abandon+0x20>
 8008d24:	4b52      	ldr	r3, [pc, #328]	@ (8008e70 <tcp_abandon+0x15c>)
 8008d26:	f240 223d 	movw	r2, #573	@ 0x23d
 8008d2a:	4952      	ldr	r1, [pc, #328]	@ (8008e74 <tcp_abandon+0x160>)
 8008d2c:	4852      	ldr	r0, [pc, #328]	@ (8008e78 <tcp_abandon+0x164>)
 8008d2e:	f00c ff27 	bl	8015b80 <iprintf>
 8008d32:	e099      	b.n	8008e68 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7d1b      	ldrb	r3, [r3, #20]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <tcp_abandon+0x36>
 8008d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8008e70 <tcp_abandon+0x15c>)
 8008d3e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008d42:	494e      	ldr	r1, [pc, #312]	@ (8008e7c <tcp_abandon+0x168>)
 8008d44:	484c      	ldr	r0, [pc, #304]	@ (8008e78 <tcp_abandon+0x164>)
 8008d46:	f00c ff1b 	bl	8015b80 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7d1b      	ldrb	r3, [r3, #20]
 8008d4e:	2b0a      	cmp	r3, #10
 8008d50:	d107      	bne.n	8008d62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	484a      	ldr	r0, [pc, #296]	@ (8008e80 <tcp_abandon+0x16c>)
 8008d56:	f001 fa95 	bl	800a284 <tcp_pcb_remove>
    tcp_free(pcb);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff fdb0 	bl	80088c0 <tcp_free>
 8008d60:	e082      	b.n	8008e68 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7d1b      	ldrb	r3, [r3, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d126      	bne.n	8008dda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8adb      	ldrh	r3, [r3, #22]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d02e      	beq.n	8008df2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d94:	4b3b      	ldr	r3, [pc, #236]	@ (8008e84 <tcp_abandon+0x170>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d105      	bne.n	8008daa <tcp_abandon+0x96>
 8008d9e:	4b39      	ldr	r3, [pc, #228]	@ (8008e84 <tcp_abandon+0x170>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4a37      	ldr	r2, [pc, #220]	@ (8008e84 <tcp_abandon+0x170>)
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	e013      	b.n	8008dd2 <tcp_abandon+0xbe>
 8008daa:	4b36      	ldr	r3, [pc, #216]	@ (8008e84 <tcp_abandon+0x170>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e00c      	b.n	8008dcc <tcp_abandon+0xb8>
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d104      	bne.n	8008dc6 <tcp_abandon+0xb2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	60da      	str	r2, [r3, #12]
 8008dc4:	e005      	b.n	8008dd2 <tcp_abandon+0xbe>
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1ef      	bne.n	8008db2 <tcp_abandon+0x9e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60da      	str	r2, [r3, #12]
 8008dd8:	e00b      	b.n	8008df2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8adb      	ldrh	r3, [r3, #22]
 8008de2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008de4:	6879      	ldr	r1, [r7, #4]
 8008de6:	4828      	ldr	r0, [pc, #160]	@ (8008e88 <tcp_abandon+0x174>)
 8008de8:	f001 fa4c 	bl	800a284 <tcp_pcb_remove>
 8008dec:	4b27      	ldr	r3, [pc, #156]	@ (8008e8c <tcp_abandon+0x178>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fed8 	bl	8009bb4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fecf 	bl	8009bb4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fec6 	bl	8009bb4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00e      	beq.n	8008e4c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	8b12      	ldrh	r2, [r2, #24]
 8008e38:	9202      	str	r2, [sp, #8]
 8008e3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008e3c:	9201      	str	r2, [sp, #4]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	460b      	mov	r3, r1
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	69b9      	ldr	r1, [r7, #24]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f005 fce0 	bl	800e80c <tcp_rst>
    }
    last_state = pcb->state;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7d1b      	ldrb	r3, [r3, #20]
 8008e50:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff fd34 	bl	80088c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <tcp_abandon+0x154>
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f06f 010c 	mvn.w	r1, #12
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	4798      	blx	r3
  }
}
 8008e68:	3728      	adds	r7, #40	@ 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	08017404 	.word	0x08017404
 8008e74:	08017548 	.word	0x08017548
 8008e78:	08017448 	.word	0x08017448
 8008e7c:	08017564 	.word	0x08017564
 8008e80:	20003b78 	.word	0x20003b78
 8008e84:	20003b6c 	.word	0x20003b6c
 8008e88:	20003b74 	.word	0x20003b74
 8008e8c:	20003b7c 	.word	0x20003b7c

08008e90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008e98:	2101      	movs	r1, #1
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff ff3a 	bl	8008d14 <tcp_abandon>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8008fbc <tcp_bind+0x114>)
 8008ec2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d109      	bne.n	8008ede <tcp_bind+0x36>
 8008eca:	4b3d      	ldr	r3, [pc, #244]	@ (8008fc0 <tcp_bind+0x118>)
 8008ecc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008ed0:	493c      	ldr	r1, [pc, #240]	@ (8008fc4 <tcp_bind+0x11c>)
 8008ed2:	483d      	ldr	r0, [pc, #244]	@ (8008fc8 <tcp_bind+0x120>)
 8008ed4:	f00c fe54 	bl	8015b80 <iprintf>
 8008ed8:	f06f 030f 	mvn.w	r3, #15
 8008edc:	e06a      	b.n	8008fb4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	7d1b      	ldrb	r3, [r3, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <tcp_bind+0x52>
 8008ee6:	4b36      	ldr	r3, [pc, #216]	@ (8008fc0 <tcp_bind+0x118>)
 8008ee8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8008eec:	4937      	ldr	r1, [pc, #220]	@ (8008fcc <tcp_bind+0x124>)
 8008eee:	4836      	ldr	r0, [pc, #216]	@ (8008fc8 <tcp_bind+0x120>)
 8008ef0:	f00c fe46 	bl	8015b80 <iprintf>
 8008ef4:	f06f 0305 	mvn.w	r3, #5
 8008ef8:	e05c      	b.n	8008fb4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008f00:	f000 f9f0 	bl	80092e4 <tcp_new_port>
 8008f04:	4603      	mov	r3, r0
 8008f06:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d135      	bne.n	8008f7a <tcp_bind+0xd2>
      return ERR_BUF;
 8008f0e:	f06f 0301 	mvn.w	r3, #1
 8008f12:	e04f      	b.n	8008fb4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e02b      	b.n	8008f72 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8008fd0 <tcp_bind+0x128>)
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	e01e      	b.n	8008f66 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	8adb      	ldrh	r3, [r3, #22]
 8008f2c:	88fa      	ldrh	r2, [r7, #6]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d116      	bne.n	8008f60 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008f32:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00c      	beq.n	8008f5a <tcp_bind+0xb2>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d102      	bne.n	8008f60 <tcp_bind+0xb8>
              return ERR_USE;
 8008f5a:	f06f 0307 	mvn.w	r3, #7
 8008f5e:	e029      	b.n	8008fb4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1dd      	bne.n	8008f28 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	dbcf      	blt.n	8008f1a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00c      	beq.n	8008f9a <tcp_bind+0xf2>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d008      	beq.n	8008f9a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <tcp_bind+0xec>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	e000      	b.n	8008f96 <tcp_bind+0xee>
 8008f94:	2300      	movs	r3, #0
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <tcp_bind+0x12c>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8008fd4 <tcp_bind+0x12c>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	f005 fdef 	bl	800eb90 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	08019994 	.word	0x08019994
 8008fc0:	08017404 	.word	0x08017404
 8008fc4:	08017598 	.word	0x08017598
 8008fc8:	08017448 	.word	0x08017448
 8008fcc:	080175b0 	.word	0x080175b0
 8008fd0:	08019954 	.word	0x08019954
 8008fd4:	20003b6c 	.word	0x20003b6c

08008fd8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <tcp_accept_null+0x22>
 8008fec:	4b07      	ldr	r3, [pc, #28]	@ (800900c <tcp_accept_null+0x34>)
 8008fee:	f240 320f 	movw	r2, #783	@ 0x30f
 8008ff2:	4907      	ldr	r1, [pc, #28]	@ (8009010 <tcp_accept_null+0x38>)
 8008ff4:	4807      	ldr	r0, [pc, #28]	@ (8009014 <tcp_accept_null+0x3c>)
 8008ff6:	f00c fdc3 	bl	8015b80 <iprintf>

  tcp_abort(pcb);
 8008ffa:	68b8      	ldr	r0, [r7, #8]
 8008ffc:	f7ff ff48 	bl	8008e90 <tcp_abort>

  return ERR_ABRT;
 8009000:	f06f 030c 	mvn.w	r3, #12
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	08017404 	.word	0x08017404
 8009010:	080175d8 	.word	0x080175d8
 8009014:	08017448 	.word	0x08017448

08009018 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	2200      	movs	r2, #0
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f806 	bl	800903c <tcp_listen_with_backlog_and_err>
 8009030:	4603      	mov	r3, r0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <tcp_listen_with_backlog_and_err+0x2c>
 8009054:	4b47      	ldr	r3, [pc, #284]	@ (8009174 <tcp_listen_with_backlog_and_err+0x138>)
 8009056:	f240 3259 	movw	r2, #857	@ 0x359
 800905a:	4947      	ldr	r1, [pc, #284]	@ (8009178 <tcp_listen_with_backlog_and_err+0x13c>)
 800905c:	4847      	ldr	r0, [pc, #284]	@ (800917c <tcp_listen_with_backlog_and_err+0x140>)
 800905e:	f00c fd8f 	bl	8015b80 <iprintf>
 8009062:	23f0      	movs	r3, #240	@ 0xf0
 8009064:	76fb      	strb	r3, [r7, #27]
 8009066:	e079      	b.n	800915c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	7d1b      	ldrb	r3, [r3, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <tcp_listen_with_backlog_and_err+0x48>
 8009070:	4b40      	ldr	r3, [pc, #256]	@ (8009174 <tcp_listen_with_backlog_and_err+0x138>)
 8009072:	f240 325a 	movw	r2, #858	@ 0x35a
 8009076:	4942      	ldr	r1, [pc, #264]	@ (8009180 <tcp_listen_with_backlog_and_err+0x144>)
 8009078:	4840      	ldr	r0, [pc, #256]	@ (800917c <tcp_listen_with_backlog_and_err+0x140>)
 800907a:	f00c fd81 	bl	8015b80 <iprintf>
 800907e:	23f1      	movs	r3, #241	@ 0xf1
 8009080:	76fb      	strb	r3, [r7, #27]
 8009082:	e06b      	b.n	800915c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	7d1b      	ldrb	r3, [r3, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d104      	bne.n	8009096 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009090:	23f7      	movs	r3, #247	@ 0xf7
 8009092:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009094:	e062      	b.n	800915c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009096:	2002      	movs	r0, #2
 8009098:	f7fe f9c0 	bl	800741c <memp_malloc>
 800909c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80090a4:	23ff      	movs	r3, #255	@ 0xff
 80090a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80090a8:	e058      	b.n	800915c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8ada      	ldrh	r2, [r3, #22]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2201      	movs	r2, #1
 80090be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	7d5a      	ldrb	r2, [r3, #21]
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	7a5a      	ldrb	r2, [r3, #9]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2200      	movs	r2, #0
 80090d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	7ada      	ldrb	r2, [r3, #11]
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	7a9a      	ldrb	r2, [r3, #10]
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8adb      	ldrh	r3, [r3, #22]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d021      	beq.n	800913a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80090f6:	4b23      	ldr	r3, [pc, #140]	@ (8009184 <tcp_listen_with_backlog_and_err+0x148>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d105      	bne.n	800910c <tcp_listen_with_backlog_and_err+0xd0>
 8009100:	4b20      	ldr	r3, [pc, #128]	@ (8009184 <tcp_listen_with_backlog_and_err+0x148>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	4a1f      	ldr	r2, [pc, #124]	@ (8009184 <tcp_listen_with_backlog_and_err+0x148>)
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	e013      	b.n	8009134 <tcp_listen_with_backlog_and_err+0xf8>
 800910c:	4b1d      	ldr	r3, [pc, #116]	@ (8009184 <tcp_listen_with_backlog_and_err+0x148>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	e00c      	b.n	800912e <tcp_listen_with_backlog_and_err+0xf2>
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	429a      	cmp	r2, r3
 800911c:	d104      	bne.n	8009128 <tcp_listen_with_backlog_and_err+0xec>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	60da      	str	r2, [r3, #12]
 8009126:	e005      	b.n	8009134 <tcp_listen_with_backlog_and_err+0xf8>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1ef      	bne.n	8009114 <tcp_listen_with_backlog_and_err+0xd8>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fbc0 	bl	80088c0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	4a11      	ldr	r2, [pc, #68]	@ (8009188 <tcp_listen_with_backlog_and_err+0x14c>)
 8009144:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009146:	4b11      	ldr	r3, [pc, #68]	@ (800918c <tcp_listen_with_backlog_and_err+0x150>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	60da      	str	r2, [r3, #12]
 800914e:	4a0f      	ldr	r2, [pc, #60]	@ (800918c <tcp_listen_with_backlog_and_err+0x150>)
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	f005 fd1c 	bl	800eb90 <tcp_timer_needed>
  res = ERR_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7efa      	ldrb	r2, [r7, #27]
 8009166:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009168:	69fb      	ldr	r3, [r7, #28]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	08017404 	.word	0x08017404
 8009178:	080175f8 	.word	0x080175f8
 800917c:	08017448 	.word	0x08017448
 8009180:	08017628 	.word	0x08017628
 8009184:	20003b6c 	.word	0x20003b6c
 8009188:	08008fd9 	.word	0x08008fd9
 800918c:	20003b70 	.word	0x20003b70

08009190 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <tcp_update_rcv_ann_wnd+0x1c>
 800919e:	4b25      	ldr	r3, [pc, #148]	@ (8009234 <tcp_update_rcv_ann_wnd+0xa4>)
 80091a0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80091a4:	4924      	ldr	r1, [pc, #144]	@ (8009238 <tcp_update_rcv_ann_wnd+0xa8>)
 80091a6:	4825      	ldr	r0, [pc, #148]	@ (800923c <tcp_update_rcv_ann_wnd+0xac>)
 80091a8:	f00c fcea 	bl	8015b80 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80091b4:	4413      	add	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80091c0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80091c4:	bf28      	it	cs
 80091c6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80091ca:	b292      	uxth	r2, r2
 80091cc:	4413      	add	r3, r2
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db08      	blt.n	80091e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	e020      	b.n	800922a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd03      	ble.n	80091fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091fc:	e014      	b.n	8009228 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009210:	d306      	bcc.n	8009220 <tcp_update_rcv_ann_wnd+0x90>
 8009212:	4b08      	ldr	r3, [pc, #32]	@ (8009234 <tcp_update_rcv_ann_wnd+0xa4>)
 8009214:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009218:	4909      	ldr	r1, [pc, #36]	@ (8009240 <tcp_update_rcv_ann_wnd+0xb0>)
 800921a:	4808      	ldr	r0, [pc, #32]	@ (800923c <tcp_update_rcv_ann_wnd+0xac>)
 800921c:	f00c fcb0 	bl	8015b80 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	b29a      	uxth	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009228:	2300      	movs	r3, #0
  }
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	08017404 	.word	0x08017404
 8009238:	08017660 	.word	0x08017660
 800923c:	08017448 	.word	0x08017448
 8009240:	08017684 	.word	0x08017684

08009244 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d107      	bne.n	8009266 <tcp_recved+0x22>
 8009256:	4b1f      	ldr	r3, [pc, #124]	@ (80092d4 <tcp_recved+0x90>)
 8009258:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800925c:	491e      	ldr	r1, [pc, #120]	@ (80092d8 <tcp_recved+0x94>)
 800925e:	481f      	ldr	r0, [pc, #124]	@ (80092dc <tcp_recved+0x98>)
 8009260:	f00c fc8e 	bl	8015b80 <iprintf>
 8009264:	e032      	b.n	80092cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	7d1b      	ldrb	r3, [r3, #20]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d106      	bne.n	800927c <tcp_recved+0x38>
 800926e:	4b19      	ldr	r3, [pc, #100]	@ (80092d4 <tcp_recved+0x90>)
 8009270:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009274:	491a      	ldr	r1, [pc, #104]	@ (80092e0 <tcp_recved+0x9c>)
 8009276:	4819      	ldr	r0, [pc, #100]	@ (80092dc <tcp_recved+0x98>)
 8009278:	f00c fc82 	bl	8015b80 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009280:	887b      	ldrh	r3, [r7, #2]
 8009282:	4413      	add	r3, r2
 8009284:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009286:	89fb      	ldrh	r3, [r7, #14]
 8009288:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800928c:	d804      	bhi.n	8009298 <tcp_recved+0x54>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009292:	89fa      	ldrh	r2, [r7, #14]
 8009294:	429a      	cmp	r2, r3
 8009296:	d204      	bcs.n	80092a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800929e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80092a0:	e002      	b.n	80092a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	89fa      	ldrh	r2, [r7, #14]
 80092a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ff71 	bl	8009190 <tcp_update_rcv_ann_wnd>
 80092ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80092b6:	d309      	bcc.n	80092cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8b5b      	ldrh	r3, [r3, #26]
 80092bc:	f043 0302 	orr.w	r3, r3, #2
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f004 fcb6 	bl	800dc38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08017404 	.word	0x08017404
 80092d8:	080176a0 	.word	0x080176a0
 80092dc:	08017448 	.word	0x08017448
 80092e0:	080176b8 	.word	0x080176b8

080092e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80092ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009368 <tcp_new_port+0x84>)
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009368 <tcp_new_port+0x84>)
 80092f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80092fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009368 <tcp_new_port+0x84>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009302:	4293      	cmp	r3, r2
 8009304:	d103      	bne.n	800930e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009306:	4b18      	ldr	r3, [pc, #96]	@ (8009368 <tcp_new_port+0x84>)
 8009308:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800930c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800930e:	2300      	movs	r3, #0
 8009310:	71fb      	strb	r3, [r7, #7]
 8009312:	e01e      	b.n	8009352 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	4a15      	ldr	r2, [pc, #84]	@ (800936c <tcp_new_port+0x88>)
 8009318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	e011      	b.n	8009346 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	8ada      	ldrh	r2, [r3, #22]
 8009326:	4b10      	ldr	r3, [pc, #64]	@ (8009368 <tcp_new_port+0x84>)
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d108      	bne.n	8009340 <tcp_new_port+0x5c>
        n++;
 800932e:	88bb      	ldrh	r3, [r7, #4]
 8009330:	3301      	adds	r3, #1
 8009332:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009334:	88bb      	ldrh	r3, [r7, #4]
 8009336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800933a:	d3d8      	bcc.n	80092ee <tcp_new_port+0xa>
          return 0;
 800933c:	2300      	movs	r3, #0
 800933e:	e00d      	b.n	800935c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1ea      	bne.n	8009322 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	3301      	adds	r3, #1
 8009350:	71fb      	strb	r3, [r7, #7]
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	2b03      	cmp	r3, #3
 8009356:	d9dd      	bls.n	8009314 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009358:	4b03      	ldr	r3, [pc, #12]	@ (8009368 <tcp_new_port+0x84>)
 800935a:	881b      	ldrh	r3, [r3, #0]
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	2000000a 	.word	0x2000000a
 800936c:	08019954 	.word	0x08019954

08009370 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009370:	b5b0      	push	{r4, r5, r7, lr}
 8009372:	b090      	sub	sp, #64	@ 0x40
 8009374:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800937c:	4b95      	ldr	r3, [pc, #596]	@ (80095d4 <tcp_slowtmr+0x264>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	4a94      	ldr	r2, [pc, #592]	@ (80095d4 <tcp_slowtmr+0x264>)
 8009384:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009386:	4b94      	ldr	r3, [pc, #592]	@ (80095d8 <tcp_slowtmr+0x268>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	4b92      	ldr	r3, [pc, #584]	@ (80095d8 <tcp_slowtmr+0x268>)
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	e000      	b.n	8009396 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009394:	bf00      	nop
  prev = NULL;
 8009396:	2300      	movs	r3, #0
 8009398:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800939a:	4b90      	ldr	r3, [pc, #576]	@ (80095dc <tcp_slowtmr+0x26c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80093a0:	e29f      	b.n	80098e2 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80093a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a4:	7d1b      	ldrb	r3, [r3, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <tcp_slowtmr+0x48>
 80093aa:	4b8d      	ldr	r3, [pc, #564]	@ (80095e0 <tcp_slowtmr+0x270>)
 80093ac:	f240 42be 	movw	r2, #1214	@ 0x4be
 80093b0:	498c      	ldr	r1, [pc, #560]	@ (80095e4 <tcp_slowtmr+0x274>)
 80093b2:	488d      	ldr	r0, [pc, #564]	@ (80095e8 <tcp_slowtmr+0x278>)
 80093b4:	f00c fbe4 	bl	8015b80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d106      	bne.n	80093ce <tcp_slowtmr+0x5e>
 80093c0:	4b87      	ldr	r3, [pc, #540]	@ (80095e0 <tcp_slowtmr+0x270>)
 80093c2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80093c6:	4989      	ldr	r1, [pc, #548]	@ (80095ec <tcp_slowtmr+0x27c>)
 80093c8:	4887      	ldr	r0, [pc, #540]	@ (80095e8 <tcp_slowtmr+0x278>)
 80093ca:	f00c fbd9 	bl	8015b80 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	7d1b      	ldrb	r3, [r3, #20]
 80093d2:	2b0a      	cmp	r3, #10
 80093d4:	d106      	bne.n	80093e4 <tcp_slowtmr+0x74>
 80093d6:	4b82      	ldr	r3, [pc, #520]	@ (80095e0 <tcp_slowtmr+0x270>)
 80093d8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80093dc:	4984      	ldr	r1, [pc, #528]	@ (80095f0 <tcp_slowtmr+0x280>)
 80093de:	4882      	ldr	r0, [pc, #520]	@ (80095e8 <tcp_slowtmr+0x278>)
 80093e0:	f00c fbce 	bl	8015b80 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	7f9a      	ldrb	r2, [r3, #30]
 80093e8:	4b7b      	ldr	r3, [pc, #492]	@ (80095d8 <tcp_slowtmr+0x268>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d105      	bne.n	80093fc <tcp_slowtmr+0x8c>
      prev = pcb;
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80093f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80093fa:	e272      	b.n	80098e2 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 80093fc:	4b76      	ldr	r3, [pc, #472]	@ (80095d8 <tcp_slowtmr+0x268>)
 80093fe:	781a      	ldrb	r2, [r3, #0]
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	7d1b      	ldrb	r3, [r3, #20]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d10a      	bne.n	800942e <tcp_slowtmr+0xbe>
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800941e:	2b05      	cmp	r3, #5
 8009420:	d905      	bls.n	800942e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009426:	3301      	adds	r3, #1
 8009428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800942c:	e11e      	b.n	800966c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009434:	2b0b      	cmp	r3, #11
 8009436:	d905      	bls.n	8009444 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800943c:	3301      	adds	r3, #1
 800943e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009442:	e113      	b.n	800966c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009446:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800944a:	2b00      	cmp	r3, #0
 800944c:	d075      	beq.n	800953a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800944e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009452:	2b00      	cmp	r3, #0
 8009454:	d006      	beq.n	8009464 <tcp_slowtmr+0xf4>
 8009456:	4b62      	ldr	r3, [pc, #392]	@ (80095e0 <tcp_slowtmr+0x270>)
 8009458:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800945c:	4965      	ldr	r1, [pc, #404]	@ (80095f4 <tcp_slowtmr+0x284>)
 800945e:	4862      	ldr	r0, [pc, #392]	@ (80095e8 <tcp_slowtmr+0x278>)
 8009460:	f00c fb8e 	bl	8015b80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <tcp_slowtmr+0x10a>
 800946c:	4b5c      	ldr	r3, [pc, #368]	@ (80095e0 <tcp_slowtmr+0x270>)
 800946e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009472:	4961      	ldr	r1, [pc, #388]	@ (80095f8 <tcp_slowtmr+0x288>)
 8009474:	485c      	ldr	r0, [pc, #368]	@ (80095e8 <tcp_slowtmr+0x278>)
 8009476:	f00c fb83 	bl	8015b80 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009480:	2b0b      	cmp	r3, #11
 8009482:	d905      	bls.n	8009490 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009488:	3301      	adds	r3, #1
 800948a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800948e:	e0ed      	b.n	800966c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009492:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009496:	3b01      	subs	r3, #1
 8009498:	4a58      	ldr	r2, [pc, #352]	@ (80095fc <tcp_slowtmr+0x28c>)
 800949a:	5cd3      	ldrb	r3, [r2, r3]
 800949c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80094a4:	7c7a      	ldrb	r2, [r7, #17]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d907      	bls.n	80094ba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80094b0:	3301      	adds	r3, #1
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80094c0:	7c7a      	ldrb	r2, [r7, #17]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	f200 80d2 	bhi.w	800966c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80094c8:	2301      	movs	r3, #1
 80094ca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80094cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d108      	bne.n	80094e8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80094d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094d8:	f005 fa8c 	bl	800e9f4 <tcp_zero_window_probe>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d014      	beq.n	800950c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80094e2:	2300      	movs	r3, #0
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	e011      	b.n	800950c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80094e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094ee:	4619      	mov	r1, r3
 80094f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094f2:	f004 f8ff 	bl	800d6f4 <tcp_split_unsent_seg>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d107      	bne.n	800950c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80094fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094fe:	f004 fb9b 	bl	800dc38 <tcp_output>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009508:	2300      	movs	r3, #0
 800950a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f000 80ac 	beq.w	800966c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800951c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009522:	2b06      	cmp	r3, #6
 8009524:	f200 80a2 	bhi.w	800966c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800952e:	3301      	adds	r3, #1
 8009530:	b2da      	uxtb	r2, r3
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009538:	e098      	b.n	800966c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800953a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	db0f      	blt.n	8009564 <tcp_slowtmr+0x1f4>
 8009544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009546:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800954a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800954e:	4293      	cmp	r3, r2
 8009550:	d008      	beq.n	8009564 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009558:	b29b      	uxth	r3, r3
 800955a:	3301      	adds	r3, #1
 800955c:	b29b      	uxth	r3, r3
 800955e:	b21a      	sxth	r2, r3
 8009560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009562:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009566:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800956a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009570:	429a      	cmp	r2, r3
 8009572:	db7b      	blt.n	800966c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009576:	f004 fe6f 	bl	800e258 <tcp_rexmit_rto_prepare>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <tcp_slowtmr+0x220>
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009584:	2b00      	cmp	r3, #0
 8009586:	d171      	bne.n	800966c <tcp_slowtmr+0x2fc>
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d06d      	beq.n	800966c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009592:	7d1b      	ldrb	r3, [r3, #20]
 8009594:	2b02      	cmp	r3, #2
 8009596:	d03a      	beq.n	800960e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800959e:	2b0c      	cmp	r3, #12
 80095a0:	bf28      	it	cs
 80095a2:	230c      	movcs	r3, #12
 80095a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80095ac:	10db      	asrs	r3, r3, #3
 80095ae:	b21b      	sxth	r3, r3
 80095b0:	461a      	mov	r2, r3
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80095b8:	4413      	add	r3, r2
 80095ba:	7efa      	ldrb	r2, [r7, #27]
 80095bc:	4910      	ldr	r1, [pc, #64]	@ (8009600 <tcp_slowtmr+0x290>)
 80095be:	5c8a      	ldrb	r2, [r1, r2]
 80095c0:	4093      	lsls	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80095ca:	4293      	cmp	r3, r2
 80095cc:	dc1a      	bgt.n	8009604 <tcp_slowtmr+0x294>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	b21a      	sxth	r2, r3
 80095d2:	e019      	b.n	8009608 <tcp_slowtmr+0x298>
 80095d4:	20003b68 	.word	0x20003b68
 80095d8:	20003b7e 	.word	0x20003b7e
 80095dc:	20003b74 	.word	0x20003b74
 80095e0:	08017404 	.word	0x08017404
 80095e4:	08017748 	.word	0x08017748
 80095e8:	08017448 	.word	0x08017448
 80095ec:	08017774 	.word	0x08017774
 80095f0:	080177a0 	.word	0x080177a0
 80095f4:	080177d0 	.word	0x080177d0
 80095f8:	08017804 	.word	0x08017804
 80095fc:	0801994c 	.word	0x0801994c
 8009600:	0801993c 	.word	0x0801993c
 8009604:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	2200      	movs	r2, #0
 8009612:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009620:	4293      	cmp	r3, r2
 8009622:	bf28      	it	cs
 8009624:	4613      	movcs	r3, r2
 8009626:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009628:	8a7b      	ldrh	r3, [r7, #18]
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009630:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800963a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	429a      	cmp	r2, r3
 8009644:	d206      	bcs.n	8009654 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009650:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009656:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800965e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009660:	2200      	movs	r2, #0
 8009662:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009668:	f004 fe66 	bl	800e338 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800966c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966e:	7d1b      	ldrb	r3, [r3, #20]
 8009670:	2b06      	cmp	r3, #6
 8009672:	d111      	bne.n	8009698 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009676:	8b5b      	ldrh	r3, [r3, #26]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009680:	4b9d      	ldr	r3, [pc, #628]	@ (80098f8 <tcp_slowtmr+0x588>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b28      	cmp	r3, #40	@ 0x28
 800968c:	d904      	bls.n	8009698 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800968e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009692:	3301      	adds	r3, #1
 8009694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969a:	7a5b      	ldrb	r3, [r3, #9]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d04c      	beq.n	800973e <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80096a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	d003      	beq.n	80096b4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80096ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80096b0:	2b07      	cmp	r3, #7
 80096b2:	d144      	bne.n	800973e <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096b4:	4b90      	ldr	r3, [pc, #576]	@ (80098f8 <tcp_slowtmr+0x588>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096c4:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80096c8:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80096cc:	498b      	ldr	r1, [pc, #556]	@ (80098fc <tcp_slowtmr+0x58c>)
 80096ce:	fba1 1303 	umull	r1, r3, r1, r3
 80096d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d90a      	bls.n	80096ee <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80096d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096dc:	3301      	adds	r3, #1
 80096de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80096e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096e6:	3301      	adds	r3, #1
 80096e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80096ec:	e027      	b.n	800973e <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096ee:	4b82      	ldr	r3, [pc, #520]	@ (80098f8 <tcp_slowtmr+0x588>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009704:	4618      	mov	r0, r3
 8009706:	4b7e      	ldr	r3, [pc, #504]	@ (8009900 <tcp_slowtmr+0x590>)
 8009708:	fb00 f303 	mul.w	r3, r0, r3
 800970c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800970e:	497b      	ldr	r1, [pc, #492]	@ (80098fc <tcp_slowtmr+0x58c>)
 8009710:	fba1 1303 	umull	r1, r3, r1, r3
 8009714:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009716:	429a      	cmp	r2, r3
 8009718:	d911      	bls.n	800973e <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800971a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800971c:	f005 f92a 	bl	800e974 <tcp_keepalive>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009726:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009734:	3301      	adds	r3, #1
 8009736:	b2da      	uxtb	r2, r3
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009742:	2b00      	cmp	r3, #0
 8009744:	d011      	beq.n	800976a <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009746:	4b6c      	ldr	r3, [pc, #432]	@ (80098f8 <tcp_slowtmr+0x588>)
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009756:	4619      	mov	r1, r3
 8009758:	460b      	mov	r3, r1
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	440b      	add	r3, r1
 800975e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009760:	429a      	cmp	r2, r3
 8009762:	d302      	bcc.n	800976a <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8009764:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009766:	f000 fef1 	bl	800a54c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800976a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976c:	7d1b      	ldrb	r3, [r3, #20]
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10b      	bne.n	800978a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009772:	4b61      	ldr	r3, [pc, #388]	@ (80098f8 <tcp_slowtmr+0x588>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b28      	cmp	r3, #40	@ 0x28
 800977e:	d904      	bls.n	800978a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8009780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009784:	3301      	adds	r3, #1
 8009786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	7d1b      	ldrb	r3, [r3, #20]
 800978e:	2b09      	cmp	r3, #9
 8009790:	d10b      	bne.n	80097aa <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009792:	4b59      	ldr	r3, [pc, #356]	@ (80098f8 <tcp_slowtmr+0x588>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2bf0      	cmp	r3, #240	@ 0xf0
 800979e:	d904      	bls.n	80097aa <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80097a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a4:	3301      	adds	r3, #1
 80097a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80097aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d060      	beq.n	8009874 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80097b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80097ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097bc:	f000 fd12 	bl	800a1e4 <tcp_pcb_purge>
      if (prev != NULL) {
 80097c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d010      	beq.n	80097e8 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80097c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009904 <tcp_slowtmr+0x594>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d106      	bne.n	80097de <tcp_slowtmr+0x46e>
 80097d0:	4b4d      	ldr	r3, [pc, #308]	@ (8009908 <tcp_slowtmr+0x598>)
 80097d2:	f240 526d 	movw	r2, #1389	@ 0x56d
 80097d6:	494d      	ldr	r1, [pc, #308]	@ (800990c <tcp_slowtmr+0x59c>)
 80097d8:	484d      	ldr	r0, [pc, #308]	@ (8009910 <tcp_slowtmr+0x5a0>)
 80097da:	f00c f9d1 	bl	8015b80 <iprintf>
        prev->next = pcb->next;
 80097de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e00f      	b.n	8009808 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80097e8:	4b46      	ldr	r3, [pc, #280]	@ (8009904 <tcp_slowtmr+0x594>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d006      	beq.n	8009800 <tcp_slowtmr+0x490>
 80097f2:	4b45      	ldr	r3, [pc, #276]	@ (8009908 <tcp_slowtmr+0x598>)
 80097f4:	f240 5271 	movw	r2, #1393	@ 0x571
 80097f8:	4946      	ldr	r1, [pc, #280]	@ (8009914 <tcp_slowtmr+0x5a4>)
 80097fa:	4845      	ldr	r0, [pc, #276]	@ (8009910 <tcp_slowtmr+0x5a0>)
 80097fc:	f00c f9c0 	bl	8015b80 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	4a3f      	ldr	r2, [pc, #252]	@ (8009904 <tcp_slowtmr+0x594>)
 8009806:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800980c:	2b00      	cmp	r3, #0
 800980e:	d013      	beq.n	8009838 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009812:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009818:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800981a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981c:	3304      	adds	r3, #4
 800981e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009820:	8ad2      	ldrh	r2, [r2, #22]
 8009822:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009824:	8b09      	ldrh	r1, [r1, #24]
 8009826:	9102      	str	r1, [sp, #8]
 8009828:	9201      	str	r2, [sp, #4]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	462b      	mov	r3, r5
 800982e:	4622      	mov	r2, r4
 8009830:	4601      	mov	r1, r0
 8009832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009834:	f004 ffea 	bl	800e80c <tcp_rst>
      err_arg = pcb->callback_arg;
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	7d1b      	ldrb	r3, [r3, #20]
 8009842:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800984e:	6838      	ldr	r0, [r7, #0]
 8009850:	f7ff f836 	bl	80088c0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009854:	4b30      	ldr	r3, [pc, #192]	@ (8009918 <tcp_slowtmr+0x5a8>)
 8009856:	2200      	movs	r2, #0
 8009858:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <tcp_slowtmr+0x4fa>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f06f 010c 	mvn.w	r1, #12
 8009866:	68b8      	ldr	r0, [r7, #8]
 8009868:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800986a:	4b2b      	ldr	r3, [pc, #172]	@ (8009918 <tcp_slowtmr+0x5a8>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d037      	beq.n	80098e2 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8009872:	e590      	b.n	8009396 <tcp_slowtmr+0x26>
      prev = pcb;
 8009874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009876:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	7f1b      	ldrb	r3, [r3, #28]
 8009882:	3301      	adds	r3, #1
 8009884:	b2da      	uxtb	r2, r3
 8009886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009888:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	7f1a      	ldrb	r2, [r3, #28]
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	7f5b      	ldrb	r3, [r3, #29]
 8009892:	429a      	cmp	r2, r3
 8009894:	d325      	bcc.n	80098e2 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	2200      	movs	r2, #0
 800989a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800989c:	4b1e      	ldr	r3, [pc, #120]	@ (8009918 <tcp_slowtmr+0x5a8>)
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <tcp_slowtmr+0x554>
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098b4:	6912      	ldr	r2, [r2, #16]
 80098b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80098c2:	e002      	b.n	80098ca <tcp_slowtmr+0x55a>
 80098c4:	2300      	movs	r3, #0
 80098c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80098ca:	4b13      	ldr	r3, [pc, #76]	@ (8009918 <tcp_slowtmr+0x5a8>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f ad60 	bne.w	8009394 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80098d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <tcp_slowtmr+0x572>
          tcp_output(prev);
 80098dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098de:	f004 f9ab 	bl	800dc38 <tcp_output>
  while (pcb != NULL) {
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f47f ad5c 	bne.w	80093a2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80098ee:	4b0b      	ldr	r3, [pc, #44]	@ (800991c <tcp_slowtmr+0x5ac>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80098f4:	e067      	b.n	80099c6 <tcp_slowtmr+0x656>
 80098f6:	bf00      	nop
 80098f8:	20003b68 	.word	0x20003b68
 80098fc:	10624dd3 	.word	0x10624dd3
 8009900:	000124f8 	.word	0x000124f8
 8009904:	20003b74 	.word	0x20003b74
 8009908:	08017404 	.word	0x08017404
 800990c:	0801783c 	.word	0x0801783c
 8009910:	08017448 	.word	0x08017448
 8009914:	08017868 	.word	0x08017868
 8009918:	20003b7c 	.word	0x20003b7c
 800991c:	20003b78 	.word	0x20003b78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	7d1b      	ldrb	r3, [r3, #20]
 8009924:	2b0a      	cmp	r3, #10
 8009926:	d006      	beq.n	8009936 <tcp_slowtmr+0x5c6>
 8009928:	4b2b      	ldr	r3, [pc, #172]	@ (80099d8 <tcp_slowtmr+0x668>)
 800992a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800992e:	492b      	ldr	r1, [pc, #172]	@ (80099dc <tcp_slowtmr+0x66c>)
 8009930:	482b      	ldr	r0, [pc, #172]	@ (80099e0 <tcp_slowtmr+0x670>)
 8009932:	f00c f925 	bl	8015b80 <iprintf>
    pcb_remove = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800993c:	4b29      	ldr	r3, [pc, #164]	@ (80099e4 <tcp_slowtmr+0x674>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2bf0      	cmp	r3, #240	@ 0xf0
 8009948:	d904      	bls.n	8009954 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800994a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800994e:	3301      	adds	r3, #1
 8009950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009958:	2b00      	cmp	r3, #0
 800995a:	d02f      	beq.n	80099bc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800995c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800995e:	f000 fc41 	bl	800a1e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	2b00      	cmp	r3, #0
 8009966:	d010      	beq.n	800998a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009968:	4b1f      	ldr	r3, [pc, #124]	@ (80099e8 <tcp_slowtmr+0x678>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800996e:	429a      	cmp	r2, r3
 8009970:	d106      	bne.n	8009980 <tcp_slowtmr+0x610>
 8009972:	4b19      	ldr	r3, [pc, #100]	@ (80099d8 <tcp_slowtmr+0x668>)
 8009974:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009978:	491c      	ldr	r1, [pc, #112]	@ (80099ec <tcp_slowtmr+0x67c>)
 800997a:	4819      	ldr	r0, [pc, #100]	@ (80099e0 <tcp_slowtmr+0x670>)
 800997c:	f00c f900 	bl	8015b80 <iprintf>
        prev->next = pcb->next;
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009986:	60da      	str	r2, [r3, #12]
 8009988:	e00f      	b.n	80099aa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800998a:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <tcp_slowtmr+0x678>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009990:	429a      	cmp	r2, r3
 8009992:	d006      	beq.n	80099a2 <tcp_slowtmr+0x632>
 8009994:	4b10      	ldr	r3, [pc, #64]	@ (80099d8 <tcp_slowtmr+0x668>)
 8009996:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800999a:	4915      	ldr	r1, [pc, #84]	@ (80099f0 <tcp_slowtmr+0x680>)
 800999c:	4810      	ldr	r0, [pc, #64]	@ (80099e0 <tcp_slowtmr+0x670>)
 800999e:	f00c f8ef 	bl	8015b80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	4a10      	ldr	r2, [pc, #64]	@ (80099e8 <tcp_slowtmr+0x678>)
 80099a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80099aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80099ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80099b4:	69f8      	ldr	r0, [r7, #28]
 80099b6:	f7fe ff83 	bl	80088c0 <tcp_free>
 80099ba:	e004      	b.n	80099c6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1a9      	bne.n	8009920 <tcp_slowtmr+0x5b0>
    }
  }
}
 80099cc:	bf00      	nop
 80099ce:	bf00      	nop
 80099d0:	3730      	adds	r7, #48	@ 0x30
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bdb0      	pop	{r4, r5, r7, pc}
 80099d6:	bf00      	nop
 80099d8:	08017404 	.word	0x08017404
 80099dc:	08017894 	.word	0x08017894
 80099e0:	08017448 	.word	0x08017448
 80099e4:	20003b68 	.word	0x20003b68
 80099e8:	20003b78 	.word	0x20003b78
 80099ec:	080178c4 	.word	0x080178c4
 80099f0:	080178ec 	.word	0x080178ec

080099f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80099fa:	4b2d      	ldr	r3, [pc, #180]	@ (8009ab0 <tcp_fasttmr+0xbc>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab0 <tcp_fasttmr+0xbc>)
 8009a04:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009a06:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab4 <tcp_fasttmr+0xc0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009a0c:	e048      	b.n	8009aa0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7f9a      	ldrb	r2, [r3, #30]
 8009a12:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <tcp_fasttmr+0xbc>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d03f      	beq.n	8009a9a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009a1a:	4b25      	ldr	r3, [pc, #148]	@ (8009ab0 <tcp_fasttmr+0xbc>)
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8b5b      	ldrh	r3, [r3, #26]
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d010      	beq.n	8009a50 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	8b5b      	ldrh	r3, [r3, #26]
 8009a32:	f043 0302 	orr.w	r3, r3, #2
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f004 f8fb 	bl	800dc38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8b5b      	ldrh	r3, [r3, #26]
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	8b5b      	ldrh	r3, [r3, #26]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d009      	beq.n	8009a70 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	8b5b      	ldrh	r3, [r3, #26]
 8009a60:	f023 0308 	bic.w	r3, r3, #8
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff f8bc 	bl	8008be8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00a      	beq.n	8009a94 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <tcp_fasttmr+0xc4>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f819 	bl	8009abc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab8 <tcp_fasttmr+0xc4>)
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d000      	beq.n	8009a94 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009a92:	e7b8      	b.n	8009a06 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	e002      	b.n	8009aa0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1b3      	bne.n	8009a0e <tcp_fasttmr+0x1a>
    }
  }
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20003b7e 	.word	0x20003b7e
 8009ab4:	20003b74 	.word	0x20003b74
 8009ab8:	20003b7c 	.word	0x20003b7c

08009abc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009abc:	b590      	push	{r4, r7, lr}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d109      	bne.n	8009ade <tcp_process_refused_data+0x22>
 8009aca:	4b37      	ldr	r3, [pc, #220]	@ (8009ba8 <tcp_process_refused_data+0xec>)
 8009acc:	f240 6209 	movw	r2, #1545	@ 0x609
 8009ad0:	4936      	ldr	r1, [pc, #216]	@ (8009bac <tcp_process_refused_data+0xf0>)
 8009ad2:	4837      	ldr	r0, [pc, #220]	@ (8009bb0 <tcp_process_refused_data+0xf4>)
 8009ad4:	f00c f854 	bl	8015b80 <iprintf>
 8009ad8:	f06f 030f 	mvn.w	r3, #15
 8009adc:	e060      	b.n	8009ba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ae2:	7b5b      	ldrb	r3, [r3, #13]
 8009ae4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009aea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <tcp_process_refused_data+0x58>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6918      	ldr	r0, [r3, #16]
 8009b06:	2300      	movs	r3, #0
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	47a0      	blx	r4
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73fb      	strb	r3, [r7, #15]
 8009b12:	e007      	b.n	8009b24 <tcp_process_refused_data+0x68>
 8009b14:	2300      	movs	r3, #0
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f000 f8c2 	bl	8009ca4 <tcp_recv_null>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d12a      	bne.n	8009b82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	f003 0320 	and.w	r3, r3, #32
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d033      	beq.n	8009b9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b3a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009b3e:	d005      	beq.n	8009b4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b44:	3301      	adds	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00b      	beq.n	8009b6e <tcp_process_refused_data+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6918      	ldr	r0, [r3, #16]
 8009b60:	2300      	movs	r3, #0
 8009b62:	2200      	movs	r2, #0
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	47a0      	blx	r4
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
 8009b6c:	e001      	b.n	8009b72 <tcp_process_refused_data+0xb6>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b76:	f113 0f0d 	cmn.w	r3, #13
 8009b7a:	d110      	bne.n	8009b9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009b7c:	f06f 030c 	mvn.w	r3, #12
 8009b80:	e00e      	b.n	8009ba0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b86:	f113 0f0d 	cmn.w	r3, #13
 8009b8a:	d102      	bne.n	8009b92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009b8c:	f06f 030c 	mvn.w	r3, #12
 8009b90:	e006      	b.n	8009ba0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009b98:	f06f 0304 	mvn.w	r3, #4
 8009b9c:	e000      	b.n	8009ba0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd90      	pop	{r4, r7, pc}
 8009ba8:	08017404 	.word	0x08017404
 8009bac:	08017914 	.word	0x08017914
 8009bb0:	08017448 	.word	0x08017448

08009bb4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009bbc:	e007      	b.n	8009bce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f80a 	bl	8009bde <tcp_seg_free>
    seg = next;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f4      	bne.n	8009bbe <tcp_segs_free+0xa>
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00c      	beq.n	8009c06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fa43 	bl	8008084 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	2003      	movs	r0, #3
 8009c02:	f7fd fc63 	bl	80074cc <memp_free>
  }
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d107      	bne.n	8009c32 <tcp_setprio+0x22>
 8009c22:	4b07      	ldr	r3, [pc, #28]	@ (8009c40 <tcp_setprio+0x30>)
 8009c24:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009c28:	4906      	ldr	r1, [pc, #24]	@ (8009c44 <tcp_setprio+0x34>)
 8009c2a:	4807      	ldr	r0, [pc, #28]	@ (8009c48 <tcp_setprio+0x38>)
 8009c2c:	f00b ffa8 	bl	8015b80 <iprintf>
 8009c30:	e002      	b.n	8009c38 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	755a      	strb	r2, [r3, #21]
}
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	08017404 	.word	0x08017404
 8009c44:	0801793c 	.word	0x0801793c
 8009c48:	08017448 	.word	0x08017448

08009c4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d106      	bne.n	8009c68 <tcp_seg_copy+0x1c>
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c98 <tcp_seg_copy+0x4c>)
 8009c5c:	f240 6282 	movw	r2, #1666	@ 0x682
 8009c60:	490e      	ldr	r1, [pc, #56]	@ (8009c9c <tcp_seg_copy+0x50>)
 8009c62:	480f      	ldr	r0, [pc, #60]	@ (8009ca0 <tcp_seg_copy+0x54>)
 8009c64:	f00b ff8c 	bl	8015b80 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009c68:	2003      	movs	r0, #3
 8009c6a:	f7fd fbd7 	bl	800741c <memp_malloc>
 8009c6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <tcp_seg_copy+0x2e>
    return NULL;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e00a      	b.n	8009c90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009c7a:	2210      	movs	r2, #16
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f00c f887 	bl	8015d92 <memcpy>
  pbuf_ref(cseg->p);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe faa1 	bl	80081d0 <pbuf_ref>
  return cseg;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	08017404 	.word	0x08017404
 8009c9c:	08017958 	.word	0x08017958
 8009ca0:	08017448 	.word	0x08017448

08009ca4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d109      	bne.n	8009ccc <tcp_recv_null+0x28>
 8009cb8:	4b12      	ldr	r3, [pc, #72]	@ (8009d04 <tcp_recv_null+0x60>)
 8009cba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009cbe:	4912      	ldr	r1, [pc, #72]	@ (8009d08 <tcp_recv_null+0x64>)
 8009cc0:	4812      	ldr	r0, [pc, #72]	@ (8009d0c <tcp_recv_null+0x68>)
 8009cc2:	f00b ff5d 	bl	8015b80 <iprintf>
 8009cc6:	f06f 030f 	mvn.w	r3, #15
 8009cca:	e016      	b.n	8009cfa <tcp_recv_null+0x56>

  if (p != NULL) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	891b      	ldrh	r3, [r3, #8]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68b8      	ldr	r0, [r7, #8]
 8009cda:	f7ff fab3 	bl	8009244 <tcp_recved>
    pbuf_free(p);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7fe f9d0 	bl	8008084 <pbuf_free>
 8009ce4:	e008      	b.n	8009cf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009cee:	68b8      	ldr	r0, [r7, #8]
 8009cf0:	f7fe ffe4 	bl	8008cbc <tcp_close>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	e000      	b.n	8009cfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08017404 	.word	0x08017404
 8009d08:	08017974 	.word	0x08017974
 8009d0c:	08017448 	.word	0x08017448

08009d10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	db01      	blt.n	8009d26 <tcp_kill_prio+0x16>
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	e000      	b.n	8009d28 <tcp_kill_prio+0x18>
 8009d26:	237f      	movs	r3, #127	@ 0x7f
 8009d28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009d2a:	7afb      	ldrb	r3, [r7, #11]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d034      	beq.n	8009d9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d3e:	4b19      	ldr	r3, [pc, #100]	@ (8009da4 <tcp_kill_prio+0x94>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e01f      	b.n	8009d86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	7d5b      	ldrb	r3, [r3, #21]
 8009d4a:	7afa      	ldrb	r2, [r7, #11]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d80c      	bhi.n	8009d6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009d54:	7afa      	ldrb	r2, [r7, #11]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d112      	bne.n	8009d80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009d5a:	4b13      	ldr	r3, [pc, #76]	@ (8009da8 <tcp_kill_prio+0x98>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d80a      	bhi.n	8009d80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009da8 <tcp_kill_prio+0x98>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	7d5b      	ldrb	r3, [r3, #21]
 8009d7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1dc      	bne.n	8009d46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d004      	beq.n	8009d9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d92:	6938      	ldr	r0, [r7, #16]
 8009d94:	f7ff f87c 	bl	8008e90 <tcp_abort>
 8009d98:	e000      	b.n	8009d9c <tcp_kill_prio+0x8c>
    return;
 8009d9a:	bf00      	nop
  }
}
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20003b74 	.word	0x20003b74
 8009da8:	20003b68 	.word	0x20003b68

08009dac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d009      	beq.n	8009dd0 <tcp_kill_state+0x24>
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d006      	beq.n	8009dd0 <tcp_kill_state+0x24>
 8009dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8009e2c <tcp_kill_state+0x80>)
 8009dc4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009dc8:	4919      	ldr	r1, [pc, #100]	@ (8009e30 <tcp_kill_state+0x84>)
 8009dca:	481a      	ldr	r0, [pc, #104]	@ (8009e34 <tcp_kill_state+0x88>)
 8009dcc:	f00b fed8 	bl	8015b80 <iprintf>

  inactivity = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dd8:	4b17      	ldr	r3, [pc, #92]	@ (8009e38 <tcp_kill_state+0x8c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e017      	b.n	8009e10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	79fa      	ldrb	r2, [r7, #7]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d10f      	bne.n	8009e0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009dea:	4b14      	ldr	r3, [pc, #80]	@ (8009e3c <tcp_kill_state+0x90>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d807      	bhi.n	8009e0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009dfa:	4b10      	ldr	r3, [pc, #64]	@ (8009e3c <tcp_kill_state+0x90>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1e4      	bne.n	8009de0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6938      	ldr	r0, [r7, #16]
 8009e20:	f7fe ff78 	bl	8008d14 <tcp_abandon>
  }
}
 8009e24:	bf00      	nop
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	08017404 	.word	0x08017404
 8009e30:	08017990 	.word	0x08017990
 8009e34:	08017448 	.word	0x08017448
 8009e38:	20003b74 	.word	0x20003b74
 8009e3c:	20003b68 	.word	0x20003b68

08009e40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e4e:	4b12      	ldr	r3, [pc, #72]	@ (8009e98 <tcp_kill_timewait+0x58>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	e012      	b.n	8009e7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009e56:	4b11      	ldr	r3, [pc, #68]	@ (8009e9c <tcp_kill_timewait+0x5c>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d807      	bhi.n	8009e76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009e66:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <tcp_kill_timewait+0x5c>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e9      	bne.n	8009e56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009e88:	68b8      	ldr	r0, [r7, #8]
 8009e8a:	f7ff f801 	bl	8008e90 <tcp_abort>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20003b78 	.word	0x20003b78
 8009e9c:	20003b68 	.word	0x20003b68

08009ea0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009ea6:	4b10      	ldr	r3, [pc, #64]	@ (8009ee8 <tcp_handle_closepend+0x48>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009eac:	e014      	b.n	8009ed8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	8b5b      	ldrh	r3, [r3, #26]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	8b5b      	ldrh	r3, [r3, #26]
 8009ec4:	f023 0308 	bic.w	r3, r3, #8
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7fe fe8a 	bl	8008be8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e7      	bne.n	8009eae <tcp_handle_closepend+0xe>
  }
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20003b74 	.word	0x20003b74

08009eec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	f7fd fa90 	bl	800741c <memp_malloc>
 8009efc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d14e      	bne.n	8009fa2 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009f04:	f7ff ffcc 	bl	8009ea0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009f08:	f7ff ff9a 	bl	8009e40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7fd fa85 	bl	800741c <memp_malloc>
 8009f12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d139      	bne.n	8009f8e <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009f1a:	2009      	movs	r0, #9
 8009f1c:	f7ff ff46 	bl	8009dac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f20:	2001      	movs	r0, #1
 8009f22:	f7fd fa7b 	bl	800741c <memp_malloc>
 8009f26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d125      	bne.n	8009f7a <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009f2e:	2008      	movs	r0, #8
 8009f30:	f7ff ff3c 	bl	8009dac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f34:	2001      	movs	r0, #1
 8009f36:	f7fd fa71 	bl	800741c <memp_malloc>
 8009f3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d111      	bne.n	8009f66 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff fee3 	bl	8009d10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	f7fd fa66 	bl	800741c <memp_malloc>
 8009f50:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d006      	beq.n	8009f66 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009f58:	4b36      	ldr	r3, [pc, #216]	@ (800a034 <tcp_alloc+0x148>)
 8009f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f5e:	881a      	ldrh	r2, [r3, #0]
 8009f60:	3a01      	subs	r2, #1
 8009f62:	b292      	uxth	r2, r2
 8009f64:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d006      	beq.n	8009f7a <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009f6c:	4b31      	ldr	r3, [pc, #196]	@ (800a034 <tcp_alloc+0x148>)
 8009f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f72:	881a      	ldrh	r2, [r3, #0]
 8009f74:	3a01      	subs	r2, #1
 8009f76:	b292      	uxth	r2, r2
 8009f78:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d006      	beq.n	8009f8e <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009f80:	4b2c      	ldr	r3, [pc, #176]	@ (800a034 <tcp_alloc+0x148>)
 8009f82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f86:	881a      	ldrh	r2, [r3, #0]
 8009f88:	3a01      	subs	r2, #1
 8009f8a:	b292      	uxth	r2, r2
 8009f8c:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d006      	beq.n	8009fa2 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009f94:	4b27      	ldr	r3, [pc, #156]	@ (800a034 <tcp_alloc+0x148>)
 8009f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f9a:	881a      	ldrh	r2, [r3, #0]
 8009f9c:	3a01      	subs	r2, #1
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d03f      	beq.n	800a028 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009fa8:	229c      	movs	r2, #156	@ 0x9c
 8009faa:	2100      	movs	r1, #0
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f00b fe4c 	bl	8015c4a <memset>
    pcb->prio = prio;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	79fa      	ldrb	r2, [r7, #7]
 8009fb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009fbe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	22ff      	movs	r2, #255	@ 0xff
 8009fd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009fde:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2206      	movs	r2, #6
 8009fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2206      	movs	r2, #6
 8009fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ff4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <tcp_alloc+0x14c>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a006:	4b0d      	ldr	r3, [pc, #52]	@ (800a03c <tcp_alloc+0x150>)
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a014:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4a09      	ldr	r2, [pc, #36]	@ (800a040 <tcp_alloc+0x154>)
 800a01c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <tcp_alloc+0x158>)
 800a024:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a028:	68fb      	ldr	r3, [r7, #12]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20003a9c 	.word	0x20003a9c
 800a038:	20003b68 	.word	0x20003b68
 800a03c:	20003b7e 	.word	0x20003b7e
 800a040:	08009ca5 	.word	0x08009ca5
 800a044:	006ddd00 	.word	0x006ddd00

0800a048 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a052:	2040      	movs	r0, #64	@ 0x40
 800a054:	f7ff ff4a 	bl	8009eec <tcp_alloc>
 800a058:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a05a:	68fb      	ldr	r3, [r7, #12]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	611a      	str	r2, [r3, #16]
  }
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr
	...

0800a088 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d106      	bne.n	800a0ae <tcp_recv+0x26>
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <tcp_recv+0x38>)
 800a0a2:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a0a6:	4907      	ldr	r1, [pc, #28]	@ (800a0c4 <tcp_recv+0x3c>)
 800a0a8:	4807      	ldr	r0, [pc, #28]	@ (800a0c8 <tcp_recv+0x40>)
 800a0aa:	f00b fd69 	bl	8015b80 <iprintf>
    pcb->recv = recv;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	08017404 	.word	0x08017404
 800a0c4:	080179a0 	.word	0x080179a0
 800a0c8:	08017448 	.word	0x08017448

0800a0cc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7d1b      	ldrb	r3, [r3, #20]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d106      	bne.n	800a0f2 <tcp_sent+0x26>
 800a0e4:	4b07      	ldr	r3, [pc, #28]	@ (800a104 <tcp_sent+0x38>)
 800a0e6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a0ea:	4907      	ldr	r1, [pc, #28]	@ (800a108 <tcp_sent+0x3c>)
 800a0ec:	4807      	ldr	r0, [pc, #28]	@ (800a10c <tcp_sent+0x40>)
 800a0ee:	f00b fd47 	bl	8015b80 <iprintf>
    pcb->sent = sent;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	08017404 	.word	0x08017404
 800a108:	080179c8 	.word	0x080179c8
 800a10c:	08017448 	.word	0x08017448

0800a110 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7d1b      	ldrb	r3, [r3, #20]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d106      	bne.n	800a136 <tcp_err+0x26>
 800a128:	4b07      	ldr	r3, [pc, #28]	@ (800a148 <tcp_err+0x38>)
 800a12a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a12e:	4907      	ldr	r1, [pc, #28]	@ (800a14c <tcp_err+0x3c>)
 800a130:	4807      	ldr	r0, [pc, #28]	@ (800a150 <tcp_err+0x40>)
 800a132:	f00b fd25 	bl	8015b80 <iprintf>
    pcb->errf = err;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	08017404 	.word	0x08017404
 800a14c:	080179f0 	.word	0x080179f0
 800a150:	08017448 	.word	0x08017448

0800a154 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <tcp_accept+0x22>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d104      	bne.n	800a176 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	619a      	str	r2, [r3, #24]
  }
}
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
	...

0800a184 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <tcp_poll+0x24>
 800a198:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d4 <tcp_poll+0x50>)
 800a19a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800a19e:	490e      	ldr	r1, [pc, #56]	@ (800a1d8 <tcp_poll+0x54>)
 800a1a0:	480e      	ldr	r0, [pc, #56]	@ (800a1dc <tcp_poll+0x58>)
 800a1a2:	f00b fced 	bl	8015b80 <iprintf>
 800a1a6:	e011      	b.n	800a1cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d106      	bne.n	800a1be <tcp_poll+0x3a>
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <tcp_poll+0x50>)
 800a1b2:	f640 023e 	movw	r2, #2110	@ 0x83e
 800a1b6:	490a      	ldr	r1, [pc, #40]	@ (800a1e0 <tcp_poll+0x5c>)
 800a1b8:	4808      	ldr	r0, [pc, #32]	@ (800a1dc <tcp_poll+0x58>)
 800a1ba:	f00b fce1 	bl	8015b80 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	79fa      	ldrb	r2, [r7, #7]
 800a1ca:	775a      	strb	r2, [r3, #29]
}
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	08017404 	.word	0x08017404
 800a1d8:	08017a18 	.word	0x08017a18
 800a1dc:	08017448 	.word	0x08017448
 800a1e0:	08017a30 	.word	0x08017a30

0800a1e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d107      	bne.n	800a202 <tcp_pcb_purge+0x1e>
 800a1f2:	4b21      	ldr	r3, [pc, #132]	@ (800a278 <tcp_pcb_purge+0x94>)
 800a1f4:	f640 0251 	movw	r2, #2129	@ 0x851
 800a1f8:	4920      	ldr	r1, [pc, #128]	@ (800a27c <tcp_pcb_purge+0x98>)
 800a1fa:	4821      	ldr	r0, [pc, #132]	@ (800a280 <tcp_pcb_purge+0x9c>)
 800a1fc:	f00b fcc0 	bl	8015b80 <iprintf>
 800a200:	e037      	b.n	800a272 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	7d1b      	ldrb	r3, [r3, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d033      	beq.n	800a272 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a20e:	2b0a      	cmp	r3, #10
 800a210:	d02f      	beq.n	800a272 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a216:	2b01      	cmp	r3, #1
 800a218:	d02b      	beq.n	800a272 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d007      	beq.n	800a232 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a226:	4618      	mov	r0, r3
 800a228:	f7fd ff2c 	bl	8008084 <pbuf_free>
      pcb->refused_data = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f986 	bl	800a54c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a246:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff fcb1 	bl	8009bb4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fcac 	bl	8009bb4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	08017404 	.word	0x08017404
 800a27c:	08017a50 	.word	0x08017a50
 800a280:	08017448 	.word	0x08017448

0800a284 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <tcp_pcb_remove+0x1e>
 800a294:	4b3e      	ldr	r3, [pc, #248]	@ (800a390 <tcp_pcb_remove+0x10c>)
 800a296:	f640 0283 	movw	r2, #2179	@ 0x883
 800a29a:	493e      	ldr	r1, [pc, #248]	@ (800a394 <tcp_pcb_remove+0x110>)
 800a29c:	483e      	ldr	r0, [pc, #248]	@ (800a398 <tcp_pcb_remove+0x114>)
 800a29e:	f00b fc6f 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <tcp_pcb_remove+0x32>
 800a2a8:	4b39      	ldr	r3, [pc, #228]	@ (800a390 <tcp_pcb_remove+0x10c>)
 800a2aa:	f640 0284 	movw	r2, #2180	@ 0x884
 800a2ae:	493b      	ldr	r1, [pc, #236]	@ (800a39c <tcp_pcb_remove+0x118>)
 800a2b0:	4839      	ldr	r0, [pc, #228]	@ (800a398 <tcp_pcb_remove+0x114>)
 800a2b2:	f00b fc65 	bl	8015b80 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d105      	bne.n	800a2cc <tcp_pcb_remove+0x48>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e013      	b.n	800a2f4 <tcp_pcb_remove+0x70>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e00c      	b.n	800a2ee <tcp_pcb_remove+0x6a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d104      	bne.n	800a2e8 <tcp_pcb_remove+0x64>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	60da      	str	r2, [r3, #12]
 800a2e6:	e005      	b.n	800a2f4 <tcp_pcb_remove+0x70>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1ef      	bne.n	800a2d4 <tcp_pcb_remove+0x50>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a2fa:	6838      	ldr	r0, [r7, #0]
 800a2fc:	f7ff ff72 	bl	800a1e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	7d1b      	ldrb	r3, [r3, #20]
 800a304:	2b0a      	cmp	r3, #10
 800a306:	d013      	beq.n	800a330 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d00f      	beq.n	800a330 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	8b5b      	ldrh	r3, [r3, #26]
 800a314:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d009      	beq.n	800a330 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	8b5b      	ldrh	r3, [r3, #26]
 800a320:	f043 0302 	orr.w	r3, r3, #2
 800a324:	b29a      	uxth	r2, r3
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a32a:	6838      	ldr	r0, [r7, #0]
 800a32c:	f003 fc84 	bl	800dc38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	7d1b      	ldrb	r3, [r3, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d020      	beq.n	800a37a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <tcp_pcb_remove+0xca>
 800a340:	4b13      	ldr	r3, [pc, #76]	@ (800a390 <tcp_pcb_remove+0x10c>)
 800a342:	f640 0293 	movw	r2, #2195	@ 0x893
 800a346:	4916      	ldr	r1, [pc, #88]	@ (800a3a0 <tcp_pcb_remove+0x11c>)
 800a348:	4813      	ldr	r0, [pc, #76]	@ (800a398 <tcp_pcb_remove+0x114>)
 800a34a:	f00b fc19 	bl	8015b80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <tcp_pcb_remove+0xe0>
 800a356:	4b0e      	ldr	r3, [pc, #56]	@ (800a390 <tcp_pcb_remove+0x10c>)
 800a358:	f640 0294 	movw	r2, #2196	@ 0x894
 800a35c:	4911      	ldr	r1, [pc, #68]	@ (800a3a4 <tcp_pcb_remove+0x120>)
 800a35e:	480e      	ldr	r0, [pc, #56]	@ (800a398 <tcp_pcb_remove+0x114>)
 800a360:	f00b fc0e 	bl	8015b80 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d006      	beq.n	800a37a <tcp_pcb_remove+0xf6>
 800a36c:	4b08      	ldr	r3, [pc, #32]	@ (800a390 <tcp_pcb_remove+0x10c>)
 800a36e:	f640 0296 	movw	r2, #2198	@ 0x896
 800a372:	490d      	ldr	r1, [pc, #52]	@ (800a3a8 <tcp_pcb_remove+0x124>)
 800a374:	4808      	ldr	r0, [pc, #32]	@ (800a398 <tcp_pcb_remove+0x114>)
 800a376:	f00b fc03 	bl	8015b80 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2200      	movs	r2, #0
 800a37e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2200      	movs	r2, #0
 800a384:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	08017404 	.word	0x08017404
 800a394:	08017a6c 	.word	0x08017a6c
 800a398:	08017448 	.word	0x08017448
 800a39c:	08017a88 	.word	0x08017a88
 800a3a0:	08017aa8 	.word	0x08017aa8
 800a3a4:	08017ac0 	.word	0x08017ac0
 800a3a8:	08017adc 	.word	0x08017adc

0800a3ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <tcp_next_iss+0x1c>
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e4 <tcp_next_iss+0x38>)
 800a3bc:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a3c0:	4909      	ldr	r1, [pc, #36]	@ (800a3e8 <tcp_next_iss+0x3c>)
 800a3c2:	480a      	ldr	r0, [pc, #40]	@ (800a3ec <tcp_next_iss+0x40>)
 800a3c4:	f00b fbdc 	bl	8015b80 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a3c8:	4b09      	ldr	r3, [pc, #36]	@ (800a3f0 <tcp_next_iss+0x44>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	4b09      	ldr	r3, [pc, #36]	@ (800a3f4 <tcp_next_iss+0x48>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	4a07      	ldr	r2, [pc, #28]	@ (800a3f0 <tcp_next_iss+0x44>)
 800a3d4:	6013      	str	r3, [r2, #0]
  return iss;
 800a3d6:	4b06      	ldr	r3, [pc, #24]	@ (800a3f0 <tcp_next_iss+0x44>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	08017404 	.word	0x08017404
 800a3e8:	08017af4 	.word	0x08017af4
 800a3ec:	08017448 	.word	0x08017448
 800a3f0:	2000000c 	.word	0x2000000c
 800a3f4:	20003b68 	.word	0x20003b68

0800a3f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <tcp_eff_send_mss_netif+0x22>
 800a40c:	4b14      	ldr	r3, [pc, #80]	@ (800a460 <tcp_eff_send_mss_netif+0x68>)
 800a40e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a412:	4914      	ldr	r1, [pc, #80]	@ (800a464 <tcp_eff_send_mss_netif+0x6c>)
 800a414:	4814      	ldr	r0, [pc, #80]	@ (800a468 <tcp_eff_send_mss_netif+0x70>)
 800a416:	f00b fbb3 	bl	8015b80 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a420:	89fb      	ldrh	r3, [r7, #14]
 800a422:	e019      	b.n	800a458 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a428:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a42a:	8afb      	ldrh	r3, [r7, #22]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d012      	beq.n	800a456 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a430:	2328      	movs	r3, #40	@ 0x28
 800a432:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a434:	8afa      	ldrh	r2, [r7, #22]
 800a436:	8abb      	ldrh	r3, [r7, #20]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d904      	bls.n	800a446 <tcp_eff_send_mss_netif+0x4e>
 800a43c:	8afa      	ldrh	r2, [r7, #22]
 800a43e:	8abb      	ldrh	r3, [r7, #20]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	b29b      	uxth	r3, r3
 800a444:	e000      	b.n	800a448 <tcp_eff_send_mss_netif+0x50>
 800a446:	2300      	movs	r3, #0
 800a448:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a44a:	8a7a      	ldrh	r2, [r7, #18]
 800a44c:	89fb      	ldrh	r3, [r7, #14]
 800a44e:	4293      	cmp	r3, r2
 800a450:	bf28      	it	cs
 800a452:	4613      	movcs	r3, r2
 800a454:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a456:	89fb      	ldrh	r3, [r7, #14]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	08017404 	.word	0x08017404
 800a464:	08017b10 	.word	0x08017b10
 800a468:	08017448 	.word	0x08017448

0800a46c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d119      	bne.n	800a4b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a480:	4b10      	ldr	r3, [pc, #64]	@ (800a4c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a482:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a486:	4910      	ldr	r1, [pc, #64]	@ (800a4c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a488:	4810      	ldr	r0, [pc, #64]	@ (800a4cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a48a:	f00b fb79 	bl	8015b80 <iprintf>

  while (pcb != NULL) {
 800a48e:	e011      	b.n	800a4b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d108      	bne.n	800a4ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7fe fcf4 	bl	8008e90 <tcp_abort>
      pcb = next;
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e002      	b.n	800a4b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1ea      	bne.n	800a490 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	08017404 	.word	0x08017404
 800a4c8:	08017b38 	.word	0x08017b38
 800a4cc:	08017448 	.word	0x08017448

0800a4d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d02a      	beq.n	800a536 <tcp_netif_ip_addr_changed+0x66>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d026      	beq.n	800a536 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a4e8:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <tcp_netif_ip_addr_changed+0x70>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff ffbc 	bl	800a46c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a4f4:	4b13      	ldr	r3, [pc, #76]	@ (800a544 <tcp_netif_ip_addr_changed+0x74>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff ffb6 	bl	800a46c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d017      	beq.n	800a536 <tcp_netif_ip_addr_changed+0x66>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a50e:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <tcp_netif_ip_addr_changed+0x78>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e00c      	b.n	800a530 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d103      	bne.n	800a52a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1ef      	bne.n	800a516 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20003b74 	.word	0x20003b74
 800a544:	20003b6c 	.word	0x20003b6c
 800a548:	20003b70 	.word	0x20003b70

0800a54c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff fb27 	bl	8009bb4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a574:	b590      	push	{r4, r7, lr}
 800a576:	b08d      	sub	sp, #52	@ 0x34
 800a578:	af04      	add	r7, sp, #16
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <tcp_input+0x1c>
 800a584:	4b5b      	ldr	r3, [pc, #364]	@ (800a6f4 <tcp_input+0x180>)
 800a586:	2283      	movs	r2, #131	@ 0x83
 800a588:	495b      	ldr	r1, [pc, #364]	@ (800a6f8 <tcp_input+0x184>)
 800a58a:	485c      	ldr	r0, [pc, #368]	@ (800a6fc <tcp_input+0x188>)
 800a58c:	f00b faf8 	bl	8015b80 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800a590:	4b5b      	ldr	r3, [pc, #364]	@ (800a700 <tcp_input+0x18c>)
 800a592:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800a596:	3301      	adds	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	4b59      	ldr	r3, [pc, #356]	@ (800a700 <tcp_input+0x18c>)
 800a59c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4a57      	ldr	r2, [pc, #348]	@ (800a704 <tcp_input+0x190>)
 800a5a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	895b      	ldrh	r3, [r3, #10]
 800a5ac:	2b13      	cmp	r3, #19
 800a5ae:	d809      	bhi.n	800a5c4 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800a5b0:	4b53      	ldr	r3, [pc, #332]	@ (800a700 <tcp_input+0x18c>)
 800a5b2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	4b51      	ldr	r3, [pc, #324]	@ (800a700 <tcp_input+0x18c>)
 800a5bc:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 800a5c0:	f000 bc36 	b.w	800ae30 <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a5c4:	4b50      	ldr	r3, [pc, #320]	@ (800a708 <tcp_input+0x194>)
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	4a4f      	ldr	r2, [pc, #316]	@ (800a708 <tcp_input+0x194>)
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f008 fd84 	bl	80130dc <ip4_addr_isbroadcast_u32>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d105      	bne.n	800a5e6 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a5da:	4b4b      	ldr	r3, [pc, #300]	@ (800a708 <tcp_input+0x194>)
 800a5dc:	695b      	ldr	r3, [r3, #20]
 800a5de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a5e2:	2be0      	cmp	r3, #224	@ 0xe0
 800a5e4:	d109      	bne.n	800a5fa <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 800a5e6:	4b46      	ldr	r3, [pc, #280]	@ (800a700 <tcp_input+0x18c>)
 800a5e8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	4b43      	ldr	r3, [pc, #268]	@ (800a700 <tcp_input+0x18c>)
 800a5f2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 800a5f6:	f000 bc1b 	b.w	800ae30 <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	891a      	ldrh	r2, [r3, #8]
 800a5fe:	4b43      	ldr	r3, [pc, #268]	@ (800a70c <tcp_input+0x198>)
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4b43      	ldr	r3, [pc, #268]	@ (800a710 <tcp_input+0x19c>)
 800a604:	2106      	movs	r1, #6
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7fc fd6b 	bl	80070e2 <ip_chksum_pseudo>
 800a60c:	4603      	mov	r3, r0
 800a60e:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800a610:	8a3b      	ldrh	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 800a616:	4b3a      	ldr	r3, [pc, #232]	@ (800a700 <tcp_input+0x18c>)
 800a618:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800a61c:	3301      	adds	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	4b37      	ldr	r3, [pc, #220]	@ (800a700 <tcp_input+0x18c>)
 800a622:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      goto dropped;
 800a626:	f000 bc03 	b.w	800ae30 <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a62a:	4b36      	ldr	r3, [pc, #216]	@ (800a704 <tcp_input+0x190>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	899b      	ldrh	r3, [r3, #12]
 800a630:	b29b      	uxth	r3, r3
 800a632:	4618      	mov	r0, r3
 800a634:	f7fc f900 	bl	8006838 <lwip_htons>
 800a638:	4603      	mov	r3, r0
 800a63a:	0b1b      	lsrs	r3, r3, #12
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	2b13      	cmp	r3, #19
 800a648:	d905      	bls.n	800a656 <tcp_input+0xe2>
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	891b      	ldrh	r3, [r3, #8]
 800a652:	429a      	cmp	r2, r3
 800a654:	d908      	bls.n	800a668 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800a656:	4b2a      	ldr	r3, [pc, #168]	@ (800a700 <tcp_input+0x18c>)
 800a658:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a65c:	3301      	adds	r3, #1
 800a65e:	b29a      	uxth	r2, r3
 800a660:	4b27      	ldr	r3, [pc, #156]	@ (800a700 <tcp_input+0x18c>)
 800a662:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 800a666:	e3e3      	b.n	800ae30 <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	3b14      	subs	r3, #20
 800a66e:	b29a      	uxth	r2, r3
 800a670:	4b28      	ldr	r3, [pc, #160]	@ (800a714 <tcp_input+0x1a0>)
 800a672:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a674:	4b28      	ldr	r3, [pc, #160]	@ (800a718 <tcp_input+0x1a4>)
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	895a      	ldrh	r2, [r3, #10]
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	b29b      	uxth	r3, r3
 800a682:	429a      	cmp	r2, r3
 800a684:	d309      	bcc.n	800a69a <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a686:	4b23      	ldr	r3, [pc, #140]	@ (800a714 <tcp_input+0x1a0>)
 800a688:	881a      	ldrh	r2, [r3, #0]
 800a68a:	4b24      	ldr	r3, [pc, #144]	@ (800a71c <tcp_input+0x1a8>)
 800a68c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fd fc70 	bl	8007f78 <pbuf_remove_header>
 800a698:	e06e      	b.n	800a778 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d105      	bne.n	800a6ae <tcp_input+0x13a>
 800a6a2:	4b14      	ldr	r3, [pc, #80]	@ (800a6f4 <tcp_input+0x180>)
 800a6a4:	22c2      	movs	r2, #194	@ 0xc2
 800a6a6:	491e      	ldr	r1, [pc, #120]	@ (800a720 <tcp_input+0x1ac>)
 800a6a8:	4814      	ldr	r0, [pc, #80]	@ (800a6fc <tcp_input+0x188>)
 800a6aa:	f00b fa69 	bl	8015b80 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a6ae:	2114      	movs	r1, #20
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7fd fc61 	bl	8007f78 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	895a      	ldrh	r2, [r3, #10]
 800a6ba:	4b18      	ldr	r3, [pc, #96]	@ (800a71c <tcp_input+0x1a8>)
 800a6bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a6be:	4b15      	ldr	r3, [pc, #84]	@ (800a714 <tcp_input+0x1a0>)
 800a6c0:	881a      	ldrh	r2, [r3, #0]
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <tcp_input+0x1a8>)
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a6ca:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <tcp_input+0x1a8>)
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7fd fc51 	bl	8007f78 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	895b      	ldrh	r3, [r3, #10]
 800a6dc:	89ba      	ldrh	r2, [r7, #12]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d920      	bls.n	800a724 <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800a6e2:	4b07      	ldr	r3, [pc, #28]	@ (800a700 <tcp_input+0x18c>)
 800a6e4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	4b04      	ldr	r3, [pc, #16]	@ (800a700 <tcp_input+0x18c>)
 800a6ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 800a6f2:	e39d      	b.n	800ae30 <tcp_input+0x8bc>
 800a6f4:	08017b6c 	.word	0x08017b6c
 800a6f8:	08017ba0 	.word	0x08017ba0
 800a6fc:	08017bb8 	.word	0x08017bb8
 800a700:	20003a9c 	.word	0x20003a9c
 800a704:	20003b90 	.word	0x20003b90
 800a708:	20000aa8 	.word	0x20000aa8
 800a70c:	20000abc 	.word	0x20000abc
 800a710:	20000ab8 	.word	0x20000ab8
 800a714:	20003b94 	.word	0x20003b94
 800a718:	20003b98 	.word	0x20003b98
 800a71c:	20003b96 	.word	0x20003b96
 800a720:	08017be0 	.word	0x08017be0
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	4a91      	ldr	r2, [pc, #580]	@ (800a970 <tcp_input+0x3fc>)
 800a72c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	89ba      	ldrh	r2, [r7, #12]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fc1e 	bl	8007f78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	891a      	ldrh	r2, [r3, #8]
 800a740:	89bb      	ldrh	r3, [r7, #12]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	b29a      	uxth	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	895b      	ldrh	r3, [r3, #10]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <tcp_input+0x1ea>
 800a752:	4b88      	ldr	r3, [pc, #544]	@ (800a974 <tcp_input+0x400>)
 800a754:	22df      	movs	r2, #223	@ 0xdf
 800a756:	4988      	ldr	r1, [pc, #544]	@ (800a978 <tcp_input+0x404>)
 800a758:	4888      	ldr	r0, [pc, #544]	@ (800a97c <tcp_input+0x408>)
 800a75a:	f00b fa11 	bl	8015b80 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	891a      	ldrh	r2, [r3, #8]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	891b      	ldrh	r3, [r3, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d005      	beq.n	800a778 <tcp_input+0x204>
 800a76c:	4b81      	ldr	r3, [pc, #516]	@ (800a974 <tcp_input+0x400>)
 800a76e:	22e0      	movs	r2, #224	@ 0xe0
 800a770:	4983      	ldr	r1, [pc, #524]	@ (800a980 <tcp_input+0x40c>)
 800a772:	4882      	ldr	r0, [pc, #520]	@ (800a97c <tcp_input+0x408>)
 800a774:	f00b fa04 	bl	8015b80 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a778:	4b82      	ldr	r3, [pc, #520]	@ (800a984 <tcp_input+0x410>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	4a80      	ldr	r2, [pc, #512]	@ (800a984 <tcp_input+0x410>)
 800a782:	6814      	ldr	r4, [r2, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f7fc f857 	bl	8006838 <lwip_htons>
 800a78a:	4603      	mov	r3, r0
 800a78c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a78e:	4b7d      	ldr	r3, [pc, #500]	@ (800a984 <tcp_input+0x410>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	b29b      	uxth	r3, r3
 800a796:	4a7b      	ldr	r2, [pc, #492]	@ (800a984 <tcp_input+0x410>)
 800a798:	6814      	ldr	r4, [r2, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fc f84c 	bl	8006838 <lwip_htons>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a7a4:	4b77      	ldr	r3, [pc, #476]	@ (800a984 <tcp_input+0x410>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	4a76      	ldr	r2, [pc, #472]	@ (800a984 <tcp_input+0x410>)
 800a7ac:	6814      	ldr	r4, [r2, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fc f858 	bl	8006864 <lwip_htonl>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	4a73      	ldr	r2, [pc, #460]	@ (800a988 <tcp_input+0x414>)
 800a7bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a7be:	4b71      	ldr	r3, [pc, #452]	@ (800a984 <tcp_input+0x410>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4a6f      	ldr	r2, [pc, #444]	@ (800a984 <tcp_input+0x410>)
 800a7c6:	6814      	ldr	r4, [r2, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fc f84b 	bl	8006864 <lwip_htonl>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	60a3      	str	r3, [r4, #8]
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	4a6d      	ldr	r2, [pc, #436]	@ (800a98c <tcp_input+0x418>)
 800a7d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a7d8:	4b6a      	ldr	r3, [pc, #424]	@ (800a984 <tcp_input+0x410>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	89db      	ldrh	r3, [r3, #14]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4a68      	ldr	r2, [pc, #416]	@ (800a984 <tcp_input+0x410>)
 800a7e2:	6814      	ldr	r4, [r2, #0]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fc f827 	bl	8006838 <lwip_htons>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a7ee:	4b65      	ldr	r3, [pc, #404]	@ (800a984 <tcp_input+0x410>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	899b      	ldrh	r3, [r3, #12]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fc f81e 	bl	8006838 <lwip_htons>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a804:	b2da      	uxtb	r2, r3
 800a806:	4b62      	ldr	r3, [pc, #392]	@ (800a990 <tcp_input+0x41c>)
 800a808:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	891a      	ldrh	r2, [r3, #8]
 800a80e:	4b61      	ldr	r3, [pc, #388]	@ (800a994 <tcp_input+0x420>)
 800a810:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a812:	4b5f      	ldr	r3, [pc, #380]	@ (800a990 <tcp_input+0x41c>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d014      	beq.n	800a848 <tcp_input+0x2d4>
    tcplen++;
 800a81e:	4b5d      	ldr	r3, [pc, #372]	@ (800a994 <tcp_input+0x420>)
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	3301      	adds	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	4b5b      	ldr	r3, [pc, #364]	@ (800a994 <tcp_input+0x420>)
 800a828:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	891a      	ldrh	r2, [r3, #8]
 800a82e:	4b59      	ldr	r3, [pc, #356]	@ (800a994 <tcp_input+0x420>)
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	429a      	cmp	r2, r3
 800a834:	d908      	bls.n	800a848 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 800a836:	4b58      	ldr	r3, [pc, #352]	@ (800a998 <tcp_input+0x424>)
 800a838:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a83c:	3301      	adds	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	4b55      	ldr	r3, [pc, #340]	@ (800a998 <tcp_input+0x424>)
 800a842:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 800a846:	e2f3      	b.n	800ae30 <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a848:	2300      	movs	r3, #0
 800a84a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a84c:	4b53      	ldr	r3, [pc, #332]	@ (800a99c <tcp_input+0x428>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	61fb      	str	r3, [r7, #28]
 800a852:	e07f      	b.n	800a954 <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	7d1b      	ldrb	r3, [r3, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <tcp_input+0x2f4>
 800a85c:	4b45      	ldr	r3, [pc, #276]	@ (800a974 <tcp_input+0x400>)
 800a85e:	22fb      	movs	r2, #251	@ 0xfb
 800a860:	494f      	ldr	r1, [pc, #316]	@ (800a9a0 <tcp_input+0x42c>)
 800a862:	4846      	ldr	r0, [pc, #280]	@ (800a97c <tcp_input+0x408>)
 800a864:	f00b f98c 	bl	8015b80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	7d1b      	ldrb	r3, [r3, #20]
 800a86c:	2b0a      	cmp	r3, #10
 800a86e:	d105      	bne.n	800a87c <tcp_input+0x308>
 800a870:	4b40      	ldr	r3, [pc, #256]	@ (800a974 <tcp_input+0x400>)
 800a872:	22fc      	movs	r2, #252	@ 0xfc
 800a874:	494b      	ldr	r1, [pc, #300]	@ (800a9a4 <tcp_input+0x430>)
 800a876:	4841      	ldr	r0, [pc, #260]	@ (800a97c <tcp_input+0x408>)
 800a878:	f00b f982 	bl	8015b80 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	7d1b      	ldrb	r3, [r3, #20]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d105      	bne.n	800a890 <tcp_input+0x31c>
 800a884:	4b3b      	ldr	r3, [pc, #236]	@ (800a974 <tcp_input+0x400>)
 800a886:	22fd      	movs	r2, #253	@ 0xfd
 800a888:	4947      	ldr	r1, [pc, #284]	@ (800a9a8 <tcp_input+0x434>)
 800a88a:	483c      	ldr	r0, [pc, #240]	@ (800a97c <tcp_input+0x408>)
 800a88c:	f00b f978 	bl	8015b80 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	7a1b      	ldrb	r3, [r3, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00c      	beq.n	800a8b2 <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	7a1a      	ldrb	r2, [r3, #8]
 800a89c:	4b43      	ldr	r3, [pc, #268]	@ (800a9ac <tcp_input+0x438>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d002      	beq.n	800a8b2 <tcp_input+0x33e>
      prev = pcb;
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	61bb      	str	r3, [r7, #24]
      continue;
 800a8b0:	e04d      	b.n	800a94e <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	8b1a      	ldrh	r2, [r3, #24]
 800a8b6:	4b33      	ldr	r3, [pc, #204]	@ (800a984 <tcp_input+0x410>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d143      	bne.n	800a94a <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	8ada      	ldrh	r2, [r3, #22]
 800a8c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a984 <tcp_input+0x410>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	885b      	ldrh	r3, [r3, #2]
 800a8cc:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d13b      	bne.n	800a94a <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b35      	ldr	r3, [pc, #212]	@ (800a9ac <tcp_input+0x438>)
 800a8d8:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d135      	bne.n	800a94a <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	4b32      	ldr	r3, [pc, #200]	@ (800a9ac <tcp_input+0x438>)
 800a8e4:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d12f      	bne.n	800a94a <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d106      	bne.n	800a902 <tcp_input+0x38e>
 800a8f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a974 <tcp_input+0x400>)
 800a8f6:	f240 120d 	movw	r2, #269	@ 0x10d
 800a8fa:	492d      	ldr	r1, [pc, #180]	@ (800a9b0 <tcp_input+0x43c>)
 800a8fc:	481f      	ldr	r0, [pc, #124]	@ (800a97c <tcp_input+0x408>)
 800a8fe:	f00b f93f 	bl	8015b80 <iprintf>
      if (prev != NULL) {
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <tcp_input+0x3ac>
        prev->next = pcb->next;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	68da      	ldr	r2, [r3, #12]
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a910:	4b22      	ldr	r3, [pc, #136]	@ (800a99c <tcp_input+0x428>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a918:	4a20      	ldr	r2, [pc, #128]	@ (800a99c <tcp_input+0x428>)
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	e007      	b.n	800a930 <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800a920:	4b1d      	ldr	r3, [pc, #116]	@ (800a998 <tcp_input+0x424>)
 800a922:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800a926:	3301      	adds	r3, #1
 800a928:	b29a      	uxth	r2, r3
 800a92a:	4b1b      	ldr	r3, [pc, #108]	@ (800a998 <tcp_input+0x424>)
 800a92c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	69fa      	ldr	r2, [r7, #28]
 800a936:	429a      	cmp	r2, r3
 800a938:	d111      	bne.n	800a95e <tcp_input+0x3ea>
 800a93a:	4b0e      	ldr	r3, [pc, #56]	@ (800a974 <tcp_input+0x400>)
 800a93c:	f240 1215 	movw	r2, #277	@ 0x115
 800a940:	491c      	ldr	r1, [pc, #112]	@ (800a9b4 <tcp_input+0x440>)
 800a942:	480e      	ldr	r0, [pc, #56]	@ (800a97c <tcp_input+0x408>)
 800a944:	f00b f91c 	bl	8015b80 <iprintf>
      break;
 800a948:	e009      	b.n	800a95e <tcp_input+0x3ea>
    }
    prev = pcb;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	61fb      	str	r3, [r7, #28]
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f47f af7c 	bne.w	800a854 <tcp_input+0x2e0>
 800a95c:	e000      	b.n	800a960 <tcp_input+0x3ec>
      break;
 800a95e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f040 80c4 	bne.w	800aaf0 <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a968:	4b13      	ldr	r3, [pc, #76]	@ (800a9b8 <tcp_input+0x444>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	61fb      	str	r3, [r7, #28]
 800a96e:	e065      	b.n	800aa3c <tcp_input+0x4c8>
 800a970:	20003b98 	.word	0x20003b98
 800a974:	08017b6c 	.word	0x08017b6c
 800a978:	08017bf0 	.word	0x08017bf0
 800a97c:	08017bb8 	.word	0x08017bb8
 800a980:	08017bfc 	.word	0x08017bfc
 800a984:	20003b90 	.word	0x20003b90
 800a988:	20003ba0 	.word	0x20003ba0
 800a98c:	20003ba4 	.word	0x20003ba4
 800a990:	20003bac 	.word	0x20003bac
 800a994:	20003baa 	.word	0x20003baa
 800a998:	20003a9c 	.word	0x20003a9c
 800a99c:	20003b74 	.word	0x20003b74
 800a9a0:	08017c1c 	.word	0x08017c1c
 800a9a4:	08017c44 	.word	0x08017c44
 800a9a8:	08017c70 	.word	0x08017c70
 800a9ac:	20000aa8 	.word	0x20000aa8
 800a9b0:	08017c98 	.word	0x08017c98
 800a9b4:	08017cc4 	.word	0x08017cc4
 800a9b8:	20003b78 	.word	0x20003b78
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	7d1b      	ldrb	r3, [r3, #20]
 800a9c0:	2b0a      	cmp	r3, #10
 800a9c2:	d006      	beq.n	800a9d2 <tcp_input+0x45e>
 800a9c4:	4b91      	ldr	r3, [pc, #580]	@ (800ac0c <tcp_input+0x698>)
 800a9c6:	f240 121f 	movw	r2, #287	@ 0x11f
 800a9ca:	4991      	ldr	r1, [pc, #580]	@ (800ac10 <tcp_input+0x69c>)
 800a9cc:	4891      	ldr	r0, [pc, #580]	@ (800ac14 <tcp_input+0x6a0>)
 800a9ce:	f00b f8d7 	bl	8015b80 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	7a1b      	ldrb	r3, [r3, #8]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d009      	beq.n	800a9ee <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	7a1a      	ldrb	r2, [r3, #8]
 800a9de:	4b8e      	ldr	r3, [pc, #568]	@ (800ac18 <tcp_input+0x6a4>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d122      	bne.n	800aa34 <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	8b1a      	ldrh	r2, [r3, #24]
 800a9f2:	4b8a      	ldr	r3, [pc, #552]	@ (800ac1c <tcp_input+0x6a8>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d11b      	bne.n	800aa36 <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	8ada      	ldrh	r2, [r3, #22]
 800aa02:	4b86      	ldr	r3, [pc, #536]	@ (800ac1c <tcp_input+0x6a8>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	885b      	ldrh	r3, [r3, #2]
 800aa08:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d113      	bne.n	800aa36 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	4b81      	ldr	r3, [pc, #516]	@ (800ac18 <tcp_input+0x6a4>)
 800aa14:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d10d      	bne.n	800aa36 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b7e      	ldr	r3, [pc, #504]	@ (800ac18 <tcp_input+0x6a4>)
 800aa20:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d107      	bne.n	800aa36 <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800aa26:	69f8      	ldr	r0, [r7, #28]
 800aa28:	f000 fb78 	bl	800b11c <tcp_timewait_input>
        }
        pbuf_free(p);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fd fb29 	bl	8008084 <pbuf_free>
        return;
 800aa32:	e20a      	b.n	800ae4a <tcp_input+0x8d6>
        continue;
 800aa34:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1bc      	bne.n	800a9bc <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa46:	4b76      	ldr	r3, [pc, #472]	@ (800ac20 <tcp_input+0x6ac>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e02a      	b.n	800aaa4 <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	7a1b      	ldrb	r3, [r3, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00c      	beq.n	800aa70 <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	7a1a      	ldrb	r2, [r3, #8]
 800aa5a:	4b6f      	ldr	r3, [pc, #444]	@ (800ac18 <tcp_input+0x6a4>)
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800aa62:	3301      	adds	r3, #1
 800aa64:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d002      	beq.n	800aa70 <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	61bb      	str	r3, [r7, #24]
        continue;
 800aa6e:	e016      	b.n	800aa9e <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	8ada      	ldrh	r2, [r3, #22]
 800aa74:	4b69      	ldr	r3, [pc, #420]	@ (800ac1c <tcp_input+0x6a8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	885b      	ldrh	r3, [r3, #2]
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d10c      	bne.n	800aa9a <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	4b64      	ldr	r3, [pc, #400]	@ (800ac18 <tcp_input+0x6a4>)
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d00f      	beq.n	800aaac <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00d      	beq.n	800aaae <tcp_input+0x53a>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d009      	beq.n	800aaae <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1d1      	bne.n	800aa4e <tcp_input+0x4da>
 800aaaa:	e000      	b.n	800aaae <tcp_input+0x53a>
            break;
 800aaac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01d      	beq.n	800aaf0 <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00b      	beq.n	800aad2 <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aac2:	4b57      	ldr	r3, [pc, #348]	@ (800ac20 <tcp_input+0x6ac>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aaca:	4a55      	ldr	r2, [pc, #340]	@ (800ac20 <tcp_input+0x6ac>)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	e007      	b.n	800aae2 <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800aad2:	4b54      	ldr	r3, [pc, #336]	@ (800ac24 <tcp_input+0x6b0>)
 800aad4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800aad8:	3301      	adds	r3, #1
 800aada:	b29a      	uxth	r2, r3
 800aadc:	4b51      	ldr	r3, [pc, #324]	@ (800ac24 <tcp_input+0x6b0>)
 800aade:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f000 fa12 	bl	800af0c <tcp_listen_input>
      }
      pbuf_free(p);
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7fd facb 	bl	8008084 <pbuf_free>
      return;
 800aaee:	e1ac      	b.n	800ae4a <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 8162 	beq.w	800adbc <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aaf8:	4b4b      	ldr	r3, [pc, #300]	@ (800ac28 <tcp_input+0x6b4>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	891a      	ldrh	r2, [r3, #8]
 800ab02:	4b49      	ldr	r3, [pc, #292]	@ (800ac28 <tcp_input+0x6b4>)
 800ab04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ab06:	4a48      	ldr	r2, [pc, #288]	@ (800ac28 <tcp_input+0x6b4>)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ab0c:	4b43      	ldr	r3, [pc, #268]	@ (800ac1c <tcp_input+0x6a8>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a45      	ldr	r2, [pc, #276]	@ (800ac28 <tcp_input+0x6b4>)
 800ab12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ab14:	4b45      	ldr	r3, [pc, #276]	@ (800ac2c <tcp_input+0x6b8>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ab1a:	4b45      	ldr	r3, [pc, #276]	@ (800ac30 <tcp_input+0x6bc>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ab20:	4b44      	ldr	r3, [pc, #272]	@ (800ac34 <tcp_input+0x6c0>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ab26:	4b44      	ldr	r3, [pc, #272]	@ (800ac38 <tcp_input+0x6c4>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d006      	beq.n	800ab40 <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7b5b      	ldrb	r3, [r3, #13]
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01e      	beq.n	800ab86 <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab48:	69f8      	ldr	r0, [r7, #28]
 800ab4a:	f7fe ffb7 	bl	8009abc <tcp_process_refused_data>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f113 0f0d 	cmn.w	r3, #13
 800ab54:	d007      	beq.n	800ab66 <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d013      	beq.n	800ab86 <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ab5e:	4b37      	ldr	r3, [pc, #220]	@ (800ac3c <tcp_input+0x6c8>)
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00f      	beq.n	800ab86 <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ab6e:	69f8      	ldr	r0, [r7, #28]
 800ab70:	f003 fe9e 	bl	800e8b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800ab74:	4b2b      	ldr	r3, [pc, #172]	@ (800ac24 <tcp_input+0x6b0>)
 800ab76:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	4b29      	ldr	r3, [pc, #164]	@ (800ac24 <tcp_input+0x6b0>)
 800ab80:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ab84:	e107      	b.n	800ad96 <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 800ab86:	4a2e      	ldr	r2, [pc, #184]	@ (800ac40 <tcp_input+0x6cc>)
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ab8c:	69f8      	ldr	r0, [r7, #28]
 800ab8e:	f000 fb3f 	bl	800b210 <tcp_process>
 800ab92:	4603      	mov	r3, r0
 800ab94:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab9a:	f113 0f0d 	cmn.w	r3, #13
 800ab9e:	f000 80ef 	beq.w	800ad80 <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 800aba2:	4b23      	ldr	r3, [pc, #140]	@ (800ac30 <tcp_input+0x6bc>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	f003 0308 	and.w	r3, r3, #8
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d015      	beq.n	800abda <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d008      	beq.n	800abca <tcp_input+0x656>
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abbe:	69fa      	ldr	r2, [r7, #28]
 800abc0:	6912      	ldr	r2, [r2, #16]
 800abc2:	f06f 010d 	mvn.w	r1, #13
 800abc6:	4610      	mov	r0, r2
 800abc8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800abca:	69f9      	ldr	r1, [r7, #28]
 800abcc:	481d      	ldr	r0, [pc, #116]	@ (800ac44 <tcp_input+0x6d0>)
 800abce:	f7ff fb59 	bl	800a284 <tcp_pcb_remove>
        tcp_free(pcb);
 800abd2:	69f8      	ldr	r0, [r7, #28]
 800abd4:	f7fd fe74 	bl	80088c0 <tcp_free>
 800abd8:	e0dd      	b.n	800ad96 <tcp_input+0x822>
      } else {
        err = ERR_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800abde:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <tcp_input+0x6c0>)
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d03b      	beq.n	800ac5e <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800abe6:	4b13      	ldr	r3, [pc, #76]	@ (800ac34 <tcp_input+0x6c0>)
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d028      	beq.n	800ac48 <tcp_input+0x6d4>
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	6910      	ldr	r0, [r2, #16]
 800ac00:	897a      	ldrh	r2, [r7, #10]
 800ac02:	69f9      	ldr	r1, [r7, #28]
 800ac04:	4798      	blx	r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	74fb      	strb	r3, [r7, #19]
 800ac0a:	e01f      	b.n	800ac4c <tcp_input+0x6d8>
 800ac0c:	08017b6c 	.word	0x08017b6c
 800ac10:	08017cf0 	.word	0x08017cf0
 800ac14:	08017bb8 	.word	0x08017bb8
 800ac18:	20000aa8 	.word	0x20000aa8
 800ac1c:	20003b90 	.word	0x20003b90
 800ac20:	20003b70 	.word	0x20003b70
 800ac24:	20003a9c 	.word	0x20003a9c
 800ac28:	20003b80 	.word	0x20003b80
 800ac2c:	20003bb0 	.word	0x20003bb0
 800ac30:	20003bad 	.word	0x20003bad
 800ac34:	20003ba8 	.word	0x20003ba8
 800ac38:	20003bac 	.word	0x20003bac
 800ac3c:	20003baa 	.word	0x20003baa
 800ac40:	20003bb4 	.word	0x20003bb4
 800ac44:	20003b74 	.word	0x20003b74
 800ac48:	2300      	movs	r3, #0
 800ac4a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac50:	f113 0f0d 	cmn.w	r3, #13
 800ac54:	f000 8096 	beq.w	800ad84 <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ac58:	4b7d      	ldr	r3, [pc, #500]	@ (800ae50 <tcp_input+0x8dc>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ac5e:	69f8      	ldr	r0, [r7, #28]
 800ac60:	f000 f914 	bl	800ae8c <tcp_input_delayed_close>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f040 808e 	bne.w	800ad88 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ac6c:	4b79      	ldr	r3, [pc, #484]	@ (800ae54 <tcp_input+0x8e0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d041      	beq.n	800acf8 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <tcp_input+0x716>
 800ac7c:	4b76      	ldr	r3, [pc, #472]	@ (800ae58 <tcp_input+0x8e4>)
 800ac7e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ac82:	4976      	ldr	r1, [pc, #472]	@ (800ae5c <tcp_input+0x8e8>)
 800ac84:	4876      	ldr	r0, [pc, #472]	@ (800ae60 <tcp_input+0x8ec>)
 800ac86:	f00a ff7b 	bl	8015b80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	8b5b      	ldrh	r3, [r3, #26]
 800ac8e:	f003 0310 	and.w	r3, r3, #16
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d008      	beq.n	800aca8 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac96:	4b6f      	ldr	r3, [pc, #444]	@ (800ae54 <tcp_input+0x8e0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fd f9f2 	bl	8008084 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aca0:	69f8      	ldr	r0, [r7, #28]
 800aca2:	f7fe f8f5 	bl	8008e90 <tcp_abort>
            goto aborted;
 800aca6:	e076      	b.n	800ad96 <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00c      	beq.n	800accc <tcp_input+0x758>
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	6918      	ldr	r0, [r3, #16]
 800acbc:	4b65      	ldr	r3, [pc, #404]	@ (800ae54 <tcp_input+0x8e0>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	2300      	movs	r3, #0
 800acc2:	69f9      	ldr	r1, [r7, #28]
 800acc4:	47a0      	blx	r4
 800acc6:	4603      	mov	r3, r0
 800acc8:	74fb      	strb	r3, [r7, #19]
 800acca:	e008      	b.n	800acde <tcp_input+0x76a>
 800accc:	4b61      	ldr	r3, [pc, #388]	@ (800ae54 <tcp_input+0x8e0>)
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	2300      	movs	r3, #0
 800acd2:	69f9      	ldr	r1, [r7, #28]
 800acd4:	2000      	movs	r0, #0
 800acd6:	f7fe ffe5 	bl	8009ca4 <tcp_recv_null>
 800acda:	4603      	mov	r3, r0
 800acdc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800acde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ace2:	f113 0f0d 	cmn.w	r3, #13
 800ace6:	d051      	beq.n	800ad8c <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ace8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800acf0:	4b58      	ldr	r3, [pc, #352]	@ (800ae54 <tcp_input+0x8e0>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800acf8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae64 <tcp_input+0x8f0>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d030      	beq.n	800ad66 <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d009      	beq.n	800ad20 <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad10:	7b5a      	ldrb	r2, [r3, #13]
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad16:	f042 0220 	orr.w	r2, r2, #32
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	735a      	strb	r2, [r3, #13]
 800ad1e:	e022      	b.n	800ad66 <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad24:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ad28:	d005      	beq.n	800ad36 <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2e:	3301      	adds	r3, #1
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <tcp_input+0x7e4>
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	6918      	ldr	r0, [r3, #16]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	69f9      	ldr	r1, [r7, #28]
 800ad50:	47a0      	blx	r4
 800ad52:	4603      	mov	r3, r0
 800ad54:	74fb      	strb	r3, [r7, #19]
 800ad56:	e001      	b.n	800ad5c <tcp_input+0x7e8>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ad5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad60:	f113 0f0d 	cmn.w	r3, #13
 800ad64:	d014      	beq.n	800ad90 <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ad66:	4b40      	ldr	r3, [pc, #256]	@ (800ae68 <tcp_input+0x8f4>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad6c:	69f8      	ldr	r0, [r7, #28]
 800ad6e:	f000 f88d 	bl	800ae8c <tcp_input_delayed_close>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10d      	bne.n	800ad94 <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ad78:	69f8      	ldr	r0, [r7, #28]
 800ad7a:	f002 ff5d 	bl	800dc38 <tcp_output>
 800ad7e:	e00a      	b.n	800ad96 <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ad80:	bf00      	nop
 800ad82:	e008      	b.n	800ad96 <tcp_input+0x822>
              goto aborted;
 800ad84:	bf00      	nop
 800ad86:	e006      	b.n	800ad96 <tcp_input+0x822>
          goto aborted;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <tcp_input+0x822>
            goto aborted;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <tcp_input+0x822>
              goto aborted;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <tcp_input+0x822>
          goto aborted;
 800ad94:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad96:	4b34      	ldr	r3, [pc, #208]	@ (800ae68 <tcp_input+0x8f4>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ae54 <tcp_input+0x8e0>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ada2:	4b32      	ldr	r3, [pc, #200]	@ (800ae6c <tcp_input+0x8f8>)
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d04e      	beq.n	800ae48 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 800adaa:	4b30      	ldr	r3, [pc, #192]	@ (800ae6c <tcp_input+0x8f8>)
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fd f968 	bl	8008084 <pbuf_free>
      inseg.p = NULL;
 800adb4:	4b2d      	ldr	r3, [pc, #180]	@ (800ae6c <tcp_input+0x8f8>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800adba:	e045      	b.n	800ae48 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800adbc:	4b2c      	ldr	r3, [pc, #176]	@ (800ae70 <tcp_input+0x8fc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	899b      	ldrh	r3, [r3, #12]
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fb fd37 	bl	8006838 <lwip_htons>
 800adca:	4603      	mov	r3, r0
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b00      	cmp	r3, #0
 800add4:	d128      	bne.n	800ae28 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 800add6:	4b27      	ldr	r3, [pc, #156]	@ (800ae74 <tcp_input+0x900>)
 800add8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800addc:	3301      	adds	r3, #1
 800adde:	b29a      	uxth	r2, r3
 800ade0:	4b24      	ldr	r3, [pc, #144]	@ (800ae74 <tcp_input+0x900>)
 800ade2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 800ade6:	4b23      	ldr	r3, [pc, #140]	@ (800ae74 <tcp_input+0x900>)
 800ade8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800adec:	3301      	adds	r3, #1
 800adee:	b29a      	uxth	r2, r3
 800adf0:	4b20      	ldr	r3, [pc, #128]	@ (800ae74 <tcp_input+0x900>)
 800adf2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adf6:	4b20      	ldr	r3, [pc, #128]	@ (800ae78 <tcp_input+0x904>)
 800adf8:	6819      	ldr	r1, [r3, #0]
 800adfa:	4b20      	ldr	r3, [pc, #128]	@ (800ae7c <tcp_input+0x908>)
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	4b1f      	ldr	r3, [pc, #124]	@ (800ae80 <tcp_input+0x90c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae06:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <tcp_input+0x8fc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae0a:	885b      	ldrh	r3, [r3, #2]
 800ae0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae0e:	4a18      	ldr	r2, [pc, #96]	@ (800ae70 <tcp_input+0x8fc>)
 800ae10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae12:	8812      	ldrh	r2, [r2, #0]
 800ae14:	b292      	uxth	r2, r2
 800ae16:	9202      	str	r2, [sp, #8]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ae84 <tcp_input+0x910>)
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ae88 <tcp_input+0x914>)
 800ae20:	4602      	mov	r2, r0
 800ae22:	2000      	movs	r0, #0
 800ae24:	f003 fcf2 	bl	800e80c <tcp_rst>
    pbuf_free(p);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fd f92b 	bl	8008084 <pbuf_free>
  return;
 800ae2e:	e00b      	b.n	800ae48 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800ae30:	4b10      	ldr	r3, [pc, #64]	@ (800ae74 <tcp_input+0x900>)
 800ae32:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800ae36:	3301      	adds	r3, #1
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ae74 <tcp_input+0x900>)
 800ae3c:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7fd f91f 	bl	8008084 <pbuf_free>
 800ae46:	e000      	b.n	800ae4a <tcp_input+0x8d6>
  return;
 800ae48:	bf00      	nop
}
 800ae4a:	3724      	adds	r7, #36	@ 0x24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}
 800ae50:	20003ba8 	.word	0x20003ba8
 800ae54:	20003bb0 	.word	0x20003bb0
 800ae58:	08017b6c 	.word	0x08017b6c
 800ae5c:	08017d20 	.word	0x08017d20
 800ae60:	08017bb8 	.word	0x08017bb8
 800ae64:	20003bad 	.word	0x20003bad
 800ae68:	20003bb4 	.word	0x20003bb4
 800ae6c:	20003b80 	.word	0x20003b80
 800ae70:	20003b90 	.word	0x20003b90
 800ae74:	20003a9c 	.word	0x20003a9c
 800ae78:	20003ba4 	.word	0x20003ba4
 800ae7c:	20003baa 	.word	0x20003baa
 800ae80:	20003ba0 	.word	0x20003ba0
 800ae84:	20000ab8 	.word	0x20000ab8
 800ae88:	20000abc 	.word	0x20000abc

0800ae8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <tcp_input_delayed_close+0x1c>
 800ae9a:	4b17      	ldr	r3, [pc, #92]	@ (800aef8 <tcp_input_delayed_close+0x6c>)
 800ae9c:	f240 225a 	movw	r2, #602	@ 0x25a
 800aea0:	4916      	ldr	r1, [pc, #88]	@ (800aefc <tcp_input_delayed_close+0x70>)
 800aea2:	4817      	ldr	r0, [pc, #92]	@ (800af00 <tcp_input_delayed_close+0x74>)
 800aea4:	f00a fe6c 	bl	8015b80 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aea8:	4b16      	ldr	r3, [pc, #88]	@ (800af04 <tcp_input_delayed_close+0x78>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01c      	beq.n	800aeee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8b5b      	ldrh	r3, [r3, #26]
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10d      	bne.n	800aedc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d008      	beq.n	800aedc <tcp_input_delayed_close+0x50>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6912      	ldr	r2, [r2, #16]
 800aed4:	f06f 010e 	mvn.w	r1, #14
 800aed8:	4610      	mov	r0, r2
 800aeda:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	480a      	ldr	r0, [pc, #40]	@ (800af08 <tcp_input_delayed_close+0x7c>)
 800aee0:	f7ff f9d0 	bl	800a284 <tcp_pcb_remove>
    tcp_free(pcb);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7fd fceb 	bl	80088c0 <tcp_free>
    return 1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	08017b6c 	.word	0x08017b6c
 800aefc:	08017d3c 	.word	0x08017d3c
 800af00:	08017bb8 	.word	0x08017bb8
 800af04:	20003bad 	.word	0x20003bad
 800af08:	20003b74 	.word	0x20003b74

0800af0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800af0c:	b590      	push	{r4, r7, lr}
 800af0e:	b08b      	sub	sp, #44	@ 0x2c
 800af10:	af04      	add	r7, sp, #16
 800af12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800af14:	4b73      	ldr	r3, [pc, #460]	@ (800b0e4 <tcp_listen_input+0x1d8>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f040 80da 	bne.w	800b0d6 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <tcp_listen_input+0x2a>
 800af28:	4b6f      	ldr	r3, [pc, #444]	@ (800b0e8 <tcp_listen_input+0x1dc>)
 800af2a:	f240 2281 	movw	r2, #641	@ 0x281
 800af2e:	496f      	ldr	r1, [pc, #444]	@ (800b0ec <tcp_listen_input+0x1e0>)
 800af30:	486f      	ldr	r0, [pc, #444]	@ (800b0f0 <tcp_listen_input+0x1e4>)
 800af32:	f00a fe25 	bl	8015b80 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800af36:	4b6b      	ldr	r3, [pc, #428]	@ (800b0e4 <tcp_listen_input+0x1d8>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d019      	beq.n	800af76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af42:	4b6c      	ldr	r3, [pc, #432]	@ (800b0f4 <tcp_listen_input+0x1e8>)
 800af44:	6819      	ldr	r1, [r3, #0]
 800af46:	4b6c      	ldr	r3, [pc, #432]	@ (800b0f8 <tcp_listen_input+0x1ec>)
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	4b6b      	ldr	r3, [pc, #428]	@ (800b0fc <tcp_listen_input+0x1f0>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af52:	4b6b      	ldr	r3, [pc, #428]	@ (800b100 <tcp_listen_input+0x1f4>)
 800af54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af56:	885b      	ldrh	r3, [r3, #2]
 800af58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af5a:	4a69      	ldr	r2, [pc, #420]	@ (800b100 <tcp_listen_input+0x1f4>)
 800af5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af5e:	8812      	ldrh	r2, [r2, #0]
 800af60:	b292      	uxth	r2, r2
 800af62:	9202      	str	r2, [sp, #8]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	4b67      	ldr	r3, [pc, #412]	@ (800b104 <tcp_listen_input+0x1f8>)
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	4b67      	ldr	r3, [pc, #412]	@ (800b108 <tcp_listen_input+0x1fc>)
 800af6c:	4602      	mov	r2, r0
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f003 fc4c 	bl	800e80c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800af74:	e0b1      	b.n	800b0da <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 800af76:	4b5b      	ldr	r3, [pc, #364]	@ (800b0e4 <tcp_listen_input+0x1d8>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80ab 	beq.w	800b0da <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	7d5b      	ldrb	r3, [r3, #21]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe ffaf 	bl	8009eec <tcp_alloc>
 800af8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d119      	bne.n	800afca <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 800af96:	4b5d      	ldr	r3, [pc, #372]	@ (800b10c <tcp_listen_input+0x200>)
 800af98:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800af9c:	3301      	adds	r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	4b5a      	ldr	r3, [pc, #360]	@ (800b10c <tcp_listen_input+0x200>)
 800afa2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <tcp_listen_input+0xb8>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	6910      	ldr	r0, [r2, #16]
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afba:	2100      	movs	r1, #0
 800afbc:	4798      	blx	r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	73bb      	strb	r3, [r7, #14]
      return;
 800afc2:	e08b      	b.n	800b0dc <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800afc4:	23f0      	movs	r3, #240	@ 0xf0
 800afc6:	73bb      	strb	r3, [r7, #14]
      return;
 800afc8:	e088      	b.n	800b0dc <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800afca:	4b51      	ldr	r3, [pc, #324]	@ (800b110 <tcp_listen_input+0x204>)
 800afcc:	695a      	ldr	r2, [r3, #20]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800afd2:	4b4f      	ldr	r3, [pc, #316]	@ (800b110 <tcp_listen_input+0x204>)
 800afd4:	691a      	ldr	r2, [r3, #16]
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	8ada      	ldrh	r2, [r3, #22]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800afe2:	4b47      	ldr	r3, [pc, #284]	@ (800b100 <tcp_listen_input+0x1f4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	b29a      	uxth	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2203      	movs	r2, #3
 800aff2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aff4:	4b41      	ldr	r3, [pc, #260]	@ (800b0fc <tcp_listen_input+0x1f0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b006:	6978      	ldr	r0, [r7, #20]
 800b008:	f7ff f9d0 	bl	800a3ac <tcp_next_iss>
 800b00c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b026:	4b35      	ldr	r3, [pc, #212]	@ (800b0fc <tcp_listen_input+0x1f0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	1e5a      	subs	r2, r3, #1
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7a5b      	ldrb	r3, [r3, #9]
 800b042:	f003 030c 	and.w	r3, r3, #12
 800b046:	b2da      	uxtb	r2, r3
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	7a1a      	ldrb	r2, [r3, #8]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b054:	4b2f      	ldr	r3, [pc, #188]	@ (800b114 <tcp_listen_input+0x208>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	60da      	str	r2, [r3, #12]
 800b05c:	4a2d      	ldr	r2, [pc, #180]	@ (800b114 <tcp_listen_input+0x208>)
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	f003 fd95 	bl	800eb90 <tcp_timer_needed>
 800b066:	4b2c      	ldr	r3, [pc, #176]	@ (800b118 <tcp_listen_input+0x20c>)
 800b068:	2201      	movs	r2, #1
 800b06a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b06c:	6978      	ldr	r0, [r7, #20]
 800b06e:	f001 fd8d 	bl	800cb8c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b072:	4b23      	ldr	r3, [pc, #140]	@ (800b100 <tcp_listen_input+0x1f4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	89db      	ldrh	r3, [r3, #14]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	3304      	adds	r3, #4
 800b094:	4618      	mov	r0, r3
 800b096:	f007 fc75 	bl	8012984 <ip4_route>
 800b09a:	4601      	mov	r1, r0
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7ff f9a8 	bl	800a3f8 <tcp_eff_send_mss_netif>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b0b0:	2112      	movs	r1, #18
 800b0b2:	6978      	ldr	r0, [r7, #20]
 800b0b4:	f002 fcc0 	bl	800da38 <tcp_enqueue_flags>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	6978      	ldr	r0, [r7, #20]
 800b0c8:	f7fd fe24 	bl	8008d14 <tcp_abandon>
      return;
 800b0cc:	e006      	b.n	800b0dc <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800b0ce:	6978      	ldr	r0, [r7, #20]
 800b0d0:	f002 fdb2 	bl	800dc38 <tcp_output>
  return;
 800b0d4:	e001      	b.n	800b0da <tcp_listen_input+0x1ce>
    return;
 800b0d6:	bf00      	nop
 800b0d8:	e000      	b.n	800b0dc <tcp_listen_input+0x1d0>
  return;
 800b0da:	bf00      	nop
}
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd90      	pop	{r4, r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20003bac 	.word	0x20003bac
 800b0e8:	08017b6c 	.word	0x08017b6c
 800b0ec:	08017d64 	.word	0x08017d64
 800b0f0:	08017bb8 	.word	0x08017bb8
 800b0f4:	20003ba4 	.word	0x20003ba4
 800b0f8:	20003baa 	.word	0x20003baa
 800b0fc:	20003ba0 	.word	0x20003ba0
 800b100:	20003b90 	.word	0x20003b90
 800b104:	20000ab8 	.word	0x20000ab8
 800b108:	20000abc 	.word	0x20000abc
 800b10c:	20003a9c 	.word	0x20003a9c
 800b110:	20000aa8 	.word	0x20000aa8
 800b114:	20003b74 	.word	0x20003b74
 800b118:	20003b7c 	.word	0x20003b7c

0800b11c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af04      	add	r7, sp, #16
 800b122:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b124:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e4 <tcp_timewait_input+0xc8>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d153      	bne.n	800b1d8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <tcp_timewait_input+0x28>
 800b136:	4b2c      	ldr	r3, [pc, #176]	@ (800b1e8 <tcp_timewait_input+0xcc>)
 800b138:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b13c:	492b      	ldr	r1, [pc, #172]	@ (800b1ec <tcp_timewait_input+0xd0>)
 800b13e:	482c      	ldr	r0, [pc, #176]	@ (800b1f0 <tcp_timewait_input+0xd4>)
 800b140:	f00a fd1e 	bl	8015b80 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b144:	4b27      	ldr	r3, [pc, #156]	@ (800b1e4 <tcp_timewait_input+0xc8>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d02a      	beq.n	800b1a6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b150:	4b28      	ldr	r3, [pc, #160]	@ (800b1f4 <tcp_timewait_input+0xd8>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	db2d      	blt.n	800b1ba <tcp_timewait_input+0x9e>
 800b15e:	4b25      	ldr	r3, [pc, #148]	@ (800b1f4 <tcp_timewait_input+0xd8>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b16a:	440b      	add	r3, r1
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	dc23      	bgt.n	800b1ba <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b172:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <tcp_timewait_input+0xdc>)
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	4b21      	ldr	r3, [pc, #132]	@ (800b1fc <tcp_timewait_input+0xe0>)
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f4 <tcp_timewait_input+0xd8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b182:	4b1f      	ldr	r3, [pc, #124]	@ (800b200 <tcp_timewait_input+0xe4>)
 800b184:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b186:	885b      	ldrh	r3, [r3, #2]
 800b188:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18a:	4a1d      	ldr	r2, [pc, #116]	@ (800b200 <tcp_timewait_input+0xe4>)
 800b18c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b18e:	8812      	ldrh	r2, [r2, #0]
 800b190:	b292      	uxth	r2, r2
 800b192:	9202      	str	r2, [sp, #8]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	4b1b      	ldr	r3, [pc, #108]	@ (800b204 <tcp_timewait_input+0xe8>)
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	4b1b      	ldr	r3, [pc, #108]	@ (800b208 <tcp_timewait_input+0xec>)
 800b19c:	4602      	mov	r2, r0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f003 fb34 	bl	800e80c <tcp_rst>
      return;
 800b1a4:	e01b      	b.n	800b1de <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e4 <tcp_timewait_input+0xc8>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b1b2:	4b16      	ldr	r3, [pc, #88]	@ (800b20c <tcp_timewait_input+0xf0>)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b1ba:	4b10      	ldr	r3, [pc, #64]	@ (800b1fc <tcp_timewait_input+0xe0>)
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00c      	beq.n	800b1dc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	8b5b      	ldrh	r3, [r3, #26]
 800b1c6:	f043 0302 	orr.w	r3, r3, #2
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 fd31 	bl	800dc38 <tcp_output>
  }
  return;
 800b1d6:	e001      	b.n	800b1dc <tcp_timewait_input+0xc0>
    return;
 800b1d8:	bf00      	nop
 800b1da:	e000      	b.n	800b1de <tcp_timewait_input+0xc2>
  return;
 800b1dc:	bf00      	nop
}
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	20003bac 	.word	0x20003bac
 800b1e8:	08017b6c 	.word	0x08017b6c
 800b1ec:	08017d84 	.word	0x08017d84
 800b1f0:	08017bb8 	.word	0x08017bb8
 800b1f4:	20003ba0 	.word	0x20003ba0
 800b1f8:	20003ba4 	.word	0x20003ba4
 800b1fc:	20003baa 	.word	0x20003baa
 800b200:	20003b90 	.word	0x20003b90
 800b204:	20000ab8 	.word	0x20000ab8
 800b208:	20000abc 	.word	0x20000abc
 800b20c:	20003b68 	.word	0x20003b68

0800b210 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b08d      	sub	sp, #52	@ 0x34
 800b214:	af04      	add	r7, sp, #16
 800b216:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d106      	bne.n	800b234 <tcp_process+0x24>
 800b226:	4b9d      	ldr	r3, [pc, #628]	@ (800b49c <tcp_process+0x28c>)
 800b228:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b22c:	499c      	ldr	r1, [pc, #624]	@ (800b4a0 <tcp_process+0x290>)
 800b22e:	489d      	ldr	r0, [pc, #628]	@ (800b4a4 <tcp_process+0x294>)
 800b230:	f00a fca6 	bl	8015b80 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b234:	4b9c      	ldr	r3, [pc, #624]	@ (800b4a8 <tcp_process+0x298>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d04e      	beq.n	800b2de <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7d1b      	ldrb	r3, [r3, #20]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d108      	bne.n	800b25a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b24c:	4b97      	ldr	r3, [pc, #604]	@ (800b4ac <tcp_process+0x29c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d123      	bne.n	800b29c <tcp_process+0x8c>
        acceptable = 1;
 800b254:	2301      	movs	r3, #1
 800b256:	76fb      	strb	r3, [r7, #27]
 800b258:	e020      	b.n	800b29c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b25e:	4b94      	ldr	r3, [pc, #592]	@ (800b4b0 <tcp_process+0x2a0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	429a      	cmp	r2, r3
 800b264:	d102      	bne.n	800b26c <tcp_process+0x5c>
        acceptable = 1;
 800b266:	2301      	movs	r3, #1
 800b268:	76fb      	strb	r3, [r7, #27]
 800b26a:	e017      	b.n	800b29c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b26c:	4b90      	ldr	r3, [pc, #576]	@ (800b4b0 <tcp_process+0x2a0>)
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	db10      	blt.n	800b29c <tcp_process+0x8c>
 800b27a:	4b8d      	ldr	r3, [pc, #564]	@ (800b4b0 <tcp_process+0x2a0>)
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b286:	440b      	add	r3, r1
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc06      	bgt.n	800b29c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	8b5b      	ldrh	r3, [r3, #26]
 800b292:	f043 0302 	orr.w	r3, r3, #2
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b29c:	7efb      	ldrb	r3, [r7, #27]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d01b      	beq.n	800b2da <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	7d1b      	ldrb	r3, [r3, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <tcp_process+0xa8>
 800b2aa:	4b7c      	ldr	r3, [pc, #496]	@ (800b49c <tcp_process+0x28c>)
 800b2ac:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b2b0:	4980      	ldr	r1, [pc, #512]	@ (800b4b4 <tcp_process+0x2a4>)
 800b2b2:	487c      	ldr	r0, [pc, #496]	@ (800b4a4 <tcp_process+0x294>)
 800b2b4:	f00a fc64 	bl	8015b80 <iprintf>
      recv_flags |= TF_RESET;
 800b2b8:	4b7f      	ldr	r3, [pc, #508]	@ (800b4b8 <tcp_process+0x2a8>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f043 0308 	orr.w	r3, r3, #8
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	4b7d      	ldr	r3, [pc, #500]	@ (800b4b8 <tcp_process+0x2a8>)
 800b2c4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ca:	f023 0301 	bic.w	r3, r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b2d4:	f06f 030d 	mvn.w	r3, #13
 800b2d8:	e37a      	b.n	800b9d0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e378      	b.n	800b9d0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b2de:	4b72      	ldr	r3, [pc, #456]	@ (800b4a8 <tcp_process+0x298>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <tcp_process+0xfc>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	7d1b      	ldrb	r3, [r3, #20]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d00c      	beq.n	800b30c <tcp_process+0xfc>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7d1b      	ldrb	r3, [r3, #20]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d008      	beq.n	800b30c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	8b5b      	ldrh	r3, [r3, #26]
 800b2fe:	f043 0302 	orr.w	r3, r3, #2
 800b302:	b29a      	uxth	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	e361      	b.n	800b9d0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	8b5b      	ldrh	r3, [r3, #26]
 800b310:	f003 0310 	and.w	r3, r3, #16
 800b314:	2b00      	cmp	r3, #0
 800b316:	d103      	bne.n	800b320 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b318:	4b68      	ldr	r3, [pc, #416]	@ (800b4bc <tcp_process+0x2ac>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 fc2b 	bl	800cb8c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	7d1b      	ldrb	r3, [r3, #20]
 800b33a:	3b02      	subs	r3, #2
 800b33c:	2b07      	cmp	r3, #7
 800b33e:	f200 8337 	bhi.w	800b9b0 <tcp_process+0x7a0>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <tcp_process+0x138>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b369 	.word	0x0800b369
 800b34c:	0800b599 	.word	0x0800b599
 800b350:	0800b711 	.word	0x0800b711
 800b354:	0800b73b 	.word	0x0800b73b
 800b358:	0800b85f 	.word	0x0800b85f
 800b35c:	0800b711 	.word	0x0800b711
 800b360:	0800b8eb 	.word	0x0800b8eb
 800b364:	0800b97b 	.word	0x0800b97b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b368:	4b4f      	ldr	r3, [pc, #316]	@ (800b4a8 <tcp_process+0x298>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80e4 	beq.w	800b53e <tcp_process+0x32e>
 800b376:	4b4c      	ldr	r3, [pc, #304]	@ (800b4a8 <tcp_process+0x298>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	f003 0302 	and.w	r3, r3, #2
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f000 80dd 	beq.w	800b53e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	4b48      	ldr	r3, [pc, #288]	@ (800b4ac <tcp_process+0x29c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	f040 80d5 	bne.w	800b53e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b394:	4b46      	ldr	r3, [pc, #280]	@ (800b4b0 <tcp_process+0x2a0>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b3a6:	4b41      	ldr	r3, [pc, #260]	@ (800b4ac <tcp_process+0x29c>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b3ae:	4b44      	ldr	r3, [pc, #272]	@ (800b4c0 <tcp_process+0x2b0>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	89db      	ldrh	r3, [r3, #14]
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b3c8:	4b39      	ldr	r3, [pc, #228]	@ (800b4b0 <tcp_process+0x2a0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	1e5a      	subs	r2, r3, #1
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3304      	adds	r3, #4
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f007 facf 	bl	8012984 <ip4_route>
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff f802 	bl	800a3f8 <tcp_eff_send_mss_netif>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b400:	009a      	lsls	r2, r3, #2
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b406:	005b      	lsls	r3, r3, #1
 800b408:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b40c:	428b      	cmp	r3, r1
 800b40e:	bf38      	it	cc
 800b410:	460b      	movcc	r3, r1
 800b412:	429a      	cmp	r2, r3
 800b414:	d204      	bcs.n	800b420 <tcp_process+0x210>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	e00d      	b.n	800b43c <tcp_process+0x22c>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d904      	bls.n	800b438 <tcp_process+0x228>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	b29b      	uxth	r3, r3
 800b436:	e001      	b.n	800b43c <tcp_process+0x22c>
 800b438:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <tcp_process+0x24a>
 800b44c:	4b13      	ldr	r3, [pc, #76]	@ (800b49c <tcp_process+0x28c>)
 800b44e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b452:	491c      	ldr	r1, [pc, #112]	@ (800b4c4 <tcp_process+0x2b4>)
 800b454:	4813      	ldr	r0, [pc, #76]	@ (800b4a4 <tcp_process+0x294>)
 800b456:	f00a fb93 	bl	8015b80 <iprintf>
        --pcb->snd_queuelen;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b460:	3b01      	subs	r3, #1
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b46e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d12a      	bne.n	800b4cc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b47a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <tcp_process+0x280>
 800b482:	4b06      	ldr	r3, [pc, #24]	@ (800b49c <tcp_process+0x28c>)
 800b484:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b488:	490f      	ldr	r1, [pc, #60]	@ (800b4c8 <tcp_process+0x2b8>)
 800b48a:	4806      	ldr	r0, [pc, #24]	@ (800b4a4 <tcp_process+0x294>)
 800b48c:	f00a fb78 	bl	8015b80 <iprintf>
          pcb->unsent = rseg->next;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b498:	e01c      	b.n	800b4d4 <tcp_process+0x2c4>
 800b49a:	bf00      	nop
 800b49c:	08017b6c 	.word	0x08017b6c
 800b4a0:	08017da4 	.word	0x08017da4
 800b4a4:	08017bb8 	.word	0x08017bb8
 800b4a8:	20003bac 	.word	0x20003bac
 800b4ac:	20003ba4 	.word	0x20003ba4
 800b4b0:	20003ba0 	.word	0x20003ba0
 800b4b4:	08017dc0 	.word	0x08017dc0
 800b4b8:	20003bad 	.word	0x20003bad
 800b4bc:	20003b68 	.word	0x20003b68
 800b4c0:	20003b90 	.word	0x20003b90
 800b4c4:	08017de0 	.word	0x08017de0
 800b4c8:	08017df8 	.word	0x08017df8
        } else {
          pcb->unacked = rseg->next;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b4d4:	69f8      	ldr	r0, [r7, #28]
 800b4d6:	f7fe fb82 	bl	8009bde <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d104      	bne.n	800b4ec <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4e8:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b4ea:	e006      	b.n	800b4fa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <tcp_process+0x30a>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6910      	ldr	r0, [r2, #16]
 800b50e:	2200      	movs	r2, #0
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	4798      	blx	r3
 800b514:	4603      	mov	r3, r0
 800b516:	76bb      	strb	r3, [r7, #26]
 800b518:	e001      	b.n	800b51e <tcp_process+0x30e>
 800b51a:	2300      	movs	r3, #0
 800b51c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b51e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b522:	f113 0f0d 	cmn.w	r3, #13
 800b526:	d102      	bne.n	800b52e <tcp_process+0x31e>
          return ERR_ABRT;
 800b528:	f06f 030c 	mvn.w	r3, #12
 800b52c:	e250      	b.n	800b9d0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	8b5b      	ldrh	r3, [r3, #26]
 800b532:	f043 0302 	orr.w	r3, r3, #2
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b53c:	e23a      	b.n	800b9b4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b53e:	4b98      	ldr	r3, [pc, #608]	@ (800b7a0 <tcp_process+0x590>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 8234 	beq.w	800b9b4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b54c:	4b95      	ldr	r3, [pc, #596]	@ (800b7a4 <tcp_process+0x594>)
 800b54e:	6819      	ldr	r1, [r3, #0]
 800b550:	4b95      	ldr	r3, [pc, #596]	@ (800b7a8 <tcp_process+0x598>)
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	461a      	mov	r2, r3
 800b556:	4b95      	ldr	r3, [pc, #596]	@ (800b7ac <tcp_process+0x59c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b55c:	4b94      	ldr	r3, [pc, #592]	@ (800b7b0 <tcp_process+0x5a0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b560:	885b      	ldrh	r3, [r3, #2]
 800b562:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b564:	4a92      	ldr	r2, [pc, #584]	@ (800b7b0 <tcp_process+0x5a0>)
 800b566:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b568:	8812      	ldrh	r2, [r2, #0]
 800b56a:	b292      	uxth	r2, r2
 800b56c:	9202      	str	r2, [sp, #8]
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	4b90      	ldr	r3, [pc, #576]	@ (800b7b4 <tcp_process+0x5a4>)
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	4b90      	ldr	r3, [pc, #576]	@ (800b7b8 <tcp_process+0x5a8>)
 800b576:	4602      	mov	r2, r0
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f003 f947 	bl	800e80c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b584:	2b05      	cmp	r3, #5
 800b586:	f200 8215 	bhi.w	800b9b4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f002 fef9 	bl	800e388 <tcp_rexmit_rto>
      break;
 800b596:	e20d      	b.n	800b9b4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b598:	4b81      	ldr	r3, [pc, #516]	@ (800b7a0 <tcp_process+0x590>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f003 0310 	and.w	r3, r3, #16
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 80a1 	beq.w	800b6e8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b5a6:	4b7f      	ldr	r3, [pc, #508]	@ (800b7a4 <tcp_process+0x594>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	db7e      	blt.n	800b6b4 <tcp_process+0x4a4>
 800b5b6:	4b7b      	ldr	r3, [pc, #492]	@ (800b7a4 <tcp_process+0x594>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc77      	bgt.n	800b6b4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2204      	movs	r2, #4
 800b5c8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b5d2:	23fa      	movs	r3, #250	@ 0xfa
 800b5d4:	76bb      	strb	r3, [r7, #26]
 800b5d6:	e01d      	b.n	800b614 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <tcp_process+0x3e0>
 800b5e2:	4b76      	ldr	r3, [pc, #472]	@ (800b7bc <tcp_process+0x5ac>)
 800b5e4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b5e8:	4975      	ldr	r1, [pc, #468]	@ (800b7c0 <tcp_process+0x5b0>)
 800b5ea:	4876      	ldr	r0, [pc, #472]	@ (800b7c4 <tcp_process+0x5b4>)
 800b5ec:	f00a fac8 	bl	8015b80 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <tcp_process+0x400>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	6910      	ldr	r0, [r2, #16]
 800b604:	2200      	movs	r2, #0
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	4798      	blx	r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	76bb      	strb	r3, [r7, #26]
 800b60e:	e001      	b.n	800b614 <tcp_process+0x404>
 800b610:	23f0      	movs	r3, #240	@ 0xf0
 800b612:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b614:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00a      	beq.n	800b632 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b61c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b620:	f113 0f0d 	cmn.w	r3, #13
 800b624:	d002      	beq.n	800b62c <tcp_process+0x41c>
              tcp_abort(pcb);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fd fc32 	bl	8008e90 <tcp_abort>
            }
            return ERR_ABRT;
 800b62c:	f06f 030c 	mvn.w	r3, #12
 800b630:	e1ce      	b.n	800b9d0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fae0 	bl	800bbf8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b638:	4b63      	ldr	r3, [pc, #396]	@ (800b7c8 <tcp_process+0x5b8>)
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <tcp_process+0x43c>
            recv_acked--;
 800b640:	4b61      	ldr	r3, [pc, #388]	@ (800b7c8 <tcp_process+0x5b8>)
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	4b5f      	ldr	r3, [pc, #380]	@ (800b7c8 <tcp_process+0x5b8>)
 800b64a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b650:	009a      	lsls	r2, r3, #2
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf38      	it	cc
 800b660:	460b      	movcc	r3, r1
 800b662:	429a      	cmp	r2, r3
 800b664:	d204      	bcs.n	800b670 <tcp_process+0x460>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	e00d      	b.n	800b68c <tcp_process+0x47c>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d904      	bls.n	800b688 <tcp_process+0x478>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	b29b      	uxth	r3, r3
 800b686:	e001      	b.n	800b68c <tcp_process+0x47c>
 800b688:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b692:	4b4e      	ldr	r3, [pc, #312]	@ (800b7cc <tcp_process+0x5bc>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	f003 0320 	and.w	r3, r3, #32
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d037      	beq.n	800b70e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	8b5b      	ldrh	r3, [r3, #26]
 800b6a2:	f043 0302 	orr.w	r3, r3, #2
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2207      	movs	r2, #7
 800b6b0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b6b2:	e02c      	b.n	800b70e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a4 <tcp_process+0x594>)
 800b6b6:	6819      	ldr	r1, [r3, #0]
 800b6b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a8 <tcp_process+0x598>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4b3b      	ldr	r3, [pc, #236]	@ (800b7ac <tcp_process+0x59c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6c4:	4b3a      	ldr	r3, [pc, #232]	@ (800b7b0 <tcp_process+0x5a0>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6c8:	885b      	ldrh	r3, [r3, #2]
 800b6ca:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6cc:	4a38      	ldr	r2, [pc, #224]	@ (800b7b0 <tcp_process+0x5a0>)
 800b6ce:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6d0:	8812      	ldrh	r2, [r2, #0]
 800b6d2:	b292      	uxth	r2, r2
 800b6d4:	9202      	str	r2, [sp, #8]
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	4b36      	ldr	r3, [pc, #216]	@ (800b7b4 <tcp_process+0x5a4>)
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	4b36      	ldr	r3, [pc, #216]	@ (800b7b8 <tcp_process+0x5a8>)
 800b6de:	4602      	mov	r2, r0
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f003 f893 	bl	800e80c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b6e6:	e167      	b.n	800b9b8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b6e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b7a0 <tcp_process+0x590>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	f003 0302 	and.w	r3, r3, #2
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 8161 	beq.w	800b9b8 <tcp_process+0x7a8>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fa:	1e5a      	subs	r2, r3, #1
 800b6fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b7ac <tcp_process+0x59c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	f040 8159 	bne.w	800b9b8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 fe60 	bl	800e3cc <tcp_rexmit>
      break;
 800b70c:	e154      	b.n	800b9b8 <tcp_process+0x7a8>
 800b70e:	e153      	b.n	800b9b8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa71 	bl	800bbf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b716:	4b2d      	ldr	r3, [pc, #180]	@ (800b7cc <tcp_process+0x5bc>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	f003 0320 	and.w	r3, r3, #32
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 814c 	beq.w	800b9bc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	8b5b      	ldrh	r3, [r3, #26]
 800b728:	f043 0302 	orr.w	r3, r3, #2
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2207      	movs	r2, #7
 800b736:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b738:	e140      	b.n	800b9bc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 fa5c 	bl	800bbf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b740:	4b22      	ldr	r3, [pc, #136]	@ (800b7cc <tcp_process+0x5bc>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	f003 0320 	and.w	r3, r3, #32
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d071      	beq.n	800b830 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b74c:	4b14      	ldr	r3, [pc, #80]	@ (800b7a0 <tcp_process+0x590>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	f003 0310 	and.w	r3, r3, #16
 800b754:	2b00      	cmp	r3, #0
 800b756:	d060      	beq.n	800b81a <tcp_process+0x60a>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b75c:	4b11      	ldr	r3, [pc, #68]	@ (800b7a4 <tcp_process+0x594>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d15a      	bne.n	800b81a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d156      	bne.n	800b81a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8b5b      	ldrh	r3, [r3, #26]
 800b770:	f043 0302 	orr.w	r3, r3, #2
 800b774:	b29a      	uxth	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7fe fd32 	bl	800a1e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b780:	4b13      	ldr	r3, [pc, #76]	@ (800b7d0 <tcp_process+0x5c0>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	429a      	cmp	r2, r3
 800b788:	d105      	bne.n	800b796 <tcp_process+0x586>
 800b78a:	4b11      	ldr	r3, [pc, #68]	@ (800b7d0 <tcp_process+0x5c0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	4a0f      	ldr	r2, [pc, #60]	@ (800b7d0 <tcp_process+0x5c0>)
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	e02e      	b.n	800b7f4 <tcp_process+0x5e4>
 800b796:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d0 <tcp_process+0x5c0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e027      	b.n	800b7ee <tcp_process+0x5de>
 800b79e:	bf00      	nop
 800b7a0:	20003bac 	.word	0x20003bac
 800b7a4:	20003ba4 	.word	0x20003ba4
 800b7a8:	20003baa 	.word	0x20003baa
 800b7ac:	20003ba0 	.word	0x20003ba0
 800b7b0:	20003b90 	.word	0x20003b90
 800b7b4:	20000ab8 	.word	0x20000ab8
 800b7b8:	20000abc 	.word	0x20000abc
 800b7bc:	08017b6c 	.word	0x08017b6c
 800b7c0:	08017e0c 	.word	0x08017e0c
 800b7c4:	08017bb8 	.word	0x08017bb8
 800b7c8:	20003ba8 	.word	0x20003ba8
 800b7cc:	20003bad 	.word	0x20003bad
 800b7d0:	20003b74 	.word	0x20003b74
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d104      	bne.n	800b7e8 <tcp_process+0x5d8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	60da      	str	r2, [r3, #12]
 800b7e6:	e005      	b.n	800b7f4 <tcp_process+0x5e4>
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1ef      	bne.n	800b7d4 <tcp_process+0x5c4>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	60da      	str	r2, [r3, #12]
 800b7fa:	4b77      	ldr	r3, [pc, #476]	@ (800b9d8 <tcp_process+0x7c8>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	220a      	movs	r2, #10
 800b804:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b806:	4b75      	ldr	r3, [pc, #468]	@ (800b9dc <tcp_process+0x7cc>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	60da      	str	r2, [r3, #12]
 800b80e:	4a73      	ldr	r2, [pc, #460]	@ (800b9dc <tcp_process+0x7cc>)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	f003 f9bc 	bl	800eb90 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b818:	e0d2      	b.n	800b9c0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	8b5b      	ldrh	r3, [r3, #26]
 800b81e:	f043 0302 	orr.w	r3, r3, #2
 800b822:	b29a      	uxth	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2208      	movs	r2, #8
 800b82c:	751a      	strb	r2, [r3, #20]
      break;
 800b82e:	e0c7      	b.n	800b9c0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b830:	4b6b      	ldr	r3, [pc, #428]	@ (800b9e0 <tcp_process+0x7d0>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 0310 	and.w	r3, r3, #16
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80c1 	beq.w	800b9c0 <tcp_process+0x7b0>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b842:	4b68      	ldr	r3, [pc, #416]	@ (800b9e4 <tcp_process+0x7d4>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	f040 80ba 	bne.w	800b9c0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b850:	2b00      	cmp	r3, #0
 800b852:	f040 80b5 	bne.w	800b9c0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2206      	movs	r2, #6
 800b85a:	751a      	strb	r2, [r3, #20]
      break;
 800b85c:	e0b0      	b.n	800b9c0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f9ca 	bl	800bbf8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b864:	4b60      	ldr	r3, [pc, #384]	@ (800b9e8 <tcp_process+0x7d8>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 80a9 	beq.w	800b9c4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	8b5b      	ldrh	r3, [r3, #26]
 800b876:	f043 0302 	orr.w	r3, r3, #2
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7fe fcaf 	bl	800a1e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b886:	4b59      	ldr	r3, [pc, #356]	@ (800b9ec <tcp_process+0x7dc>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d105      	bne.n	800b89c <tcp_process+0x68c>
 800b890:	4b56      	ldr	r3, [pc, #344]	@ (800b9ec <tcp_process+0x7dc>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	4a55      	ldr	r2, [pc, #340]	@ (800b9ec <tcp_process+0x7dc>)
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e013      	b.n	800b8c4 <tcp_process+0x6b4>
 800b89c:	4b53      	ldr	r3, [pc, #332]	@ (800b9ec <tcp_process+0x7dc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	e00c      	b.n	800b8be <tcp_process+0x6ae>
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d104      	bne.n	800b8b8 <tcp_process+0x6a8>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	60da      	str	r2, [r3, #12]
 800b8b6:	e005      	b.n	800b8c4 <tcp_process+0x6b4>
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	613b      	str	r3, [r7, #16]
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1ef      	bne.n	800b8a4 <tcp_process+0x694>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	4b43      	ldr	r3, [pc, #268]	@ (800b9d8 <tcp_process+0x7c8>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8d6:	4b41      	ldr	r3, [pc, #260]	@ (800b9dc <tcp_process+0x7cc>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60da      	str	r2, [r3, #12]
 800b8de:	4a3f      	ldr	r2, [pc, #252]	@ (800b9dc <tcp_process+0x7cc>)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f003 f954 	bl	800eb90 <tcp_timer_needed>
      }
      break;
 800b8e8:	e06c      	b.n	800b9c4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f984 	bl	800bbf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b8f0:	4b3b      	ldr	r3, [pc, #236]	@ (800b9e0 <tcp_process+0x7d0>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	f003 0310 	and.w	r3, r3, #16
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d065      	beq.n	800b9c8 <tcp_process+0x7b8>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b900:	4b38      	ldr	r3, [pc, #224]	@ (800b9e4 <tcp_process+0x7d4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d15f      	bne.n	800b9c8 <tcp_process+0x7b8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d15b      	bne.n	800b9c8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7fe fc67 	bl	800a1e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b916:	4b35      	ldr	r3, [pc, #212]	@ (800b9ec <tcp_process+0x7dc>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d105      	bne.n	800b92c <tcp_process+0x71c>
 800b920:	4b32      	ldr	r3, [pc, #200]	@ (800b9ec <tcp_process+0x7dc>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4a31      	ldr	r2, [pc, #196]	@ (800b9ec <tcp_process+0x7dc>)
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	e013      	b.n	800b954 <tcp_process+0x744>
 800b92c:	4b2f      	ldr	r3, [pc, #188]	@ (800b9ec <tcp_process+0x7dc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	e00c      	b.n	800b94e <tcp_process+0x73e>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d104      	bne.n	800b948 <tcp_process+0x738>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	60da      	str	r2, [r3, #12]
 800b946:	e005      	b.n	800b954 <tcp_process+0x744>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1ef      	bne.n	800b934 <tcp_process+0x724>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	60da      	str	r2, [r3, #12]
 800b95a:	4b1f      	ldr	r3, [pc, #124]	@ (800b9d8 <tcp_process+0x7c8>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	220a      	movs	r2, #10
 800b964:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b966:	4b1d      	ldr	r3, [pc, #116]	@ (800b9dc <tcp_process+0x7cc>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60da      	str	r2, [r3, #12]
 800b96e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9dc <tcp_process+0x7cc>)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	f003 f90c 	bl	800eb90 <tcp_timer_needed>
      }
      break;
 800b978:	e026      	b.n	800b9c8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f93c 	bl	800bbf8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b980:	4b17      	ldr	r3, [pc, #92]	@ (800b9e0 <tcp_process+0x7d0>)
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	f003 0310 	and.w	r3, r3, #16
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01f      	beq.n	800b9cc <tcp_process+0x7bc>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b990:	4b14      	ldr	r3, [pc, #80]	@ (800b9e4 <tcp_process+0x7d4>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d119      	bne.n	800b9cc <tcp_process+0x7bc>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d115      	bne.n	800b9cc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b9a0:	4b11      	ldr	r3, [pc, #68]	@ (800b9e8 <tcp_process+0x7d8>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	f043 0310 	orr.w	r3, r3, #16
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e8 <tcp_process+0x7d8>)
 800b9ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b9ae:	e00d      	b.n	800b9cc <tcp_process+0x7bc>
    default:
      break;
 800b9b0:	bf00      	nop
 800b9b2:	e00c      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9b4:	bf00      	nop
 800b9b6:	e00a      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9b8:	bf00      	nop
 800b9ba:	e008      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9bc:	bf00      	nop
 800b9be:	e006      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9c0:	bf00      	nop
 800b9c2:	e004      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9c4:	bf00      	nop
 800b9c6:	e002      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9c8:	bf00      	nop
 800b9ca:	e000      	b.n	800b9ce <tcp_process+0x7be>
      break;
 800b9cc:	bf00      	nop
  }
  return ERR_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3724      	adds	r7, #36	@ 0x24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}
 800b9d8:	20003b7c 	.word	0x20003b7c
 800b9dc:	20003b78 	.word	0x20003b78
 800b9e0:	20003bac 	.word	0x20003bac
 800b9e4:	20003ba4 	.word	0x20003ba4
 800b9e8:	20003bad 	.word	0x20003bad
 800b9ec:	20003b74 	.word	0x20003b74

0800b9f0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b9f0:	b590      	push	{r4, r7, lr}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d106      	bne.n	800ba0e <tcp_oos_insert_segment+0x1e>
 800ba00:	4b3b      	ldr	r3, [pc, #236]	@ (800baf0 <tcp_oos_insert_segment+0x100>)
 800ba02:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ba06:	493b      	ldr	r1, [pc, #236]	@ (800baf4 <tcp_oos_insert_segment+0x104>)
 800ba08:	483b      	ldr	r0, [pc, #236]	@ (800baf8 <tcp_oos_insert_segment+0x108>)
 800ba0a:	f00a f8b9 	bl	8015b80 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	899b      	ldrh	r3, [r3, #12]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fa ff0e 	bl	8006838 <lwip_htons>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d028      	beq.n	800ba7a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ba28:	6838      	ldr	r0, [r7, #0]
 800ba2a:	f7fe f8c3 	bl	8009bb4 <tcp_segs_free>
    next = NULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	e056      	b.n	800bae2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	899b      	ldrh	r3, [r3, #12]
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fa fefb 	bl	8006838 <lwip_htons>
 800ba42:	4603      	mov	r3, r0
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00d      	beq.n	800ba6a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	899b      	ldrh	r3, [r3, #12]
 800ba54:	b29c      	uxth	r4, r3
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7fa feee 	bl	8006838 <lwip_htons>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4322      	orrs	r2, r4
 800ba66:	b292      	uxth	r2, r2
 800ba68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7fe f8b2 	bl	8009bde <tcp_seg_free>
    while (next &&
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00e      	beq.n	800ba9e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	461a      	mov	r2, r3
 800ba86:	4b1d      	ldr	r3, [pc, #116]	@ (800bafc <tcp_oos_insert_segment+0x10c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	441a      	add	r2, r3
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	8909      	ldrh	r1, [r1, #8]
 800ba96:	440b      	add	r3, r1
 800ba98:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	daca      	bge.n	800ba34 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01e      	beq.n	800bae2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	891b      	ldrh	r3, [r3, #8]
 800baa8:	461a      	mov	r2, r3
 800baaa:	4b14      	ldr	r3, [pc, #80]	@ (800bafc <tcp_oos_insert_segment+0x10c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	441a      	add	r2, r3
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dd12      	ble.n	800bae2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <tcp_oos_insert_segment+0x10c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	b29b      	uxth	r3, r3
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b29a      	uxth	r2, r3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685a      	ldr	r2, [r3, #4]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	891b      	ldrh	r3, [r3, #8]
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f7fc f94d 	bl	8007d7c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	601a      	str	r2, [r3, #0]
}
 800bae8:	bf00      	nop
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	bd90      	pop	{r4, r7, pc}
 800baf0:	08017b6c 	.word	0x08017b6c
 800baf4:	08017e2c 	.word	0x08017e2c
 800baf8:	08017bb8 	.word	0x08017bb8
 800bafc:	20003ba0 	.word	0x20003ba0

0800bb00 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bb00:	b5b0      	push	{r4, r5, r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bb0e:	e03e      	b.n	800bb8e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fc fb3e 	bl	80081a0 <pbuf_clen>
 800bb24:	4603      	mov	r3, r0
 800bb26:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb2e:	8a7a      	ldrh	r2, [r7, #18]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d906      	bls.n	800bb42 <tcp_free_acked_segments+0x42>
 800bb34:	4b2a      	ldr	r3, [pc, #168]	@ (800bbe0 <tcp_free_acked_segments+0xe0>)
 800bb36:	f240 4257 	movw	r2, #1111	@ 0x457
 800bb3a:	492a      	ldr	r1, [pc, #168]	@ (800bbe4 <tcp_free_acked_segments+0xe4>)
 800bb3c:	482a      	ldr	r0, [pc, #168]	@ (800bbe8 <tcp_free_acked_segments+0xe8>)
 800bb3e:	f00a f81f 	bl	8015b80 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bb48:	8a7b      	ldrh	r3, [r7, #18]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	891a      	ldrh	r2, [r3, #8]
 800bb58:	4b24      	ldr	r3, [pc, #144]	@ (800bbec <tcp_free_acked_segments+0xec>)
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	4b22      	ldr	r3, [pc, #136]	@ (800bbec <tcp_free_acked_segments+0xec>)
 800bb62:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bb64:	6978      	ldr	r0, [r7, #20]
 800bb66:	f7fe f83a 	bl	8009bde <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00c      	beq.n	800bb8e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d109      	bne.n	800bb8e <tcp_free_acked_segments+0x8e>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d106      	bne.n	800bb8e <tcp_free_acked_segments+0x8e>
 800bb80:	4b17      	ldr	r3, [pc, #92]	@ (800bbe0 <tcp_free_acked_segments+0xe0>)
 800bb82:	f240 4261 	movw	r2, #1121	@ 0x461
 800bb86:	491a      	ldr	r1, [pc, #104]	@ (800bbf0 <tcp_free_acked_segments+0xf0>)
 800bb88:	4817      	ldr	r0, [pc, #92]	@ (800bbe8 <tcp_free_acked_segments+0xe8>)
 800bb8a:	f009 fff9 	bl	8015b80 <iprintf>
  while (seg_list != NULL &&
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d020      	beq.n	800bbd6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fa fe62 	bl	8006864 <lwip_htonl>
 800bba0:	4604      	mov	r4, r0
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	891b      	ldrh	r3, [r3, #8]
 800bba6:	461d      	mov	r5, r3
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	899b      	ldrh	r3, [r3, #12]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fa fe41 	bl	8006838 <lwip_htons>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 0303 	and.w	r3, r3, #3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <tcp_free_acked_segments+0xc6>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e000      	b.n	800bbc8 <tcp_free_acked_segments+0xc8>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	442b      	add	r3, r5
 800bbca:	18e2      	adds	r2, r4, r3
 800bbcc:	4b09      	ldr	r3, [pc, #36]	@ (800bbf4 <tcp_free_acked_segments+0xf4>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	dd9c      	ble.n	800bb10 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bdb0      	pop	{r4, r5, r7, pc}
 800bbe0:	08017b6c 	.word	0x08017b6c
 800bbe4:	08017e54 	.word	0x08017e54
 800bbe8:	08017bb8 	.word	0x08017bb8
 800bbec:	20003ba8 	.word	0x20003ba8
 800bbf0:	08017e7c 	.word	0x08017e7c
 800bbf4:	20003ba4 	.word	0x20003ba4

0800bbf8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bbf8:	b5b0      	push	{r4, r5, r7, lr}
 800bbfa:	b094      	sub	sp, #80	@ 0x50
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <tcp_receive+0x20>
 800bc0a:	4b91      	ldr	r3, [pc, #580]	@ (800be50 <tcp_receive+0x258>)
 800bc0c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800bc10:	4990      	ldr	r1, [pc, #576]	@ (800be54 <tcp_receive+0x25c>)
 800bc12:	4891      	ldr	r0, [pc, #580]	@ (800be58 <tcp_receive+0x260>)
 800bc14:	f009 ffb4 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7d1b      	ldrb	r3, [r3, #20]
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d806      	bhi.n	800bc2e <tcp_receive+0x36>
 800bc20:	4b8b      	ldr	r3, [pc, #556]	@ (800be50 <tcp_receive+0x258>)
 800bc22:	f240 427c 	movw	r2, #1148	@ 0x47c
 800bc26:	498d      	ldr	r1, [pc, #564]	@ (800be5c <tcp_receive+0x264>)
 800bc28:	488b      	ldr	r0, [pc, #556]	@ (800be58 <tcp_receive+0x260>)
 800bc2a:	f009 ffa9 	bl	8015b80 <iprintf>

  if (flags & TCP_ACK) {
 800bc2e:	4b8c      	ldr	r3, [pc, #560]	@ (800be60 <tcp_receive+0x268>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	f003 0310 	and.w	r3, r3, #16
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 8264 	beq.w	800c104 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc42:	461a      	mov	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc48:	4413      	add	r3, r2
 800bc4a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc50:	4b84      	ldr	r3, [pc, #528]	@ (800be64 <tcp_receive+0x26c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	db1b      	blt.n	800bc92 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc5e:	4b81      	ldr	r3, [pc, #516]	@ (800be64 <tcp_receive+0x26c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d106      	bne.n	800bc74 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc6a:	4b7f      	ldr	r3, [pc, #508]	@ (800be68 <tcp_receive+0x270>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	db0e      	blt.n	800bc92 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc78:	4b7b      	ldr	r3, [pc, #492]	@ (800be68 <tcp_receive+0x270>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d125      	bne.n	800bccc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bc80:	4b7a      	ldr	r3, [pc, #488]	@ (800be6c <tcp_receive+0x274>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	89db      	ldrh	r3, [r3, #14]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d91c      	bls.n	800bccc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc92:	4b76      	ldr	r3, [pc, #472]	@ (800be6c <tcp_receive+0x274>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	89db      	ldrh	r3, [r3, #14]
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d205      	bcs.n	800bcbc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bcbc:	4b69      	ldr	r3, [pc, #420]	@ (800be64 <tcp_receive+0x26c>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bcc4:	4b68      	ldr	r3, [pc, #416]	@ (800be68 <tcp_receive+0x270>)
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bccc:	4b66      	ldr	r3, [pc, #408]	@ (800be68 <tcp_receive+0x270>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dc58      	bgt.n	800bd8c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bcda:	4b65      	ldr	r3, [pc, #404]	@ (800be70 <tcp_receive+0x278>)
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d14b      	bne.n	800bd7a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bcec:	4413      	add	r3, r2
 800bcee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d142      	bne.n	800bd7a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	db3d      	blt.n	800bd7a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd02:	4b59      	ldr	r3, [pc, #356]	@ (800be68 <tcp_receive+0x270>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d137      	bne.n	800bd7a <tcp_receive+0x182>
              found_dupack = 1;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd14:	2bff      	cmp	r3, #255	@ 0xff
 800bd16:	d007      	beq.n	800bd28 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd1e:	3301      	adds	r3, #1
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d91b      	bls.n	800bd6a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd3c:	4413      	add	r3, r2
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d30a      	bcc.n	800bd60 <tcp_receive+0x168>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd54:	4413      	add	r3, r2
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bd5e:	e004      	b.n	800bd6a <tcp_receive+0x172>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d902      	bls.n	800bd7a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f002 fb95 	bl	800e4a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bd7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8161 	bne.w	800c044 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd8a:	e15b      	b.n	800c044 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bd8c:	4b36      	ldr	r3, [pc, #216]	@ (800be68 <tcp_receive+0x270>)
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	3b01      	subs	r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f2c0 814e 	blt.w	800c03a <tcp_receive+0x442>
 800bd9e:	4b32      	ldr	r3, [pc, #200]	@ (800be68 <tcp_receive+0x270>)
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f300 8146 	bgt.w	800c03a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8b5b      	ldrh	r3, [r3, #26]
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d010      	beq.n	800bddc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8b5b      	ldrh	r3, [r3, #26]
 800bdbe:	f023 0304 	bic.w	r3, r3, #4
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bdea:	10db      	asrs	r3, r3, #3
 800bdec:	b21b      	sxth	r3, r3
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	4413      	add	r3, r2
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	b21a      	sxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800be04:	4b18      	ldr	r3, [pc, #96]	@ (800be68 <tcp_receive+0x270>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0e:	b29b      	uxth	r3, r3
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800be1c:	4b12      	ldr	r3, [pc, #72]	@ (800be68 <tcp_receive+0x270>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7d1b      	ldrb	r3, [r3, #20]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	f240 8097 	bls.w	800bf5c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d245      	bcs.n	800beca <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	8b5b      	ldrh	r3, [r3, #26]
 800be42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be46:	2b00      	cmp	r3, #0
 800be48:	d014      	beq.n	800be74 <tcp_receive+0x27c>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e013      	b.n	800be76 <tcp_receive+0x27e>
 800be4e:	bf00      	nop
 800be50:	08017b6c 	.word	0x08017b6c
 800be54:	08017e9c 	.word	0x08017e9c
 800be58:	08017bb8 	.word	0x08017bb8
 800be5c:	08017eb8 	.word	0x08017eb8
 800be60:	20003bac 	.word	0x20003bac
 800be64:	20003ba0 	.word	0x20003ba0
 800be68:	20003ba4 	.word	0x20003ba4
 800be6c:	20003b90 	.word	0x20003b90
 800be70:	20003baa 	.word	0x20003baa
 800be74:	2302      	movs	r3, #2
 800be76:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800be7a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be84:	fb12 f303 	smulbb	r3, r2, r3
 800be88:	b29b      	uxth	r3, r3
 800be8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be8c:	4293      	cmp	r3, r2
 800be8e:	bf28      	it	cs
 800be90:	4613      	movcs	r3, r2
 800be92:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be9c:	4413      	add	r3, r2
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d309      	bcc.n	800bebe <tcp_receive+0x2c6>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800beb0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800beb2:	4413      	add	r3, r2
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bebc:	e04e      	b.n	800bf5c <tcp_receive+0x364>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bec4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bec8:	e048      	b.n	800bf5c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bed0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bed2:	4413      	add	r3, r2
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bedc:	429a      	cmp	r2, r3
 800bede:	d309      	bcc.n	800bef4 <tcp_receive+0x2fc>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bee6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bee8:	4413      	add	r3, r2
 800beea:	b29a      	uxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bef2:	e004      	b.n	800befe <tcp_receive+0x306>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800befa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d326      	bcc.n	800bf5c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf2e:	4413      	add	r3, r2
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d30a      	bcc.n	800bf52 <tcp_receive+0x35a>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf46:	4413      	add	r3, r2
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bf50:	e004      	b.n	800bf5c <tcp_receive+0x364>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf64:	4a98      	ldr	r2, [pc, #608]	@ (800c1c8 <tcp_receive+0x5d0>)
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff fdca 	bl	800bb00 <tcp_free_acked_segments>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf7a:	4a94      	ldr	r2, [pc, #592]	@ (800c1cc <tcp_receive+0x5d4>)
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff fdbf 	bl	800bb00 <tcp_free_acked_segments>
 800bf82:	4602      	mov	r2, r0
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf96:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bf98:	e002      	b.n	800bfa0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d103      	bne.n	800bfb6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bfbc:	4b84      	ldr	r3, [pc, #528]	@ (800c1d0 <tcp_receive+0x5d8>)
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	8b5b      	ldrh	r3, [r3, #26]
 800bfce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d035      	beq.n	800c042 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d118      	bne.n	800c010 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00c      	beq.n	800c000 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fa fc36 	bl	8006864 <lwip_htonl>
 800bff8:	4603      	mov	r3, r0
 800bffa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dc20      	bgt.n	800c042 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8b5b      	ldrh	r3, [r3, #26]
 800c004:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c00e:	e018      	b.n	800c042 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fa fc21 	bl	8006864 <lwip_htonl>
 800c022:	4603      	mov	r3, r0
 800c024:	1ae3      	subs	r3, r4, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	dc0b      	bgt.n	800c042 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8b5b      	ldrh	r3, [r3, #26]
 800c02e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c032:	b29a      	uxth	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c038:	e003      	b.n	800c042 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f002 fc38 	bl	800e8b0 <tcp_send_empty_ack>
 800c040:	e000      	b.n	800c044 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c042:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d05b      	beq.n	800c104 <tcp_receive+0x50c>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c050:	4b60      	ldr	r3, [pc, #384]	@ (800c1d4 <tcp_receive+0x5dc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	da54      	bge.n	800c104 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c05a:	4b5f      	ldr	r3, [pc, #380]	@ (800c1d8 <tcp_receive+0x5e0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c064:	b29b      	uxth	r3, r3
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	b29b      	uxth	r3, r3
 800c06a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c06e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c078:	10db      	asrs	r3, r3, #3
 800c07a:	b21b      	sxth	r3, r3
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	b29b      	uxth	r3, r3
 800c082:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c092:	4413      	add	r3, r2
 800c094:	b29b      	uxth	r3, r3
 800c096:	b21a      	sxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c09c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da05      	bge.n	800c0b0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c0a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c0a8:	425b      	negs	r3, r3
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c0b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c0ba:	109b      	asrs	r3, r3, #2
 800c0bc:	b21b      	sxth	r3, r3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c0d4:	4413      	add	r3, r2
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	b21a      	sxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c0e4:	10db      	asrs	r3, r3, #3
 800c0e6:	b21b      	sxth	r3, r3
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	b21a      	sxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c104:	4b35      	ldr	r3, [pc, #212]	@ (800c1dc <tcp_receive+0x5e4>)
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 84df 	beq.w	800cacc <tcp_receive+0xed4>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	7d1b      	ldrb	r3, [r3, #20]
 800c112:	2b06      	cmp	r3, #6
 800c114:	f200 84da 	bhi.w	800cacc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c11c:	4b30      	ldr	r3, [pc, #192]	@ (800c1e0 <tcp_receive+0x5e8>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	3b01      	subs	r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	f2c0 808f 	blt.w	800c248 <tcp_receive+0x650>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c12e:	4b2b      	ldr	r3, [pc, #172]	@ (800c1dc <tcp_receive+0x5e4>)
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	4619      	mov	r1, r3
 800c134:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e0 <tcp_receive+0x5e8>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	440b      	add	r3, r1
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	3301      	adds	r3, #1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f300 8082 	bgt.w	800c248 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c144:	4b27      	ldr	r3, [pc, #156]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c14e:	4b24      	ldr	r3, [pc, #144]	@ (800c1e0 <tcp_receive+0x5e8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c156:	4b23      	ldr	r3, [pc, #140]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d106      	bne.n	800c16c <tcp_receive+0x574>
 800c15e:	4b22      	ldr	r3, [pc, #136]	@ (800c1e8 <tcp_receive+0x5f0>)
 800c160:	f240 5294 	movw	r2, #1428	@ 0x594
 800c164:	4921      	ldr	r1, [pc, #132]	@ (800c1ec <tcp_receive+0x5f4>)
 800c166:	4822      	ldr	r0, [pc, #136]	@ (800c1f0 <tcp_receive+0x5f8>)
 800c168:	f009 fd0a 	bl	8015b80 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c172:	4293      	cmp	r3, r2
 800c174:	d906      	bls.n	800c184 <tcp_receive+0x58c>
 800c176:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e8 <tcp_receive+0x5f0>)
 800c178:	f240 5295 	movw	r2, #1429	@ 0x595
 800c17c:	491d      	ldr	r1, [pc, #116]	@ (800c1f4 <tcp_receive+0x5fc>)
 800c17e:	481c      	ldr	r0, [pc, #112]	@ (800c1f0 <tcp_receive+0x5f8>)
 800c180:	f009 fcfe 	bl	8015b80 <iprintf>
      off = (u16_t)off32;
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c18a:	4b16      	ldr	r3, [pc, #88]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	891b      	ldrh	r3, [r3, #8]
 800c190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c194:	429a      	cmp	r2, r3
 800c196:	d906      	bls.n	800c1a6 <tcp_receive+0x5ae>
 800c198:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <tcp_receive+0x5f0>)
 800c19a:	f240 5297 	movw	r2, #1431	@ 0x597
 800c19e:	4916      	ldr	r1, [pc, #88]	@ (800c1f8 <tcp_receive+0x600>)
 800c1a0:	4813      	ldr	r0, [pc, #76]	@ (800c1f0 <tcp_receive+0x5f8>)
 800c1a2:	f009 fced 	bl	8015b80 <iprintf>
      inseg.len -= off;
 800c1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c1a8:	891a      	ldrh	r2, [r3, #8]
 800c1aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c1b4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1e4 <tcp_receive+0x5ec>)
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	891a      	ldrh	r2, [r3, #8]
 800c1bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c1c4:	e02a      	b.n	800c21c <tcp_receive+0x624>
 800c1c6:	bf00      	nop
 800c1c8:	08017ed4 	.word	0x08017ed4
 800c1cc:	08017edc 	.word	0x08017edc
 800c1d0:	20003ba8 	.word	0x20003ba8
 800c1d4:	20003ba4 	.word	0x20003ba4
 800c1d8:	20003b68 	.word	0x20003b68
 800c1dc:	20003baa 	.word	0x20003baa
 800c1e0:	20003ba0 	.word	0x20003ba0
 800c1e4:	20003b80 	.word	0x20003b80
 800c1e8:	08017b6c 	.word	0x08017b6c
 800c1ec:	08017ee4 	.word	0x08017ee4
 800c1f0:	08017bb8 	.word	0x08017bb8
 800c1f4:	08017ef4 	.word	0x08017ef4
 800c1f8:	08017f04 	.word	0x08017f04
        off -= p->len;
 800c1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1fe:	895b      	ldrh	r3, [r3, #10]
 800c200:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c20a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c20c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c20e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c212:	2200      	movs	r2, #0
 800c214:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c21e:	895b      	ldrh	r3, [r3, #10]
 800c220:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c224:	429a      	cmp	r2, r3
 800c226:	d8e9      	bhi.n	800c1fc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c22c:	4619      	mov	r1, r3
 800c22e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c230:	f7fb fea2 	bl	8007f78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	4a90      	ldr	r2, [pc, #576]	@ (800c47c <tcp_receive+0x884>)
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	4b90      	ldr	r3, [pc, #576]	@ (800c480 <tcp_receive+0x888>)
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	4a8e      	ldr	r2, [pc, #568]	@ (800c47c <tcp_receive+0x884>)
 800c242:	6812      	ldr	r2, [r2, #0]
 800c244:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c246:	e00d      	b.n	800c264 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c248:	4b8c      	ldr	r3, [pc, #560]	@ (800c47c <tcp_receive+0x884>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	da06      	bge.n	800c264 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	8b5b      	ldrh	r3, [r3, #26]
 800c25a:	f043 0302 	orr.w	r3, r3, #2
 800c25e:	b29a      	uxth	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c264:	4b85      	ldr	r3, [pc, #532]	@ (800c47c <tcp_receive+0x884>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f2c0 8427 	blt.w	800cac2 <tcp_receive+0xeca>
 800c274:	4b81      	ldr	r3, [pc, #516]	@ (800c47c <tcp_receive+0x884>)
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c280:	440b      	add	r3, r1
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	3301      	adds	r3, #1
 800c286:	2b00      	cmp	r3, #0
 800c288:	f300 841b 	bgt.w	800cac2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c290:	4b7a      	ldr	r3, [pc, #488]	@ (800c47c <tcp_receive+0x884>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	f040 8298 	bne.w	800c7ca <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c29a:	4b79      	ldr	r3, [pc, #484]	@ (800c480 <tcp_receive+0x888>)
 800c29c:	891c      	ldrh	r4, [r3, #8]
 800c29e:	4b78      	ldr	r3, [pc, #480]	@ (800c480 <tcp_receive+0x888>)
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	899b      	ldrh	r3, [r3, #12]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fa fac6 	bl	8006838 <lwip_htons>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <tcp_receive+0x6c4>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e000      	b.n	800c2be <tcp_receive+0x6c6>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4423      	add	r3, r4
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	4b70      	ldr	r3, [pc, #448]	@ (800c484 <tcp_receive+0x88c>)
 800c2c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c2ca:	4b6e      	ldr	r3, [pc, #440]	@ (800c484 <tcp_receive+0x88c>)
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d274      	bcs.n	800c3bc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c2d2:	4b6b      	ldr	r3, [pc, #428]	@ (800c480 <tcp_receive+0x888>)
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	899b      	ldrh	r3, [r3, #12]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fa faac 	bl	8006838 <lwip_htons>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01e      	beq.n	800c32a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c2ec:	4b64      	ldr	r3, [pc, #400]	@ (800c480 <tcp_receive+0x888>)
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	899b      	ldrh	r3, [r3, #12]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	b21b      	sxth	r3, r3
 800c2f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2fa:	b21c      	sxth	r4, r3
 800c2fc:	4b60      	ldr	r3, [pc, #384]	@ (800c480 <tcp_receive+0x888>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	899b      	ldrh	r3, [r3, #12]
 800c302:	b29b      	uxth	r3, r3
 800c304:	4618      	mov	r0, r3
 800c306:	f7fa fa97 	bl	8006838 <lwip_htons>
 800c30a:	4603      	mov	r3, r0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c312:	b29b      	uxth	r3, r3
 800c314:	4618      	mov	r0, r3
 800c316:	f7fa fa8f 	bl	8006838 <lwip_htons>
 800c31a:	4603      	mov	r3, r0
 800c31c:	b21b      	sxth	r3, r3
 800c31e:	4323      	orrs	r3, r4
 800c320:	b21a      	sxth	r2, r3
 800c322:	4b57      	ldr	r3, [pc, #348]	@ (800c480 <tcp_receive+0x888>)
 800c324:	68db      	ldr	r3, [r3, #12]
 800c326:	b292      	uxth	r2, r2
 800c328:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c32e:	4b54      	ldr	r3, [pc, #336]	@ (800c480 <tcp_receive+0x888>)
 800c330:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c332:	4b53      	ldr	r3, [pc, #332]	@ (800c480 <tcp_receive+0x888>)
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	899b      	ldrh	r3, [r3, #12]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fa fa7c 	bl	8006838 <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d005      	beq.n	800c358 <tcp_receive+0x760>
            inseg.len -= 1;
 800c34c:	4b4c      	ldr	r3, [pc, #304]	@ (800c480 <tcp_receive+0x888>)
 800c34e:	891b      	ldrh	r3, [r3, #8]
 800c350:	3b01      	subs	r3, #1
 800c352:	b29a      	uxth	r2, r3
 800c354:	4b4a      	ldr	r3, [pc, #296]	@ (800c480 <tcp_receive+0x888>)
 800c356:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c358:	4b49      	ldr	r3, [pc, #292]	@ (800c480 <tcp_receive+0x888>)
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	4a48      	ldr	r2, [pc, #288]	@ (800c480 <tcp_receive+0x888>)
 800c35e:	8912      	ldrh	r2, [r2, #8]
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f7fb fd0a 	bl	8007d7c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c368:	4b45      	ldr	r3, [pc, #276]	@ (800c480 <tcp_receive+0x888>)
 800c36a:	891c      	ldrh	r4, [r3, #8]
 800c36c:	4b44      	ldr	r3, [pc, #272]	@ (800c480 <tcp_receive+0x888>)
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	899b      	ldrh	r3, [r3, #12]
 800c372:	b29b      	uxth	r3, r3
 800c374:	4618      	mov	r0, r3
 800c376:	f7fa fa5f 	bl	8006838 <lwip_htons>
 800c37a:	4603      	mov	r3, r0
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <tcp_receive+0x792>
 800c386:	2301      	movs	r3, #1
 800c388:	e000      	b.n	800c38c <tcp_receive+0x794>
 800c38a:	2300      	movs	r3, #0
 800c38c:	4423      	add	r3, r4
 800c38e:	b29a      	uxth	r2, r3
 800c390:	4b3c      	ldr	r3, [pc, #240]	@ (800c484 <tcp_receive+0x88c>)
 800c392:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c394:	4b3b      	ldr	r3, [pc, #236]	@ (800c484 <tcp_receive+0x88c>)
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	461a      	mov	r2, r3
 800c39a:	4b38      	ldr	r3, [pc, #224]	@ (800c47c <tcp_receive+0x884>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	441a      	add	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c3a8:	440b      	add	r3, r1
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d006      	beq.n	800c3bc <tcp_receive+0x7c4>
 800c3ae:	4b36      	ldr	r3, [pc, #216]	@ (800c488 <tcp_receive+0x890>)
 800c3b0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c3b4:	4935      	ldr	r1, [pc, #212]	@ (800c48c <tcp_receive+0x894>)
 800c3b6:	4836      	ldr	r0, [pc, #216]	@ (800c490 <tcp_receive+0x898>)
 800c3b8:	f009 fbe2 	bl	8015b80 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f000 80e6 	beq.w	800c592 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c3c6:	4b2e      	ldr	r3, [pc, #184]	@ (800c480 <tcp_receive+0x888>)
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	899b      	ldrh	r3, [r3, #12]
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fa fa32 	bl	8006838 <lwip_htons>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	f003 0301 	and.w	r3, r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d010      	beq.n	800c402 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c3e0:	e00a      	b.n	800c3f8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3e6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7fd fbf3 	bl	8009bde <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f0      	bne.n	800c3e2 <tcp_receive+0x7ea>
 800c400:	e0c7      	b.n	800c592 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c406:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c408:	e051      	b.n	800c4ae <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	899b      	ldrh	r3, [r3, #12]
 800c410:	b29b      	uxth	r3, r3
 800c412:	4618      	mov	r0, r3
 800c414:	f7fa fa10 	bl	8006838 <lwip_htons>
 800c418:	4603      	mov	r3, r0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	d03c      	beq.n	800c49e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c424:	4b16      	ldr	r3, [pc, #88]	@ (800c480 <tcp_receive+0x888>)
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	899b      	ldrh	r3, [r3, #12]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fa fa03 	bl	8006838 <lwip_htons>
 800c432:	4603      	mov	r3, r0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d12f      	bne.n	800c49e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c43e:	4b10      	ldr	r3, [pc, #64]	@ (800c480 <tcp_receive+0x888>)
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	899b      	ldrh	r3, [r3, #12]
 800c444:	b29c      	uxth	r4, r3
 800c446:	2001      	movs	r0, #1
 800c448:	f7fa f9f6 	bl	8006838 <lwip_htons>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	4b0b      	ldr	r3, [pc, #44]	@ (800c480 <tcp_receive+0x888>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	4322      	orrs	r2, r4
 800c456:	b292      	uxth	r2, r2
 800c458:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c45a:	4b09      	ldr	r3, [pc, #36]	@ (800c480 <tcp_receive+0x888>)
 800c45c:	891c      	ldrh	r4, [r3, #8]
 800c45e:	4b08      	ldr	r3, [pc, #32]	@ (800c480 <tcp_receive+0x888>)
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	899b      	ldrh	r3, [r3, #12]
 800c464:	b29b      	uxth	r3, r3
 800c466:	4618      	mov	r0, r3
 800c468:	f7fa f9e6 	bl	8006838 <lwip_htons>
 800c46c:	4603      	mov	r3, r0
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	f003 0303 	and.w	r3, r3, #3
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00d      	beq.n	800c494 <tcp_receive+0x89c>
 800c478:	2301      	movs	r3, #1
 800c47a:	e00c      	b.n	800c496 <tcp_receive+0x89e>
 800c47c:	20003ba0 	.word	0x20003ba0
 800c480:	20003b80 	.word	0x20003b80
 800c484:	20003baa 	.word	0x20003baa
 800c488:	08017b6c 	.word	0x08017b6c
 800c48c:	08017f14 	.word	0x08017f14
 800c490:	08017bb8 	.word	0x08017bb8
 800c494:	2300      	movs	r3, #0
 800c496:	4423      	add	r3, r4
 800c498:	b29a      	uxth	r2, r3
 800c49a:	4b98      	ldr	r3, [pc, #608]	@ (800c6fc <tcp_receive+0xb04>)
 800c49c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c4a8:	6938      	ldr	r0, [r7, #16]
 800c4aa:	f7fd fb98 	bl	8009bde <tcp_seg_free>
            while (next &&
 800c4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00e      	beq.n	800c4d2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c4b4:	4b91      	ldr	r3, [pc, #580]	@ (800c6fc <tcp_receive+0xb04>)
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4b91      	ldr	r3, [pc, #580]	@ (800c700 <tcp_receive+0xb08>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	441a      	add	r2, r3
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4c8:	8909      	ldrh	r1, [r1, #8]
 800c4ca:	440b      	add	r3, r1
 800c4cc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	da9b      	bge.n	800c40a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d059      	beq.n	800c58c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c4d8:	4b88      	ldr	r3, [pc, #544]	@ (800c6fc <tcp_receive+0xb04>)
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4b88      	ldr	r3, [pc, #544]	@ (800c700 <tcp_receive+0xb08>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	441a      	add	r2, r3
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	dd4d      	ble.n	800c58c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	4b81      	ldr	r3, [pc, #516]	@ (800c700 <tcp_receive+0xb08>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	b29a      	uxth	r2, r3
 800c502:	4b80      	ldr	r3, [pc, #512]	@ (800c704 <tcp_receive+0xb0c>)
 800c504:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c506:	4b7f      	ldr	r3, [pc, #508]	@ (800c704 <tcp_receive+0xb0c>)
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	899b      	ldrh	r3, [r3, #12]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fa f992 	bl	8006838 <lwip_htons>
 800c514:	4603      	mov	r3, r0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0302 	and.w	r3, r3, #2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <tcp_receive+0x934>
                inseg.len -= 1;
 800c520:	4b78      	ldr	r3, [pc, #480]	@ (800c704 <tcp_receive+0xb0c>)
 800c522:	891b      	ldrh	r3, [r3, #8]
 800c524:	3b01      	subs	r3, #1
 800c526:	b29a      	uxth	r2, r3
 800c528:	4b76      	ldr	r3, [pc, #472]	@ (800c704 <tcp_receive+0xb0c>)
 800c52a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c52c:	4b75      	ldr	r3, [pc, #468]	@ (800c704 <tcp_receive+0xb0c>)
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	4a74      	ldr	r2, [pc, #464]	@ (800c704 <tcp_receive+0xb0c>)
 800c532:	8912      	ldrh	r2, [r2, #8]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f7fb fc20 	bl	8007d7c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c53c:	4b71      	ldr	r3, [pc, #452]	@ (800c704 <tcp_receive+0xb0c>)
 800c53e:	891c      	ldrh	r4, [r3, #8]
 800c540:	4b70      	ldr	r3, [pc, #448]	@ (800c704 <tcp_receive+0xb0c>)
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	899b      	ldrh	r3, [r3, #12]
 800c546:	b29b      	uxth	r3, r3
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fa f975 	bl	8006838 <lwip_htons>
 800c54e:	4603      	mov	r3, r0
 800c550:	b2db      	uxtb	r3, r3
 800c552:	f003 0303 	and.w	r3, r3, #3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <tcp_receive+0x966>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <tcp_receive+0x968>
 800c55e:	2300      	movs	r3, #0
 800c560:	4423      	add	r3, r4
 800c562:	b29a      	uxth	r2, r3
 800c564:	4b65      	ldr	r3, [pc, #404]	@ (800c6fc <tcp_receive+0xb04>)
 800c566:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c568:	4b64      	ldr	r3, [pc, #400]	@ (800c6fc <tcp_receive+0xb04>)
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	4b64      	ldr	r3, [pc, #400]	@ (800c700 <tcp_receive+0xb08>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	441a      	add	r2, r3
 800c574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d006      	beq.n	800c58c <tcp_receive+0x994>
 800c57e:	4b62      	ldr	r3, [pc, #392]	@ (800c708 <tcp_receive+0xb10>)
 800c580:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c584:	4961      	ldr	r1, [pc, #388]	@ (800c70c <tcp_receive+0xb14>)
 800c586:	4862      	ldr	r0, [pc, #392]	@ (800c710 <tcp_receive+0xb18>)
 800c588:	f009 fafa 	bl	8015b80 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c590:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c592:	4b5a      	ldr	r3, [pc, #360]	@ (800c6fc <tcp_receive+0xb04>)
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	4b59      	ldr	r3, [pc, #356]	@ (800c700 <tcp_receive+0xb08>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	441a      	add	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c5a6:	4b55      	ldr	r3, [pc, #340]	@ (800c6fc <tcp_receive+0xb04>)
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d206      	bcs.n	800c5bc <tcp_receive+0x9c4>
 800c5ae:	4b56      	ldr	r3, [pc, #344]	@ (800c708 <tcp_receive+0xb10>)
 800c5b0:	f240 6207 	movw	r2, #1543	@ 0x607
 800c5b4:	4957      	ldr	r1, [pc, #348]	@ (800c714 <tcp_receive+0xb1c>)
 800c5b6:	4856      	ldr	r0, [pc, #344]	@ (800c710 <tcp_receive+0xb18>)
 800c5b8:	f009 fae2 	bl	8015b80 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c5c0:	4b4e      	ldr	r3, [pc, #312]	@ (800c6fc <tcp_receive+0xb04>)
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7fc fddf 	bl	8009190 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c5d2:	4b4c      	ldr	r3, [pc, #304]	@ (800c704 <tcp_receive+0xb0c>)
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	891b      	ldrh	r3, [r3, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d006      	beq.n	800c5ea <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c5dc:	4b49      	ldr	r3, [pc, #292]	@ (800c704 <tcp_receive+0xb0c>)
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a4d      	ldr	r2, [pc, #308]	@ (800c718 <tcp_receive+0xb20>)
 800c5e2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c5e4:	4b47      	ldr	r3, [pc, #284]	@ (800c704 <tcp_receive+0xb0c>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5ea:	4b46      	ldr	r3, [pc, #280]	@ (800c704 <tcp_receive+0xb0c>)
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	899b      	ldrh	r3, [r3, #12]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fa f920 	bl	8006838 <lwip_htons>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 80b8 	beq.w	800c776 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c606:	4b45      	ldr	r3, [pc, #276]	@ (800c71c <tcp_receive+0xb24>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	f043 0320 	orr.w	r3, r3, #32
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	4b42      	ldr	r3, [pc, #264]	@ (800c71c <tcp_receive+0xb24>)
 800c612:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c614:	e0af      	b.n	800c776 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c61a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	4a36      	ldr	r2, [pc, #216]	@ (800c700 <tcp_receive+0xb08>)
 800c626:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	891b      	ldrh	r3, [r3, #8]
 800c62c:	461c      	mov	r4, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	899b      	ldrh	r3, [r3, #12]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4618      	mov	r0, r3
 800c638:	f7fa f8fe 	bl	8006838 <lwip_htons>
 800c63c:	4603      	mov	r3, r0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	f003 0303 	and.w	r3, r3, #3
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <tcp_receive+0xa54>
 800c648:	2301      	movs	r3, #1
 800c64a:	e000      	b.n	800c64e <tcp_receive+0xa56>
 800c64c:	2300      	movs	r3, #0
 800c64e:	191a      	adds	r2, r3, r4
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	441a      	add	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c65e:	461c      	mov	r4, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	891b      	ldrh	r3, [r3, #8]
 800c664:	461d      	mov	r5, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	899b      	ldrh	r3, [r3, #12]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fa f8e2 	bl	8006838 <lwip_htons>
 800c674:	4603      	mov	r3, r0
 800c676:	b2db      	uxtb	r3, r3
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d001      	beq.n	800c684 <tcp_receive+0xa8c>
 800c680:	2301      	movs	r3, #1
 800c682:	e000      	b.n	800c686 <tcp_receive+0xa8e>
 800c684:	2300      	movs	r3, #0
 800c686:	442b      	add	r3, r5
 800c688:	429c      	cmp	r4, r3
 800c68a:	d206      	bcs.n	800c69a <tcp_receive+0xaa2>
 800c68c:	4b1e      	ldr	r3, [pc, #120]	@ (800c708 <tcp_receive+0xb10>)
 800c68e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c692:	4923      	ldr	r1, [pc, #140]	@ (800c720 <tcp_receive+0xb28>)
 800c694:	481e      	ldr	r0, [pc, #120]	@ (800c710 <tcp_receive+0xb18>)
 800c696:	f009 fa73 	bl	8015b80 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	891b      	ldrh	r3, [r3, #8]
 800c69e:	461c      	mov	r4, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	899b      	ldrh	r3, [r3, #12]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fa f8c5 	bl	8006838 <lwip_htons>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 0303 	and.w	r3, r3, #3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <tcp_receive+0xac6>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <tcp_receive+0xac8>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	1919      	adds	r1, r3, r4
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6c6:	b28b      	uxth	r3, r1
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7fc fd5d 	bl	8009190 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	891b      	ldrh	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d028      	beq.n	800c732 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800c718 <tcp_receive+0xb20>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d01d      	beq.n	800c724 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c6e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c718 <tcp_receive+0xb20>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	f7fb fd94 	bl	8008220 <pbuf_cat>
 800c6f8:	e018      	b.n	800c72c <tcp_receive+0xb34>
 800c6fa:	bf00      	nop
 800c6fc:	20003baa 	.word	0x20003baa
 800c700:	20003ba0 	.word	0x20003ba0
 800c704:	20003b80 	.word	0x20003b80
 800c708:	08017b6c 	.word	0x08017b6c
 800c70c:	08017f4c 	.word	0x08017f4c
 800c710:	08017bb8 	.word	0x08017bb8
 800c714:	08017f88 	.word	0x08017f88
 800c718:	20003bb0 	.word	0x20003bb0
 800c71c:	20003bad 	.word	0x20003bad
 800c720:	08017fa8 	.word	0x08017fa8
            } else {
              recv_data = cseg->p;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	4a70      	ldr	r2, [pc, #448]	@ (800c8ec <tcp_receive+0xcf4>)
 800c72a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	899b      	ldrh	r3, [r3, #12]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fa f87c 	bl	8006838 <lwip_htons>
 800c740:	4603      	mov	r3, r0
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00d      	beq.n	800c768 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c74c:	4b68      	ldr	r3, [pc, #416]	@ (800c8f0 <tcp_receive+0xcf8>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f043 0320 	orr.w	r3, r3, #32
 800c754:	b2da      	uxtb	r2, r3
 800c756:	4b66      	ldr	r3, [pc, #408]	@ (800c8f0 <tcp_receive+0xcf8>)
 800c758:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	7d1b      	ldrb	r3, [r3, #20]
 800c75e:	2b04      	cmp	r3, #4
 800c760:	d102      	bne.n	800c768 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2207      	movs	r2, #7
 800c766:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c770:	68b8      	ldr	r0, [r7, #8]
 800c772:	f7fd fa34 	bl	8009bde <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d008      	beq.n	800c790 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c78a:	429a      	cmp	r2, r3
 800c78c:	f43f af43 	beq.w	800c616 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	8b5b      	ldrh	r3, [r3, #26]
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00e      	beq.n	800c7ba <tcp_receive+0xbc2>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	8b5b      	ldrh	r3, [r3, #26]
 800c7a0:	f023 0301 	bic.w	r3, r3, #1
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	835a      	strh	r2, [r3, #26]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	8b5b      	ldrh	r3, [r3, #26]
 800c7ae:	f043 0302 	orr.w	r3, r3, #2
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c7b8:	e187      	b.n	800caca <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	8b5b      	ldrh	r3, [r3, #26]
 800c7be:	f043 0301 	orr.w	r3, r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c7c8:	e17f      	b.n	800caca <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c7d2:	4848      	ldr	r0, [pc, #288]	@ (800c8f4 <tcp_receive+0xcfc>)
 800c7d4:	f7fd fa3a 	bl	8009c4c <tcp_seg_copy>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800c7de:	e16c      	b.n	800caba <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ea:	e156      	b.n	800ca9a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	4b41      	ldr	r3, [pc, #260]	@ (800c8f8 <tcp_receive+0xd00>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d11d      	bne.n	800c836 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f4 <tcp_receive+0xcfc>)
 800c7fc:	891a      	ldrh	r2, [r3, #8]
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c800:	891b      	ldrh	r3, [r3, #8]
 800c802:	429a      	cmp	r2, r3
 800c804:	f240 814e 	bls.w	800caa4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c808:	483a      	ldr	r0, [pc, #232]	@ (800c8f4 <tcp_receive+0xcfc>)
 800c80a:	f7fd fa1f 	bl	8009c4c <tcp_seg_copy>
 800c80e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 8148 	beq.w	800caa8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e002      	b.n	800c82c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c82c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c82e:	6978      	ldr	r0, [r7, #20]
 800c830:	f7ff f8de 	bl	800b9f0 <tcp_oos_insert_segment>
                }
                break;
 800c834:	e138      	b.n	800caa8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d117      	bne.n	800c86c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c83c:	4b2e      	ldr	r3, [pc, #184]	@ (800c8f8 <tcp_receive+0xd00>)
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	2b00      	cmp	r3, #0
 800c84a:	da57      	bge.n	800c8fc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c84c:	4829      	ldr	r0, [pc, #164]	@ (800c8f4 <tcp_receive+0xcfc>)
 800c84e:	f7fd f9fd 	bl	8009c4c <tcp_seg_copy>
 800c852:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8128 	beq.w	800caac <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c862:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c864:	69b8      	ldr	r0, [r7, #24]
 800c866:	f7ff f8c3 	bl	800b9f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c86a:	e11f      	b.n	800caac <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c86c:	4b22      	ldr	r3, [pc, #136]	@ (800c8f8 <tcp_receive+0xd00>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	db3e      	blt.n	800c8fc <tcp_receive+0xd04>
 800c87e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8f8 <tcp_receive+0xd00>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	3301      	adds	r3, #1
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc35      	bgt.n	800c8fc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c890:	4818      	ldr	r0, [pc, #96]	@ (800c8f4 <tcp_receive+0xcfc>)
 800c892:	f7fd f9db 	bl	8009c4c <tcp_seg_copy>
 800c896:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 8108 	beq.w	800cab0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8a8:	8912      	ldrh	r2, [r2, #8]
 800c8aa:	441a      	add	r2, r3
 800c8ac:	4b12      	ldr	r3, [pc, #72]	@ (800c8f8 <tcp_receive+0xd00>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	dd12      	ble.n	800c8dc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c8b6:	4b10      	ldr	r3, [pc, #64]	@ (800c8f8 <tcp_receive+0xd00>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ca:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ce:	685a      	ldr	r2, [r3, #4]
 800c8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d2:	891b      	ldrh	r3, [r3, #8]
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7fb fa50 	bl	8007d7c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c8e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c8e4:	69f8      	ldr	r0, [r7, #28]
 800c8e6:	f7ff f883 	bl	800b9f0 <tcp_oos_insert_segment>
                  }
                  break;
 800c8ea:	e0e1      	b.n	800cab0 <tcp_receive+0xeb8>
 800c8ec:	20003bb0 	.word	0x20003bb0
 800c8f0:	20003bad 	.word	0x20003bad
 800c8f4:	20003b80 	.word	0x20003b80
 800c8f8:	20003ba0 	.word	0x20003ba0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	f040 80c5 	bne.w	800ca94 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c90a:	4b7f      	ldr	r3, [pc, #508]	@ (800cb08 <tcp_receive+0xf10>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c916:	2b00      	cmp	r3, #0
 800c918:	f340 80bc 	ble.w	800ca94 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	899b      	ldrh	r3, [r3, #12]
 800c922:	b29b      	uxth	r3, r3
 800c924:	4618      	mov	r0, r3
 800c926:	f7f9 ff87 	bl	8006838 <lwip_htons>
 800c92a:	4603      	mov	r3, r0
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	2b00      	cmp	r3, #0
 800c934:	f040 80be 	bne.w	800cab4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c938:	4874      	ldr	r0, [pc, #464]	@ (800cb0c <tcp_receive+0xf14>)
 800c93a:	f7fd f987 	bl	8009c4c <tcp_seg_copy>
 800c93e:	4602      	mov	r2, r0
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 80b5 	beq.w	800cab8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c956:	8912      	ldrh	r2, [r2, #8]
 800c958:	441a      	add	r2, r3
 800c95a:	4b6b      	ldr	r3, [pc, #428]	@ (800cb08 <tcp_receive+0xf10>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	2b00      	cmp	r3, #0
 800c962:	dd12      	ble.n	800c98a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c964:	4b68      	ldr	r3, [pc, #416]	@ (800cb08 <tcp_receive+0xf10>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	b29a      	uxth	r2, r3
 800c96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	b29b      	uxth	r3, r3
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	b29a      	uxth	r2, r3
 800c976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c978:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c980:	891b      	ldrh	r3, [r3, #8]
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fb f9f9 	bl	8007d7c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c98a:	4b61      	ldr	r3, [pc, #388]	@ (800cb10 <tcp_receive+0xf18>)
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	4b5d      	ldr	r3, [pc, #372]	@ (800cb08 <tcp_receive+0xf10>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	441a      	add	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c99e:	440b      	add	r3, r1
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f340 8088 	ble.w	800cab8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	899b      	ldrh	r3, [r3, #12]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f9 ff40 	bl	8006838 <lwip_htons>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d021      	beq.n	800ca08 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	899b      	ldrh	r3, [r3, #12]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	b21b      	sxth	r3, r3
 800c9d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c9d4:	b21c      	sxth	r4, r3
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	899b      	ldrh	r3, [r3, #12]
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f9 ff29 	bl	8006838 <lwip_htons>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f9 ff21 	bl	8006838 <lwip_htons>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	b21b      	sxth	r3, r3
 800c9fa:	4323      	orrs	r3, r4
 800c9fc:	b21a      	sxth	r2, r3
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	b292      	uxth	r2, r2
 800ca06:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca12:	4413      	add	r3, r2
 800ca14:	b299      	uxth	r1, r3
 800ca16:	4b3c      	ldr	r3, [pc, #240]	@ (800cb08 <tcp_receive+0xf10>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	1a8a      	subs	r2, r1, r2
 800ca22:	b292      	uxth	r2, r2
 800ca24:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	4619      	mov	r1, r3
 800ca34:	4610      	mov	r0, r2
 800ca36:	f7fb f9a1 	bl	8007d7c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	891c      	ldrh	r4, [r3, #8]
 800ca40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	899b      	ldrh	r3, [r3, #12]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7f9 fef4 	bl	8006838 <lwip_htons>
 800ca50:	4603      	mov	r3, r0
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f003 0303 	and.w	r3, r3, #3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <tcp_receive+0xe68>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e000      	b.n	800ca62 <tcp_receive+0xe6a>
 800ca60:	2300      	movs	r3, #0
 800ca62:	4423      	add	r3, r4
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	4b2a      	ldr	r3, [pc, #168]	@ (800cb10 <tcp_receive+0xf18>)
 800ca68:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ca6a:	4b29      	ldr	r3, [pc, #164]	@ (800cb10 <tcp_receive+0xf18>)
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b25      	ldr	r3, [pc, #148]	@ (800cb08 <tcp_receive+0xf10>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	441a      	add	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7a:	6879      	ldr	r1, [r7, #4]
 800ca7c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca7e:	440b      	add	r3, r1
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d019      	beq.n	800cab8 <tcp_receive+0xec0>
 800ca84:	4b23      	ldr	r3, [pc, #140]	@ (800cb14 <tcp_receive+0xf1c>)
 800ca86:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ca8a:	4923      	ldr	r1, [pc, #140]	@ (800cb18 <tcp_receive+0xf20>)
 800ca8c:	4823      	ldr	r0, [pc, #140]	@ (800cb1c <tcp_receive+0xf24>)
 800ca8e:	f009 f877 	bl	8015b80 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca92:	e011      	b.n	800cab8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f47f aea5 	bne.w	800c7ec <tcp_receive+0xbf4>
 800caa2:	e00a      	b.n	800caba <tcp_receive+0xec2>
                break;
 800caa4:	bf00      	nop
 800caa6:	e008      	b.n	800caba <tcp_receive+0xec2>
                break;
 800caa8:	bf00      	nop
 800caaa:	e006      	b.n	800caba <tcp_receive+0xec2>
                  break;
 800caac:	bf00      	nop
 800caae:	e004      	b.n	800caba <tcp_receive+0xec2>
                  break;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <tcp_receive+0xec2>
                  break;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <tcp_receive+0xec2>
                break;
 800cab8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f001 fef8 	bl	800e8b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cac0:	e003      	b.n	800caca <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fef4 	bl	800e8b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cac8:	e01a      	b.n	800cb00 <tcp_receive+0xf08>
 800caca:	e019      	b.n	800cb00 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cacc:	4b0e      	ldr	r3, [pc, #56]	@ (800cb08 <tcp_receive+0xf10>)
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	db0a      	blt.n	800caf0 <tcp_receive+0xef8>
 800cada:	4b0b      	ldr	r3, [pc, #44]	@ (800cb08 <tcp_receive+0xf10>)
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cae6:	440b      	add	r3, r1
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	3301      	adds	r3, #1
 800caec:	2b00      	cmp	r3, #0
 800caee:	dd07      	ble.n	800cb00 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	8b5b      	ldrh	r3, [r3, #26]
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cafe:	e7ff      	b.n	800cb00 <tcp_receive+0xf08>
 800cb00:	bf00      	nop
 800cb02:	3750      	adds	r7, #80	@ 0x50
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bdb0      	pop	{r4, r5, r7, pc}
 800cb08:	20003ba0 	.word	0x20003ba0
 800cb0c:	20003b80 	.word	0x20003b80
 800cb10:	20003baa 	.word	0x20003baa
 800cb14:	08017b6c 	.word	0x08017b6c
 800cb18:	08017f14 	.word	0x08017f14
 800cb1c:	08017bb8 	.word	0x08017bb8

0800cb20 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cb26:	4b15      	ldr	r3, [pc, #84]	@ (800cb7c <tcp_get_next_optbyte+0x5c>)
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	b291      	uxth	r1, r2
 800cb2e:	4a13      	ldr	r2, [pc, #76]	@ (800cb7c <tcp_get_next_optbyte+0x5c>)
 800cb30:	8011      	strh	r1, [r2, #0]
 800cb32:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cb34:	4b12      	ldr	r3, [pc, #72]	@ (800cb80 <tcp_get_next_optbyte+0x60>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d004      	beq.n	800cb46 <tcp_get_next_optbyte+0x26>
 800cb3c:	4b11      	ldr	r3, [pc, #68]	@ (800cb84 <tcp_get_next_optbyte+0x64>)
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	88fa      	ldrh	r2, [r7, #6]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d208      	bcs.n	800cb58 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cb46:	4b10      	ldr	r3, [pc, #64]	@ (800cb88 <tcp_get_next_optbyte+0x68>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cb4e:	88fb      	ldrh	r3, [r7, #6]
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	4413      	add	r3, r2
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	e00b      	b.n	800cb70 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	4b09      	ldr	r3, [pc, #36]	@ (800cb84 <tcp_get_next_optbyte+0x64>)
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cb66:	4b06      	ldr	r3, [pc, #24]	@ (800cb80 <tcp_get_next_optbyte+0x60>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	797b      	ldrb	r3, [r7, #5]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	20003b9c 	.word	0x20003b9c
 800cb80:	20003b98 	.word	0x20003b98
 800cb84:	20003b96 	.word	0x20003b96
 800cb88:	20003b90 	.word	0x20003b90

0800cb8c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <tcp_parseopt+0x1c>
 800cb9a:	4b32      	ldr	r3, [pc, #200]	@ (800cc64 <tcp_parseopt+0xd8>)
 800cb9c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cba0:	4931      	ldr	r1, [pc, #196]	@ (800cc68 <tcp_parseopt+0xdc>)
 800cba2:	4832      	ldr	r0, [pc, #200]	@ (800cc6c <tcp_parseopt+0xe0>)
 800cba4:	f008 ffec 	bl	8015b80 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cba8:	4b31      	ldr	r3, [pc, #196]	@ (800cc70 <tcp_parseopt+0xe4>)
 800cbaa:	881b      	ldrh	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d056      	beq.n	800cc5e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cbb0:	4b30      	ldr	r3, [pc, #192]	@ (800cc74 <tcp_parseopt+0xe8>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	801a      	strh	r2, [r3, #0]
 800cbb6:	e046      	b.n	800cc46 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cbb8:	f7ff ffb2 	bl	800cb20 <tcp_get_next_optbyte>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d006      	beq.n	800cbd4 <tcp_parseopt+0x48>
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	dc2a      	bgt.n	800cc20 <tcp_parseopt+0x94>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d042      	beq.n	800cc54 <tcp_parseopt+0xc8>
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d038      	beq.n	800cc44 <tcp_parseopt+0xb8>
 800cbd2:	e025      	b.n	800cc20 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cbd4:	f7ff ffa4 	bl	800cb20 <tcp_get_next_optbyte>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	d13c      	bne.n	800cc58 <tcp_parseopt+0xcc>
 800cbde:	4b25      	ldr	r3, [pc, #148]	@ (800cc74 <tcp_parseopt+0xe8>)
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	4a22      	ldr	r2, [pc, #136]	@ (800cc70 <tcp_parseopt+0xe4>)
 800cbe6:	8812      	ldrh	r2, [r2, #0]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	da35      	bge.n	800cc58 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cbec:	f7ff ff98 	bl	800cb20 <tcp_get_next_optbyte>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	021b      	lsls	r3, r3, #8
 800cbf4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cbf6:	f7ff ff93 	bl	800cb20 <tcp_get_next_optbyte>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	89bb      	ldrh	r3, [r7, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cc04:	89bb      	ldrh	r3, [r7, #12]
 800cc06:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cc0a:	d804      	bhi.n	800cc16 <tcp_parseopt+0x8a>
 800cc0c:	89bb      	ldrh	r3, [r7, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <tcp_parseopt+0x8a>
 800cc12:	89ba      	ldrh	r2, [r7, #12]
 800cc14:	e001      	b.n	800cc1a <tcp_parseopt+0x8e>
 800cc16:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800cc1e:	e012      	b.n	800cc46 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cc20:	f7ff ff7e 	bl	800cb20 <tcp_get_next_optbyte>
 800cc24:	4603      	mov	r3, r0
 800cc26:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cc28:	7afb      	ldrb	r3, [r7, #11]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d916      	bls.n	800cc5c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cc2e:	7afb      	ldrb	r3, [r7, #11]
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	4b10      	ldr	r3, [pc, #64]	@ (800cc74 <tcp_parseopt+0xe8>)
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	4413      	add	r3, r2
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	3b02      	subs	r3, #2
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc74 <tcp_parseopt+0xe8>)
 800cc40:	801a      	strh	r2, [r3, #0]
 800cc42:	e000      	b.n	800cc46 <tcp_parseopt+0xba>
          break;
 800cc44:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cc46:	4b0b      	ldr	r3, [pc, #44]	@ (800cc74 <tcp_parseopt+0xe8>)
 800cc48:	881a      	ldrh	r2, [r3, #0]
 800cc4a:	4b09      	ldr	r3, [pc, #36]	@ (800cc70 <tcp_parseopt+0xe4>)
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d3b2      	bcc.n	800cbb8 <tcp_parseopt+0x2c>
 800cc52:	e004      	b.n	800cc5e <tcp_parseopt+0xd2>
          return;
 800cc54:	bf00      	nop
 800cc56:	e002      	b.n	800cc5e <tcp_parseopt+0xd2>
            return;
 800cc58:	bf00      	nop
 800cc5a:	e000      	b.n	800cc5e <tcp_parseopt+0xd2>
            return;
 800cc5c:	bf00      	nop
      }
    }
  }
}
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08017b6c 	.word	0x08017b6c
 800cc68:	08017fd0 	.word	0x08017fd0
 800cc6c:	08017bb8 	.word	0x08017bb8
 800cc70:	20003b94 	.word	0x20003b94
 800cc74:	20003b9c 	.word	0x20003b9c

0800cc78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cc7c:	4b05      	ldr	r3, [pc, #20]	@ (800cc94 <tcp_trigger_input_pcb_close+0x1c>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f043 0310 	orr.w	r3, r3, #16
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	4b03      	ldr	r3, [pc, #12]	@ (800cc94 <tcp_trigger_input_pcb_close+0x1c>)
 800cc88:	701a      	strb	r2, [r3, #0]
}
 800cc8a:	bf00      	nop
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	20003bad 	.word	0x20003bad

0800cc98 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00a      	beq.n	800ccc0 <tcp_route+0x28>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	7a1b      	ldrb	r3, [r3, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	7a1b      	ldrb	r3, [r3, #8]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fa fe7a 	bl	80079b0 <netif_get_by_index>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	e003      	b.n	800ccc8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f005 fe5f 	bl	8012984 <ip4_route>
 800ccc6:	4603      	mov	r3, r0
  }
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ccd0:	b590      	push	{r4, r7, lr}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	603b      	str	r3, [r7, #0]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d105      	bne.n	800ccf2 <tcp_create_segment+0x22>
 800cce6:	4b47      	ldr	r3, [pc, #284]	@ (800ce04 <tcp_create_segment+0x134>)
 800cce8:	22a3      	movs	r2, #163	@ 0xa3
 800ccea:	4947      	ldr	r1, [pc, #284]	@ (800ce08 <tcp_create_segment+0x138>)
 800ccec:	4847      	ldr	r0, [pc, #284]	@ (800ce0c <tcp_create_segment+0x13c>)
 800ccee:	f008 ff47 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d105      	bne.n	800cd04 <tcp_create_segment+0x34>
 800ccf8:	4b42      	ldr	r3, [pc, #264]	@ (800ce04 <tcp_create_segment+0x134>)
 800ccfa:	22a4      	movs	r2, #164	@ 0xa4
 800ccfc:	4944      	ldr	r1, [pc, #272]	@ (800ce10 <tcp_create_segment+0x140>)
 800ccfe:	4843      	ldr	r0, [pc, #268]	@ (800ce0c <tcp_create_segment+0x13c>)
 800cd00:	f008 ff3e 	bl	8015b80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cd04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	f003 0304 	and.w	r3, r3, #4
 800cd10:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cd12:	2003      	movs	r0, #3
 800cd14:	f7fa fb82 	bl	800741c <memp_malloc>
 800cd18:	6138      	str	r0, [r7, #16]
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cd20:	68b8      	ldr	r0, [r7, #8]
 800cd22:	f7fb f9af 	bl	8008084 <pbuf_free>
    return NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	e068      	b.n	800cdfc <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cd30:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	891a      	ldrh	r2, [r3, #8]
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d205      	bcs.n	800cd56 <tcp_create_segment+0x86>
 800cd4a:	4b2e      	ldr	r3, [pc, #184]	@ (800ce04 <tcp_create_segment+0x134>)
 800cd4c:	22b0      	movs	r2, #176	@ 0xb0
 800cd4e:	4931      	ldr	r1, [pc, #196]	@ (800ce14 <tcp_create_segment+0x144>)
 800cd50:	482e      	ldr	r0, [pc, #184]	@ (800ce0c <tcp_create_segment+0x13c>)
 800cd52:	f008 ff15 	bl	8015b80 <iprintf>
  seg->len = p->tot_len - optlen;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	891a      	ldrh	r2, [r3, #8]
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cd66:	2114      	movs	r1, #20
 800cd68:	68b8      	ldr	r0, [r7, #8]
 800cd6a:	f7fb f8f5 	bl	8007f58 <pbuf_add_header>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00c      	beq.n	800cd8e <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800cd74:	4b28      	ldr	r3, [pc, #160]	@ (800ce18 <tcp_create_segment+0x148>)
 800cd76:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	4b26      	ldr	r3, [pc, #152]	@ (800ce18 <tcp_create_segment+0x148>)
 800cd80:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 800cd84:	6938      	ldr	r0, [r7, #16]
 800cd86:	f7fc ff2a 	bl	8009bde <tcp_seg_free>
    return NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	e036      	b.n	800cdfc <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	8ada      	ldrh	r2, [r3, #22]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	68dc      	ldr	r4, [r3, #12]
 800cda0:	4610      	mov	r0, r2
 800cda2:	f7f9 fd49 	bl	8006838 <lwip_htons>
 800cda6:	4603      	mov	r3, r0
 800cda8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	8b1a      	ldrh	r2, [r3, #24]
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	68dc      	ldr	r4, [r3, #12]
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	f7f9 fd40 	bl	8006838 <lwip_htons>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	68dc      	ldr	r4, [r3, #12]
 800cdc0:	6838      	ldr	r0, [r7, #0]
 800cdc2:	f7f9 fd4f 	bl	8006864 <lwip_htonl>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	089b      	lsrs	r3, r3, #2
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	3305      	adds	r3, #5
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	031b      	lsls	r3, r3, #12
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	4313      	orrs	r3, r2
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	68dc      	ldr	r4, [r3, #12]
 800cde4:	4610      	mov	r0, r2
 800cde6:	f7f9 fd27 	bl	8006838 <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	749a      	strb	r2, [r3, #18]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	74da      	strb	r2, [r3, #19]
  return seg;
 800cdfa:	693b      	ldr	r3, [r7, #16]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	371c      	adds	r7, #28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd90      	pop	{r4, r7, pc}
 800ce04:	08017fec 	.word	0x08017fec
 800ce08:	08018020 	.word	0x08018020
 800ce0c:	08018040 	.word	0x08018040
 800ce10:	08018068 	.word	0x08018068
 800ce14:	0801808c 	.word	0x0801808c
 800ce18:	20003a9c 	.word	0x20003a9c

0800ce1c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	607b      	str	r3, [r7, #4]
 800ce24:	4603      	mov	r3, r0
 800ce26:	73fb      	strb	r3, [r7, #15]
 800ce28:	460b      	mov	r3, r1
 800ce2a:	81bb      	strh	r3, [r7, #12]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ce30:	89bb      	ldrh	r3, [r7, #12]
 800ce32:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <tcp_pbuf_prealloc+0x2a>
 800ce3a:	4b30      	ldr	r3, [pc, #192]	@ (800cefc <tcp_pbuf_prealloc+0xe0>)
 800ce3c:	22e8      	movs	r2, #232	@ 0xe8
 800ce3e:	4930      	ldr	r1, [pc, #192]	@ (800cf00 <tcp_pbuf_prealloc+0xe4>)
 800ce40:	4830      	ldr	r0, [pc, #192]	@ (800cf04 <tcp_pbuf_prealloc+0xe8>)
 800ce42:	f008 fe9d 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d105      	bne.n	800ce58 <tcp_pbuf_prealloc+0x3c>
 800ce4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cefc <tcp_pbuf_prealloc+0xe0>)
 800ce4e:	22e9      	movs	r2, #233	@ 0xe9
 800ce50:	492d      	ldr	r1, [pc, #180]	@ (800cf08 <tcp_pbuf_prealloc+0xec>)
 800ce52:	482c      	ldr	r0, [pc, #176]	@ (800cf04 <tcp_pbuf_prealloc+0xe8>)
 800ce54:	f008 fe94 	bl	8015b80 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ce58:	89ba      	ldrh	r2, [r7, #12]
 800ce5a:	897b      	ldrh	r3, [r7, #10]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d221      	bcs.n	800cea4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ce60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d111      	bne.n	800ce90 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	8b5b      	ldrh	r3, [r3, #26]
 800ce70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d115      	bne.n	800cea4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ce78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d007      	beq.n	800ce90 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ce80:	6a3b      	ldr	r3, [r7, #32]
 800ce82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d009      	beq.n	800cea4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ce90:	89bb      	ldrh	r3, [r7, #12]
 800ce92:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800ce96:	f023 0203 	bic.w	r2, r3, #3
 800ce9a:	897b      	ldrh	r3, [r7, #10]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	bf28      	it	cs
 800cea0:	4613      	movcs	r3, r2
 800cea2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cea4:	8af9      	ldrh	r1, [r7, #22]
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fa fe07 	bl	8007ac0 <pbuf_alloc>
 800ceb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e019      	b.n	800cef2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <tcp_pbuf_prealloc+0xb8>
 800cec6:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <tcp_pbuf_prealloc+0xe0>)
 800cec8:	f240 120b 	movw	r2, #267	@ 0x10b
 800cecc:	490f      	ldr	r1, [pc, #60]	@ (800cf0c <tcp_pbuf_prealloc+0xf0>)
 800cece:	480d      	ldr	r0, [pc, #52]	@ (800cf04 <tcp_pbuf_prealloc+0xe8>)
 800ced0:	f008 fe56 	bl	8015b80 <iprintf>
  *oversize = p->len - length;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	895a      	ldrh	r2, [r3, #10]
 800ced8:	89bb      	ldrh	r3, [r7, #12]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	89ba      	ldrh	r2, [r7, #12]
 800cee6:	811a      	strh	r2, [r3, #8]
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	891a      	ldrh	r2, [r3, #8]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	815a      	strh	r2, [r3, #10]
  return p;
 800cef0:	693b      	ldr	r3, [r7, #16]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3718      	adds	r7, #24
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	08017fec 	.word	0x08017fec
 800cf00:	080180a4 	.word	0x080180a4
 800cf04:	08018040 	.word	0x08018040
 800cf08:	080180c8 	.word	0x080180c8
 800cf0c:	080180e8 	.word	0x080180e8

0800cf10 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <tcp_write_checks+0x20>
 800cf22:	4b37      	ldr	r3, [pc, #220]	@ (800d000 <tcp_write_checks+0xf0>)
 800cf24:	f240 1233 	movw	r2, #307	@ 0x133
 800cf28:	4936      	ldr	r1, [pc, #216]	@ (800d004 <tcp_write_checks+0xf4>)
 800cf2a:	4837      	ldr	r0, [pc, #220]	@ (800d008 <tcp_write_checks+0xf8>)
 800cf2c:	f008 fe28 	bl	8015b80 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	7d1b      	ldrb	r3, [r3, #20]
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d00e      	beq.n	800cf56 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cf3c:	2b07      	cmp	r3, #7
 800cf3e:	d00a      	beq.n	800cf56 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cf44:	2b02      	cmp	r3, #2
 800cf46:	d006      	beq.n	800cf56 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d002      	beq.n	800cf56 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cf50:	f06f 030a 	mvn.w	r3, #10
 800cf54:	e050      	b.n	800cff8 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 800cf56:	887b      	ldrh	r3, [r7, #2]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <tcp_write_checks+0x50>
    return ERR_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e04b      	b.n	800cff8 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cf66:	887a      	ldrh	r2, [r7, #2]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d909      	bls.n	800cf80 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	8b5b      	ldrh	r3, [r3, #26]
 800cf70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cf7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf7e:	e03b      	b.n	800cff8 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	d911      	bls.n	800cfae <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800cf8a:	4b20      	ldr	r3, [pc, #128]	@ (800d00c <tcp_write_checks+0xfc>)
 800cf8c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800cf90:	3301      	adds	r3, #1
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	4b1d      	ldr	r3, [pc, #116]	@ (800d00c <tcp_write_checks+0xfc>)
 800cf96:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	8b5b      	ldrh	r3, [r3, #26]
 800cf9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfac:	e024      	b.n	800cff8 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00f      	beq.n	800cfd8 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d11a      	bne.n	800cff6 <tcp_write_checks+0xe6>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d116      	bne.n	800cff6 <tcp_write_checks+0xe6>
 800cfc8:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <tcp_write_checks+0xf0>)
 800cfca:	f240 1255 	movw	r2, #341	@ 0x155
 800cfce:	4910      	ldr	r1, [pc, #64]	@ (800d010 <tcp_write_checks+0x100>)
 800cfd0:	480d      	ldr	r0, [pc, #52]	@ (800d008 <tcp_write_checks+0xf8>)
 800cfd2:	f008 fdd5 	bl	8015b80 <iprintf>
 800cfd6:	e00e      	b.n	800cff6 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d103      	bne.n	800cfe8 <tcp_write_checks+0xd8>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <tcp_write_checks+0xe6>
 800cfe8:	4b05      	ldr	r3, [pc, #20]	@ (800d000 <tcp_write_checks+0xf0>)
 800cfea:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800cfee:	4909      	ldr	r1, [pc, #36]	@ (800d014 <tcp_write_checks+0x104>)
 800cff0:	4805      	ldr	r0, [pc, #20]	@ (800d008 <tcp_write_checks+0xf8>)
 800cff2:	f008 fdc5 	bl	8015b80 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	08017fec 	.word	0x08017fec
 800d004:	080180fc 	.word	0x080180fc
 800d008:	08018040 	.word	0x08018040
 800d00c:	20003a9c 	.word	0x20003a9c
 800d010:	0801811c 	.word	0x0801811c
 800d014:	08018158 	.word	0x08018158

0800d018 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d018:	b590      	push	{r4, r7, lr}
 800d01a:	b09b      	sub	sp, #108	@ 0x6c
 800d01c:	af04      	add	r7, sp, #16
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	4611      	mov	r1, r2
 800d024:	461a      	mov	r2, r3
 800d026:	460b      	mov	r3, r1
 800d028:	80fb      	strh	r3, [r7, #6]
 800d02a:	4613      	mov	r3, r2
 800d02c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	653b      	str	r3, [r7, #80]	@ 0x50
 800d036:	2300      	movs	r3, #0
 800d038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d03a:	2300      	movs	r3, #0
 800d03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d03e:	2300      	movs	r3, #0
 800d040:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d042:	2300      	movs	r3, #0
 800d044:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d048:	2300      	movs	r3, #0
 800d04a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d109      	bne.n	800d074 <tcp_write+0x5c>
 800d060:	4ba4      	ldr	r3, [pc, #656]	@ (800d2f4 <tcp_write+0x2dc>)
 800d062:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d066:	49a4      	ldr	r1, [pc, #656]	@ (800d2f8 <tcp_write+0x2e0>)
 800d068:	48a4      	ldr	r0, [pc, #656]	@ (800d2fc <tcp_write+0x2e4>)
 800d06a:	f008 fd89 	bl	8015b80 <iprintf>
 800d06e:	f06f 030f 	mvn.w	r3, #15
 800d072:	e332      	b.n	800d6da <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d082:	4293      	cmp	r3, r2
 800d084:	bf28      	it	cs
 800d086:	4613      	movcs	r3, r2
 800d088:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d08a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d102      	bne.n	800d096 <tcp_write+0x7e>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d094:	e000      	b.n	800d098 <tcp_write+0x80>
 800d096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d098:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d109      	bne.n	800d0b4 <tcp_write+0x9c>
 800d0a0:	4b94      	ldr	r3, [pc, #592]	@ (800d2f4 <tcp_write+0x2dc>)
 800d0a2:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d0a6:	4996      	ldr	r1, [pc, #600]	@ (800d300 <tcp_write+0x2e8>)
 800d0a8:	4894      	ldr	r0, [pc, #592]	@ (800d2fc <tcp_write+0x2e4>)
 800d0aa:	f008 fd69 	bl	8015b80 <iprintf>
 800d0ae:	f06f 030f 	mvn.w	r3, #15
 800d0b2:	e312      	b.n	800d6da <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7ff ff29 	bl	800cf10 <tcp_write_checks>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d0c4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d002      	beq.n	800d0d2 <tcp_write+0xba>
    return err;
 800d0cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d0d0:	e303      	b.n	800d6da <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d0d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 80f6 	beq.w	800d2d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d0f2:	e002      	b.n	800d0fa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d0f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1f8      	bne.n	800d0f4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d104:	7a9b      	ldrb	r3, [r3, #10]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	b29b      	uxth	r3, r3
 800d10a:	f003 0304 	and.w	r3, r3, #4
 800d10e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d110:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d114:	891b      	ldrh	r3, [r3, #8]
 800d116:	4619      	mov	r1, r3
 800d118:	8c3b      	ldrh	r3, [r7, #32]
 800d11a:	440b      	add	r3, r1
 800d11c:	429a      	cmp	r2, r3
 800d11e:	da06      	bge.n	800d12e <tcp_write+0x116>
 800d120:	4b74      	ldr	r3, [pc, #464]	@ (800d2f4 <tcp_write+0x2dc>)
 800d122:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d126:	4977      	ldr	r1, [pc, #476]	@ (800d304 <tcp_write+0x2ec>)
 800d128:	4874      	ldr	r0, [pc, #464]	@ (800d2fc <tcp_write+0x2e4>)
 800d12a:	f008 fd29 	bl	8015b80 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d130:	891a      	ldrh	r2, [r3, #8]
 800d132:	8c3b      	ldrh	r3, [r7, #32]
 800d134:	4413      	add	r3, r2
 800d136:	b29b      	uxth	r3, r3
 800d138:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d144:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d146:	8a7b      	ldrh	r3, [r7, #18]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d026      	beq.n	800d19a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d14c:	8a7b      	ldrh	r3, [r7, #18]
 800d14e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d150:	429a      	cmp	r2, r3
 800d152:	d206      	bcs.n	800d162 <tcp_write+0x14a>
 800d154:	4b67      	ldr	r3, [pc, #412]	@ (800d2f4 <tcp_write+0x2dc>)
 800d156:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d15a:	496b      	ldr	r1, [pc, #428]	@ (800d308 <tcp_write+0x2f0>)
 800d15c:	4867      	ldr	r0, [pc, #412]	@ (800d2fc <tcp_write+0x2e4>)
 800d15e:	f008 fd0f 	bl	8015b80 <iprintf>
      seg = last_unsent;
 800d162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d164:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d166:	8a7b      	ldrh	r3, [r7, #18]
 800d168:	88fa      	ldrh	r2, [r7, #6]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	bf28      	it	cs
 800d16e:	4613      	movcs	r3, r2
 800d170:	b29b      	uxth	r3, r3
 800d172:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d174:	4293      	cmp	r3, r2
 800d176:	bf28      	it	cs
 800d178:	4613      	movcs	r3, r2
 800d17a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d17c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d180:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d182:	4413      	add	r3, r2
 800d184:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d188:	8a7a      	ldrh	r2, [r7, #18]
 800d18a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	b29b      	uxth	r3, r3
 800d190:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d192:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d194:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d19a:	8a7b      	ldrh	r3, [r7, #18]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <tcp_write+0x1a0>
 800d1a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d006      	beq.n	800d1b8 <tcp_write+0x1a0>
 800d1aa:	4b52      	ldr	r3, [pc, #328]	@ (800d2f4 <tcp_write+0x2dc>)
 800d1ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1b0:	4956      	ldr	r1, [pc, #344]	@ (800d30c <tcp_write+0x2f4>)
 800d1b2:	4852      	ldr	r0, [pc, #328]	@ (800d2fc <tcp_write+0x2e4>)
 800d1b4:	f008 fce4 	bl	8015b80 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d1b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d1bc:	88fb      	ldrh	r3, [r7, #6]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	f080 8167 	bcs.w	800d492 <tcp_write+0x47a>
 800d1c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f000 8163 	beq.w	800d492 <tcp_write+0x47a>
 800d1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ce:	891b      	ldrh	r3, [r3, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 815e 	beq.w	800d492 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d1d6:	88fa      	ldrh	r2, [r7, #6]
 800d1d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d1dc:	1ad2      	subs	r2, r2, r3
 800d1de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	bfa8      	it	ge
 800d1e4:	4613      	movge	r3, r2
 800d1e6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d1ec:	797b      	ldrb	r3, [r7, #5]
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d027      	beq.n	800d246 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d1f6:	f107 0012 	add.w	r0, r7, #18
 800d1fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d1fc:	8bf9      	ldrh	r1, [r7, #30]
 800d1fe:	2301      	movs	r3, #1
 800d200:	9302      	str	r3, [sp, #8]
 800d202:	797b      	ldrb	r3, [r7, #5]
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	4603      	mov	r3, r0
 800d20c:	2000      	movs	r0, #0
 800d20e:	f7ff fe05 	bl	800ce1c <tcp_pbuf_prealloc>
 800d212:	6578      	str	r0, [r7, #84]	@ 0x54
 800d214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 8225 	beq.w	800d666 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d21e:	6858      	ldr	r0, [r3, #4]
 800d220:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	4413      	add	r3, r2
 800d228:	8bfa      	ldrh	r2, [r7, #30]
 800d22a:	4619      	mov	r1, r3
 800d22c:	f008 fdb1 	bl	8015d92 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d230:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d232:	f7fa ffb5 	bl	80081a0 <pbuf_clen>
 800d236:	4603      	mov	r3, r0
 800d238:	461a      	mov	r2, r3
 800d23a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d23e:	4413      	add	r3, r2
 800d240:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d244:	e041      	b.n	800d2ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d24c:	e002      	b.n	800d254 <tcp_write+0x23c>
 800d24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
 800d254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1f8      	bne.n	800d24e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25e:	7b1b      	ldrb	r3, [r3, #12]
 800d260:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d115      	bne.n	800d294 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d26e:	8952      	ldrh	r2, [r2, #10]
 800d270:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	429a      	cmp	r2, r3
 800d276:	d10d      	bne.n	800d294 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d278:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <tcp_write+0x276>
 800d280:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f4 <tcp_write+0x2dc>)
 800d282:	f240 2231 	movw	r2, #561	@ 0x231
 800d286:	4922      	ldr	r1, [pc, #136]	@ (800d310 <tcp_write+0x2f8>)
 800d288:	481c      	ldr	r0, [pc, #112]	@ (800d2fc <tcp_write+0x2e4>)
 800d28a:	f008 fc79 	bl	8015b80 <iprintf>
          extendlen = seglen;
 800d28e:	8bfb      	ldrh	r3, [r7, #30]
 800d290:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d292:	e01a      	b.n	800d2ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d294:	8bfb      	ldrh	r3, [r7, #30]
 800d296:	2201      	movs	r2, #1
 800d298:	4619      	mov	r1, r3
 800d29a:	2000      	movs	r0, #0
 800d29c:	f7fa fc10 	bl	8007ac0 <pbuf_alloc>
 800d2a0:	6578      	str	r0, [r7, #84]	@ 0x54
 800d2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 81e0 	beq.w	800d66a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d2aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	441a      	add	r2, r3
 800d2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d2b6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d2b8:	f7fa ff72 	bl	80081a0 <pbuf_clen>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d2ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d2ce:	8bfb      	ldrh	r3, [r7, #30]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d2d6:	e0dc      	b.n	800d492 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 80d7 	beq.w	800d492 <tcp_write+0x47a>
 800d2e4:	4b03      	ldr	r3, [pc, #12]	@ (800d2f4 <tcp_write+0x2dc>)
 800d2e6:	f240 224a 	movw	r2, #586	@ 0x24a
 800d2ea:	490a      	ldr	r1, [pc, #40]	@ (800d314 <tcp_write+0x2fc>)
 800d2ec:	4803      	ldr	r0, [pc, #12]	@ (800d2fc <tcp_write+0x2e4>)
 800d2ee:	f008 fc47 	bl	8015b80 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d2f2:	e0ce      	b.n	800d492 <tcp_write+0x47a>
 800d2f4:	08017fec 	.word	0x08017fec
 800d2f8:	0801818c 	.word	0x0801818c
 800d2fc:	08018040 	.word	0x08018040
 800d300:	080181a4 	.word	0x080181a4
 800d304:	080181d8 	.word	0x080181d8
 800d308:	080181f0 	.word	0x080181f0
 800d30c:	08018210 	.word	0x08018210
 800d310:	08018230 	.word	0x08018230
 800d314:	0801825c 	.word	0x0801825c
    struct pbuf *p;
    u16_t left = len - pos;
 800d318:	88fa      	ldrh	r2, [r7, #6]
 800d31a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d322:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d326:	b29b      	uxth	r3, r3
 800d328:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d32e:	8b7a      	ldrh	r2, [r7, #26]
 800d330:	8bbb      	ldrh	r3, [r7, #28]
 800d332:	4293      	cmp	r3, r2
 800d334:	bf28      	it	cs
 800d336:	4613      	movcs	r3, r2
 800d338:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d33a:	797b      	ldrb	r3, [r7, #5]
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d036      	beq.n	800d3b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d348:	b29a      	uxth	r2, r3
 800d34a:	8b3b      	ldrh	r3, [r7, #24]
 800d34c:	4413      	add	r3, r2
 800d34e:	b299      	uxth	r1, r3
 800d350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d352:	2b00      	cmp	r3, #0
 800d354:	bf0c      	ite	eq
 800d356:	2301      	moveq	r3, #1
 800d358:	2300      	movne	r3, #0
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	f107 0012 	add.w	r0, r7, #18
 800d360:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	797b      	ldrb	r3, [r7, #5]
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	4603      	mov	r3, r0
 800d36e:	2036      	movs	r0, #54	@ 0x36
 800d370:	f7ff fd54 	bl	800ce1c <tcp_pbuf_prealloc>
 800d374:	6338      	str	r0, [r7, #48]	@ 0x30
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 8178 	beq.w	800d66e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d380:	895b      	ldrh	r3, [r3, #10]
 800d382:	8b3a      	ldrh	r2, [r7, #24]
 800d384:	429a      	cmp	r2, r3
 800d386:	d906      	bls.n	800d396 <tcp_write+0x37e>
 800d388:	4b8c      	ldr	r3, [pc, #560]	@ (800d5bc <tcp_write+0x5a4>)
 800d38a:	f240 2266 	movw	r2, #614	@ 0x266
 800d38e:	498c      	ldr	r1, [pc, #560]	@ (800d5c0 <tcp_write+0x5a8>)
 800d390:	488c      	ldr	r0, [pc, #560]	@ (800d5c4 <tcp_write+0x5ac>)
 800d392:	f008 fbf5 	bl	8015b80 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	685a      	ldr	r2, [r3, #4]
 800d39a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d39e:	18d0      	adds	r0, r2, r3
 800d3a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	8b3a      	ldrh	r2, [r7, #24]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f008 fcf1 	bl	8015d92 <memcpy>
 800d3b0:	e02f      	b.n	800d412 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d3b2:	8a7b      	ldrh	r3, [r7, #18]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d006      	beq.n	800d3c6 <tcp_write+0x3ae>
 800d3b8:	4b80      	ldr	r3, [pc, #512]	@ (800d5bc <tcp_write+0x5a4>)
 800d3ba:	f240 2271 	movw	r2, #625	@ 0x271
 800d3be:	4982      	ldr	r1, [pc, #520]	@ (800d5c8 <tcp_write+0x5b0>)
 800d3c0:	4880      	ldr	r0, [pc, #512]	@ (800d5c4 <tcp_write+0x5ac>)
 800d3c2:	f008 fbdd 	bl	8015b80 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d3c6:	8b3b      	ldrh	r3, [r7, #24]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	2036      	movs	r0, #54	@ 0x36
 800d3ce:	f7fa fb77 	bl	8007ac0 <pbuf_alloc>
 800d3d2:	6178      	str	r0, [r7, #20]
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 814b 	beq.w	800d672 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d3dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	441a      	add	r2, r3
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d3e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	2036      	movs	r0, #54	@ 0x36
 800d3f6:	f7fa fb63 	bl	8007ac0 <pbuf_alloc>
 800d3fa:	6338      	str	r0, [r7, #48]	@ 0x30
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d103      	bne.n	800d40a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d402:	6978      	ldr	r0, [r7, #20]
 800d404:	f7fa fe3e 	bl	8008084 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d408:	e136      	b.n	800d678 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d40a:	6979      	ldr	r1, [r7, #20]
 800d40c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d40e:	f7fa ff07 	bl	8008220 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d414:	f7fa fec4 	bl	80081a0 <pbuf_clen>
 800d418:	4603      	mov	r3, r0
 800d41a:	461a      	mov	r2, r3
 800d41c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d420:	4413      	add	r3, r2
 800d422:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d426:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d42a:	2b08      	cmp	r3, #8
 800d42c:	d903      	bls.n	800d436 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d42e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d430:	f7fa fe28 	bl	8008084 <pbuf_free>
      goto memerr;
 800d434:	e120      	b.n	800d678 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d43a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d43e:	441a      	add	r2, r3
 800d440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	4613      	mov	r3, r2
 800d448:	2200      	movs	r2, #0
 800d44a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f7ff fc3f 	bl	800ccd0 <tcp_create_segment>
 800d452:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d456:	2b00      	cmp	r3, #0
 800d458:	f000 810d 	beq.w	800d676 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d45c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <tcp_write+0x450>
      queue = seg;
 800d462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d464:	647b      	str	r3, [r7, #68]	@ 0x44
 800d466:	e00c      	b.n	800d482 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d106      	bne.n	800d47c <tcp_write+0x464>
 800d46e:	4b53      	ldr	r3, [pc, #332]	@ (800d5bc <tcp_write+0x5a4>)
 800d470:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d474:	4955      	ldr	r1, [pc, #340]	@ (800d5cc <tcp_write+0x5b4>)
 800d476:	4853      	ldr	r0, [pc, #332]	@ (800d5c4 <tcp_write+0x5ac>)
 800d478:	f008 fb82 	bl	8015b80 <iprintf>
      prev_seg->next = seg;
 800d47c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d47e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d480:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d484:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d486:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d48a:	8b3b      	ldrh	r3, [r7, #24]
 800d48c:	4413      	add	r3, r2
 800d48e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d492:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d496:	88fb      	ldrh	r3, [r7, #6]
 800d498:	429a      	cmp	r2, r3
 800d49a:	f4ff af3d 	bcc.w	800d318 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d49e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d02c      	beq.n	800d4fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4aa:	e01e      	b.n	800d4ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ae:	891a      	ldrh	r2, [r3, #8]
 800d4b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4b2:	4413      	add	r3, r2
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d110      	bne.n	800d4e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4c8:	8952      	ldrh	r2, [r2, #10]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f008 fc5e 	bl	8015d92 <memcpy>
        p->len += oversize_used;
 800d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d8:	895a      	ldrh	r2, [r3, #10]
 800d4da:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4dc:	4413      	add	r3, r2
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1dd      	bne.n	800d4ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d4f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f2:	891a      	ldrh	r2, [r3, #8]
 800d4f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4f6:	4413      	add	r3, r2
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d4fe:	8a7a      	ldrh	r2, [r7, #18]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d018      	beq.n	800d53e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <tcp_write+0x508>
 800d512:	4b2a      	ldr	r3, [pc, #168]	@ (800d5bc <tcp_write+0x5a4>)
 800d514:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d518:	492d      	ldr	r1, [pc, #180]	@ (800d5d0 <tcp_write+0x5b8>)
 800d51a:	482a      	ldr	r0, [pc, #168]	@ (800d5c4 <tcp_write+0x5ac>)
 800d51c:	f008 fb30 	bl	8015b80 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d526:	4618      	mov	r0, r3
 800d528:	f7fa fe7a 	bl	8008220 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d52e:	891a      	ldrh	r2, [r3, #8]
 800d530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d532:	891b      	ldrh	r3, [r3, #8]
 800d534:	4413      	add	r3, r2
 800d536:	b29a      	uxth	r2, r3
 800d538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d53a:	811a      	strh	r2, [r3, #8]
 800d53c:	e037      	b.n	800d5ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d53e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d034      	beq.n	800d5ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <tcp_write+0x53a>
 800d54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <tcp_write+0x548>
 800d552:	4b1a      	ldr	r3, [pc, #104]	@ (800d5bc <tcp_write+0x5a4>)
 800d554:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d558:	491e      	ldr	r1, [pc, #120]	@ (800d5d4 <tcp_write+0x5bc>)
 800d55a:	481a      	ldr	r0, [pc, #104]	@ (800d5c4 <tcp_write+0x5ac>)
 800d55c:	f008 fb10 	bl	8015b80 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d566:	e009      	b.n	800d57c <tcp_write+0x564>
      p->tot_len += extendlen;
 800d568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56a:	891a      	ldrh	r2, [r3, #8]
 800d56c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d56e:	4413      	add	r3, r2
 800d570:	b29a      	uxth	r2, r3
 800d572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d574:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1f1      	bne.n	800d568 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d586:	891a      	ldrh	r2, [r3, #8]
 800d588:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d58a:	4413      	add	r3, r2
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d594:	895a      	ldrh	r2, [r3, #10]
 800d596:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d598:	4413      	add	r3, r2
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d5a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5a2:	891a      	ldrh	r2, [r3, #8]
 800d5a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d5a6:	4413      	add	r3, r2
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d5ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d111      	bne.n	800d5d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5b8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d5ba:	e010      	b.n	800d5de <tcp_write+0x5c6>
 800d5bc:	08017fec 	.word	0x08017fec
 800d5c0:	0801828c 	.word	0x0801828c
 800d5c4:	08018040 	.word	0x08018040
 800d5c8:	080182cc 	.word	0x080182cc
 800d5cc:	080182dc 	.word	0x080182dc
 800d5d0:	080182f0 	.word	0x080182f0
 800d5d4:	08018328 	.word	0x08018328
  } else {
    last_unsent->next = queue;
 800d5d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	441a      	add	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d5f0:	88fb      	ldrh	r3, [r7, #6]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d602:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00e      	beq.n	800d62e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10a      	bne.n	800d62e <tcp_write+0x616>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d106      	bne.n	800d62e <tcp_write+0x616>
 800d620:	4b30      	ldr	r3, [pc, #192]	@ (800d6e4 <tcp_write+0x6cc>)
 800d622:	f240 3212 	movw	r2, #786	@ 0x312
 800d626:	4930      	ldr	r1, [pc, #192]	@ (800d6e8 <tcp_write+0x6d0>)
 800d628:	4830      	ldr	r0, [pc, #192]	@ (800d6ec <tcp_write+0x6d4>)
 800d62a:	f008 faa9 	bl	8015b80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d016      	beq.n	800d662 <tcp_write+0x64a>
 800d634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d012      	beq.n	800d662 <tcp_write+0x64a>
 800d63c:	797b      	ldrb	r3, [r7, #5]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10d      	bne.n	800d662 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d646:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	899b      	ldrh	r3, [r3, #12]
 800d64c:	b29c      	uxth	r4, r3
 800d64e:	2008      	movs	r0, #8
 800d650:	f7f9 f8f2 	bl	8006838 <lwip_htons>
 800d654:	4603      	mov	r3, r0
 800d656:	461a      	mov	r2, r3
 800d658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	4322      	orrs	r2, r4
 800d65e:	b292      	uxth	r2, r2
 800d660:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	e039      	b.n	800d6da <tcp_write+0x6c2>
          goto memerr;
 800d666:	bf00      	nop
 800d668:	e006      	b.n	800d678 <tcp_write+0x660>
            goto memerr;
 800d66a:	bf00      	nop
 800d66c:	e004      	b.n	800d678 <tcp_write+0x660>
        goto memerr;
 800d66e:	bf00      	nop
 800d670:	e002      	b.n	800d678 <tcp_write+0x660>
        goto memerr;
 800d672:	bf00      	nop
 800d674:	e000      	b.n	800d678 <tcp_write+0x660>
      goto memerr;
 800d676:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	8b5b      	ldrh	r3, [r3, #26]
 800d67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d680:	b29a      	uxth	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800d686:	4b1a      	ldr	r3, [pc, #104]	@ (800d6f0 <tcp_write+0x6d8>)
 800d688:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800d68c:	3301      	adds	r3, #1
 800d68e:	b29a      	uxth	r2, r3
 800d690:	4b17      	ldr	r3, [pc, #92]	@ (800d6f0 <tcp_write+0x6d8>)
 800d692:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 800d696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <tcp_write+0x68a>
    pbuf_free(concat_p);
 800d69c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d69e:	f7fa fcf1 	bl	8008084 <pbuf_free>
  }
  if (queue != NULL) {
 800d6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <tcp_write+0x696>
    tcp_segs_free(queue);
 800d6a8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d6aa:	f7fc fa83 	bl	8009bb4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00e      	beq.n	800d6d6 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10a      	bne.n	800d6d6 <tcp_write+0x6be>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d106      	bne.n	800d6d6 <tcp_write+0x6be>
 800d6c8:	4b06      	ldr	r3, [pc, #24]	@ (800d6e4 <tcp_write+0x6cc>)
 800d6ca:	f240 3227 	movw	r2, #807	@ 0x327
 800d6ce:	4906      	ldr	r1, [pc, #24]	@ (800d6e8 <tcp_write+0x6d0>)
 800d6d0:	4806      	ldr	r0, [pc, #24]	@ (800d6ec <tcp_write+0x6d4>)
 800d6d2:	f008 fa55 	bl	8015b80 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d6d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	375c      	adds	r7, #92	@ 0x5c
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd90      	pop	{r4, r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	08017fec 	.word	0x08017fec
 800d6e8:	08018360 	.word	0x08018360
 800d6ec:	08018040 	.word	0x08018040
 800d6f0:	20003a9c 	.word	0x20003a9c

0800d6f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d6f4:	b590      	push	{r4, r7, lr}
 800d6f6:	b08b      	sub	sp, #44	@ 0x2c
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d700:	2300      	movs	r3, #0
 800d702:	61fb      	str	r3, [r7, #28]
 800d704:	2300      	movs	r3, #0
 800d706:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d708:	2300      	movs	r3, #0
 800d70a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <tcp_split_unsent_seg+0x2c>
 800d712:	4b99      	ldr	r3, [pc, #612]	@ (800d978 <tcp_split_unsent_seg+0x284>)
 800d714:	f240 324b 	movw	r2, #843	@ 0x34b
 800d718:	4998      	ldr	r1, [pc, #608]	@ (800d97c <tcp_split_unsent_seg+0x288>)
 800d71a:	4899      	ldr	r0, [pc, #612]	@ (800d980 <tcp_split_unsent_seg+0x28c>)
 800d71c:	f008 fa30 	bl	8015b80 <iprintf>

  useg = pcb->unsent;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d724:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d72c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d730:	e11e      	b.n	800d970 <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d109      	bne.n	800d74c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d738:	4b8f      	ldr	r3, [pc, #572]	@ (800d978 <tcp_split_unsent_seg+0x284>)
 800d73a:	f240 3253 	movw	r2, #851	@ 0x353
 800d73e:	4991      	ldr	r1, [pc, #580]	@ (800d984 <tcp_split_unsent_seg+0x290>)
 800d740:	488f      	ldr	r0, [pc, #572]	@ (800d980 <tcp_split_unsent_seg+0x28c>)
 800d742:	f008 fa1d 	bl	8015b80 <iprintf>
    return ERR_VAL;
 800d746:	f06f 0305 	mvn.w	r3, #5
 800d74a:	e111      	b.n	800d970 <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	891b      	ldrh	r3, [r3, #8]
 800d750:	887a      	ldrh	r2, [r7, #2]
 800d752:	429a      	cmp	r2, r3
 800d754:	d301      	bcc.n	800d75a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	e10a      	b.n	800d970 <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d75e:	887a      	ldrh	r2, [r7, #2]
 800d760:	429a      	cmp	r2, r3
 800d762:	d906      	bls.n	800d772 <tcp_split_unsent_seg+0x7e>
 800d764:	4b84      	ldr	r3, [pc, #528]	@ (800d978 <tcp_split_unsent_seg+0x284>)
 800d766:	f240 325b 	movw	r2, #859	@ 0x35b
 800d76a:	4987      	ldr	r1, [pc, #540]	@ (800d988 <tcp_split_unsent_seg+0x294>)
 800d76c:	4884      	ldr	r0, [pc, #528]	@ (800d980 <tcp_split_unsent_seg+0x28c>)
 800d76e:	f008 fa07 	bl	8015b80 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	891b      	ldrh	r3, [r3, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <tcp_split_unsent_seg+0x94>
 800d77a:	4b7f      	ldr	r3, [pc, #508]	@ (800d978 <tcp_split_unsent_seg+0x284>)
 800d77c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d780:	4982      	ldr	r1, [pc, #520]	@ (800d98c <tcp_split_unsent_seg+0x298>)
 800d782:	487f      	ldr	r0, [pc, #508]	@ (800d980 <tcp_split_unsent_seg+0x28c>)
 800d784:	f008 f9fc 	bl	8015b80 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	7a9b      	ldrb	r3, [r3, #10]
 800d78c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	b2db      	uxtb	r3, r3
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	891a      	ldrh	r2, [r3, #8]
 800d79e:	887b      	ldrh	r3, [r7, #2]
 800d7a0:	1ad3      	subs	r3, r2, r3
 800d7a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	89bb      	ldrh	r3, [r7, #12]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	2036      	movs	r0, #54	@ 0x36
 800d7b6:	f7fa f983 	bl	8007ac0 <pbuf_alloc>
 800d7ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 80b7 	beq.w	800d932 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	891a      	ldrh	r2, [r3, #8]
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	891b      	ldrh	r3, [r3, #8]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	887b      	ldrh	r3, [r7, #2]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	6858      	ldr	r0, [r3, #4]
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	18d1      	adds	r1, r2, r3
 800d7e4:	897b      	ldrh	r3, [r7, #10]
 800d7e6:	89ba      	ldrh	r2, [r7, #12]
 800d7e8:	f7fa fe52 	bl	8008490 <pbuf_copy_partial>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	89bb      	ldrh	r3, [r7, #12]
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	f040 809f 	bne.w	800d936 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	899b      	ldrh	r3, [r3, #12]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	4618      	mov	r0, r3
 800d802:	f7f9 f819 	bl	8006838 <lwip_htons>
 800d806:	4603      	mov	r3, r0
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d80e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d810:	2300      	movs	r3, #0
 800d812:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d814:	7efb      	ldrb	r3, [r7, #27]
 800d816:	f003 0308 	and.w	r3, r3, #8
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d007      	beq.n	800d82e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d81e:	7efb      	ldrb	r3, [r7, #27]
 800d820:	f023 0308 	bic.w	r3, r3, #8
 800d824:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d826:	7ebb      	ldrb	r3, [r7, #26]
 800d828:	f043 0308 	orr.w	r3, r3, #8
 800d82c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d82e:	7efb      	ldrb	r3, [r7, #27]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d007      	beq.n	800d848 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d838:	7efb      	ldrb	r3, [r7, #27]
 800d83a:	f023 0301 	bic.w	r3, r3, #1
 800d83e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d840:	7ebb      	ldrb	r3, [r7, #26]
 800d842:	f043 0301 	orr.w	r3, r3, #1
 800d846:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f9 f808 	bl	8006864 <lwip_htonl>
 800d854:	4602      	mov	r2, r0
 800d856:	887b      	ldrh	r3, [r7, #2]
 800d858:	18d1      	adds	r1, r2, r3
 800d85a:	7eba      	ldrb	r2, [r7, #26]
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	460b      	mov	r3, r1
 800d862:	6939      	ldr	r1, [r7, #16]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff fa33 	bl	800ccd0 <tcp_create_segment>
 800d86a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d063      	beq.n	800d93a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	4618      	mov	r0, r3
 800d878:	f7fa fc92 	bl	80081a0 <pbuf_clen>
 800d87c:	4603      	mov	r3, r0
 800d87e:	461a      	mov	r2, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d886:	1a9b      	subs	r3, r3, r2
 800d888:	b29a      	uxth	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	6858      	ldr	r0, [r3, #4]
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	891a      	ldrh	r2, [r3, #8]
 800d89a:	89bb      	ldrh	r3, [r7, #12]
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	f7fa fa6b 	bl	8007d7c <pbuf_realloc>
  useg->len -= remainder;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	891a      	ldrh	r2, [r3, #8]
 800d8aa:	89bb      	ldrh	r3, [r7, #12]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	899b      	ldrh	r3, [r3, #12]
 800d8ba:	b29c      	uxth	r4, r3
 800d8bc:	7efb      	ldrb	r3, [r7, #27]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7f8 ffb9 	bl	8006838 <lwip_htons>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	4322      	orrs	r2, r4
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fa fc61 	bl	80081a0 <pbuf_clen>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d8e8:	4413      	add	r3, r2
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fa fc52 	bl	80081a0 <pbuf_clen>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	461a      	mov	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d906:	4413      	add	r3, r2
 800d908:	b29a      	uxth	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	69fa      	ldr	r2, [r7, #28]
 800d91c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	e01e      	b.n	800d970 <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800d932:	bf00      	nop
 800d934:	e002      	b.n	800d93c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d936:	bf00      	nop
 800d938:	e000      	b.n	800d93c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d93a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800d93c:	4b14      	ldr	r3, [pc, #80]	@ (800d990 <tcp_split_unsent_seg+0x29c>)
 800d93e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800d942:	3301      	adds	r3, #1
 800d944:	b29a      	uxth	r2, r3
 800d946:	4b12      	ldr	r3, [pc, #72]	@ (800d990 <tcp_split_unsent_seg+0x29c>)
 800d948:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d006      	beq.n	800d960 <tcp_split_unsent_seg+0x26c>
 800d952:	4b09      	ldr	r3, [pc, #36]	@ (800d978 <tcp_split_unsent_seg+0x284>)
 800d954:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d958:	490e      	ldr	r1, [pc, #56]	@ (800d994 <tcp_split_unsent_seg+0x2a0>)
 800d95a:	4809      	ldr	r0, [pc, #36]	@ (800d980 <tcp_split_unsent_seg+0x28c>)
 800d95c:	f008 f910 	bl	8015b80 <iprintf>
  if (p != NULL) {
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800d966:	6938      	ldr	r0, [r7, #16]
 800d968:	f7fa fb8c 	bl	8008084 <pbuf_free>
  }

  return ERR_MEM;
 800d96c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d970:	4618      	mov	r0, r3
 800d972:	3724      	adds	r7, #36	@ 0x24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd90      	pop	{r4, r7, pc}
 800d978:	08017fec 	.word	0x08017fec
 800d97c:	08018380 	.word	0x08018380
 800d980:	08018040 	.word	0x08018040
 800d984:	080183a4 	.word	0x080183a4
 800d988:	080183c8 	.word	0x080183c8
 800d98c:	080183d8 	.word	0x080183d8
 800d990:	20003a9c 	.word	0x20003a9c
 800d994:	080183e8 	.word	0x080183e8

0800d998 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <tcp_send_fin+0x1c>
 800d9a6:	4b21      	ldr	r3, [pc, #132]	@ (800da2c <tcp_send_fin+0x94>)
 800d9a8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d9ac:	4920      	ldr	r1, [pc, #128]	@ (800da30 <tcp_send_fin+0x98>)
 800d9ae:	4821      	ldr	r0, [pc, #132]	@ (800da34 <tcp_send_fin+0x9c>)
 800d9b0:	f008 f8e6 	bl	8015b80 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d02e      	beq.n	800da1a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9c0:	60fb      	str	r3, [r7, #12]
 800d9c2:	e002      	b.n	800d9ca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1f8      	bne.n	800d9c4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	899b      	ldrh	r3, [r3, #12]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f8 ff2c 	bl	8006838 <lwip_htons>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0307 	and.w	r3, r3, #7
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d116      	bne.n	800da1a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	899b      	ldrh	r3, [r3, #12]
 800d9f2:	b29c      	uxth	r4, r3
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	f7f8 ff1f 	bl	8006838 <lwip_htons>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	4322      	orrs	r2, r4
 800da04:	b292      	uxth	r2, r2
 800da06:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	8b5b      	ldrh	r3, [r3, #26]
 800da0c:	f043 0320 	orr.w	r3, r3, #32
 800da10:	b29a      	uxth	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	e004      	b.n	800da24 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800da1a:	2101      	movs	r1, #1
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f80b 	bl	800da38 <tcp_enqueue_flags>
 800da22:	4603      	mov	r3, r0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd90      	pop	{r4, r7, pc}
 800da2c:	08017fec 	.word	0x08017fec
 800da30:	080183f4 	.word	0x080183f4
 800da34:	08018040 	.word	0x08018040

0800da38 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08a      	sub	sp, #40	@ 0x28
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	460b      	mov	r3, r1
 800da42:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800da4c:	78fb      	ldrb	r3, [r7, #3]
 800da4e:	f003 0303 	and.w	r3, r3, #3
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <tcp_enqueue_flags+0x2c>
 800da56:	4b6f      	ldr	r3, [pc, #444]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800da58:	f240 4211 	movw	r2, #1041	@ 0x411
 800da5c:	496e      	ldr	r1, [pc, #440]	@ (800dc18 <tcp_enqueue_flags+0x1e0>)
 800da5e:	486f      	ldr	r0, [pc, #444]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800da60:	f008 f88e 	bl	8015b80 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <tcp_enqueue_flags+0x40>
 800da6a:	4b6a      	ldr	r3, [pc, #424]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800da6c:	f240 4213 	movw	r2, #1043	@ 0x413
 800da70:	496b      	ldr	r1, [pc, #428]	@ (800dc20 <tcp_enqueue_flags+0x1e8>)
 800da72:	486a      	ldr	r0, [pc, #424]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800da74:	f008 f884 	bl	8015b80 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	f003 0302 	and.w	r3, r3, #2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800da82:	2301      	movs	r3, #1
 800da84:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da86:	7ffb      	ldrb	r3, [r7, #31]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	f003 0304 	and.w	r3, r3, #4
 800da90:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800da92:	7dfb      	ldrb	r3, [r7, #23]
 800da94:	b29b      	uxth	r3, r3
 800da96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da9a:	4619      	mov	r1, r3
 800da9c:	2036      	movs	r0, #54	@ 0x36
 800da9e:	f7fa f80f 	bl	8007ac0 <pbuf_alloc>
 800daa2:	6138      	str	r0, [r7, #16]
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d111      	bne.n	800dace <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8b5b      	ldrh	r3, [r3, #26]
 800daae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800dab8:	4b5a      	ldr	r3, [pc, #360]	@ (800dc24 <tcp_enqueue_flags+0x1ec>)
 800daba:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800dabe:	3301      	adds	r3, #1
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	4b58      	ldr	r3, [pc, #352]	@ (800dc24 <tcp_enqueue_flags+0x1ec>)
 800dac4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 800dac8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dacc:	e09d      	b.n	800dc0a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	895a      	ldrh	r2, [r3, #10]
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d206      	bcs.n	800dae8 <tcp_enqueue_flags+0xb0>
 800dada:	4b4e      	ldr	r3, [pc, #312]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800dadc:	f240 4239 	movw	r2, #1081	@ 0x439
 800dae0:	4951      	ldr	r1, [pc, #324]	@ (800dc28 <tcp_enqueue_flags+0x1f0>)
 800dae2:	484e      	ldr	r0, [pc, #312]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800dae4:	f008 f84c 	bl	8015b80 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800daec:	78fa      	ldrb	r2, [r7, #3]
 800daee:	7ffb      	ldrb	r3, [r7, #31]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	460b      	mov	r3, r1
 800daf4:	6939      	ldr	r1, [r7, #16]
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff f8ea 	bl	800ccd0 <tcp_create_segment>
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d111      	bne.n	800db28 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	8b5b      	ldrh	r3, [r3, #26]
 800db08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800db12:	4b44      	ldr	r3, [pc, #272]	@ (800dc24 <tcp_enqueue_flags+0x1ec>)
 800db14:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800db18:	3301      	adds	r3, #1
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	4b41      	ldr	r3, [pc, #260]	@ (800dc24 <tcp_enqueue_flags+0x1ec>)
 800db1e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 800db22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db26:	e070      	b.n	800dc0a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	f003 0303 	and.w	r3, r3, #3
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <tcp_enqueue_flags+0x10a>
 800db34:	4b37      	ldr	r3, [pc, #220]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800db36:	f240 4242 	movw	r2, #1090	@ 0x442
 800db3a:	493c      	ldr	r1, [pc, #240]	@ (800dc2c <tcp_enqueue_flags+0x1f4>)
 800db3c:	4837      	ldr	r0, [pc, #220]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800db3e:	f008 f81f 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	891b      	ldrh	r3, [r3, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <tcp_enqueue_flags+0x120>
 800db4a:	4b32      	ldr	r3, [pc, #200]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800db4c:	f240 4243 	movw	r2, #1091	@ 0x443
 800db50:	4937      	ldr	r1, [pc, #220]	@ (800dc30 <tcp_enqueue_flags+0x1f8>)
 800db52:	4832      	ldr	r0, [pc, #200]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800db54:	f008 f814 	bl	8015b80 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d103      	bne.n	800db68 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	66da      	str	r2, [r3, #108]	@ 0x6c
 800db66:	e00d      	b.n	800db84 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	e002      	b.n	800db76 <tcp_enqueue_flags+0x13e>
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	61bb      	str	r3, [r7, #24]
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1f8      	bne.n	800db70 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800db8c:	78fb      	ldrb	r3, [r7, #3]
 800db8e:	f003 0302 	and.w	r3, r3, #2
 800db92:	2b00      	cmp	r3, #0
 800db94:	d104      	bne.n	800dba0 <tcp_enqueue_flags+0x168>
 800db96:	78fb      	ldrb	r3, [r7, #3]
 800db98:	f003 0301 	and.w	r3, r3, #1
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d004      	beq.n	800dbaa <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	f003 0301 	and.w	r3, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d006      	beq.n	800dbc2 <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	8b5b      	ldrh	r3, [r3, #26]
 800dbb8:	f043 0320 	orr.w	r3, r3, #32
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fa faea 	bl	80081a0 <pbuf_clen>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	461a      	mov	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dbd6:	4413      	add	r3, r2
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00e      	beq.n	800dc08 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <tcp_enqueue_flags+0x1d0>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d106      	bne.n	800dc08 <tcp_enqueue_flags+0x1d0>
 800dbfa:	4b06      	ldr	r3, [pc, #24]	@ (800dc14 <tcp_enqueue_flags+0x1dc>)
 800dbfc:	f240 4265 	movw	r2, #1125	@ 0x465
 800dc00:	490c      	ldr	r1, [pc, #48]	@ (800dc34 <tcp_enqueue_flags+0x1fc>)
 800dc02:	4806      	ldr	r0, [pc, #24]	@ (800dc1c <tcp_enqueue_flags+0x1e4>)
 800dc04:	f007 ffbc 	bl	8015b80 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3720      	adds	r7, #32
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	08017fec 	.word	0x08017fec
 800dc18:	08018410 	.word	0x08018410
 800dc1c:	08018040 	.word	0x08018040
 800dc20:	08018468 	.word	0x08018468
 800dc24:	20003a9c 	.word	0x20003a9c
 800dc28:	08018488 	.word	0x08018488
 800dc2c:	080184c4 	.word	0x080184c4
 800dc30:	080184dc 	.word	0x080184dc
 800dc34:	08018508 	.word	0x08018508

0800dc38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dc38:	b5b0      	push	{r4, r5, r7, lr}
 800dc3a:	b08a      	sub	sp, #40	@ 0x28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <tcp_output+0x1c>
 800dc46:	4b8a      	ldr	r3, [pc, #552]	@ (800de70 <tcp_output+0x238>)
 800dc48:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800dc4c:	4989      	ldr	r1, [pc, #548]	@ (800de74 <tcp_output+0x23c>)
 800dc4e:	488a      	ldr	r0, [pc, #552]	@ (800de78 <tcp_output+0x240>)
 800dc50:	f007 ff96 	bl	8015b80 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d106      	bne.n	800dc6a <tcp_output+0x32>
 800dc5c:	4b84      	ldr	r3, [pc, #528]	@ (800de70 <tcp_output+0x238>)
 800dc5e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800dc62:	4986      	ldr	r1, [pc, #536]	@ (800de7c <tcp_output+0x244>)
 800dc64:	4884      	ldr	r0, [pc, #528]	@ (800de78 <tcp_output+0x240>)
 800dc66:	f007 ff8b 	bl	8015b80 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dc6a:	4b85      	ldr	r3, [pc, #532]	@ (800de80 <tcp_output+0x248>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d101      	bne.n	800dc78 <tcp_output+0x40>
    return ERR_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	e1ce      	b.n	800e016 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc84:	4293      	cmp	r3, r2
 800dc86:	bf28      	it	cs
 800dc88:	4613      	movcs	r3, r2
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800dc94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10b      	bne.n	800dcb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	8b5b      	ldrh	r3, [r3, #26]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 81aa 	beq.w	800dffc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f000 fe01 	bl	800e8b0 <tcp_send_empty_ack>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	e1b1      	b.n	800e016 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	461a      	mov	r2, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7fe ffec 	bl	800cc98 <tcp_route>
 800dcc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <tcp_output+0x96>
    return ERR_RTE;
 800dcc8:	f06f 0303 	mvn.w	r3, #3
 800dccc:	e1a3      	b.n	800e016 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d003      	beq.n	800dcdc <tcp_output+0xa4>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d111      	bne.n	800dd00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d002      	beq.n	800dce8 <tcp_output+0xb0>
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	3304      	adds	r3, #4
 800dce6:	e000      	b.n	800dcea <tcp_output+0xb2>
 800dce8:	2300      	movs	r3, #0
 800dcea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d102      	bne.n	800dcf8 <tcp_output+0xc0>
      return ERR_RTE;
 800dcf2:	f06f 0303 	mvn.w	r3, #3
 800dcf6:	e18e      	b.n	800e016 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f8 fdac 	bl	8006864 <lwip_htonl>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd16:	8912      	ldrh	r2, [r2, #8]
 800dd18:	4413      	add	r3, r2
 800dd1a:	69ba      	ldr	r2, [r7, #24]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d227      	bcs.n	800dd70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd26:	461a      	mov	r2, r3
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d114      	bne.n	800dd58 <tcp_output+0x120>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d110      	bne.n	800dd58 <tcp_output+0x120>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10b      	bne.n	800dd58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	8b5b      	ldrh	r3, [r3, #26]
 800dd5c:	f003 0302 	and.w	r3, r3, #2
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f000 814d 	beq.w	800e000 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fda2 	bl	800e8b0 <tcp_send_empty_ack>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	e152      	b.n	800e016 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dd7e:	6a3b      	ldr	r3, [r7, #32]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 811c 	beq.w	800dfbe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dd86:	e002      	b.n	800dd8e <tcp_output+0x156>
 800dd88:	6a3b      	ldr	r3, [r7, #32]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	623b      	str	r3, [r7, #32]
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1f8      	bne.n	800dd88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dd96:	e112      	b.n	800dfbe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	899b      	ldrh	r3, [r3, #12]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f8 fd49 	bl	8006838 <lwip_htons>
 800dda6:	4603      	mov	r3, r0
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	f003 0304 	and.w	r3, r3, #4
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d006      	beq.n	800ddc0 <tcp_output+0x188>
 800ddb2:	4b2f      	ldr	r3, [pc, #188]	@ (800de70 <tcp_output+0x238>)
 800ddb4:	f240 5236 	movw	r2, #1334	@ 0x536
 800ddb8:	4932      	ldr	r1, [pc, #200]	@ (800de84 <tcp_output+0x24c>)
 800ddba:	482f      	ldr	r0, [pc, #188]	@ (800de78 <tcp_output+0x240>)
 800ddbc:	f007 fee0 	bl	8015b80 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d01f      	beq.n	800de08 <tcp_output+0x1d0>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8b5b      	ldrh	r3, [r3, #26]
 800ddcc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d119      	bne.n	800de08 <tcp_output+0x1d0>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00b      	beq.n	800ddf4 <tcp_output+0x1bc>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d110      	bne.n	800de08 <tcp_output+0x1d0>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddea:	891a      	ldrh	r2, [r3, #8]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d209      	bcs.n	800de08 <tcp_output+0x1d0>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d004      	beq.n	800de08 <tcp_output+0x1d0>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800de04:	2b07      	cmp	r3, #7
 800de06:	d901      	bls.n	800de0c <tcp_output+0x1d4>
 800de08:	2301      	movs	r3, #1
 800de0a:	e000      	b.n	800de0e <tcp_output+0x1d6>
 800de0c:	2300      	movs	r3, #0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	8b5b      	ldrh	r3, [r3, #26]
 800de16:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 80e4 	beq.w	800dfe8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	2b02      	cmp	r3, #2
 800de26:	d00d      	beq.n	800de44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	899b      	ldrh	r3, [r3, #12]
 800de2e:	b29c      	uxth	r4, r3
 800de30:	2010      	movs	r0, #16
 800de32:	f7f8 fd01 	bl	8006838 <lwip_htons>
 800de36:	4603      	mov	r3, r0
 800de38:	461a      	mov	r2, r3
 800de3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	4322      	orrs	r2, r4
 800de40:	b292      	uxth	r2, r2
 800de42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de4a:	f000 f909 	bl	800e060 <tcp_output_segment>
 800de4e:	4603      	mov	r3, r0
 800de50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800de52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d016      	beq.n	800de88 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	8b5b      	ldrh	r3, [r3, #26]
 800de5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	835a      	strh	r2, [r3, #26]
      return err;
 800de68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de6c:	e0d3      	b.n	800e016 <tcp_output+0x3de>
 800de6e:	bf00      	nop
 800de70:	08017fec 	.word	0x08017fec
 800de74:	08018530 	.word	0x08018530
 800de78:	08018040 	.word	0x08018040
 800de7c:	08018548 	.word	0x08018548
 800de80:	20003bb4 	.word	0x20003bb4
 800de84:	08018570 	.word	0x08018570
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7d1b      	ldrb	r3, [r3, #20]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d006      	beq.n	800dea6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	8b5b      	ldrh	r3, [r3, #26]
 800de9c:	f023 0303 	bic.w	r3, r3, #3
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f7f8 fcd9 	bl	8006864 <lwip_htonl>
 800deb2:	4604      	mov	r4, r0
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	891b      	ldrh	r3, [r3, #8]
 800deb8:	461d      	mov	r5, r3
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	899b      	ldrh	r3, [r3, #12]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f8 fcb8 	bl	8006838 <lwip_htons>
 800dec8:	4603      	mov	r3, r0
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0303 	and.w	r3, r3, #3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d001      	beq.n	800ded8 <tcp_output+0x2a0>
 800ded4:	2301      	movs	r3, #1
 800ded6:	e000      	b.n	800deda <tcp_output+0x2a2>
 800ded8:	2300      	movs	r3, #0
 800deda:	442b      	add	r3, r5
 800dedc:	4423      	add	r3, r4
 800dede:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	da02      	bge.n	800def2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68ba      	ldr	r2, [r7, #8]
 800def0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800def2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def4:	891b      	ldrh	r3, [r3, #8]
 800def6:	461c      	mov	r4, r3
 800def8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	899b      	ldrh	r3, [r3, #12]
 800defe:	b29b      	uxth	r3, r3
 800df00:	4618      	mov	r0, r3
 800df02:	f7f8 fc99 	bl	8006838 <lwip_htons>
 800df06:	4603      	mov	r3, r0
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0303 	and.w	r3, r3, #3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <tcp_output+0x2de>
 800df12:	2301      	movs	r3, #1
 800df14:	e000      	b.n	800df18 <tcp_output+0x2e0>
 800df16:	2300      	movs	r3, #0
 800df18:	4423      	add	r3, r4
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d049      	beq.n	800dfb2 <tcp_output+0x37a>
      seg->next = NULL;
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	2200      	movs	r2, #0
 800df22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d105      	bne.n	800df38 <tcp_output+0x300>
        pcb->unacked = seg;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df30:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800df32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df34:	623b      	str	r3, [r7, #32]
 800df36:	e03f      	b.n	800dfb8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800df38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f8 fc90 	bl	8006864 <lwip_htonl>
 800df44:	4604      	mov	r4, r0
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7f8 fc89 	bl	8006864 <lwip_htonl>
 800df52:	4603      	mov	r3, r0
 800df54:	1ae3      	subs	r3, r4, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	da24      	bge.n	800dfa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3370      	adds	r3, #112	@ 0x70
 800df5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df60:	e002      	b.n	800df68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d011      	beq.n	800df94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f8 fc73 	bl	8006864 <lwip_htonl>
 800df7e:	4604      	mov	r4, r0
 800df80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	4618      	mov	r0, r3
 800df88:	f7f8 fc6c 	bl	8006864 <lwip_htonl>
 800df8c:	4603      	mov	r3, r0
 800df8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800df90:	2b00      	cmp	r3, #0
 800df92:	dbe6      	blt.n	800df62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	e009      	b.n	800dfb8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	623b      	str	r3, [r7, #32]
 800dfb0:	e002      	b.n	800dfb8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800dfb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfb4:	f7fb fe13 	bl	8009bde <tcp_seg_free>
    }
    seg = pcb->unsent;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfbc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d012      	beq.n	800dfea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7f8 fc4a 	bl	8006864 <lwip_htonl>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfda:	8912      	ldrh	r2, [r2, #8]
 800dfdc:	4413      	add	r3, r2
  while (seg != NULL &&
 800dfde:	69ba      	ldr	r2, [r7, #24]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	f4bf aed9 	bcs.w	800dd98 <tcp_output+0x160>
 800dfe6:	e000      	b.n	800dfea <tcp_output+0x3b2>
      break;
 800dfe8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d108      	bne.n	800e004 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800dffa:	e004      	b.n	800e006 <tcp_output+0x3ce>
    goto output_done;
 800dffc:	bf00      	nop
 800dffe:	e002      	b.n	800e006 <tcp_output+0x3ce>
    goto output_done;
 800e000:	bf00      	nop
 800e002:	e000      	b.n	800e006 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e004:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8b5b      	ldrh	r3, [r3, #26]
 800e00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e00e:	b29a      	uxth	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3728      	adds	r7, #40	@ 0x28
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bdb0      	pop	{r4, r5, r7, pc}
 800e01e:	bf00      	nop

0800e020 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <tcp_output_segment_busy+0x1c>
 800e02e:	4b09      	ldr	r3, [pc, #36]	@ (800e054 <tcp_output_segment_busy+0x34>)
 800e030:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e034:	4908      	ldr	r1, [pc, #32]	@ (800e058 <tcp_output_segment_busy+0x38>)
 800e036:	4809      	ldr	r0, [pc, #36]	@ (800e05c <tcp_output_segment_busy+0x3c>)
 800e038:	f007 fda2 	bl	8015b80 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	7b9b      	ldrb	r3, [r3, #14]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d001      	beq.n	800e04a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e046:	2301      	movs	r3, #1
 800e048:	e000      	b.n	800e04c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	08017fec 	.word	0x08017fec
 800e058:	08018588 	.word	0x08018588
 800e05c:	08018040 	.word	0x08018040

0800e060 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e060:	b5b0      	push	{r4, r5, r7, lr}
 800e062:	b08c      	sub	sp, #48	@ 0x30
 800e064:	af04      	add	r7, sp, #16
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <tcp_output_segment+0x20>
 800e072:	4b71      	ldr	r3, [pc, #452]	@ (800e238 <tcp_output_segment+0x1d8>)
 800e074:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e078:	4970      	ldr	r1, [pc, #448]	@ (800e23c <tcp_output_segment+0x1dc>)
 800e07a:	4871      	ldr	r0, [pc, #452]	@ (800e240 <tcp_output_segment+0x1e0>)
 800e07c:	f007 fd80 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d106      	bne.n	800e094 <tcp_output_segment+0x34>
 800e086:	4b6c      	ldr	r3, [pc, #432]	@ (800e238 <tcp_output_segment+0x1d8>)
 800e088:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e08c:	496d      	ldr	r1, [pc, #436]	@ (800e244 <tcp_output_segment+0x1e4>)
 800e08e:	486c      	ldr	r0, [pc, #432]	@ (800e240 <tcp_output_segment+0x1e0>)
 800e090:	f007 fd76 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d106      	bne.n	800e0a8 <tcp_output_segment+0x48>
 800e09a:	4b67      	ldr	r3, [pc, #412]	@ (800e238 <tcp_output_segment+0x1d8>)
 800e09c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e0a0:	4969      	ldr	r1, [pc, #420]	@ (800e248 <tcp_output_segment+0x1e8>)
 800e0a2:	4867      	ldr	r0, [pc, #412]	@ (800e240 <tcp_output_segment+0x1e0>)
 800e0a4:	f007 fd6c 	bl	8015b80 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f7ff ffb9 	bl	800e020 <tcp_output_segment_busy>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	e0bb      	b.n	800e230 <tcp_output_segment+0x1d0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68dc      	ldr	r4, [r3, #12]
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	f7f8 fbcf 	bl	8006864 <lwip_htonl>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	68dc      	ldr	r4, [r3, #12]
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f7f8 fbb0 	bl	8006838 <lwip_htons>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e0e4:	441a      	add	r2, r3
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	3314      	adds	r3, #20
 800e0f0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	7a9b      	ldrb	r3, [r3, #10]
 800e0f6:	f003 0301 	and.w	r3, r3, #1
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d015      	beq.n	800e12a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	3304      	adds	r3, #4
 800e102:	461a      	mov	r2, r3
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e10a:	f7fc f975 	bl	800a3f8 <tcp_eff_send_mss_netif>
 800e10e:	4603      	mov	r3, r0
 800e110:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e112:	8b7b      	ldrh	r3, [r7, #26]
 800e114:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f8 fba3 	bl	8006864 <lwip_htonl>
 800e11e:	4602      	mov	r2, r0
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	3304      	adds	r3, #4
 800e128:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e130:	2b00      	cmp	r3, #0
 800e132:	da02      	bge.n	800e13a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	2200      	movs	r2, #0
 800e138:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10c      	bne.n	800e15c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e142:	4b42      	ldr	r3, [pc, #264]	@ (800e24c <tcp_output_segment+0x1ec>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	f7f8 fb87 	bl	8006864 <lwip_htonl>
 800e156:	4602      	mov	r2, r0
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	68da      	ldr	r2, [r3, #12]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	8959      	ldrh	r1, [r3, #10]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	8b3a      	ldrh	r2, [r7, #24]
 800e176:	1a8a      	subs	r2, r1, r2
 800e178:	b292      	uxth	r2, r2
 800e17a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	8919      	ldrh	r1, [r3, #8]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	8b3a      	ldrh	r2, [r7, #24]
 800e188:	1a8a      	subs	r2, r1, r2
 800e18a:	b292      	uxth	r2, r2
 800e18c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	68d2      	ldr	r2, [r2, #12]
 800e196:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	741a      	strb	r2, [r3, #16]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7a9b      	ldrb	r3, [r3, #10]
 800e1ac:	f003 0301 	and.w	r3, r3, #1
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <tcp_output_segment+0x158>
 800e1b4:	2318      	movs	r3, #24
 800e1b6:	e000      	b.n	800e1ba <tcp_output_segment+0x15a>
 800e1b8:	2314      	movs	r3, #20
 800e1ba:	4413      	add	r3, r2
 800e1bc:	69fa      	ldr	r2, [r7, #28]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d006      	beq.n	800e1d0 <tcp_output_segment+0x170>
 800e1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e238 <tcp_output_segment+0x1d8>)
 800e1c4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e1c8:	4921      	ldr	r1, [pc, #132]	@ (800e250 <tcp_output_segment+0x1f0>)
 800e1ca:	481d      	ldr	r0, [pc, #116]	@ (800e240 <tcp_output_segment+0x1e0>)
 800e1cc:	f007 fcd8 	bl	8015b80 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e1d8:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e1da:	68bd      	ldr	r5, [r7, #8]
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	68d4      	ldr	r4, [r2, #12]
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	462b      	mov	r3, r5
 800e1e8:	460a      	mov	r2, r1
 800e1ea:	2106      	movs	r1, #6
 800e1ec:	f7f8 ff79 	bl	80070e2 <ip_chksum_pseudo>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800e1f4:	4b17      	ldr	r3, [pc, #92]	@ (800e254 <tcp_output_segment+0x1f4>)
 800e1f6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <tcp_output_segment+0x1f4>)
 800e200:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6858      	ldr	r0, [r3, #4]
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	1d1c      	adds	r4, r3, #4
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	7add      	ldrb	r5, [r3, #11]
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	7a9b      	ldrb	r3, [r3, #10]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	9202      	str	r2, [sp, #8]
 800e21a:	2206      	movs	r2, #6
 800e21c:	9201      	str	r2, [sp, #4]
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	462b      	mov	r3, r5
 800e222:	4622      	mov	r2, r4
 800e224:	f004 fe00 	bl	8012e28 <ip4_output_if>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e22c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bdb0      	pop	{r4, r5, r7, pc}
 800e238:	08017fec 	.word	0x08017fec
 800e23c:	080185b0 	.word	0x080185b0
 800e240:	08018040 	.word	0x08018040
 800e244:	080185d0 	.word	0x080185d0
 800e248:	080185f0 	.word	0x080185f0
 800e24c:	20003b68 	.word	0x20003b68
 800e250:	08018614 	.word	0x08018614
 800e254:	20003a9c 	.word	0x20003a9c

0800e258 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <tcp_rexmit_rto_prepare+0x1c>
 800e266:	4b31      	ldr	r3, [pc, #196]	@ (800e32c <tcp_rexmit_rto_prepare+0xd4>)
 800e268:	f240 6263 	movw	r2, #1635	@ 0x663
 800e26c:	4930      	ldr	r1, [pc, #192]	@ (800e330 <tcp_rexmit_rto_prepare+0xd8>)
 800e26e:	4831      	ldr	r0, [pc, #196]	@ (800e334 <tcp_rexmit_rto_prepare+0xdc>)
 800e270:	f007 fc86 	bl	8015b80 <iprintf>

  if (pcb->unacked == NULL) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d102      	bne.n	800e282 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e27c:	f06f 0305 	mvn.w	r3, #5
 800e280:	e050      	b.n	800e324 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e00b      	b.n	800e2a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7ff fec8 	bl	800e020 <tcp_output_segment_busy>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e296:	f06f 0305 	mvn.w	r3, #5
 800e29a:	e043      	b.n	800e324 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	60fb      	str	r3, [r7, #12]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1ef      	bne.n	800e28a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f7ff feb8 	bl	800e020 <tcp_output_segment_busy>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d002      	beq.n	800e2bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e2b6:	f06f 0305 	mvn.w	r3, #5
 800e2ba:	e033      	b.n	800e324 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	8b5b      	ldrh	r3, [r3, #26]
 800e2d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7f8 fabc 	bl	8006864 <lwip_htonl>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	891b      	ldrh	r3, [r3, #8]
 800e2f2:	461d      	mov	r5, r3
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	899b      	ldrh	r3, [r3, #12]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7f8 fa9b 	bl	8006838 <lwip_htons>
 800e302:	4603      	mov	r3, r0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	f003 0303 	and.w	r3, r3, #3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <tcp_rexmit_rto_prepare+0xba>
 800e30e:	2301      	movs	r3, #1
 800e310:	e000      	b.n	800e314 <tcp_rexmit_rto_prepare+0xbc>
 800e312:	2300      	movs	r3, #0
 800e314:	442b      	add	r3, r5
 800e316:	18e2      	adds	r2, r4, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3710      	adds	r7, #16
 800e328:	46bd      	mov	sp, r7
 800e32a:	bdb0      	pop	{r4, r5, r7, pc}
 800e32c:	08017fec 	.word	0x08017fec
 800e330:	08018628 	.word	0x08018628
 800e334:	08018040 	.word	0x08018040

0800e338 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <tcp_rexmit_rto_commit+0x1c>
 800e346:	4b0d      	ldr	r3, [pc, #52]	@ (800e37c <tcp_rexmit_rto_commit+0x44>)
 800e348:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e34c:	490c      	ldr	r1, [pc, #48]	@ (800e380 <tcp_rexmit_rto_commit+0x48>)
 800e34e:	480d      	ldr	r0, [pc, #52]	@ (800e384 <tcp_rexmit_rto_commit+0x4c>)
 800e350:	f007 fc16 	bl	8015b80 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e35a:	2bff      	cmp	r3, #255	@ 0xff
 800e35c:	d007      	beq.n	800e36e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e364:	3301      	adds	r3, #1
 800e366:	b2da      	uxtb	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff fc62 	bl	800dc38 <tcp_output>
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	08017fec 	.word	0x08017fec
 800e380:	0801864c 	.word	0x0801864c
 800e384:	08018040 	.word	0x08018040

0800e388 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d106      	bne.n	800e3a4 <tcp_rexmit_rto+0x1c>
 800e396:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c0 <tcp_rexmit_rto+0x38>)
 800e398:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e39c:	4909      	ldr	r1, [pc, #36]	@ (800e3c4 <tcp_rexmit_rto+0x3c>)
 800e39e:	480a      	ldr	r0, [pc, #40]	@ (800e3c8 <tcp_rexmit_rto+0x40>)
 800e3a0:	f007 fbee 	bl	8015b80 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff ff57 	bl	800e258 <tcp_rexmit_rto_prepare>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f7ff ffc1 	bl	800e338 <tcp_rexmit_rto_commit>
  }
}
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	08017fec 	.word	0x08017fec
 800e3c4:	08018670 	.word	0x08018670
 800e3c8:	08018040 	.word	0x08018040

0800e3cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <tcp_rexmit+0x1c>
 800e3da:	4b2f      	ldr	r3, [pc, #188]	@ (800e498 <tcp_rexmit+0xcc>)
 800e3dc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e3e0:	492e      	ldr	r1, [pc, #184]	@ (800e49c <tcp_rexmit+0xd0>)
 800e3e2:	482f      	ldr	r0, [pc, #188]	@ (800e4a0 <tcp_rexmit+0xd4>)
 800e3e4:	f007 fbcc 	bl	8015b80 <iprintf>

  if (pcb->unacked == NULL) {
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e3f0:	f06f 0305 	mvn.w	r3, #5
 800e3f4:	e04c      	b.n	800e490 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e3fc:	68b8      	ldr	r0, [r7, #8]
 800e3fe:	f7ff fe0f 	bl	800e020 <tcp_output_segment_busy>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e408:	f06f 0305 	mvn.w	r3, #5
 800e40c:	e040      	b.n	800e490 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	336c      	adds	r3, #108	@ 0x6c
 800e41a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e41c:	e002      	b.n	800e424 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d011      	beq.n	800e450 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	4618      	mov	r0, r3
 800e436:	f7f8 fa15 	bl	8006864 <lwip_htonl>
 800e43a:	4604      	mov	r4, r0
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	4618      	mov	r0, r3
 800e444:	f7f8 fa0e 	bl	8006864 <lwip_htonl>
 800e448:	4603      	mov	r3, r0
 800e44a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dbe6      	blt.n	800e41e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d103      	bne.n	800e46e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e474:	2bff      	cmp	r3, #255	@ 0xff
 800e476:	d007      	beq.n	800e488 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e47e:	3301      	adds	r3, #1
 800e480:	b2da      	uxtb	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	3714      	adds	r7, #20
 800e494:	46bd      	mov	sp, r7
 800e496:	bd90      	pop	{r4, r7, pc}
 800e498:	08017fec 	.word	0x08017fec
 800e49c:	0801868c 	.word	0x0801868c
 800e4a0:	08018040 	.word	0x08018040

0800e4a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d106      	bne.n	800e4c0 <tcp_rexmit_fast+0x1c>
 800e4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800e55c <tcp_rexmit_fast+0xb8>)
 800e4b4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e4b8:	4929      	ldr	r1, [pc, #164]	@ (800e560 <tcp_rexmit_fast+0xbc>)
 800e4ba:	482a      	ldr	r0, [pc, #168]	@ (800e564 <tcp_rexmit_fast+0xc0>)
 800e4bc:	f007 fb60 	bl	8015b80 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d044      	beq.n	800e552 <tcp_rexmit_fast+0xae>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	8b5b      	ldrh	r3, [r3, #26]
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d13e      	bne.n	800e552 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7ff ff79 	bl	800e3cc <tcp_rexmit>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d138      	bne.n	800e552 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	bf28      	it	cs
 800e4f0:	4613      	movcs	r3, r2
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	0fda      	lsrs	r2, r3, #31
 800e4f6:	4413      	add	r3, r2
 800e4f8:	105b      	asrs	r3, r3, #1
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e508:	461a      	mov	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	429a      	cmp	r2, r3
 800e512:	d206      	bcs.n	800e522 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e52c:	4619      	mov	r1, r3
 800e52e:	0049      	lsls	r1, r1, #1
 800e530:	440b      	add	r3, r1
 800e532:	b29b      	uxth	r3, r3
 800e534:	4413      	add	r3, r2
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	8b5b      	ldrh	r3, [r3, #26]
 800e542:	f043 0304 	orr.w	r3, r3, #4
 800e546:	b29a      	uxth	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e552:	bf00      	nop
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	08017fec 	.word	0x08017fec
 800e560:	080186a4 	.word	0x080186a4
 800e564:	08018040 	.word	0x08018040

0800e568 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	607b      	str	r3, [r7, #4]
 800e572:	460b      	mov	r3, r1
 800e574:	817b      	strh	r3, [r7, #10]
 800e576:	4613      	mov	r3, r2
 800e578:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e57a:	897a      	ldrh	r2, [r7, #10]
 800e57c:	893b      	ldrh	r3, [r7, #8]
 800e57e:	4413      	add	r3, r2
 800e580:	b29b      	uxth	r3, r3
 800e582:	3314      	adds	r3, #20
 800e584:	b29b      	uxth	r3, r3
 800e586:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e58a:	4619      	mov	r1, r3
 800e58c:	2022      	movs	r0, #34	@ 0x22
 800e58e:	f7f9 fa97 	bl	8007ac0 <pbuf_alloc>
 800e592:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d04d      	beq.n	800e636 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e59a:	897b      	ldrh	r3, [r7, #10]
 800e59c:	3313      	adds	r3, #19
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	8952      	ldrh	r2, [r2, #10]
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	db06      	blt.n	800e5b4 <tcp_output_alloc_header_common+0x4c>
 800e5a6:	4b26      	ldr	r3, [pc, #152]	@ (800e640 <tcp_output_alloc_header_common+0xd8>)
 800e5a8:	f240 7223 	movw	r2, #1827	@ 0x723
 800e5ac:	4925      	ldr	r1, [pc, #148]	@ (800e644 <tcp_output_alloc_header_common+0xdc>)
 800e5ae:	4826      	ldr	r0, [pc, #152]	@ (800e648 <tcp_output_alloc_header_common+0xe0>)
 800e5b0:	f007 fae6 	bl	8015b80 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e5ba:	8c3b      	ldrh	r3, [r7, #32]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f8 f93b 	bl	8006838 <lwip_htons>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e5ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f8 f933 	bl	8006838 <lwip_htons>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7f8 f93f 	bl	8006864 <lwip_htonl>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e5ec:	897b      	ldrh	r3, [r7, #10]
 800e5ee:	089b      	lsrs	r3, r3, #2
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	3305      	adds	r3, #5
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	031b      	lsls	r3, r3, #12
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	4313      	orrs	r3, r2
 800e602:	b29b      	uxth	r3, r3
 800e604:	4618      	mov	r0, r3
 800e606:	f7f8 f917 	bl	8006838 <lwip_htons>
 800e60a:	4603      	mov	r3, r0
 800e60c:	461a      	mov	r2, r3
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e612:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e614:	4618      	mov	r0, r3
 800e616:	f7f8 f90f 	bl	8006838 <lwip_htons>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	2200      	movs	r2, #0
 800e626:	741a      	strb	r2, [r3, #16]
 800e628:	2200      	movs	r2, #0
 800e62a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2200      	movs	r2, #0
 800e630:	749a      	strb	r2, [r3, #18]
 800e632:	2200      	movs	r2, #0
 800e634:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e636:	697b      	ldr	r3, [r7, #20]
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3718      	adds	r7, #24
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	08017fec 	.word	0x08017fec
 800e644:	080186c4 	.word	0x080186c4
 800e648:	08018040 	.word	0x08018040

0800e64c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e64c:	b5b0      	push	{r4, r5, r7, lr}
 800e64e:	b08a      	sub	sp, #40	@ 0x28
 800e650:	af04      	add	r7, sp, #16
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	607b      	str	r3, [r7, #4]
 800e656:	460b      	mov	r3, r1
 800e658:	817b      	strh	r3, [r7, #10]
 800e65a:	4613      	mov	r3, r2
 800e65c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d106      	bne.n	800e672 <tcp_output_alloc_header+0x26>
 800e664:	4b15      	ldr	r3, [pc, #84]	@ (800e6bc <tcp_output_alloc_header+0x70>)
 800e666:	f240 7242 	movw	r2, #1858	@ 0x742
 800e66a:	4915      	ldr	r1, [pc, #84]	@ (800e6c0 <tcp_output_alloc_header+0x74>)
 800e66c:	4815      	ldr	r0, [pc, #84]	@ (800e6c4 <tcp_output_alloc_header+0x78>)
 800e66e:	f007 fa87 	bl	8015b80 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	8adb      	ldrh	r3, [r3, #22]
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	8b12      	ldrh	r2, [r2, #24]
 800e67e:	68f9      	ldr	r1, [r7, #12]
 800e680:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e682:	893d      	ldrh	r5, [r7, #8]
 800e684:	897c      	ldrh	r4, [r7, #10]
 800e686:	9103      	str	r1, [sp, #12]
 800e688:	2110      	movs	r1, #16
 800e68a:	9102      	str	r1, [sp, #8]
 800e68c:	9201      	str	r2, [sp, #4]
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	462a      	mov	r2, r5
 800e694:	4621      	mov	r1, r4
 800e696:	f7ff ff67 	bl	800e568 <tcp_output_alloc_header_common>
 800e69a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d006      	beq.n	800e6b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e6aa:	441a      	add	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e6b0:	697b      	ldr	r3, [r7, #20]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bdb0      	pop	{r4, r5, r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	08017fec 	.word	0x08017fec
 800e6c0:	080186f4 	.word	0x080186f4
 800e6c4:	08018040 	.word	0x08018040

0800e6c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	71fb      	strb	r3, [r7, #7]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d106      	bne.n	800e6f6 <tcp_output_fill_options+0x2e>
 800e6e8:	4b12      	ldr	r3, [pc, #72]	@ (800e734 <tcp_output_fill_options+0x6c>)
 800e6ea:	f240 7256 	movw	r2, #1878	@ 0x756
 800e6ee:	4912      	ldr	r1, [pc, #72]	@ (800e738 <tcp_output_fill_options+0x70>)
 800e6f0:	4812      	ldr	r0, [pc, #72]	@ (800e73c <tcp_output_fill_options+0x74>)
 800e6f2:	f007 fa45 	bl	8015b80 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	3314      	adds	r3, #20
 800e700:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e702:	8bfb      	ldrh	r3, [r7, #30]
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	461a      	mov	r2, r3
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	4413      	add	r3, r2
 800e712:	3314      	adds	r3, #20
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	4413      	add	r3, r2
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d006      	beq.n	800e72c <tcp_output_fill_options+0x64>
 800e71e:	4b05      	ldr	r3, [pc, #20]	@ (800e734 <tcp_output_fill_options+0x6c>)
 800e720:	f240 7275 	movw	r2, #1909	@ 0x775
 800e724:	4906      	ldr	r1, [pc, #24]	@ (800e740 <tcp_output_fill_options+0x78>)
 800e726:	4805      	ldr	r0, [pc, #20]	@ (800e73c <tcp_output_fill_options+0x74>)
 800e728:	f007 fa2a 	bl	8015b80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e72c:	bf00      	nop
 800e72e:	3720      	adds	r7, #32
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	08017fec 	.word	0x08017fec
 800e738:	0801871c 	.word	0x0801871c
 800e73c:	08018040 	.word	0x08018040
 800e740:	08018614 	.word	0x08018614

0800e744 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b08c      	sub	sp, #48	@ 0x30
 800e748:	af04      	add	r7, sp, #16
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d106      	bne.n	800e766 <tcp_output_control_segment+0x22>
 800e758:	4b28      	ldr	r3, [pc, #160]	@ (800e7fc <tcp_output_control_segment+0xb8>)
 800e75a:	f240 7287 	movw	r2, #1927	@ 0x787
 800e75e:	4928      	ldr	r1, [pc, #160]	@ (800e800 <tcp_output_control_segment+0xbc>)
 800e760:	4828      	ldr	r0, [pc, #160]	@ (800e804 <tcp_output_control_segment+0xc0>)
 800e762:	f007 fa0d 	bl	8015b80 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7fe fa94 	bl	800cc98 <tcp_route>
 800e770:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e778:	23fc      	movs	r3, #252	@ 0xfc
 800e77a:	77fb      	strb	r3, [r7, #31]
 800e77c:	e034      	b.n	800e7e8 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	891a      	ldrh	r2, [r3, #8]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2106      	movs	r1, #6
 800e790:	68b8      	ldr	r0, [r7, #8]
 800e792:	f7f8 fca6 	bl	80070e2 <ip_chksum_pseudo>
 800e796:	4603      	mov	r3, r0
 800e798:	461a      	mov	r2, r3
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d006      	beq.n	800e7b2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	7adb      	ldrb	r3, [r3, #11]
 800e7a8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	7a9b      	ldrb	r3, [r3, #10]
 800e7ae:	777b      	strb	r3, [r7, #29]
 800e7b0:	e003      	b.n	800e7ba <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e7b2:	23ff      	movs	r3, #255	@ 0xff
 800e7b4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800e7ba:	4b13      	ldr	r3, [pc, #76]	@ (800e808 <tcp_output_control_segment+0xc4>)
 800e7bc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	4b10      	ldr	r3, [pc, #64]	@ (800e808 <tcp_output_control_segment+0xc4>)
 800e7c6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e7ca:	7fba      	ldrb	r2, [r7, #30]
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	9302      	str	r3, [sp, #8]
 800e7d0:	2306      	movs	r3, #6
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	7f7b      	ldrb	r3, [r7, #29]
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	6879      	ldr	r1, [r7, #4]
 800e7de:	68b8      	ldr	r0, [r7, #8]
 800e7e0:	f004 fb22 	bl	8012e28 <ip4_output_if>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e7e8:	68b8      	ldr	r0, [r7, #8]
 800e7ea:	f7f9 fc4b 	bl	8008084 <pbuf_free>
  return err;
 800e7ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3720      	adds	r7, #32
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08017fec 	.word	0x08017fec
 800e800:	08018744 	.word	0x08018744
 800e804:	08018040 	.word	0x08018040
 800e808:	20003a9c 	.word	0x20003a9c

0800e80c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b08b      	sub	sp, #44	@ 0x2c
 800e810:	af04      	add	r7, sp, #16
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d106      	bne.n	800e82e <tcp_rst+0x22>
 800e820:	4b1f      	ldr	r3, [pc, #124]	@ (800e8a0 <tcp_rst+0x94>)
 800e822:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e826:	491f      	ldr	r1, [pc, #124]	@ (800e8a4 <tcp_rst+0x98>)
 800e828:	481f      	ldr	r0, [pc, #124]	@ (800e8a8 <tcp_rst+0x9c>)
 800e82a:	f007 f9a9 	bl	8015b80 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e830:	2b00      	cmp	r3, #0
 800e832:	d106      	bne.n	800e842 <tcp_rst+0x36>
 800e834:	4b1a      	ldr	r3, [pc, #104]	@ (800e8a0 <tcp_rst+0x94>)
 800e836:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e83a:	491c      	ldr	r1, [pc, #112]	@ (800e8ac <tcp_rst+0xa0>)
 800e83c:	481a      	ldr	r0, [pc, #104]	@ (800e8a8 <tcp_rst+0x9c>)
 800e83e:	f007 f99f 	bl	8015b80 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e842:	2300      	movs	r3, #0
 800e844:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e846:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e84a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	b29c      	uxth	r4, r3
 800e850:	68b8      	ldr	r0, [r7, #8]
 800e852:	f7f8 f807 	bl	8006864 <lwip_htonl>
 800e856:	4602      	mov	r2, r0
 800e858:	8abb      	ldrh	r3, [r7, #20]
 800e85a:	9303      	str	r3, [sp, #12]
 800e85c:	2314      	movs	r3, #20
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	4613      	mov	r3, r2
 800e86a:	2200      	movs	r2, #0
 800e86c:	4621      	mov	r1, r4
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fe7a 	bl	800e568 <tcp_output_alloc_header_common>
 800e874:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00c      	beq.n	800e896 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	2200      	movs	r2, #0
 800e880:	6939      	ldr	r1, [r7, #16]
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f7ff ff20 	bl	800e6c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	6939      	ldr	r1, [r7, #16]
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7ff ff58 	bl	800e744 <tcp_output_control_segment>
 800e894:	e000      	b.n	800e898 <tcp_rst+0x8c>
    return;
 800e896:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e898:	371c      	adds	r7, #28
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd90      	pop	{r4, r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	08017fec 	.word	0x08017fec
 800e8a4:	08018770 	.word	0x08018770
 800e8a8:	08018040 	.word	0x08018040
 800e8ac:	0801878c 	.word	0x0801878c

0800e8b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e8b0:	b590      	push	{r4, r7, lr}
 800e8b2:	b087      	sub	sp, #28
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <tcp_send_empty_ack+0x24>
 800e8c6:	4b28      	ldr	r3, [pc, #160]	@ (800e968 <tcp_send_empty_ack+0xb8>)
 800e8c8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e8cc:	4927      	ldr	r1, [pc, #156]	@ (800e96c <tcp_send_empty_ack+0xbc>)
 800e8ce:	4828      	ldr	r0, [pc, #160]	@ (800e970 <tcp_send_empty_ack+0xc0>)
 800e8d0:	f007 f956 	bl	8015b80 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e8d4:	7dfb      	ldrb	r3, [r7, #23]
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	f003 0304 	and.w	r3, r3, #4
 800e8de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e8e0:	7d7b      	ldrb	r3, [r7, #21]
 800e8e2:	b29c      	uxth	r4, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f7 ffbb 	bl	8006864 <lwip_htonl>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff fea9 	bl	800e64c <tcp_output_alloc_header>
 800e8fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d109      	bne.n	800e916 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	8b5b      	ldrh	r3, [r3, #26]
 800e906:	f043 0303 	orr.w	r3, r3, #3
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e910:	f06f 0301 	mvn.w	r3, #1
 800e914:	e023      	b.n	800e95e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e916:	7dbb      	ldrb	r3, [r7, #22]
 800e918:	7dfa      	ldrb	r2, [r7, #23]
 800e91a:	6939      	ldr	r1, [r7, #16]
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f7ff fed3 	bl	800e6c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3304      	adds	r3, #4
 800e928:	6939      	ldr	r1, [r7, #16]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff ff0a 	bl	800e744 <tcp_output_control_segment>
 800e930:	4603      	mov	r3, r0
 800e932:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	8b5b      	ldrh	r3, [r3, #26]
 800e940:	f043 0303 	orr.w	r3, r3, #3
 800e944:	b29a      	uxth	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	835a      	strh	r2, [r3, #26]
 800e94a:	e006      	b.n	800e95a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	8b5b      	ldrh	r3, [r3, #26]
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	b29a      	uxth	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	371c      	adds	r7, #28
 800e962:	46bd      	mov	sp, r7
 800e964:	bd90      	pop	{r4, r7, pc}
 800e966:	bf00      	nop
 800e968:	08017fec 	.word	0x08017fec
 800e96c:	080187a8 	.word	0x080187a8
 800e970:	08018040 	.word	0x08018040

0800e974 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e97c:	2300      	movs	r3, #0
 800e97e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <tcp_keepalive+0x20>
 800e986:	4b18      	ldr	r3, [pc, #96]	@ (800e9e8 <tcp_keepalive+0x74>)
 800e988:	f640 0224 	movw	r2, #2084	@ 0x824
 800e98c:	4917      	ldr	r1, [pc, #92]	@ (800e9ec <tcp_keepalive+0x78>)
 800e98e:	4818      	ldr	r0, [pc, #96]	@ (800e9f0 <tcp_keepalive+0x7c>)
 800e990:	f007 f8f6 	bl	8015b80 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	b29c      	uxth	r4, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e99c:	3b01      	subs	r3, #1
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f7 ff60 	bl	8006864 <lwip_htonl>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff fe4e 	bl	800e64c <tcp_output_alloc_header>
 800e9b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e9b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e9bc:	e010      	b.n	800e9e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	6939      	ldr	r1, [r7, #16]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff fe7f 	bl	800e6c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	6939      	ldr	r1, [r7, #16]
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7ff feb6 	bl	800e744 <tcp_output_control_segment>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	371c      	adds	r7, #28
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd90      	pop	{r4, r7, pc}
 800e9e8:	08017fec 	.word	0x08017fec
 800e9ec:	080187c8 	.word	0x080187c8
 800e9f0:	08018040 	.word	0x08018040

0800e9f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b08b      	sub	sp, #44	@ 0x2c
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d106      	bne.n	800ea16 <tcp_zero_window_probe+0x22>
 800ea08:	4b4c      	ldr	r3, [pc, #304]	@ (800eb3c <tcp_zero_window_probe+0x148>)
 800ea0a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ea0e:	494c      	ldr	r1, [pc, #304]	@ (800eb40 <tcp_zero_window_probe+0x14c>)
 800ea10:	484c      	ldr	r0, [pc, #304]	@ (800eb44 <tcp_zero_window_probe+0x150>)
 800ea12:	f007 f8b5 	bl	8015b80 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea1a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e086      	b.n	800eb34 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ea2c:	2bff      	cmp	r3, #255	@ 0xff
 800ea2e:	d007      	beq.n	800ea40 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ea36:	3301      	adds	r3, #1
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ea40:	6a3b      	ldr	r3, [r7, #32]
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	899b      	ldrh	r3, [r3, #12]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f7 fef5 	bl	8006838 <lwip_htons>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	f003 0301 	and.w	r3, r3, #1
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d005      	beq.n	800ea66 <tcp_zero_window_probe+0x72>
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	891b      	ldrh	r3, [r3, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <tcp_zero_window_probe+0x72>
 800ea62:	2301      	movs	r3, #1
 800ea64:	e000      	b.n	800ea68 <tcp_zero_window_probe+0x74>
 800ea66:	2300      	movs	r3, #0
 800ea68:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ea6a:	7ffb      	ldrb	r3, [r7, #31]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	bf0c      	ite	eq
 800ea70:	2301      	moveq	r3, #1
 800ea72:	2300      	movne	r3, #0
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ea78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea7c:	b299      	uxth	r1, r3
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	8bba      	ldrh	r2, [r7, #28]
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff fde0 	bl	800e64c <tcp_output_alloc_header>
 800ea8c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d102      	bne.n	800ea9a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea98:	e04c      	b.n	800eb34 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800eaa0:	7ffb      	ldrb	r3, [r7, #31]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d011      	beq.n	800eaca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	899b      	ldrh	r3, [r3, #12]
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	b21b      	sxth	r3, r3
 800eaae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800eab2:	b21c      	sxth	r4, r3
 800eab4:	2011      	movs	r0, #17
 800eab6:	f7f7 febf 	bl	8006838 <lwip_htons>
 800eaba:	4603      	mov	r3, r0
 800eabc:	b21b      	sxth	r3, r3
 800eabe:	4323      	orrs	r3, r4
 800eac0:	b21b      	sxth	r3, r3
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	819a      	strh	r2, [r3, #12]
 800eac8:	e010      	b.n	800eaec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	3314      	adds	r3, #20
 800ead0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ead2:	6a3b      	ldr	r3, [r7, #32]
 800ead4:	6858      	ldr	r0, [r3, #4]
 800ead6:	6a3b      	ldr	r3, [r7, #32]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	891a      	ldrh	r2, [r3, #8]
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	891b      	ldrh	r3, [r3, #8]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	2201      	movs	r2, #1
 800eae6:	6939      	ldr	r1, [r7, #16]
 800eae8:	f7f9 fcd2 	bl	8008490 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eaec:	6a3b      	ldr	r3, [r7, #32]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f7 feb6 	bl	8006864 <lwip_htonl>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	3301      	adds	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	da02      	bge.n	800eb10 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb14:	2200      	movs	r2, #0
 800eb16:	69b9      	ldr	r1, [r7, #24]
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7ff fdd5 	bl	800e6c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	3304      	adds	r3, #4
 800eb24:	69b9      	ldr	r1, [r7, #24]
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7ff fe0c 	bl	800e744 <tcp_output_control_segment>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb30:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	372c      	adds	r7, #44	@ 0x2c
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd90      	pop	{r4, r7, pc}
 800eb3c:	08017fec 	.word	0x08017fec
 800eb40:	080187e4 	.word	0x080187e4
 800eb44:	08018040 	.word	0x08018040

0800eb48 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eb50:	f7f9 feee 	bl	8008930 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eb54:	4b0a      	ldr	r3, [pc, #40]	@ (800eb80 <tcpip_tcp_timer+0x38>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d103      	bne.n	800eb64 <tcpip_tcp_timer+0x1c>
 800eb5c:	4b09      	ldr	r3, [pc, #36]	@ (800eb84 <tcpip_tcp_timer+0x3c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d005      	beq.n	800eb70 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb64:	2200      	movs	r2, #0
 800eb66:	4908      	ldr	r1, [pc, #32]	@ (800eb88 <tcpip_tcp_timer+0x40>)
 800eb68:	20fa      	movs	r0, #250	@ 0xfa
 800eb6a:	f000 f8f3 	bl	800ed54 <sys_timeout>
 800eb6e:	e003      	b.n	800eb78 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eb70:	4b06      	ldr	r3, [pc, #24]	@ (800eb8c <tcpip_tcp_timer+0x44>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	601a      	str	r2, [r3, #0]
  }
}
 800eb76:	bf00      	nop
 800eb78:	bf00      	nop
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20003b74 	.word	0x20003b74
 800eb84:	20003b78 	.word	0x20003b78
 800eb88:	0800eb49 	.word	0x0800eb49
 800eb8c:	20003bc0 	.word	0x20003bc0

0800eb90 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb94:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc0 <tcp_timer_needed+0x30>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10f      	bne.n	800ebbc <tcp_timer_needed+0x2c>
 800eb9c:	4b09      	ldr	r3, [pc, #36]	@ (800ebc4 <tcp_timer_needed+0x34>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d103      	bne.n	800ebac <tcp_timer_needed+0x1c>
 800eba4:	4b08      	ldr	r3, [pc, #32]	@ (800ebc8 <tcp_timer_needed+0x38>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d007      	beq.n	800ebbc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ebac:	4b04      	ldr	r3, [pc, #16]	@ (800ebc0 <tcp_timer_needed+0x30>)
 800ebae:	2201      	movs	r2, #1
 800ebb0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	4905      	ldr	r1, [pc, #20]	@ (800ebcc <tcp_timer_needed+0x3c>)
 800ebb6:	20fa      	movs	r0, #250	@ 0xfa
 800ebb8:	f000 f8cc 	bl	800ed54 <sys_timeout>
  }
}
 800ebbc:	bf00      	nop
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	20003bc0 	.word	0x20003bc0
 800ebc4:	20003b74 	.word	0x20003b74
 800ebc8:	20003b78 	.word	0x20003b78
 800ebcc:	0800eb49 	.word	0x0800eb49

0800ebd0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ebdc:	2006      	movs	r0, #6
 800ebde:	f7f8 fc1d 	bl	800741c <memp_malloc>
 800ebe2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d109      	bne.n	800ebfe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d151      	bne.n	800ec94 <sys_timeout_abs+0xc4>
 800ebf0:	4b2a      	ldr	r3, [pc, #168]	@ (800ec9c <sys_timeout_abs+0xcc>)
 800ebf2:	22be      	movs	r2, #190	@ 0xbe
 800ebf4:	492a      	ldr	r1, [pc, #168]	@ (800eca0 <sys_timeout_abs+0xd0>)
 800ebf6:	482b      	ldr	r0, [pc, #172]	@ (800eca4 <sys_timeout_abs+0xd4>)
 800ebf8:	f006 ffc2 	bl	8015b80 <iprintf>
    return;
 800ebfc:	e04a      	b.n	800ec94 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	2200      	movs	r2, #0
 800ec02:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	68ba      	ldr	r2, [r7, #8]
 800ec08:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ec16:	4b24      	ldr	r3, [pc, #144]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d103      	bne.n	800ec26 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ec1e:	4a22      	ldr	r2, [pc, #136]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6013      	str	r3, [r2, #0]
    return;
 800ec24:	e037      	b.n	800ec96 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	685a      	ldr	r2, [r3, #4]
 800ec2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	0fdb      	lsrs	r3, r3, #31
 800ec34:	f003 0301 	and.w	r3, r3, #1
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ec3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ec46:	4a18      	ldr	r2, [pc, #96]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	6013      	str	r3, [r2, #0]
 800ec4c:	e023      	b.n	800ec96 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec4e:	4b16      	ldr	r3, [pc, #88]	@ (800eca8 <sys_timeout_abs+0xd8>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	617b      	str	r3, [r7, #20]
 800ec54:	e01a      	b.n	800ec8c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00b      	beq.n	800ec76 <sys_timeout_abs+0xa6>
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	685a      	ldr	r2, [r3, #4]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	0fdb      	lsrs	r3, r3, #31
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	693a      	ldr	r2, [r7, #16]
 800ec82:	601a      	str	r2, [r3, #0]
        break;
 800ec84:	e007      	b.n	800ec96 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e1      	bne.n	800ec56 <sys_timeout_abs+0x86>
 800ec92:	e000      	b.n	800ec96 <sys_timeout_abs+0xc6>
    return;
 800ec94:	bf00      	nop
      }
    }
  }
}
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	08018808 	.word	0x08018808
 800eca0:	0801883c 	.word	0x0801883c
 800eca4:	0801887c 	.word	0x0801887c
 800eca8:	20003bb8 	.word	0x20003bb8

0800ecac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b086      	sub	sp, #24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	4798      	blx	r3

  now = sys_now();
 800ecbe:	f005 f9cd 	bl	801405c <sys_now>
 800ecc2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	4b0f      	ldr	r3, [pc, #60]	@ (800ed08 <lwip_cyclic_timer+0x5c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4413      	add	r3, r2
 800ecce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	0fdb      	lsrs	r3, r3, #31
 800ecd8:	f003 0301 	and.w	r3, r3, #1
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d009      	beq.n	800ecf6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	4413      	add	r3, r2
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	4907      	ldr	r1, [pc, #28]	@ (800ed0c <lwip_cyclic_timer+0x60>)
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7ff ff6e 	bl	800ebd0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ecf4:	e004      	b.n	800ed00 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	4904      	ldr	r1, [pc, #16]	@ (800ed0c <lwip_cyclic_timer+0x60>)
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7ff ff68 	bl	800ebd0 <sys_timeout_abs>
}
 800ed00:	bf00      	nop
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	20003bbc 	.word	0x20003bbc
 800ed0c:	0800ecad 	.word	0x0800ecad

0800ed10 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed16:	2301      	movs	r3, #1
 800ed18:	607b      	str	r3, [r7, #4]
 800ed1a:	e00e      	b.n	800ed3a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ed1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ed4c <sys_timeouts_init+0x3c>)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4a08      	ldr	r2, [pc, #32]	@ (800ed4c <sys_timeouts_init+0x3c>)
 800ed2a:	4413      	add	r3, r2
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4908      	ldr	r1, [pc, #32]	@ (800ed50 <sys_timeouts_init+0x40>)
 800ed30:	f000 f810 	bl	800ed54 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3301      	adds	r3, #1
 800ed38:	607b      	str	r3, [r7, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b05      	cmp	r3, #5
 800ed3e:	d9ed      	bls.n	800ed1c <sys_timeouts_init+0xc>
  }
}
 800ed40:	bf00      	nop
 800ed42:	bf00      	nop
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	08019964 	.word	0x08019964
 800ed50:	0800ecad 	.word	0x0800ecad

0800ed54 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed66:	d306      	bcc.n	800ed76 <sys_timeout+0x22>
 800ed68:	4b0a      	ldr	r3, [pc, #40]	@ (800ed94 <sys_timeout+0x40>)
 800ed6a:	f240 1229 	movw	r2, #297	@ 0x129
 800ed6e:	490a      	ldr	r1, [pc, #40]	@ (800ed98 <sys_timeout+0x44>)
 800ed70:	480a      	ldr	r0, [pc, #40]	@ (800ed9c <sys_timeout+0x48>)
 800ed72:	f006 ff05 	bl	8015b80 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ed76:	f005 f971 	bl	801405c <sys_now>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	68b9      	ldr	r1, [r7, #8]
 800ed86:	6978      	ldr	r0, [r7, #20]
 800ed88:	f7ff ff22 	bl	800ebd0 <sys_timeout_abs>
#endif
}
 800ed8c:	bf00      	nop
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	08018808 	.word	0x08018808
 800ed98:	080188a4 	.word	0x080188a4
 800ed9c:	0801887c 	.word	0x0801887c

0800eda0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eda6:	f005 f959 	bl	801405c <sys_now>
 800edaa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800edac:	4b1a      	ldr	r3, [pc, #104]	@ (800ee18 <sys_check_timeouts+0x78>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <sys_check_timeouts+0x1a>
 800edb6:	f7f8 fe21 	bl	80079fc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800edba:	4b18      	ldr	r3, [pc, #96]	@ (800ee1c <sys_check_timeouts+0x7c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d022      	beq.n	800ee0c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	0fdb      	lsrs	r3, r3, #31
 800edd0:	f003 0301 	and.w	r3, r3, #1
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d11a      	bne.n	800ee10 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a0f      	ldr	r2, [pc, #60]	@ (800ee1c <sys_check_timeouts+0x7c>)
 800ede0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	689b      	ldr	r3, [r3, #8]
 800ede6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	4a0b      	ldr	r2, [pc, #44]	@ (800ee20 <sys_check_timeouts+0x80>)
 800edf4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	2006      	movs	r0, #6
 800edfa:	f7f8 fb67 	bl	80074cc <memp_free>
    if (handler != NULL) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d0d3      	beq.n	800edac <sys_check_timeouts+0xc>
      handler(arg);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6838      	ldr	r0, [r7, #0]
 800ee08:	4798      	blx	r3
  do {
 800ee0a:	e7cf      	b.n	800edac <sys_check_timeouts+0xc>
      return;
 800ee0c:	bf00      	nop
 800ee0e:	e000      	b.n	800ee12 <sys_check_timeouts+0x72>
      return;
 800ee10:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	20003a99 	.word	0x20003a99
 800ee1c:	20003bb8 	.word	0x20003bb8
 800ee20:	20003bbc 	.word	0x20003bbc

0800ee24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ee28:	f006 fdaa 	bl	8015980 <rand>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	4b01      	ldr	r3, [pc, #4]	@ (800ee44 <udp_init+0x20>)
 800ee3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ee40:	bf00      	nop
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20000010 	.word	0x20000010

0800ee48 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ee52:	4b17      	ldr	r3, [pc, #92]	@ (800eeb0 <udp_new_port+0x68>)
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	b291      	uxth	r1, r2
 800ee5a:	4a15      	ldr	r2, [pc, #84]	@ (800eeb0 <udp_new_port+0x68>)
 800ee5c:	8011      	strh	r1, [r2, #0]
 800ee5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d103      	bne.n	800ee6e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ee66:	4b12      	ldr	r3, [pc, #72]	@ (800eeb0 <udp_new_port+0x68>)
 800ee68:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ee6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee6e:	4b11      	ldr	r3, [pc, #68]	@ (800eeb4 <udp_new_port+0x6c>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	603b      	str	r3, [r7, #0]
 800ee74:	e011      	b.n	800ee9a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	8a5a      	ldrh	r2, [r3, #18]
 800ee7a:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <udp_new_port+0x68>)
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d108      	bne.n	800ee94 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ee82:	88fb      	ldrh	r3, [r7, #6]
 800ee84:	3301      	adds	r3, #1
 800ee86:	80fb      	strh	r3, [r7, #6]
 800ee88:	88fb      	ldrh	r3, [r7, #6]
 800ee8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee8e:	d3e0      	bcc.n	800ee52 <udp_new_port+0xa>
        return 0;
 800ee90:	2300      	movs	r3, #0
 800ee92:	e007      	b.n	800eea4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	603b      	str	r3, [r7, #0]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1ea      	bne.n	800ee76 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800eea0:	4b03      	ldr	r3, [pc, #12]	@ (800eeb0 <udp_new_port+0x68>)
 800eea2:	881b      	ldrh	r3, [r3, #0]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	20000010 	.word	0x20000010
 800eeb4:	20003bc4 	.word	0x20003bc4

0800eeb8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d105      	bne.n	800eed8 <udp_input_local_match+0x20>
 800eecc:	4b27      	ldr	r3, [pc, #156]	@ (800ef6c <udp_input_local_match+0xb4>)
 800eece:	2287      	movs	r2, #135	@ 0x87
 800eed0:	4927      	ldr	r1, [pc, #156]	@ (800ef70 <udp_input_local_match+0xb8>)
 800eed2:	4828      	ldr	r0, [pc, #160]	@ (800ef74 <udp_input_local_match+0xbc>)
 800eed4:	f006 fe54 	bl	8015b80 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d105      	bne.n	800eeea <udp_input_local_match+0x32>
 800eede:	4b23      	ldr	r3, [pc, #140]	@ (800ef6c <udp_input_local_match+0xb4>)
 800eee0:	2288      	movs	r2, #136	@ 0x88
 800eee2:	4925      	ldr	r1, [pc, #148]	@ (800ef78 <udp_input_local_match+0xc0>)
 800eee4:	4823      	ldr	r0, [pc, #140]	@ (800ef74 <udp_input_local_match+0xbc>)
 800eee6:	f006 fe4b 	bl	8015b80 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	7a1b      	ldrb	r3, [r3, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00b      	beq.n	800ef0a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	7a1a      	ldrb	r2, [r3, #8]
 800eef6:	4b21      	ldr	r3, [pc, #132]	@ (800ef7c <udp_input_local_match+0xc4>)
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eefe:	3301      	adds	r3, #1
 800ef00:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d001      	beq.n	800ef0a <udp_input_local_match+0x52>
    return 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e02b      	b.n	800ef62 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ef0a:	79fb      	ldrb	r3, [r7, #7]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d018      	beq.n	800ef42 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d013      	beq.n	800ef3e <udp_input_local_match+0x86>
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00f      	beq.n	800ef3e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef1e:	4b17      	ldr	r3, [pc, #92]	@ (800ef7c <udp_input_local_match+0xc4>)
 800ef20:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef26:	d00a      	beq.n	800ef3e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	4b13      	ldr	r3, [pc, #76]	@ (800ef7c <udp_input_local_match+0xc4>)
 800ef2e:	695b      	ldr	r3, [r3, #20]
 800ef30:	405a      	eors	r2, r3
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	3308      	adds	r3, #8
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d110      	bne.n	800ef60 <udp_input_local_match+0xa8>
          return 1;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e00f      	b.n	800ef62 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d009      	beq.n	800ef5c <udp_input_local_match+0xa4>
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d005      	beq.n	800ef5c <udp_input_local_match+0xa4>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	4b09      	ldr	r3, [pc, #36]	@ (800ef7c <udp_input_local_match+0xc4>)
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d101      	bne.n	800ef60 <udp_input_local_match+0xa8>
        return 1;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e000      	b.n	800ef62 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	080188f0 	.word	0x080188f0
 800ef70:	08018920 	.word	0x08018920
 800ef74:	08018944 	.word	0x08018944
 800ef78:	0801896c 	.word	0x0801896c
 800ef7c:	20000aa8 	.word	0x20000aa8

0800ef80 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ef80:	b590      	push	{r4, r7, lr}
 800ef82:	b08d      	sub	sp, #52	@ 0x34
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d105      	bne.n	800efa0 <udp_input+0x20>
 800ef94:	4b88      	ldr	r3, [pc, #544]	@ (800f1b8 <udp_input+0x238>)
 800ef96:	22cf      	movs	r2, #207	@ 0xcf
 800ef98:	4988      	ldr	r1, [pc, #544]	@ (800f1bc <udp_input+0x23c>)
 800ef9a:	4889      	ldr	r0, [pc, #548]	@ (800f1c0 <udp_input+0x240>)
 800ef9c:	f006 fdf0 	bl	8015b80 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d105      	bne.n	800efb2 <udp_input+0x32>
 800efa6:	4b84      	ldr	r3, [pc, #528]	@ (800f1b8 <udp_input+0x238>)
 800efa8:	22d0      	movs	r2, #208	@ 0xd0
 800efaa:	4986      	ldr	r1, [pc, #536]	@ (800f1c4 <udp_input+0x244>)
 800efac:	4884      	ldr	r0, [pc, #528]	@ (800f1c0 <udp_input+0x240>)
 800efae:	f006 fde7 	bl	8015b80 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800efb2:	4b85      	ldr	r3, [pc, #532]	@ (800f1c8 <udp_input+0x248>)
 800efb4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800efb8:	3301      	adds	r3, #1
 800efba:	b29a      	uxth	r2, r3
 800efbc:	4b82      	ldr	r3, [pc, #520]	@ (800f1c8 <udp_input+0x248>)
 800efbe:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	895b      	ldrh	r3, [r3, #10]
 800efc6:	2b07      	cmp	r3, #7
 800efc8:	d813      	bhi.n	800eff2 <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800efca:	4b7f      	ldr	r3, [pc, #508]	@ (800f1c8 <udp_input+0x248>)
 800efcc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800efd0:	3301      	adds	r3, #1
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	4b7c      	ldr	r3, [pc, #496]	@ (800f1c8 <udp_input+0x248>)
 800efd6:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 800efda:	4b7b      	ldr	r3, [pc, #492]	@ (800f1c8 <udp_input+0x248>)
 800efdc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800efe0:	3301      	adds	r3, #1
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	4b78      	ldr	r3, [pc, #480]	@ (800f1c8 <udp_input+0x248>)
 800efe6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7f9 f84a 	bl	8008084 <pbuf_free>
    goto end;
 800eff0:	e124      	b.n	800f23c <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eff8:	4b74      	ldr	r3, [pc, #464]	@ (800f1cc <udp_input+0x24c>)
 800effa:	695b      	ldr	r3, [r3, #20]
 800effc:	4a73      	ldr	r2, [pc, #460]	@ (800f1cc <udp_input+0x24c>)
 800effe:	6812      	ldr	r2, [r2, #0]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f004 f86a 	bl	80130dc <ip4_addr_isbroadcast_u32>
 800f008:	4603      	mov	r3, r0
 800f00a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	b29b      	uxth	r3, r3
 800f012:	4618      	mov	r0, r3
 800f014:	f7f7 fc10 	bl	8006838 <lwip_htons>
 800f018:	4603      	mov	r3, r0
 800f01a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	885b      	ldrh	r3, [r3, #2]
 800f020:	b29b      	uxth	r3, r3
 800f022:	4618      	mov	r0, r3
 800f024:	f7f7 fc08 	bl	8006838 <lwip_htons>
 800f028:	4603      	mov	r3, r0
 800f02a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f034:	2300      	movs	r3, #0
 800f036:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f038:	4b65      	ldr	r3, [pc, #404]	@ (800f1d0 <udp_input+0x250>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f03e:	e05d      	b.n	800f0fc <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f042:	8a5b      	ldrh	r3, [r3, #18]
 800f044:	89fa      	ldrh	r2, [r7, #14]
 800f046:	429a      	cmp	r2, r3
 800f048:	d153      	bne.n	800f0f2 <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f04a:	7cfb      	ldrb	r3, [r7, #19]
 800f04c:	461a      	mov	r2, r3
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f052:	f7ff ff31 	bl	800eeb8 <udp_input_local_match>
 800f056:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d04a      	beq.n	800f0f2 <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05e:	7c1b      	ldrb	r3, [r3, #16]
 800f060:	f003 0304 	and.w	r3, r3, #4
 800f064:	2b00      	cmp	r3, #0
 800f066:	d11d      	bne.n	800f0a4 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d102      	bne.n	800f074 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	61fb      	str	r3, [r7, #28]
 800f072:	e017      	b.n	800f0a4 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f074:	7cfb      	ldrb	r3, [r7, #19]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d014      	beq.n	800f0a4 <udp_input+0x124>
 800f07a:	4b54      	ldr	r3, [pc, #336]	@ (800f1cc <udp_input+0x24c>)
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f082:	d10f      	bne.n	800f0a4 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	3304      	adds	r3, #4
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d008      	beq.n	800f0a4 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	3304      	adds	r3, #4
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d101      	bne.n	800f0a4 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a6:	8a9b      	ldrh	r3, [r3, #20]
 800f0a8:	8a3a      	ldrh	r2, [r7, #16]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d121      	bne.n	800f0f2 <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d005      	beq.n	800f0c2 <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b8:	685a      	ldr	r2, [r3, #4]
 800f0ba:	4b44      	ldr	r3, [pc, #272]	@ (800f1cc <udp_input+0x24c>)
 800f0bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d117      	bne.n	800f0f2 <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f0c2:	6a3b      	ldr	r3, [r7, #32]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00b      	beq.n	800f0e0 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ca:	68da      	ldr	r2, [r3, #12]
 800f0cc:	6a3b      	ldr	r3, [r7, #32]
 800f0ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f0d0:	4b3f      	ldr	r3, [pc, #252]	@ (800f1d0 <udp_input+0x250>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f0d8:	4a3d      	ldr	r2, [pc, #244]	@ (800f1d0 <udp_input+0x250>)
 800f0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f0de:	e010      	b.n	800f102 <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800f0e0:	4b39      	ldr	r3, [pc, #228]	@ (800f1c8 <udp_input+0x248>)
 800f0e2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	4b37      	ldr	r3, [pc, #220]	@ (800f1c8 <udp_input+0x248>)
 800f0ec:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 800f0f0:	e007      	b.n	800f102 <udp_input+0x182>
      }
    }

    prev = pcb;
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d19e      	bne.n	800f040 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	d101      	bne.n	800f10c <udp_input+0x18c>
    pcb = uncon_pcb;
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d002      	beq.n	800f118 <udp_input+0x198>
    for_us = 1;
 800f112:	2301      	movs	r3, #1
 800f114:	76fb      	strb	r3, [r7, #27]
 800f116:	e00a      	b.n	800f12e <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	3304      	adds	r3, #4
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	4b2b      	ldr	r3, [pc, #172]	@ (800f1cc <udp_input+0x24c>)
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	429a      	cmp	r2, r3
 800f124:	bf0c      	ite	eq
 800f126:	2301      	moveq	r3, #1
 800f128:	2300      	movne	r3, #0
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f12e:	7efb      	ldrb	r3, [r7, #27]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d07f      	beq.n	800f234 <udp_input+0x2b4>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	88db      	ldrh	r3, [r3, #6]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00b      	beq.n	800f156 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	891a      	ldrh	r2, [r3, #8]
 800f142:	4b24      	ldr	r3, [pc, #144]	@ (800f1d4 <udp_input+0x254>)
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	4b24      	ldr	r3, [pc, #144]	@ (800f1d8 <udp_input+0x258>)
 800f148:	2111      	movs	r1, #17
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7f7 ffc9 	bl	80070e2 <ip_chksum_pseudo>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d173      	bne.n	800f23e <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f156:	2108      	movs	r1, #8
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7f8 ff0d 	bl	8007f78 <pbuf_remove_header>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d012      	beq.n	800f18a <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f164:	4b14      	ldr	r3, [pc, #80]	@ (800f1b8 <udp_input+0x238>)
 800f166:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f16a:	491c      	ldr	r1, [pc, #112]	@ (800f1dc <udp_input+0x25c>)
 800f16c:	4814      	ldr	r0, [pc, #80]	@ (800f1c0 <udp_input+0x240>)
 800f16e:	f006 fd07 	bl	8015b80 <iprintf>
      UDP_STATS_INC(udp.drop);
 800f172:	4b15      	ldr	r3, [pc, #84]	@ (800f1c8 <udp_input+0x248>)
 800f174:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f178:	3301      	adds	r3, #1
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	4b12      	ldr	r3, [pc, #72]	@ (800f1c8 <udp_input+0x248>)
 800f17e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7f8 ff7e 	bl	8008084 <pbuf_free>
      goto end;
 800f188:	e058      	b.n	800f23c <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800f18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d027      	beq.n	800f1e0 <udp_input+0x260>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00a      	beq.n	800f1ae <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19a:	699c      	ldr	r4, [r3, #24]
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	69d8      	ldr	r0, [r3, #28]
 800f1a0:	8a3b      	ldrh	r3, [r7, #16]
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f1d8 <udp_input+0x258>)
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f1aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f1ac:	e05b      	b.n	800f266 <udp_input+0x2e6>
        pbuf_free(p);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7f8 ff68 	bl	8008084 <pbuf_free>
        goto end;
 800f1b4:	e042      	b.n	800f23c <udp_input+0x2bc>
 800f1b6:	bf00      	nop
 800f1b8:	080188f0 	.word	0x080188f0
 800f1bc:	08018994 	.word	0x08018994
 800f1c0:	08018944 	.word	0x08018944
 800f1c4:	080189ac 	.word	0x080189ac
 800f1c8:	20003a9c 	.word	0x20003a9c
 800f1cc:	20000aa8 	.word	0x20000aa8
 800f1d0:	20003bc4 	.word	0x20003bc4
 800f1d4:	20000abc 	.word	0x20000abc
 800f1d8:	20000ab8 	.word	0x20000ab8
 800f1dc:	080189c8 	.word	0x080189c8
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f1e0:	7cfb      	ldrb	r3, [r7, #19]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d112      	bne.n	800f20c <udp_input+0x28c>
 800f1e6:	4b21      	ldr	r3, [pc, #132]	@ (800f26c <udp_input+0x2ec>)
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1ee:	2be0      	cmp	r3, #224	@ 0xe0
 800f1f0:	d00c      	beq.n	800f20c <udp_input+0x28c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f1f2:	4b1e      	ldr	r3, [pc, #120]	@ (800f26c <udp_input+0x2ec>)
 800f1f4:	899b      	ldrh	r3, [r3, #12]
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	b21b      	sxth	r3, r3
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7f8 ff2d 	bl	800805e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f204:	2103      	movs	r1, #3
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f003 fb1e 	bl	8012848 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800f20c:	4b18      	ldr	r3, [pc, #96]	@ (800f270 <udp_input+0x2f0>)
 800f20e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f212:	3301      	adds	r3, #1
 800f214:	b29a      	uxth	r2, r3
 800f216:	4b16      	ldr	r3, [pc, #88]	@ (800f270 <udp_input+0x2f0>)
 800f218:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 800f21c:	4b14      	ldr	r3, [pc, #80]	@ (800f270 <udp_input+0x2f0>)
 800f21e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f222:	3301      	adds	r3, #1
 800f224:	b29a      	uxth	r2, r3
 800f226:	4b12      	ldr	r3, [pc, #72]	@ (800f270 <udp_input+0x2f0>)
 800f228:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7f8 ff29 	bl	8008084 <pbuf_free>
  return;
 800f232:	e018      	b.n	800f266 <udp_input+0x2e6>
    pbuf_free(p);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7f8 ff25 	bl	8008084 <pbuf_free>
  return;
 800f23a:	e014      	b.n	800f266 <udp_input+0x2e6>
 800f23c:	e013      	b.n	800f266 <udp_input+0x2e6>
            goto chkerr;
 800f23e:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800f240:	4b0b      	ldr	r3, [pc, #44]	@ (800f270 <udp_input+0x2f0>)
 800f242:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800f246:	3301      	adds	r3, #1
 800f248:	b29a      	uxth	r2, r3
 800f24a:	4b09      	ldr	r3, [pc, #36]	@ (800f270 <udp_input+0x2f0>)
 800f24c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
  UDP_STATS_INC(udp.drop);
 800f250:	4b07      	ldr	r3, [pc, #28]	@ (800f270 <udp_input+0x2f0>)
 800f252:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f256:	3301      	adds	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	4b05      	ldr	r3, [pc, #20]	@ (800f270 <udp_input+0x2f0>)
 800f25c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7f8 ff0f 	bl	8008084 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f266:	372c      	adds	r7, #44	@ 0x2c
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	20000aa8 	.word	0x20000aa8
 800f270:	20003a9c 	.word	0x20003a9c

0800f274 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af02      	add	r7, sp, #8
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d109      	bne.n	800f29c <udp_sendto+0x28>
 800f288:	4b27      	ldr	r3, [pc, #156]	@ (800f328 <udp_sendto+0xb4>)
 800f28a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f28e:	4927      	ldr	r1, [pc, #156]	@ (800f32c <udp_sendto+0xb8>)
 800f290:	4827      	ldr	r0, [pc, #156]	@ (800f330 <udp_sendto+0xbc>)
 800f292:	f006 fc75 	bl	8015b80 <iprintf>
 800f296:	f06f 030f 	mvn.w	r3, #15
 800f29a:	e040      	b.n	800f31e <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <udp_sendto+0x42>
 800f2a2:	4b21      	ldr	r3, [pc, #132]	@ (800f328 <udp_sendto+0xb4>)
 800f2a4:	f240 2219 	movw	r2, #537	@ 0x219
 800f2a8:	4922      	ldr	r1, [pc, #136]	@ (800f334 <udp_sendto+0xc0>)
 800f2aa:	4821      	ldr	r0, [pc, #132]	@ (800f330 <udp_sendto+0xbc>)
 800f2ac:	f006 fc68 	bl	8015b80 <iprintf>
 800f2b0:	f06f 030f 	mvn.w	r3, #15
 800f2b4:	e033      	b.n	800f31e <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d109      	bne.n	800f2d0 <udp_sendto+0x5c>
 800f2bc:	4b1a      	ldr	r3, [pc, #104]	@ (800f328 <udp_sendto+0xb4>)
 800f2be:	f240 221a 	movw	r2, #538	@ 0x21a
 800f2c2:	491d      	ldr	r1, [pc, #116]	@ (800f338 <udp_sendto+0xc4>)
 800f2c4:	481a      	ldr	r0, [pc, #104]	@ (800f330 <udp_sendto+0xbc>)
 800f2c6:	f006 fc5b 	bl	8015b80 <iprintf>
 800f2ca:	f06f 030f 	mvn.w	r3, #15
 800f2ce:	e026      	b.n	800f31e <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	7a1b      	ldrb	r3, [r3, #8]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	7a1b      	ldrb	r3, [r3, #8]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f8 fb67 	bl	80079b0 <netif_get_by_index>
 800f2e2:	6178      	str	r0, [r7, #20]
 800f2e4:	e003      	b.n	800f2ee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f003 fb4c 	bl	8012984 <ip4_route>
 800f2ec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10a      	bne.n	800f30a <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800f2f4:	4b11      	ldr	r3, [pc, #68]	@ (800f33c <udp_sendto+0xc8>)
 800f2f6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800f33c <udp_sendto+0xc8>)
 800f300:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 800f304:	f06f 0303 	mvn.w	r3, #3
 800f308:	e009      	b.n	800f31e <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f30a:	887a      	ldrh	r2, [r7, #2]
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4613      	mov	r3, r2
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f000 f812 	bl	800f340 <udp_sendto_if>
 800f31c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	080188f0 	.word	0x080188f0
 800f32c:	08018a14 	.word	0x08018a14
 800f330:	08018944 	.word	0x08018944
 800f334:	08018a2c 	.word	0x08018a2c
 800f338:	08018a48 	.word	0x08018a48
 800f33c:	20003a9c 	.word	0x20003a9c

0800f340 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b088      	sub	sp, #32
 800f344:	af02      	add	r7, sp, #8
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d109      	bne.n	800f368 <udp_sendto_if+0x28>
 800f354:	4b2e      	ldr	r3, [pc, #184]	@ (800f410 <udp_sendto_if+0xd0>)
 800f356:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f35a:	492e      	ldr	r1, [pc, #184]	@ (800f414 <udp_sendto_if+0xd4>)
 800f35c:	482e      	ldr	r0, [pc, #184]	@ (800f418 <udp_sendto_if+0xd8>)
 800f35e:	f006 fc0f 	bl	8015b80 <iprintf>
 800f362:	f06f 030f 	mvn.w	r3, #15
 800f366:	e04f      	b.n	800f408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d109      	bne.n	800f382 <udp_sendto_if+0x42>
 800f36e:	4b28      	ldr	r3, [pc, #160]	@ (800f410 <udp_sendto_if+0xd0>)
 800f370:	f240 2281 	movw	r2, #641	@ 0x281
 800f374:	4929      	ldr	r1, [pc, #164]	@ (800f41c <udp_sendto_if+0xdc>)
 800f376:	4828      	ldr	r0, [pc, #160]	@ (800f418 <udp_sendto_if+0xd8>)
 800f378:	f006 fc02 	bl	8015b80 <iprintf>
 800f37c:	f06f 030f 	mvn.w	r3, #15
 800f380:	e042      	b.n	800f408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d109      	bne.n	800f39c <udp_sendto_if+0x5c>
 800f388:	4b21      	ldr	r3, [pc, #132]	@ (800f410 <udp_sendto_if+0xd0>)
 800f38a:	f240 2282 	movw	r2, #642	@ 0x282
 800f38e:	4924      	ldr	r1, [pc, #144]	@ (800f420 <udp_sendto_if+0xe0>)
 800f390:	4821      	ldr	r0, [pc, #132]	@ (800f418 <udp_sendto_if+0xd8>)
 800f392:	f006 fbf5 	bl	8015b80 <iprintf>
 800f396:	f06f 030f 	mvn.w	r3, #15
 800f39a:	e035      	b.n	800f408 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d109      	bne.n	800f3b6 <udp_sendto_if+0x76>
 800f3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f410 <udp_sendto_if+0xd0>)
 800f3a4:	f240 2283 	movw	r2, #643	@ 0x283
 800f3a8:	491e      	ldr	r1, [pc, #120]	@ (800f424 <udp_sendto_if+0xe4>)
 800f3aa:	481b      	ldr	r0, [pc, #108]	@ (800f418 <udp_sendto_if+0xd8>)
 800f3ac:	f006 fbe8 	bl	8015b80 <iprintf>
 800f3b0:	f06f 030f 	mvn.w	r3, #15
 800f3b4:	e028      	b.n	800f408 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d009      	beq.n	800f3d0 <udp_sendto_if+0x90>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3cc:	2be0      	cmp	r3, #224	@ 0xe0
 800f3ce:	d103      	bne.n	800f3d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	617b      	str	r3, [r7, #20]
 800f3d6:	e00b      	b.n	800f3f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	6a3b      	ldr	r3, [r7, #32]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d002      	beq.n	800f3ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f3e6:	f06f 0303 	mvn.w	r3, #3
 800f3ea:	e00d      	b.n	800f408 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f3f0:	887a      	ldrh	r2, [r7, #2]
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	68b9      	ldr	r1, [r7, #8]
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f000 f811 	bl	800f428 <udp_sendto_if_src>
 800f406:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	080188f0 	.word	0x080188f0
 800f414:	08018a64 	.word	0x08018a64
 800f418:	08018944 	.word	0x08018944
 800f41c:	08018a80 	.word	0x08018a80
 800f420:	08018a9c 	.word	0x08018a9c
 800f424:	08018abc 	.word	0x08018abc

0800f428 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08c      	sub	sp, #48	@ 0x30
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d109      	bne.n	800f450 <udp_sendto_if_src+0x28>
 800f43c:	4b76      	ldr	r3, [pc, #472]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f43e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f442:	4976      	ldr	r1, [pc, #472]	@ (800f61c <udp_sendto_if_src+0x1f4>)
 800f444:	4876      	ldr	r0, [pc, #472]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f446:	f006 fb9b 	bl	8015b80 <iprintf>
 800f44a:	f06f 030f 	mvn.w	r3, #15
 800f44e:	e0de      	b.n	800f60e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d109      	bne.n	800f46a <udp_sendto_if_src+0x42>
 800f456:	4b70      	ldr	r3, [pc, #448]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f458:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f45c:	4971      	ldr	r1, [pc, #452]	@ (800f624 <udp_sendto_if_src+0x1fc>)
 800f45e:	4870      	ldr	r0, [pc, #448]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f460:	f006 fb8e 	bl	8015b80 <iprintf>
 800f464:	f06f 030f 	mvn.w	r3, #15
 800f468:	e0d1      	b.n	800f60e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <udp_sendto_if_src+0x5c>
 800f470:	4b69      	ldr	r3, [pc, #420]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f472:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f476:	496c      	ldr	r1, [pc, #432]	@ (800f628 <udp_sendto_if_src+0x200>)
 800f478:	4869      	ldr	r0, [pc, #420]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f47a:	f006 fb81 	bl	8015b80 <iprintf>
 800f47e:	f06f 030f 	mvn.w	r3, #15
 800f482:	e0c4      	b.n	800f60e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f486:	2b00      	cmp	r3, #0
 800f488:	d109      	bne.n	800f49e <udp_sendto_if_src+0x76>
 800f48a:	4b63      	ldr	r3, [pc, #396]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f48c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f490:	4966      	ldr	r1, [pc, #408]	@ (800f62c <udp_sendto_if_src+0x204>)
 800f492:	4863      	ldr	r0, [pc, #396]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f494:	f006 fb74 	bl	8015b80 <iprintf>
 800f498:	f06f 030f 	mvn.w	r3, #15
 800f49c:	e0b7      	b.n	800f60e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d109      	bne.n	800f4b8 <udp_sendto_if_src+0x90>
 800f4a4:	4b5c      	ldr	r3, [pc, #368]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f4a6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f4aa:	4961      	ldr	r1, [pc, #388]	@ (800f630 <udp_sendto_if_src+0x208>)
 800f4ac:	485c      	ldr	r0, [pc, #368]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f4ae:	f006 fb67 	bl	8015b80 <iprintf>
 800f4b2:	f06f 030f 	mvn.w	r3, #15
 800f4b6:	e0aa      	b.n	800f60e <udp_sendto_if_src+0x1e6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	8a5b      	ldrh	r3, [r3, #18]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10f      	bne.n	800f4e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f4c0:	68f9      	ldr	r1, [r7, #12]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	8a5b      	ldrh	r3, [r3, #18]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 f8b7 	bl	800f63c <udp_bind>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800f4d2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f4da:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f4de:	e096      	b.n	800f60e <udp_sendto_if_src+0x1e6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	891b      	ldrh	r3, [r3, #8]
 800f4e4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d902      	bls.n	800f4f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f4f0:	e08d      	b.n	800f60e <udp_sendto_if_src+0x1e6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f4f2:	2108      	movs	r1, #8
 800f4f4:	68b8      	ldr	r0, [r7, #8]
 800f4f6:	f7f8 fd2f 	bl	8007f58 <pbuf_add_header>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d015      	beq.n	800f52c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f500:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f504:	2108      	movs	r1, #8
 800f506:	2022      	movs	r0, #34	@ 0x22
 800f508:	f7f8 fada 	bl	8007ac0 <pbuf_alloc>
 800f50c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d102      	bne.n	800f51a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f518:	e079      	b.n	800f60e <udp_sendto_if_src+0x1e6>
    }
    if (p->tot_len != 0) {
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	891b      	ldrh	r3, [r3, #8]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d006      	beq.n	800f530 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f522:	68b9      	ldr	r1, [r7, #8]
 800f524:	69f8      	ldr	r0, [r7, #28]
 800f526:	f7f8 fed1 	bl	80082cc <pbuf_chain>
 800f52a:	e001      	b.n	800f530 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	895b      	ldrh	r3, [r3, #10]
 800f534:	2b07      	cmp	r3, #7
 800f536:	d806      	bhi.n	800f546 <udp_sendto_if_src+0x11e>
 800f538:	4b37      	ldr	r3, [pc, #220]	@ (800f618 <udp_sendto_if_src+0x1f0>)
 800f53a:	f240 320d 	movw	r2, #781	@ 0x30d
 800f53e:	493d      	ldr	r1, [pc, #244]	@ (800f634 <udp_sendto_if_src+0x20c>)
 800f540:	4837      	ldr	r0, [pc, #220]	@ (800f620 <udp_sendto_if_src+0x1f8>)
 800f542:	f006 fb1d 	bl	8015b80 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	8a5b      	ldrh	r3, [r3, #18]
 800f550:	4618      	mov	r0, r3
 800f552:	f7f7 f971 	bl	8006838 <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f55e:	887b      	ldrh	r3, [r7, #2]
 800f560:	4618      	mov	r0, r3
 800f562:	f7f7 f969 	bl	8006838 <lwip_htons>
 800f566:	4603      	mov	r3, r0
 800f568:	461a      	mov	r2, r3
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	2200      	movs	r2, #0
 800f572:	719a      	strb	r2, [r3, #6]
 800f574:	2200      	movs	r2, #0
 800f576:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	891b      	ldrh	r3, [r3, #8]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7f7 f95b 	bl	8006838 <lwip_htons>
 800f582:	4603      	mov	r3, r0
 800f584:	461a      	mov	r2, r3
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	7c1b      	ldrb	r3, [r3, #16]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d113      	bne.n	800f5be <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	891a      	ldrh	r2, [r3, #8]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a0:	2111      	movs	r1, #17
 800f5a2:	69f8      	ldr	r0, [r7, #28]
 800f5a4:	f7f7 fd9d 	bl	80070e2 <ip_chksum_pseudo>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800f5ac:	8b7b      	ldrh	r3, [r7, #26]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d102      	bne.n	800f5b8 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800f5b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5b6:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	8b7a      	ldrh	r2, [r7, #26]
 800f5bc:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f5be:	2311      	movs	r3, #17
 800f5c0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	7adb      	ldrb	r3, [r3, #11]
 800f5c6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	7a9b      	ldrb	r3, [r3, #10]
 800f5cc:	7cb9      	ldrb	r1, [r7, #18]
 800f5ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5d0:	9202      	str	r2, [sp, #8]
 800f5d2:	7cfa      	ldrb	r2, [r7, #19]
 800f5d4:	9201      	str	r2, [sp, #4]
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5de:	69f8      	ldr	r0, [r7, #28]
 800f5e0:	f003 fc4c 	bl	8012e7c <ip4_output_if_src>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f5e8:	69fa      	ldr	r2, [r7, #28]
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d004      	beq.n	800f5fa <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800f5f0:	69f8      	ldr	r0, [r7, #28]
 800f5f2:	f7f8 fd47 	bl	8008084 <pbuf_free>
    q = NULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800f5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f638 <udp_sendto_if_src+0x210>)
 800f5fc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f600:	3301      	adds	r3, #1
 800f602:	b29a      	uxth	r2, r3
 800f604:	4b0c      	ldr	r3, [pc, #48]	@ (800f638 <udp_sendto_if_src+0x210>)
 800f606:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 800f60a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	080188f0 	.word	0x080188f0
 800f61c:	08018adc 	.word	0x08018adc
 800f620:	08018944 	.word	0x08018944
 800f624:	08018afc 	.word	0x08018afc
 800f628:	08018b1c 	.word	0x08018b1c
 800f62c:	08018b40 	.word	0x08018b40
 800f630:	08018b64 	.word	0x08018b64
 800f634:	08018b88 	.word	0x08018b88
 800f638:	20003a9c 	.word	0x20003a9c

0800f63c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d101      	bne.n	800f654 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f650:	4b39      	ldr	r3, [pc, #228]	@ (800f738 <udp_bind+0xfc>)
 800f652:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d109      	bne.n	800f66e <udp_bind+0x32>
 800f65a:	4b38      	ldr	r3, [pc, #224]	@ (800f73c <udp_bind+0x100>)
 800f65c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f660:	4937      	ldr	r1, [pc, #220]	@ (800f740 <udp_bind+0x104>)
 800f662:	4838      	ldr	r0, [pc, #224]	@ (800f744 <udp_bind+0x108>)
 800f664:	f006 fa8c 	bl	8015b80 <iprintf>
 800f668:	f06f 030f 	mvn.w	r3, #15
 800f66c:	e060      	b.n	800f730 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f672:	4b35      	ldr	r3, [pc, #212]	@ (800f748 <udp_bind+0x10c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	617b      	str	r3, [r7, #20]
 800f678:	e009      	b.n	800f68e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d102      	bne.n	800f688 <udp_bind+0x4c>
      rebind = 1;
 800f682:	2301      	movs	r3, #1
 800f684:	74fb      	strb	r3, [r7, #19]
      break;
 800f686:	e005      	b.n	800f694 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	617b      	str	r3, [r7, #20]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1f2      	bne.n	800f67a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f694:	88fb      	ldrh	r3, [r7, #6]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d109      	bne.n	800f6ae <udp_bind+0x72>
    port = udp_new_port();
 800f69a:	f7ff fbd5 	bl	800ee48 <udp_new_port>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6a2:	88fb      	ldrh	r3, [r7, #6]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d12c      	bne.n	800f702 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f6a8:	f06f 0307 	mvn.w	r3, #7
 800f6ac:	e040      	b.n	800f730 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6ae:	4b26      	ldr	r3, [pc, #152]	@ (800f748 <udp_bind+0x10c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	617b      	str	r3, [r7, #20]
 800f6b4:	e022      	b.n	800f6fc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d01b      	beq.n	800f6f6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	8a5b      	ldrh	r3, [r3, #18]
 800f6c2:	88fa      	ldrh	r2, [r7, #6]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d116      	bne.n	800f6f6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d00d      	beq.n	800f6f0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00a      	beq.n	800f6f0 <udp_bind+0xb4>
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d006      	beq.n	800f6f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f6e2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d003      	beq.n	800f6f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d102      	bne.n	800f6f6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f6f0:	f06f 0307 	mvn.w	r3, #7
 800f6f4:	e01c      	b.n	800f730 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	617b      	str	r3, [r7, #20]
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1d9      	bne.n	800f6b6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d002      	beq.n	800f70e <udp_bind+0xd2>
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	e000      	b.n	800f710 <udp_bind+0xd4>
 800f70e:	2300      	movs	r3, #0
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	88fa      	ldrh	r2, [r7, #6]
 800f718:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f71a:	7cfb      	ldrb	r3, [r7, #19]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f720:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <udp_bind+0x10c>)
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f728:	4a07      	ldr	r2, [pc, #28]	@ (800f748 <udp_bind+0x10c>)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	08019994 	.word	0x08019994
 800f73c:	080188f0 	.word	0x080188f0
 800f740:	08018bb8 	.word	0x08018bb8
 800f744:	08018944 	.word	0x08018944
 800f748:	20003bc4 	.word	0x20003bc4

0800f74c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	60f8      	str	r0, [r7, #12]
 800f754:	60b9      	str	r1, [r7, #8]
 800f756:	4613      	mov	r3, r2
 800f758:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d109      	bne.n	800f774 <udp_connect+0x28>
 800f760:	4b2c      	ldr	r3, [pc, #176]	@ (800f814 <udp_connect+0xc8>)
 800f762:	f240 4235 	movw	r2, #1077	@ 0x435
 800f766:	492c      	ldr	r1, [pc, #176]	@ (800f818 <udp_connect+0xcc>)
 800f768:	482c      	ldr	r0, [pc, #176]	@ (800f81c <udp_connect+0xd0>)
 800f76a:	f006 fa09 	bl	8015b80 <iprintf>
 800f76e:	f06f 030f 	mvn.w	r3, #15
 800f772:	e04b      	b.n	800f80c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d109      	bne.n	800f78e <udp_connect+0x42>
 800f77a:	4b26      	ldr	r3, [pc, #152]	@ (800f814 <udp_connect+0xc8>)
 800f77c:	f240 4236 	movw	r2, #1078	@ 0x436
 800f780:	4927      	ldr	r1, [pc, #156]	@ (800f820 <udp_connect+0xd4>)
 800f782:	4826      	ldr	r0, [pc, #152]	@ (800f81c <udp_connect+0xd0>)
 800f784:	f006 f9fc 	bl	8015b80 <iprintf>
 800f788:	f06f 030f 	mvn.w	r3, #15
 800f78c:	e03e      	b.n	800f80c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	8a5b      	ldrh	r3, [r3, #18]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10f      	bne.n	800f7b6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f796:	68f9      	ldr	r1, [r7, #12]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	8a5b      	ldrh	r3, [r3, #18]
 800f79c:	461a      	mov	r2, r3
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7ff ff4c 	bl	800f63c <udp_bind>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f7a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <udp_connect+0x6a>
      return err;
 800f7b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7b4:	e02a      	b.n	800f80c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d002      	beq.n	800f7c2 <udp_connect+0x76>
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	e000      	b.n	800f7c4 <udp_connect+0x78>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	88fa      	ldrh	r2, [r7, #6]
 800f7cc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	7c1b      	ldrb	r3, [r3, #16]
 800f7d2:	f043 0304 	orr.w	r3, r3, #4
 800f7d6:	b2da      	uxtb	r2, r3
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7dc:	4b11      	ldr	r3, [pc, #68]	@ (800f824 <udp_connect+0xd8>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	617b      	str	r3, [r7, #20]
 800f7e2:	e008      	b.n	800f7f6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d101      	bne.n	800f7f0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	e00d      	b.n	800f80c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	617b      	str	r3, [r7, #20]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1f3      	bne.n	800f7e4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f7fc:	4b09      	ldr	r3, [pc, #36]	@ (800f824 <udp_connect+0xd8>)
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f804:	4a07      	ldr	r2, [pc, #28]	@ (800f824 <udp_connect+0xd8>)
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3718      	adds	r7, #24
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	080188f0 	.word	0x080188f0
 800f818:	08018bd0 	.word	0x08018bd0
 800f81c:	08018944 	.word	0x08018944
 800f820:	08018bec 	.word	0x08018bec
 800f824:	20003bc4 	.word	0x20003bc4

0800f828 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d107      	bne.n	800f84a <udp_recv+0x22>
 800f83a:	4b08      	ldr	r3, [pc, #32]	@ (800f85c <udp_recv+0x34>)
 800f83c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f840:	4907      	ldr	r1, [pc, #28]	@ (800f860 <udp_recv+0x38>)
 800f842:	4808      	ldr	r0, [pc, #32]	@ (800f864 <udp_recv+0x3c>)
 800f844:	f006 f99c 	bl	8015b80 <iprintf>
 800f848:	e005      	b.n	800f856 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	68ba      	ldr	r2, [r7, #8]
 800f84e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	61da      	str	r2, [r3, #28]
}
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	080188f0 	.word	0x080188f0
 800f860:	08018c24 	.word	0x08018c24
 800f864:	08018944 	.word	0x08018944

0800f868 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d107      	bne.n	800f886 <udp_remove+0x1e>
 800f876:	4b19      	ldr	r3, [pc, #100]	@ (800f8dc <udp_remove+0x74>)
 800f878:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f87c:	4918      	ldr	r1, [pc, #96]	@ (800f8e0 <udp_remove+0x78>)
 800f87e:	4819      	ldr	r0, [pc, #100]	@ (800f8e4 <udp_remove+0x7c>)
 800f880:	f006 f97e 	bl	8015b80 <iprintf>
 800f884:	e026      	b.n	800f8d4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f886:	4b18      	ldr	r3, [pc, #96]	@ (800f8e8 <udp_remove+0x80>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d105      	bne.n	800f89c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f890:	4b15      	ldr	r3, [pc, #84]	@ (800f8e8 <udp_remove+0x80>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	4a14      	ldr	r2, [pc, #80]	@ (800f8e8 <udp_remove+0x80>)
 800f898:	6013      	str	r3, [r2, #0]
 800f89a:	e017      	b.n	800f8cc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f89c:	4b12      	ldr	r3, [pc, #72]	@ (800f8e8 <udp_remove+0x80>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	e010      	b.n	800f8c6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d009      	beq.n	800f8c0 <udp_remove+0x58>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d104      	bne.n	800f8c0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	68da      	ldr	r2, [r3, #12]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	60da      	str	r2, [r3, #12]
        break;
 800f8be:	e005      	b.n	800f8cc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	60fb      	str	r3, [r7, #12]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1eb      	bne.n	800f8a4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f8cc:	6879      	ldr	r1, [r7, #4]
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f7f7 fdfc 	bl	80074cc <memp_free>
}
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	080188f0 	.word	0x080188f0
 800f8e0:	08018c3c 	.word	0x08018c3c
 800f8e4:	08018944 	.word	0x08018944
 800f8e8:	20003bc4 	.word	0x20003bc4

0800f8ec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	f7f7 fd92 	bl	800741c <memp_malloc>
 800f8f8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d007      	beq.n	800f910 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f900:	2220      	movs	r2, #32
 800f902:	2100      	movs	r1, #0
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f006 f9a0 	bl	8015c4a <memset>
    pcb->ttl = UDP_TTL;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	22ff      	movs	r2, #255	@ 0xff
 800f90e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f910:	687b      	ldr	r3, [r7, #4]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
	...

0800f91c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d01e      	beq.n	800f96a <udp_netif_ip_addr_changed+0x4e>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d01a      	beq.n	800f96a <udp_netif_ip_addr_changed+0x4e>
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d017      	beq.n	800f96a <udp_netif_ip_addr_changed+0x4e>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d013      	beq.n	800f96a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f942:	4b0d      	ldr	r3, [pc, #52]	@ (800f978 <udp_netif_ip_addr_changed+0x5c>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	e00c      	b.n	800f964 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	429a      	cmp	r2, r3
 800f954:	d103      	bne.n	800f95e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	60fb      	str	r3, [r7, #12]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1ef      	bne.n	800f94a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f96a:	bf00      	nop
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr
 800f976:	bf00      	nop
 800f978:	20003bc4 	.word	0x20003bc4

0800f97c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f980:	4b20      	ldr	r3, [pc, #128]	@ (800fa04 <dhcp_inc_pcb_refcount+0x88>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d133      	bne.n	800f9f0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f988:	4b1f      	ldr	r3, [pc, #124]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d005      	beq.n	800f99c <dhcp_inc_pcb_refcount+0x20>
 800f990:	4b1e      	ldr	r3, [pc, #120]	@ (800fa0c <dhcp_inc_pcb_refcount+0x90>)
 800f992:	22e5      	movs	r2, #229	@ 0xe5
 800f994:	491e      	ldr	r1, [pc, #120]	@ (800fa10 <dhcp_inc_pcb_refcount+0x94>)
 800f996:	481f      	ldr	r0, [pc, #124]	@ (800fa14 <dhcp_inc_pcb_refcount+0x98>)
 800f998:	f006 f8f2 	bl	8015b80 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f99c:	f7ff ffa6 	bl	800f8ec <udp_new>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	4a19      	ldr	r2, [pc, #100]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9a4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f9a6:	4b18      	ldr	r3, [pc, #96]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d102      	bne.n	800f9b4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f9ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f9b2:	e024      	b.n	800f9fe <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f9b4:	4b14      	ldr	r3, [pc, #80]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	7a5a      	ldrb	r2, [r3, #9]
 800f9ba:	4b13      	ldr	r3, [pc, #76]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f042 0220 	orr.w	r2, r2, #32
 800f9c2:	b2d2      	uxtb	r2, r2
 800f9c4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f9c6:	4b10      	ldr	r3, [pc, #64]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2244      	movs	r2, #68	@ 0x44
 800f9cc:	4912      	ldr	r1, [pc, #72]	@ (800fa18 <dhcp_inc_pcb_refcount+0x9c>)
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff fe34 	bl	800f63c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2243      	movs	r2, #67	@ 0x43
 800f9da:	490f      	ldr	r1, [pc, #60]	@ (800fa18 <dhcp_inc_pcb_refcount+0x9c>)
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff feb5 	bl	800f74c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f9e2:	4b09      	ldr	r3, [pc, #36]	@ (800fa08 <dhcp_inc_pcb_refcount+0x8c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	490c      	ldr	r1, [pc, #48]	@ (800fa1c <dhcp_inc_pcb_refcount+0xa0>)
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff ff1c 	bl	800f828 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f9f0:	4b04      	ldr	r3, [pc, #16]	@ (800fa04 <dhcp_inc_pcb_refcount+0x88>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	b2da      	uxtb	r2, r3
 800f9f8:	4b02      	ldr	r3, [pc, #8]	@ (800fa04 <dhcp_inc_pcb_refcount+0x88>)
 800f9fa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20003c00 	.word	0x20003c00
 800fa08:	20003bfc 	.word	0x20003bfc
 800fa0c:	08018c54 	.word	0x08018c54
 800fa10:	08018c8c 	.word	0x08018c8c
 800fa14:	08018cb4 	.word	0x08018cb4
 800fa18:	08019994 	.word	0x08019994
 800fa1c:	080112cd 	.word	0x080112cd

0800fa20 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fa24:	4b0e      	ldr	r3, [pc, #56]	@ (800fa60 <dhcp_dec_pcb_refcount+0x40>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d105      	bne.n	800fa38 <dhcp_dec_pcb_refcount+0x18>
 800fa2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa64 <dhcp_dec_pcb_refcount+0x44>)
 800fa2e:	22ff      	movs	r2, #255	@ 0xff
 800fa30:	490d      	ldr	r1, [pc, #52]	@ (800fa68 <dhcp_dec_pcb_refcount+0x48>)
 800fa32:	480e      	ldr	r0, [pc, #56]	@ (800fa6c <dhcp_dec_pcb_refcount+0x4c>)
 800fa34:	f006 f8a4 	bl	8015b80 <iprintf>
  dhcp_pcb_refcount--;
 800fa38:	4b09      	ldr	r3, [pc, #36]	@ (800fa60 <dhcp_dec_pcb_refcount+0x40>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	4b07      	ldr	r3, [pc, #28]	@ (800fa60 <dhcp_dec_pcb_refcount+0x40>)
 800fa42:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fa44:	4b06      	ldr	r3, [pc, #24]	@ (800fa60 <dhcp_dec_pcb_refcount+0x40>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d107      	bne.n	800fa5c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fa4c:	4b08      	ldr	r3, [pc, #32]	@ (800fa70 <dhcp_dec_pcb_refcount+0x50>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff ff09 	bl	800f868 <udp_remove>
    dhcp_pcb = NULL;
 800fa56:	4b06      	ldr	r3, [pc, #24]	@ (800fa70 <dhcp_dec_pcb_refcount+0x50>)
 800fa58:	2200      	movs	r2, #0
 800fa5a:	601a      	str	r2, [r3, #0]
  }
}
 800fa5c:	bf00      	nop
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	20003c00 	.word	0x20003c00
 800fa64:	08018c54 	.word	0x08018c54
 800fa68:	08018cdc 	.word	0x08018cdc
 800fa6c:	08018cb4 	.word	0x08018cb4
 800fa70:	20003bfc 	.word	0x20003bfc

0800fa74 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a1b      	ldr	r3, [r3, #32]
 800fa80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fa82:	210c      	movs	r1, #12
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f001 f833 	bl	8010af0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fa8a:	4b06      	ldr	r3, [pc, #24]	@ (800faa4 <dhcp_handle_nak+0x30>)
 800fa8c:	4a05      	ldr	r2, [pc, #20]	@ (800faa4 <dhcp_handle_nak+0x30>)
 800fa8e:	4905      	ldr	r1, [pc, #20]	@ (800faa4 <dhcp_handle_nak+0x30>)
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7f7 feb9 	bl	8007808 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fc2c 	bl	80102f4 <dhcp_discover>
}
 800fa9c:	bf00      	nop
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	08019994 	.word	0x08019994

0800faa8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a1b      	ldr	r3, [r3, #32]
 800fab4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fab6:	2108      	movs	r1, #8
 800fab8:	68f8      	ldr	r0, [r7, #12]
 800faba:	f001 f819 	bl	8010af0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	331c      	adds	r3, #28
 800fac2:	2200      	movs	r2, #0
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f002 fb3e 	bl	8012148 <etharp_query>
 800facc:	4603      	mov	r3, r0
 800face:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	799b      	ldrb	r3, [r3, #6]
 800fad4:	2bff      	cmp	r3, #255	@ 0xff
 800fad6:	d005      	beq.n	800fae4 <dhcp_check+0x3c>
    dhcp->tries++;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	799b      	ldrb	r3, [r3, #6]
 800fadc:	3301      	adds	r3, #1
 800fade:	b2da      	uxtb	r2, r3
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fae4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fae8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800faea:	893b      	ldrh	r3, [r7, #8]
 800faec:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800faf0:	4a06      	ldr	r2, [pc, #24]	@ (800fb0c <dhcp_check+0x64>)
 800faf2:	fb82 1203 	smull	r1, r2, r2, r3
 800faf6:	1152      	asrs	r2, r2, #5
 800faf8:	17db      	asrs	r3, r3, #31
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	10624dd3 	.word	0x10624dd3

0800fb10 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6a1b      	ldr	r3, [r3, #32]
 800fb1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fb20:	4b0c      	ldr	r3, [pc, #48]	@ (800fb54 <dhcp_handle_offer+0x44>)
 800fb22:	789b      	ldrb	r3, [r3, #2]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d011      	beq.n	800fb4c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb58 <dhcp_handle_offer+0x48>)
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7f6 fe96 	bl	8006864 <lwip_htonl>
 800fb38:	4602      	mov	r2, r0
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	691a      	ldr	r2, [r3, #16]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f808 	bl	800fb5c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fb4c:	bf00      	nop
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20003bf0 	.word	0x20003bf0
 800fb58:	20003bc8 	.word	0x20003bc8

0800fb5c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fb5c:	b5b0      	push	{r4, r5, r7, lr}
 800fb5e:	b08a      	sub	sp, #40	@ 0x28
 800fb60:	af02      	add	r7, sp, #8
 800fb62:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d109      	bne.n	800fb7e <dhcp_select+0x22>
 800fb6a:	4b71      	ldr	r3, [pc, #452]	@ (800fd30 <dhcp_select+0x1d4>)
 800fb6c:	f240 1277 	movw	r2, #375	@ 0x177
 800fb70:	4970      	ldr	r1, [pc, #448]	@ (800fd34 <dhcp_select+0x1d8>)
 800fb72:	4871      	ldr	r0, [pc, #452]	@ (800fd38 <dhcp_select+0x1dc>)
 800fb74:	f006 f804 	bl	8015b80 <iprintf>
 800fb78:	f06f 030f 	mvn.w	r3, #15
 800fb7c:	e0d3      	b.n	800fd26 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fb84:	69bb      	ldr	r3, [r7, #24]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d109      	bne.n	800fb9e <dhcp_select+0x42>
 800fb8a:	4b69      	ldr	r3, [pc, #420]	@ (800fd30 <dhcp_select+0x1d4>)
 800fb8c:	f240 1279 	movw	r2, #377	@ 0x179
 800fb90:	496a      	ldr	r1, [pc, #424]	@ (800fd3c <dhcp_select+0x1e0>)
 800fb92:	4869      	ldr	r0, [pc, #420]	@ (800fd38 <dhcp_select+0x1dc>)
 800fb94:	f005 fff4 	bl	8015b80 <iprintf>
 800fb98:	f06f 0305 	mvn.w	r3, #5
 800fb9c:	e0c3      	b.n	800fd26 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fb9e:	2101      	movs	r1, #1
 800fba0:	69b8      	ldr	r0, [r7, #24]
 800fba2:	f000 ffa5 	bl	8010af0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fba6:	f107 030c 	add.w	r3, r7, #12
 800fbaa:	2203      	movs	r2, #3
 800fbac:	69b9      	ldr	r1, [r7, #24]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f001 fc5a 	bl	8011468 <dhcp_create_msg>
 800fbb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 8085 	beq.w	800fcc8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fbc4:	89b8      	ldrh	r0, [r7, #12]
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fbcc:	2302      	movs	r3, #2
 800fbce:	2239      	movs	r2, #57	@ 0x39
 800fbd0:	f000 ffa8 	bl	8010b24 <dhcp_option>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fbd8:	89b8      	ldrh	r0, [r7, #12]
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	f000 fff7 	bl	8010bd8 <dhcp_option_short>
 800fbea:	4603      	mov	r3, r0
 800fbec:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fbee:	89b8      	ldrh	r0, [r7, #12]
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fbf6:	2304      	movs	r3, #4
 800fbf8:	2232      	movs	r2, #50	@ 0x32
 800fbfa:	f000 ff93 	bl	8010b24 <dhcp_option>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fc02:	89bc      	ldrh	r4, [r7, #12]
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	69db      	ldr	r3, [r3, #28]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7f6 fe28 	bl	8006864 <lwip_htonl>
 800fc14:	4603      	mov	r3, r0
 800fc16:	461a      	mov	r2, r3
 800fc18:	4629      	mov	r1, r5
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f001 f80e 	bl	8010c3c <dhcp_option_long>
 800fc20:	4603      	mov	r3, r0
 800fc22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fc24:	89b8      	ldrh	r0, [r7, #12]
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fc2c:	2304      	movs	r3, #4
 800fc2e:	2236      	movs	r2, #54	@ 0x36
 800fc30:	f000 ff78 	bl	8010b24 <dhcp_option>
 800fc34:	4603      	mov	r3, r0
 800fc36:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fc38:	89bc      	ldrh	r4, [r7, #12]
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f6 fe0d 	bl	8006864 <lwip_htonl>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	4629      	mov	r1, r5
 800fc50:	4620      	mov	r0, r4
 800fc52:	f000 fff3 	bl	8010c3c <dhcp_option_long>
 800fc56:	4603      	mov	r3, r0
 800fc58:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fc5a:	89b8      	ldrh	r0, [r7, #12]
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fc62:	2304      	movs	r3, #4
 800fc64:	2237      	movs	r2, #55	@ 0x37
 800fc66:	f000 ff5d 	bl	8010b24 <dhcp_option>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc6e:	2300      	movs	r3, #0
 800fc70:	77bb      	strb	r3, [r7, #30]
 800fc72:	e00e      	b.n	800fc92 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fc74:	89b8      	ldrh	r0, [r7, #12]
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fc7c:	7fbb      	ldrb	r3, [r7, #30]
 800fc7e:	4a30      	ldr	r2, [pc, #192]	@ (800fd40 <dhcp_select+0x1e4>)
 800fc80:	5cd3      	ldrb	r3, [r2, r3]
 800fc82:	461a      	mov	r2, r3
 800fc84:	f000 ff82 	bl	8010b8c <dhcp_option_byte>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc8c:	7fbb      	ldrb	r3, [r7, #30]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	77bb      	strb	r3, [r7, #30]
 800fc92:	7fbb      	ldrb	r3, [r7, #30]
 800fc94:	2b03      	cmp	r3, #3
 800fc96:	d9ed      	bls.n	800fc74 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fc98:	89b8      	ldrh	r0, [r7, #12]
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	33f0      	adds	r3, #240	@ 0xf0
 800fc9e:	697a      	ldr	r2, [r7, #20]
 800fca0:	4619      	mov	r1, r3
 800fca2:	f001 fcb7 	bl	8011614 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fca6:	4b27      	ldr	r3, [pc, #156]	@ (800fd44 <dhcp_select+0x1e8>)
 800fca8:	6818      	ldr	r0, [r3, #0]
 800fcaa:	4b27      	ldr	r3, [pc, #156]	@ (800fd48 <dhcp_select+0x1ec>)
 800fcac:	9301      	str	r3, [sp, #4]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	2343      	movs	r3, #67	@ 0x43
 800fcb4:	4a25      	ldr	r2, [pc, #148]	@ (800fd4c <dhcp_select+0x1f0>)
 800fcb6:	6979      	ldr	r1, [r7, #20]
 800fcb8:	f7ff fbb6 	bl	800f428 <udp_sendto_if_src>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fcc0:	6978      	ldr	r0, [r7, #20]
 800fcc2:	f7f8 f9df 	bl	8008084 <pbuf_free>
 800fcc6:	e001      	b.n	800fccc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fcc8:	23ff      	movs	r3, #255	@ 0xff
 800fcca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	799b      	ldrb	r3, [r3, #6]
 800fcd0:	2bff      	cmp	r3, #255	@ 0xff
 800fcd2:	d005      	beq.n	800fce0 <dhcp_select+0x184>
    dhcp->tries++;
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	799b      	ldrb	r3, [r3, #6]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	b2da      	uxtb	r2, r3
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	799b      	ldrb	r3, [r3, #6]
 800fce4:	2b05      	cmp	r3, #5
 800fce6:	d80d      	bhi.n	800fd04 <dhcp_select+0x1a8>
 800fce8:	69bb      	ldr	r3, [r7, #24]
 800fcea:	799b      	ldrb	r3, [r3, #6]
 800fcec:	461a      	mov	r2, r3
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4093      	lsls	r3, r2
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	0152      	lsls	r2, r2, #5
 800fcf8:	1ad2      	subs	r2, r2, r3
 800fcfa:	0092      	lsls	r2, r2, #2
 800fcfc:	4413      	add	r3, r2
 800fcfe:	00db      	lsls	r3, r3, #3
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	e001      	b.n	800fd08 <dhcp_select+0x1ac>
 800fd04:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fd08:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fd0a:	89fb      	ldrh	r3, [r7, #14]
 800fd0c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fd10:	4a0f      	ldr	r2, [pc, #60]	@ (800fd50 <dhcp_select+0x1f4>)
 800fd12:	fb82 1203 	smull	r1, r2, r2, r3
 800fd16:	1152      	asrs	r2, r2, #5
 800fd18:	17db      	asrs	r3, r3, #31
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fd22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3720      	adds	r7, #32
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	08018c54 	.word	0x08018c54
 800fd34:	08018d00 	.word	0x08018d00
 800fd38:	08018cb4 	.word	0x08018cb4
 800fd3c:	08018d1c 	.word	0x08018d1c
 800fd40:	20000014 	.word	0x20000014
 800fd44:	20003bfc 	.word	0x20003bfc
 800fd48:	08019994 	.word	0x08019994
 800fd4c:	08019998 	.word	0x08019998
 800fd50:	10624dd3 	.word	0x10624dd3

0800fd54 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fd5a:	4b27      	ldr	r3, [pc, #156]	@ (800fdf8 <dhcp_coarse_tmr+0xa4>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	607b      	str	r3, [r7, #4]
 800fd60:	e042      	b.n	800fde8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d039      	beq.n	800fde2 <dhcp_coarse_tmr+0x8e>
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	795b      	ldrb	r3, [r3, #5]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d035      	beq.n	800fde2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	8a9b      	ldrh	r3, [r3, #20]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d012      	beq.n	800fda4 <dhcp_coarse_tmr+0x50>
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	8a5b      	ldrh	r3, [r3, #18]
 800fd82:	3301      	adds	r3, #1
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	825a      	strh	r2, [r3, #18]
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	8a5a      	ldrh	r2, [r3, #18]
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	8a9b      	ldrh	r3, [r3, #20]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d106      	bne.n	800fda4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fe10 	bl	80109bc <dhcp_release_and_stop>
        dhcp_start(netif);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f989 	bl	80100b4 <dhcp_start>
 800fda2:	e01e      	b.n	800fde2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	8a1b      	ldrh	r3, [r3, #16]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d00b      	beq.n	800fdc4 <dhcp_coarse_tmr+0x70>
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	8a1b      	ldrh	r3, [r3, #16]
 800fdb0:	1e5a      	subs	r2, r3, #1
 800fdb2:	b291      	uxth	r1, r2
 800fdb4:	683a      	ldr	r2, [r7, #0]
 800fdb6:	8211      	strh	r1, [r2, #16]
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d103      	bne.n	800fdc4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 f8c6 	bl	800ff4e <dhcp_t2_timeout>
 800fdc2:	e00e      	b.n	800fde2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	89db      	ldrh	r3, [r3, #14]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00a      	beq.n	800fde2 <dhcp_coarse_tmr+0x8e>
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	89db      	ldrh	r3, [r3, #14]
 800fdd0:	1e5a      	subs	r2, r3, #1
 800fdd2:	b291      	uxth	r1, r2
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	81d1      	strh	r1, [r2, #14]
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d102      	bne.n	800fde2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 f888 	bl	800fef2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	607b      	str	r3, [r7, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1b9      	bne.n	800fd62 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fdee:	bf00      	nop
 800fdf0:	bf00      	nop
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	20003a90 	.word	0x20003a90

0800fdfc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fe02:	4b16      	ldr	r3, [pc, #88]	@ (800fe5c <dhcp_fine_tmr+0x60>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	607b      	str	r3, [r7, #4]
 800fe08:	e020      	b.n	800fe4c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6a1b      	ldr	r3, [r3, #32]
 800fe0e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d017      	beq.n	800fe46 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	891b      	ldrh	r3, [r3, #8]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d906      	bls.n	800fe2c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	891b      	ldrh	r3, [r3, #8]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	811a      	strh	r2, [r3, #8]
 800fe2a:	e00c      	b.n	800fe46 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	891b      	ldrh	r3, [r3, #8]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d108      	bne.n	800fe46 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	891b      	ldrh	r3, [r3, #8]
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f80d 	bl	800fe60 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	607b      	str	r3, [r7, #4]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1db      	bne.n	800fe0a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fe52:	bf00      	nop
 800fe54:	bf00      	nop
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	20003a90 	.word	0x20003a90

0800fe60 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	795b      	ldrb	r3, [r3, #5]
 800fe72:	2b0c      	cmp	r3, #12
 800fe74:	d003      	beq.n	800fe7e <dhcp_timeout+0x1e>
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	795b      	ldrb	r3, [r3, #5]
 800fe7a:	2b06      	cmp	r3, #6
 800fe7c:	d103      	bne.n	800fe86 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fa38 	bl	80102f4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fe84:	e031      	b.n	800feea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	795b      	ldrb	r3, [r3, #5]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d10e      	bne.n	800feac <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	799b      	ldrb	r3, [r3, #6]
 800fe92:	2b05      	cmp	r3, #5
 800fe94:	d803      	bhi.n	800fe9e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f7ff fe60 	bl	800fb5c <dhcp_select>
}
 800fe9c:	e025      	b.n	800feea <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 fd8c 	bl	80109bc <dhcp_release_and_stop>
      dhcp_start(netif);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 f905 	bl	80100b4 <dhcp_start>
}
 800feaa:	e01e      	b.n	800feea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	795b      	ldrb	r3, [r3, #5]
 800feb0:	2b08      	cmp	r3, #8
 800feb2:	d10b      	bne.n	800fecc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	799b      	ldrb	r3, [r3, #6]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d803      	bhi.n	800fec4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7ff fdf3 	bl	800faa8 <dhcp_check>
}
 800fec2:	e012      	b.n	800feea <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 fab7 	bl	8010438 <dhcp_bind>
}
 800feca:	e00e      	b.n	800feea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	795b      	ldrb	r3, [r3, #5]
 800fed0:	2b03      	cmp	r3, #3
 800fed2:	d10a      	bne.n	800feea <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	799b      	ldrb	r3, [r3, #6]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d803      	bhi.n	800fee4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fcb9 	bl	8010854 <dhcp_reboot>
}
 800fee2:	e002      	b.n	800feea <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fa05 	bl	80102f4 <dhcp_discover>
}
 800feea:	bf00      	nop
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b084      	sub	sp, #16
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	795b      	ldrb	r3, [r3, #5]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d007      	beq.n	800ff18 <dhcp_t1_timeout+0x26>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	795b      	ldrb	r3, [r3, #5]
 800ff0c:	2b0a      	cmp	r3, #10
 800ff0e:	d003      	beq.n	800ff18 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff14:	2b05      	cmp	r3, #5
 800ff16:	d116      	bne.n	800ff46 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fb67 	bl	80105ec <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	899b      	ldrh	r3, [r3, #12]
 800ff22:	461a      	mov	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	8a5b      	ldrh	r3, [r3, #18]
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	dd0b      	ble.n	800ff46 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	461a      	mov	r2, r3
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	8a5b      	ldrh	r3, [r3, #18]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	0fda      	lsrs	r2, r3, #31
 800ff3c:	4413      	add	r3, r2
 800ff3e:	105b      	asrs	r3, r3, #1
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ff46:	bf00      	nop
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b084      	sub	sp, #16
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	795b      	ldrb	r3, [r3, #5]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d00b      	beq.n	800ff7c <dhcp_t2_timeout+0x2e>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	795b      	ldrb	r3, [r3, #5]
 800ff68:	2b0a      	cmp	r3, #10
 800ff6a:	d007      	beq.n	800ff7c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff70:	2b05      	cmp	r3, #5
 800ff72:	d003      	beq.n	800ff7c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	795b      	ldrb	r3, [r3, #5]
 800ff78:	2b04      	cmp	r3, #4
 800ff7a:	d116      	bne.n	800ffaa <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fbcf 	bl	8010720 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	8a9b      	ldrh	r3, [r3, #20]
 800ff86:	461a      	mov	r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	8a5b      	ldrh	r3, [r3, #18]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	dd0b      	ble.n	800ffaa <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	8a9b      	ldrh	r3, [r3, #20]
 800ff96:	461a      	mov	r2, r3
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	8a5b      	ldrh	r3, [r3, #18]
 800ff9c:	1ad3      	subs	r3, r2, r3
 800ff9e:	0fda      	lsrs	r2, r3, #31
 800ffa0:	4413      	add	r3, r2
 800ffa2:	105b      	asrs	r3, r3, #1
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ffaa:	bf00      	nop
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
	...

0800ffb4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b086      	sub	sp, #24
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6a1b      	ldr	r3, [r3, #32]
 800ffc2:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ffd0:	4b36      	ldr	r3, [pc, #216]	@ (80100ac <dhcp_handle_ack+0xf8>)
 800ffd2:	78db      	ldrb	r3, [r3, #3]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d003      	beq.n	800ffe0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ffd8:	4b35      	ldr	r3, [pc, #212]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 800ffda:	68da      	ldr	r2, [r3, #12]
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ffe0:	4b32      	ldr	r3, [pc, #200]	@ (80100ac <dhcp_handle_ack+0xf8>)
 800ffe2:	791b      	ldrb	r3, [r3, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d004      	beq.n	800fff2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ffe8:	4b31      	ldr	r3, [pc, #196]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 800ffea:	691a      	ldr	r2, [r3, #16]
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fff0:	e004      	b.n	800fffc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fff6:	085a      	lsrs	r2, r3, #1
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fffc:	4b2b      	ldr	r3, [pc, #172]	@ (80100ac <dhcp_handle_ack+0xf8>)
 800fffe:	795b      	ldrb	r3, [r3, #5]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d004      	beq.n	801000e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010004:	4b2a      	ldr	r3, [pc, #168]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 8010006:	695a      	ldr	r2, [r3, #20]
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	631a      	str	r2, [r3, #48]	@ 0x30
 801000c:	e007      	b.n	801001e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010012:	4613      	mov	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	08da      	lsrs	r2, r3, #3
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	691a      	ldr	r2, [r3, #16]
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010026:	4b21      	ldr	r3, [pc, #132]	@ (80100ac <dhcp_handle_ack+0xf8>)
 8010028:	799b      	ldrb	r3, [r3, #6]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00b      	beq.n	8010046 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801002e:	4b20      	ldr	r3, [pc, #128]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 8010030:	699b      	ldr	r3, [r3, #24]
 8010032:	4618      	mov	r0, r3
 8010034:	f7f6 fc16 	bl	8006864 <lwip_htonl>
 8010038:	4602      	mov	r2, r0
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	2201      	movs	r2, #1
 8010042:	71da      	strb	r2, [r3, #7]
 8010044:	e002      	b.n	801004c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	2200      	movs	r2, #0
 801004a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801004c:	4b17      	ldr	r3, [pc, #92]	@ (80100ac <dhcp_handle_ack+0xf8>)
 801004e:	79db      	ldrb	r3, [r3, #7]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d007      	beq.n	8010064 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010054:	4b16      	ldr	r3, [pc, #88]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	4618      	mov	r0, r3
 801005a:	f7f6 fc03 	bl	8006864 <lwip_htonl>
 801005e:	4602      	mov	r2, r0
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8010064:	2300      	movs	r3, #0
 8010066:	75fb      	strb	r3, [r7, #23]
 8010068:	e013      	b.n	8010092 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801006a:	7dfb      	ldrb	r3, [r7, #23]
 801006c:	3308      	adds	r3, #8
 801006e:	4a10      	ldr	r2, [pc, #64]	@ (80100b0 <dhcp_handle_ack+0xfc>)
 8010070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010074:	4618      	mov	r0, r3
 8010076:	f7f6 fbf5 	bl	8006864 <lwip_htonl>
 801007a:	4603      	mov	r3, r0
 801007c:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801007e:	f107 020c 	add.w	r2, r7, #12
 8010082:	7dfb      	ldrb	r3, [r7, #23]
 8010084:	4611      	mov	r1, r2
 8010086:	4618      	mov	r0, r3
 8010088:	f7f6 fc42 	bl	8006910 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801008c:	7dfb      	ldrb	r3, [r7, #23]
 801008e:	3301      	adds	r3, #1
 8010090:	75fb      	strb	r3, [r7, #23]
 8010092:	7dfb      	ldrb	r3, [r7, #23]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d805      	bhi.n	80100a4 <dhcp_handle_ack+0xf0>
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	3308      	adds	r3, #8
 801009c:	4a03      	ldr	r2, [pc, #12]	@ (80100ac <dhcp_handle_ack+0xf8>)
 801009e:	5cd3      	ldrb	r3, [r2, r3]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1e2      	bne.n	801006a <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80100a4:	bf00      	nop
 80100a6:	3718      	adds	r7, #24
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20003bf0 	.word	0x20003bf0
 80100b0:	20003bc8 	.word	0x20003bc8

080100b4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d109      	bne.n	80100d6 <dhcp_start+0x22>
 80100c2:	4b37      	ldr	r3, [pc, #220]	@ (80101a0 <dhcp_start+0xec>)
 80100c4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80100c8:	4936      	ldr	r1, [pc, #216]	@ (80101a4 <dhcp_start+0xf0>)
 80100ca:	4837      	ldr	r0, [pc, #220]	@ (80101a8 <dhcp_start+0xf4>)
 80100cc:	f005 fd58 	bl	8015b80 <iprintf>
 80100d0:	f06f 030f 	mvn.w	r3, #15
 80100d4:	e060      	b.n	8010198 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100dc:	f003 0301 	and.w	r3, r3, #1
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d109      	bne.n	80100f8 <dhcp_start+0x44>
 80100e4:	4b2e      	ldr	r3, [pc, #184]	@ (80101a0 <dhcp_start+0xec>)
 80100e6:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80100ea:	4930      	ldr	r1, [pc, #192]	@ (80101ac <dhcp_start+0xf8>)
 80100ec:	482e      	ldr	r0, [pc, #184]	@ (80101a8 <dhcp_start+0xf4>)
 80100ee:	f005 fd47 	bl	8015b80 <iprintf>
 80100f2:	f06f 030f 	mvn.w	r3, #15
 80100f6:	e04f      	b.n	8010198 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6a1b      	ldr	r3, [r3, #32]
 80100fc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010102:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8010106:	d202      	bcs.n	801010e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801010c:	e044      	b.n	8010198 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d10d      	bne.n	8010130 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010114:	2034      	movs	r0, #52	@ 0x34
 8010116:	f7f7 f885 	bl	8007224 <mem_malloc>
 801011a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d102      	bne.n	8010128 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010126:	e037      	b.n	8010198 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	621a      	str	r2, [r3, #32]
 801012e:	e005      	b.n	801013c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	791b      	ldrb	r3, [r3, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010138:	f7ff fc72 	bl	800fa20 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801013c:	2234      	movs	r2, #52	@ 0x34
 801013e:	2100      	movs	r1, #0
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f005 fd82 	bl	8015c4a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010146:	f7ff fc19 	bl	800f97c <dhcp_inc_pcb_refcount>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <dhcp_start+0xa2>
    return ERR_MEM;
 8010150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010154:	e020      	b.n	8010198 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2201      	movs	r2, #1
 801015a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010162:	f003 0304 	and.w	r3, r3, #4
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801016a:	2102      	movs	r1, #2
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f000 fcbf 	bl	8010af0 <dhcp_set_state>
    return ERR_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e010      	b.n	8010198 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f8bc 	bl	80102f4 <dhcp_discover>
 801017c:	4603      	mov	r3, r0
 801017e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010180:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d005      	beq.n	8010194 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 fc17 	bl	80109bc <dhcp_release_and_stop>
    return ERR_MEM;
 801018e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010192:	e001      	b.n	8010198 <dhcp_start+0xe4>
  }
  return result;
 8010194:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	08018c54 	.word	0x08018c54
 80101a4:	08018d38 	.word	0x08018d38
 80101a8:	08018cb4 	.word	0x08018cb4
 80101ac:	08018d7c 	.word	0x08018d7c

080101b0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d107      	bne.n	80101d0 <dhcp_arp_reply+0x20>
 80101c0:	4b0e      	ldr	r3, [pc, #56]	@ (80101fc <dhcp_arp_reply+0x4c>)
 80101c2:	f240 328b 	movw	r2, #907	@ 0x38b
 80101c6:	490e      	ldr	r1, [pc, #56]	@ (8010200 <dhcp_arp_reply+0x50>)
 80101c8:	480e      	ldr	r0, [pc, #56]	@ (8010204 <dhcp_arp_reply+0x54>)
 80101ca:	f005 fcd9 	bl	8015b80 <iprintf>
 80101ce:	e012      	b.n	80101f6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a1b      	ldr	r3, [r3, #32]
 80101d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00c      	beq.n	80101f6 <dhcp_arp_reply+0x46>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	795b      	ldrb	r3, [r3, #5]
 80101e0:	2b08      	cmp	r3, #8
 80101e2:	d108      	bne.n	80101f6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d102      	bne.n	80101f6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f809 	bl	8010208 <dhcp_decline>
    }
  }
}
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	08018c54 	.word	0x08018c54
 8010200:	08018d38 	.word	0x08018d38
 8010204:	08018cb4 	.word	0x08018cb4

08010208 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010208:	b5b0      	push	{r4, r5, r7, lr}
 801020a:	b08a      	sub	sp, #40	@ 0x28
 801020c:	af02      	add	r7, sp, #8
 801020e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a1b      	ldr	r3, [r3, #32]
 8010214:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010216:	210c      	movs	r1, #12
 8010218:	69b8      	ldr	r0, [r7, #24]
 801021a:	f000 fc69 	bl	8010af0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801021e:	f107 030c 	add.w	r3, r7, #12
 8010222:	2204      	movs	r2, #4
 8010224:	69b9      	ldr	r1, [r7, #24]
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f001 f91e 	bl	8011468 <dhcp_create_msg>
 801022c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d035      	beq.n	80102a0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801023a:	89b8      	ldrh	r0, [r7, #12]
 801023c:	693b      	ldr	r3, [r7, #16]
 801023e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010242:	2304      	movs	r3, #4
 8010244:	2232      	movs	r2, #50	@ 0x32
 8010246:	f000 fc6d 	bl	8010b24 <dhcp_option>
 801024a:	4603      	mov	r3, r0
 801024c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801024e:	89bc      	ldrh	r4, [r7, #12]
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	4618      	mov	r0, r3
 801025c:	f7f6 fb02 	bl	8006864 <lwip_htonl>
 8010260:	4603      	mov	r3, r0
 8010262:	461a      	mov	r2, r3
 8010264:	4629      	mov	r1, r5
 8010266:	4620      	mov	r0, r4
 8010268:	f000 fce8 	bl	8010c3c <dhcp_option_long>
 801026c:	4603      	mov	r3, r0
 801026e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010270:	89b8      	ldrh	r0, [r7, #12]
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	33f0      	adds	r3, #240	@ 0xf0
 8010276:	697a      	ldr	r2, [r7, #20]
 8010278:	4619      	mov	r1, r3
 801027a:	f001 f9cb 	bl	8011614 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801027e:	4b19      	ldr	r3, [pc, #100]	@ (80102e4 <dhcp_decline+0xdc>)
 8010280:	6818      	ldr	r0, [r3, #0]
 8010282:	4b19      	ldr	r3, [pc, #100]	@ (80102e8 <dhcp_decline+0xe0>)
 8010284:	9301      	str	r3, [sp, #4]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	9300      	str	r3, [sp, #0]
 801028a:	2343      	movs	r3, #67	@ 0x43
 801028c:	4a17      	ldr	r2, [pc, #92]	@ (80102ec <dhcp_decline+0xe4>)
 801028e:	6979      	ldr	r1, [r7, #20]
 8010290:	f7ff f8ca 	bl	800f428 <udp_sendto_if_src>
 8010294:	4603      	mov	r3, r0
 8010296:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010298:	6978      	ldr	r0, [r7, #20]
 801029a:	f7f7 fef3 	bl	8008084 <pbuf_free>
 801029e:	e001      	b.n	80102a4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80102a0:	23ff      	movs	r3, #255	@ 0xff
 80102a2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	799b      	ldrb	r3, [r3, #6]
 80102a8:	2bff      	cmp	r3, #255	@ 0xff
 80102aa:	d005      	beq.n	80102b8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	799b      	ldrb	r3, [r3, #6]
 80102b0:	3301      	adds	r3, #1
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80102b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80102bc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102be:	89fb      	ldrh	r3, [r7, #14]
 80102c0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80102c4:	4a0a      	ldr	r2, [pc, #40]	@ (80102f0 <dhcp_decline+0xe8>)
 80102c6:	fb82 1203 	smull	r1, r2, r2, r3
 80102ca:	1152      	asrs	r2, r2, #5
 80102cc:	17db      	asrs	r3, r3, #31
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80102d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3720      	adds	r7, #32
 80102de:	46bd      	mov	sp, r7
 80102e0:	bdb0      	pop	{r4, r5, r7, pc}
 80102e2:	bf00      	nop
 80102e4:	20003bfc 	.word	0x20003bfc
 80102e8:	08019994 	.word	0x08019994
 80102ec:	08019998 	.word	0x08019998
 80102f0:	10624dd3 	.word	0x10624dd3

080102f4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b08a      	sub	sp, #40	@ 0x28
 80102f8:	af02      	add	r7, sp, #8
 80102fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a1b      	ldr	r3, [r3, #32]
 8010300:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010302:	2300      	movs	r3, #0
 8010304:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	2200      	movs	r2, #0
 801030a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801030c:	2106      	movs	r1, #6
 801030e:	69b8      	ldr	r0, [r7, #24]
 8010310:	f000 fbee 	bl	8010af0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010314:	f107 0308 	add.w	r3, r7, #8
 8010318:	2201      	movs	r2, #1
 801031a:	69b9      	ldr	r1, [r7, #24]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f001 f8a3 	bl	8011468 <dhcp_create_msg>
 8010322:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d04b      	beq.n	80103c2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010330:	8938      	ldrh	r0, [r7, #8]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010338:	2302      	movs	r3, #2
 801033a:	2239      	movs	r2, #57	@ 0x39
 801033c:	f000 fbf2 	bl	8010b24 <dhcp_option>
 8010340:	4603      	mov	r3, r0
 8010342:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010344:	8938      	ldrh	r0, [r7, #8]
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010350:	461a      	mov	r2, r3
 8010352:	f000 fc41 	bl	8010bd8 <dhcp_option_short>
 8010356:	4603      	mov	r3, r0
 8010358:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801035a:	8938      	ldrh	r0, [r7, #8]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010362:	2304      	movs	r3, #4
 8010364:	2237      	movs	r2, #55	@ 0x37
 8010366:	f000 fbdd 	bl	8010b24 <dhcp_option>
 801036a:	4603      	mov	r3, r0
 801036c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801036e:	2300      	movs	r3, #0
 8010370:	77fb      	strb	r3, [r7, #31]
 8010372:	e00e      	b.n	8010392 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010374:	8938      	ldrh	r0, [r7, #8]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801037c:	7ffb      	ldrb	r3, [r7, #31]
 801037e:	4a29      	ldr	r2, [pc, #164]	@ (8010424 <dhcp_discover+0x130>)
 8010380:	5cd3      	ldrb	r3, [r2, r3]
 8010382:	461a      	mov	r2, r3
 8010384:	f000 fc02 	bl	8010b8c <dhcp_option_byte>
 8010388:	4603      	mov	r3, r0
 801038a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801038c:	7ffb      	ldrb	r3, [r7, #31]
 801038e:	3301      	adds	r3, #1
 8010390:	77fb      	strb	r3, [r7, #31]
 8010392:	7ffb      	ldrb	r3, [r7, #31]
 8010394:	2b03      	cmp	r3, #3
 8010396:	d9ed      	bls.n	8010374 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010398:	8938      	ldrh	r0, [r7, #8]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	33f0      	adds	r3, #240	@ 0xf0
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	4619      	mov	r1, r3
 80103a2:	f001 f937 	bl	8011614 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80103a6:	4b20      	ldr	r3, [pc, #128]	@ (8010428 <dhcp_discover+0x134>)
 80103a8:	6818      	ldr	r0, [r3, #0]
 80103aa:	4b20      	ldr	r3, [pc, #128]	@ (801042c <dhcp_discover+0x138>)
 80103ac:	9301      	str	r3, [sp, #4]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	2343      	movs	r3, #67	@ 0x43
 80103b4:	4a1e      	ldr	r2, [pc, #120]	@ (8010430 <dhcp_discover+0x13c>)
 80103b6:	6939      	ldr	r1, [r7, #16]
 80103b8:	f7ff f836 	bl	800f428 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80103bc:	6938      	ldr	r0, [r7, #16]
 80103be:	f7f7 fe61 	bl	8008084 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	799b      	ldrb	r3, [r3, #6]
 80103c6:	2bff      	cmp	r3, #255	@ 0xff
 80103c8:	d005      	beq.n	80103d6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	799b      	ldrb	r3, [r3, #6]
 80103ce:	3301      	adds	r3, #1
 80103d0:	b2da      	uxtb	r2, r3
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	799b      	ldrb	r3, [r3, #6]
 80103da:	2b05      	cmp	r3, #5
 80103dc:	d80d      	bhi.n	80103fa <dhcp_discover+0x106>
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	799b      	ldrb	r3, [r3, #6]
 80103e2:	461a      	mov	r2, r3
 80103e4:	2301      	movs	r3, #1
 80103e6:	4093      	lsls	r3, r2
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	461a      	mov	r2, r3
 80103ec:	0152      	lsls	r2, r2, #5
 80103ee:	1ad2      	subs	r2, r2, r3
 80103f0:	0092      	lsls	r2, r2, #2
 80103f2:	4413      	add	r3, r2
 80103f4:	00db      	lsls	r3, r3, #3
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	e001      	b.n	80103fe <dhcp_discover+0x10a>
 80103fa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80103fe:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010400:	897b      	ldrh	r3, [r7, #10]
 8010402:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010406:	4a0b      	ldr	r2, [pc, #44]	@ (8010434 <dhcp_discover+0x140>)
 8010408:	fb82 1203 	smull	r1, r2, r2, r3
 801040c:	1152      	asrs	r2, r2, #5
 801040e:	17db      	asrs	r3, r3, #31
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	b29a      	uxth	r2, r3
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3720      	adds	r7, #32
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	20000014 	.word	0x20000014
 8010428:	20003bfc 	.word	0x20003bfc
 801042c:	08019994 	.word	0x08019994
 8010430:	08019998 	.word	0x08019998
 8010434:	10624dd3 	.word	0x10624dd3

08010438 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d107      	bne.n	8010456 <dhcp_bind+0x1e>
 8010446:	4b64      	ldr	r3, [pc, #400]	@ (80105d8 <dhcp_bind+0x1a0>)
 8010448:	f240 4215 	movw	r2, #1045	@ 0x415
 801044c:	4963      	ldr	r1, [pc, #396]	@ (80105dc <dhcp_bind+0x1a4>)
 801044e:	4864      	ldr	r0, [pc, #400]	@ (80105e0 <dhcp_bind+0x1a8>)
 8010450:	f005 fb96 	bl	8015b80 <iprintf>
 8010454:	e0bc      	b.n	80105d0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d107      	bne.n	8010472 <dhcp_bind+0x3a>
 8010462:	4b5d      	ldr	r3, [pc, #372]	@ (80105d8 <dhcp_bind+0x1a0>)
 8010464:	f240 4217 	movw	r2, #1047	@ 0x417
 8010468:	495e      	ldr	r1, [pc, #376]	@ (80105e4 <dhcp_bind+0x1ac>)
 801046a:	485d      	ldr	r0, [pc, #372]	@ (80105e0 <dhcp_bind+0x1a8>)
 801046c:	f005 fb88 	bl	8015b80 <iprintf>
 8010470:	e0ae      	b.n	80105d0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	2200      	movs	r2, #0
 8010476:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801047c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010480:	d019      	beq.n	80104b6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010486:	331e      	adds	r3, #30
 8010488:	4a57      	ldr	r2, [pc, #348]	@ (80105e8 <dhcp_bind+0x1b0>)
 801048a:	fba2 2303 	umull	r2, r3, r2, r3
 801048e:	095b      	lsrs	r3, r3, #5
 8010490:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010498:	d302      	bcc.n	80104a0 <dhcp_bind+0x68>
      timeout = 0xffff;
 801049a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801049e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	8a9b      	ldrh	r3, [r3, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d102      	bne.n	80104b6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	2201      	movs	r2, #1
 80104b4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104be:	d01d      	beq.n	80104fc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104c4:	331e      	adds	r3, #30
 80104c6:	4a48      	ldr	r2, [pc, #288]	@ (80105e8 <dhcp_bind+0x1b0>)
 80104c8:	fba2 2303 	umull	r2, r3, r2, r3
 80104cc:	095b      	lsrs	r3, r3, #5
 80104ce:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104d6:	d302      	bcc.n	80104de <dhcp_bind+0xa6>
      timeout = 0xffff;
 80104d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104dc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	895b      	ldrh	r3, [r3, #10]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d102      	bne.n	80104f4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	2201      	movs	r2, #1
 80104f2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	895a      	ldrh	r2, [r3, #10]
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010504:	d01d      	beq.n	8010542 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801050a:	331e      	adds	r3, #30
 801050c:	4a36      	ldr	r2, [pc, #216]	@ (80105e8 <dhcp_bind+0x1b0>)
 801050e:	fba2 2303 	umull	r2, r3, r2, r3
 8010512:	095b      	lsrs	r3, r3, #5
 8010514:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801051c:	d302      	bcc.n	8010524 <dhcp_bind+0xec>
      timeout = 0xffff;
 801051e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010522:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	b29a      	uxth	r2, r3
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	899b      	ldrh	r3, [r3, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	2201      	movs	r2, #1
 8010538:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	899a      	ldrh	r2, [r3, #12]
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	895a      	ldrh	r2, [r3, #10]
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	899b      	ldrh	r3, [r3, #12]
 801054a:	429a      	cmp	r2, r3
 801054c:	d306      	bcc.n	801055c <dhcp_bind+0x124>
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	899b      	ldrh	r3, [r3, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d002      	beq.n	801055c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	2200      	movs	r2, #0
 801055a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	79db      	ldrb	r3, [r3, #7]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d003      	beq.n	801056c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	6a1b      	ldr	r3, [r3, #32]
 8010568:	613b      	str	r3, [r7, #16]
 801056a:	e014      	b.n	8010596 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	331c      	adds	r3, #28
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010578:	2b00      	cmp	r3, #0
 801057a:	db02      	blt.n	8010582 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801057c:	23ff      	movs	r3, #255	@ 0xff
 801057e:	613b      	str	r3, [r7, #16]
 8010580:	e009      	b.n	8010596 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010582:	7dfb      	ldrb	r3, [r7, #23]
 8010584:	2bbf      	cmp	r3, #191	@ 0xbf
 8010586:	d903      	bls.n	8010590 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010588:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801058c:	613b      	str	r3, [r7, #16]
 801058e:	e002      	b.n	8010596 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010594:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801059a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d108      	bne.n	80105b4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	69da      	ldr	r2, [r3, #28]
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	4013      	ands	r3, r2
 80105aa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80105b2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80105b4:	210a      	movs	r1, #10
 80105b6:	69b8      	ldr	r0, [r7, #24]
 80105b8:	f000 fa9a 	bl	8010af0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	f103 011c 	add.w	r1, r3, #28
 80105c2:	f107 030c 	add.w	r3, r7, #12
 80105c6:	f107 0210 	add.w	r2, r7, #16
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7f7 f91c 	bl	8007808 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80105d0:	3720      	adds	r7, #32
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08018c54 	.word	0x08018c54
 80105dc:	08018db4 	.word	0x08018db4
 80105e0:	08018cb4 	.word	0x08018cb4
 80105e4:	08018dd0 	.word	0x08018dd0
 80105e8:	88888889 	.word	0x88888889

080105ec <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08a      	sub	sp, #40	@ 0x28
 80105f0:	af02      	add	r7, sp, #8
 80105f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a1b      	ldr	r3, [r3, #32]
 80105f8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80105fa:	2105      	movs	r1, #5
 80105fc:	69b8      	ldr	r0, [r7, #24]
 80105fe:	f000 fa77 	bl	8010af0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	2203      	movs	r2, #3
 8010608:	69b9      	ldr	r1, [r7, #24]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 ff2c 	bl	8011468 <dhcp_create_msg>
 8010610:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d04e      	beq.n	80106b6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	685b      	ldr	r3, [r3, #4]
 801061c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801061e:	89b8      	ldrh	r0, [r7, #12]
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010626:	2302      	movs	r3, #2
 8010628:	2239      	movs	r2, #57	@ 0x39
 801062a:	f000 fa7b 	bl	8010b24 <dhcp_option>
 801062e:	4603      	mov	r3, r0
 8010630:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010632:	89b8      	ldrh	r0, [r7, #12]
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801063e:	461a      	mov	r2, r3
 8010640:	f000 faca 	bl	8010bd8 <dhcp_option_short>
 8010644:	4603      	mov	r3, r0
 8010646:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010648:	89b8      	ldrh	r0, [r7, #12]
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010650:	2304      	movs	r3, #4
 8010652:	2237      	movs	r2, #55	@ 0x37
 8010654:	f000 fa66 	bl	8010b24 <dhcp_option>
 8010658:	4603      	mov	r3, r0
 801065a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801065c:	2300      	movs	r3, #0
 801065e:	77bb      	strb	r3, [r7, #30]
 8010660:	e00e      	b.n	8010680 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010662:	89b8      	ldrh	r0, [r7, #12]
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801066a:	7fbb      	ldrb	r3, [r7, #30]
 801066c:	4a29      	ldr	r2, [pc, #164]	@ (8010714 <dhcp_renew+0x128>)
 801066e:	5cd3      	ldrb	r3, [r2, r3]
 8010670:	461a      	mov	r2, r3
 8010672:	f000 fa8b 	bl	8010b8c <dhcp_option_byte>
 8010676:	4603      	mov	r3, r0
 8010678:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801067a:	7fbb      	ldrb	r3, [r7, #30]
 801067c:	3301      	adds	r3, #1
 801067e:	77bb      	strb	r3, [r7, #30]
 8010680:	7fbb      	ldrb	r3, [r7, #30]
 8010682:	2b03      	cmp	r3, #3
 8010684:	d9ed      	bls.n	8010662 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010686:	89b8      	ldrh	r0, [r7, #12]
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	33f0      	adds	r3, #240	@ 0xf0
 801068c:	697a      	ldr	r2, [r7, #20]
 801068e:	4619      	mov	r1, r3
 8010690:	f000 ffc0 	bl	8011614 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010694:	4b20      	ldr	r3, [pc, #128]	@ (8010718 <dhcp_renew+0x12c>)
 8010696:	6818      	ldr	r0, [r3, #0]
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	f103 0218 	add.w	r2, r3, #24
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	2343      	movs	r3, #67	@ 0x43
 80106a4:	6979      	ldr	r1, [r7, #20]
 80106a6:	f7fe fe4b 	bl	800f340 <udp_sendto_if>
 80106aa:	4603      	mov	r3, r0
 80106ac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80106ae:	6978      	ldr	r0, [r7, #20]
 80106b0:	f7f7 fce8 	bl	8008084 <pbuf_free>
 80106b4:	e001      	b.n	80106ba <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80106b6:	23ff      	movs	r3, #255	@ 0xff
 80106b8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	799b      	ldrb	r3, [r3, #6]
 80106be:	2bff      	cmp	r3, #255	@ 0xff
 80106c0:	d005      	beq.n	80106ce <dhcp_renew+0xe2>
    dhcp->tries++;
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	799b      	ldrb	r3, [r3, #6]
 80106c6:	3301      	adds	r3, #1
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	799b      	ldrb	r3, [r3, #6]
 80106d2:	2b09      	cmp	r3, #9
 80106d4:	d809      	bhi.n	80106ea <dhcp_renew+0xfe>
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	799b      	ldrb	r3, [r3, #6]
 80106da:	461a      	mov	r2, r3
 80106dc:	0152      	lsls	r2, r2, #5
 80106de:	1ad2      	subs	r2, r2, r3
 80106e0:	0092      	lsls	r2, r2, #2
 80106e2:	4413      	add	r3, r2
 80106e4:	011b      	lsls	r3, r3, #4
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	e001      	b.n	80106ee <dhcp_renew+0x102>
 80106ea:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80106ee:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80106f0:	89fb      	ldrh	r3, [r7, #14]
 80106f2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80106f6:	4a09      	ldr	r2, [pc, #36]	@ (801071c <dhcp_renew+0x130>)
 80106f8:	fb82 1203 	smull	r1, r2, r2, r3
 80106fc:	1152      	asrs	r2, r2, #5
 80106fe:	17db      	asrs	r3, r3, #31
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	b29a      	uxth	r2, r3
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010708:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	20000014 	.word	0x20000014
 8010718:	20003bfc 	.word	0x20003bfc
 801071c:	10624dd3 	.word	0x10624dd3

08010720 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08a      	sub	sp, #40	@ 0x28
 8010724:	af02      	add	r7, sp, #8
 8010726:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6a1b      	ldr	r3, [r3, #32]
 801072c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801072e:	2104      	movs	r1, #4
 8010730:	69b8      	ldr	r0, [r7, #24]
 8010732:	f000 f9dd 	bl	8010af0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010736:	f107 030c 	add.w	r3, r7, #12
 801073a:	2203      	movs	r2, #3
 801073c:	69b9      	ldr	r1, [r7, #24]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fe92 	bl	8011468 <dhcp_create_msg>
 8010744:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d04c      	beq.n	80107e6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010752:	89b8      	ldrh	r0, [r7, #12]
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801075a:	2302      	movs	r3, #2
 801075c:	2239      	movs	r2, #57	@ 0x39
 801075e:	f000 f9e1 	bl	8010b24 <dhcp_option>
 8010762:	4603      	mov	r3, r0
 8010764:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010766:	89b8      	ldrh	r0, [r7, #12]
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010772:	461a      	mov	r2, r3
 8010774:	f000 fa30 	bl	8010bd8 <dhcp_option_short>
 8010778:	4603      	mov	r3, r0
 801077a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801077c:	89b8      	ldrh	r0, [r7, #12]
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010784:	2304      	movs	r3, #4
 8010786:	2237      	movs	r2, #55	@ 0x37
 8010788:	f000 f9cc 	bl	8010b24 <dhcp_option>
 801078c:	4603      	mov	r3, r0
 801078e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010790:	2300      	movs	r3, #0
 8010792:	77bb      	strb	r3, [r7, #30]
 8010794:	e00e      	b.n	80107b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010796:	89b8      	ldrh	r0, [r7, #12]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801079e:	7fbb      	ldrb	r3, [r7, #30]
 80107a0:	4a28      	ldr	r2, [pc, #160]	@ (8010844 <dhcp_rebind+0x124>)
 80107a2:	5cd3      	ldrb	r3, [r2, r3]
 80107a4:	461a      	mov	r2, r3
 80107a6:	f000 f9f1 	bl	8010b8c <dhcp_option_byte>
 80107aa:	4603      	mov	r3, r0
 80107ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ae:	7fbb      	ldrb	r3, [r7, #30]
 80107b0:	3301      	adds	r3, #1
 80107b2:	77bb      	strb	r3, [r7, #30]
 80107b4:	7fbb      	ldrb	r3, [r7, #30]
 80107b6:	2b03      	cmp	r3, #3
 80107b8:	d9ed      	bls.n	8010796 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107ba:	89b8      	ldrh	r0, [r7, #12]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	33f0      	adds	r3, #240	@ 0xf0
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	4619      	mov	r1, r3
 80107c4:	f000 ff26 	bl	8011614 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107c8:	4b1f      	ldr	r3, [pc, #124]	@ (8010848 <dhcp_rebind+0x128>)
 80107ca:	6818      	ldr	r0, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	2343      	movs	r3, #67	@ 0x43
 80107d2:	4a1e      	ldr	r2, [pc, #120]	@ (801084c <dhcp_rebind+0x12c>)
 80107d4:	6979      	ldr	r1, [r7, #20]
 80107d6:	f7fe fdb3 	bl	800f340 <udp_sendto_if>
 80107da:	4603      	mov	r3, r0
 80107dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107de:	6978      	ldr	r0, [r7, #20]
 80107e0:	f7f7 fc50 	bl	8008084 <pbuf_free>
 80107e4:	e001      	b.n	80107ea <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80107e6:	23ff      	movs	r3, #255	@ 0xff
 80107e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	799b      	ldrb	r3, [r3, #6]
 80107ee:	2bff      	cmp	r3, #255	@ 0xff
 80107f0:	d005      	beq.n	80107fe <dhcp_rebind+0xde>
    dhcp->tries++;
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	799b      	ldrb	r3, [r3, #6]
 80107f6:	3301      	adds	r3, #1
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	69bb      	ldr	r3, [r7, #24]
 80107fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	799b      	ldrb	r3, [r3, #6]
 8010802:	2b09      	cmp	r3, #9
 8010804:	d809      	bhi.n	801081a <dhcp_rebind+0xfa>
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	799b      	ldrb	r3, [r3, #6]
 801080a:	461a      	mov	r2, r3
 801080c:	0152      	lsls	r2, r2, #5
 801080e:	1ad2      	subs	r2, r2, r3
 8010810:	0092      	lsls	r2, r2, #2
 8010812:	4413      	add	r3, r2
 8010814:	00db      	lsls	r3, r3, #3
 8010816:	b29b      	uxth	r3, r3
 8010818:	e001      	b.n	801081e <dhcp_rebind+0xfe>
 801081a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801081e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010820:	89fb      	ldrh	r3, [r7, #14]
 8010822:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010826:	4a0a      	ldr	r2, [pc, #40]	@ (8010850 <dhcp_rebind+0x130>)
 8010828:	fb82 1203 	smull	r1, r2, r2, r3
 801082c:	1152      	asrs	r2, r2, #5
 801082e:	17db      	asrs	r3, r3, #31
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	b29a      	uxth	r2, r3
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010838:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3720      	adds	r7, #32
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	20000014 	.word	0x20000014
 8010848:	20003bfc 	.word	0x20003bfc
 801084c:	08019998 	.word	0x08019998
 8010850:	10624dd3 	.word	0x10624dd3

08010854 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010854:	b5b0      	push	{r4, r5, r7, lr}
 8010856:	b08a      	sub	sp, #40	@ 0x28
 8010858:	af02      	add	r7, sp, #8
 801085a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a1b      	ldr	r3, [r3, #32]
 8010860:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010862:	2103      	movs	r1, #3
 8010864:	69b8      	ldr	r0, [r7, #24]
 8010866:	f000 f943 	bl	8010af0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801086a:	f107 030c 	add.w	r3, r7, #12
 801086e:	2203      	movs	r2, #3
 8010870:	69b9      	ldr	r1, [r7, #24]
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fdf8 	bl	8011468 <dhcp_create_msg>
 8010878:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d066      	beq.n	801094e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010886:	89b8      	ldrh	r0, [r7, #12]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801088e:	2302      	movs	r3, #2
 8010890:	2239      	movs	r2, #57	@ 0x39
 8010892:	f000 f947 	bl	8010b24 <dhcp_option>
 8010896:	4603      	mov	r3, r0
 8010898:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801089a:	89b8      	ldrh	r0, [r7, #12]
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	33f0      	adds	r3, #240	@ 0xf0
 80108a0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80108a4:	4619      	mov	r1, r3
 80108a6:	f000 f997 	bl	8010bd8 <dhcp_option_short>
 80108aa:	4603      	mov	r3, r0
 80108ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80108ae:	89b8      	ldrh	r0, [r7, #12]
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108b6:	2304      	movs	r3, #4
 80108b8:	2232      	movs	r2, #50	@ 0x32
 80108ba:	f000 f933 	bl	8010b24 <dhcp_option>
 80108be:	4603      	mov	r3, r0
 80108c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80108c2:	89bc      	ldrh	r4, [r7, #12]
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7f5 ffc8 	bl	8006864 <lwip_htonl>
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	4629      	mov	r1, r5
 80108da:	4620      	mov	r0, r4
 80108dc:	f000 f9ae 	bl	8010c3c <dhcp_option_long>
 80108e0:	4603      	mov	r3, r0
 80108e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80108e4:	89b8      	ldrh	r0, [r7, #12]
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108ec:	2304      	movs	r3, #4
 80108ee:	2237      	movs	r2, #55	@ 0x37
 80108f0:	f000 f918 	bl	8010b24 <dhcp_option>
 80108f4:	4603      	mov	r3, r0
 80108f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108f8:	2300      	movs	r3, #0
 80108fa:	77bb      	strb	r3, [r7, #30]
 80108fc:	e00e      	b.n	801091c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108fe:	89b8      	ldrh	r0, [r7, #12]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010906:	7fbb      	ldrb	r3, [r7, #30]
 8010908:	4a28      	ldr	r2, [pc, #160]	@ (80109ac <dhcp_reboot+0x158>)
 801090a:	5cd3      	ldrb	r3, [r2, r3]
 801090c:	461a      	mov	r2, r3
 801090e:	f000 f93d 	bl	8010b8c <dhcp_option_byte>
 8010912:	4603      	mov	r3, r0
 8010914:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010916:	7fbb      	ldrb	r3, [r7, #30]
 8010918:	3301      	adds	r3, #1
 801091a:	77bb      	strb	r3, [r7, #30]
 801091c:	7fbb      	ldrb	r3, [r7, #30]
 801091e:	2b03      	cmp	r3, #3
 8010920:	d9ed      	bls.n	80108fe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010922:	89b8      	ldrh	r0, [r7, #12]
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	33f0      	adds	r3, #240	@ 0xf0
 8010928:	697a      	ldr	r2, [r7, #20]
 801092a:	4619      	mov	r1, r3
 801092c:	f000 fe72 	bl	8011614 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010930:	4b1f      	ldr	r3, [pc, #124]	@ (80109b0 <dhcp_reboot+0x15c>)
 8010932:	6818      	ldr	r0, [r3, #0]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	2343      	movs	r3, #67	@ 0x43
 801093a:	4a1e      	ldr	r2, [pc, #120]	@ (80109b4 <dhcp_reboot+0x160>)
 801093c:	6979      	ldr	r1, [r7, #20]
 801093e:	f7fe fcff 	bl	800f340 <udp_sendto_if>
 8010942:	4603      	mov	r3, r0
 8010944:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010946:	6978      	ldr	r0, [r7, #20]
 8010948:	f7f7 fb9c 	bl	8008084 <pbuf_free>
 801094c:	e001      	b.n	8010952 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801094e:	23ff      	movs	r3, #255	@ 0xff
 8010950:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	799b      	ldrb	r3, [r3, #6]
 8010956:	2bff      	cmp	r3, #255	@ 0xff
 8010958:	d005      	beq.n	8010966 <dhcp_reboot+0x112>
    dhcp->tries++;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	799b      	ldrb	r3, [r3, #6]
 801095e:	3301      	adds	r3, #1
 8010960:	b2da      	uxtb	r2, r3
 8010962:	69bb      	ldr	r3, [r7, #24]
 8010964:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	799b      	ldrb	r3, [r3, #6]
 801096a:	2b09      	cmp	r3, #9
 801096c:	d809      	bhi.n	8010982 <dhcp_reboot+0x12e>
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	799b      	ldrb	r3, [r3, #6]
 8010972:	461a      	mov	r2, r3
 8010974:	0152      	lsls	r2, r2, #5
 8010976:	1ad2      	subs	r2, r2, r3
 8010978:	0092      	lsls	r2, r2, #2
 801097a:	4413      	add	r3, r2
 801097c:	00db      	lsls	r3, r3, #3
 801097e:	b29b      	uxth	r3, r3
 8010980:	e001      	b.n	8010986 <dhcp_reboot+0x132>
 8010982:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010986:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010988:	89fb      	ldrh	r3, [r7, #14]
 801098a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801098e:	4a0a      	ldr	r2, [pc, #40]	@ (80109b8 <dhcp_reboot+0x164>)
 8010990:	fb82 1203 	smull	r1, r2, r2, r3
 8010994:	1152      	asrs	r2, r2, #5
 8010996:	17db      	asrs	r3, r3, #31
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	b29a      	uxth	r2, r3
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80109a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bdb0      	pop	{r4, r5, r7, pc}
 80109ac:	20000014 	.word	0x20000014
 80109b0:	20003bfc 	.word	0x20003bfc
 80109b4:	08019998 	.word	0x08019998
 80109b8:	10624dd3 	.word	0x10624dd3

080109bc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80109bc:	b5b0      	push	{r4, r5, r7, lr}
 80109be:	b08a      	sub	sp, #40	@ 0x28
 80109c0:	af02      	add	r7, sp, #8
 80109c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a1b      	ldr	r3, [r3, #32]
 80109c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f000 8084 	beq.w	8010ada <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	795b      	ldrb	r3, [r3, #5]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f000 8081 	beq.w	8010ade <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	2200      	movs	r2, #0
 80109e6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	2200      	movs	r2, #0
 80109ec:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	2200      	movs	r2, #0
 80109f2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	2200      	movs	r2, #0
 80109f8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	2200      	movs	r2, #0
 80109fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010a04:	69fb      	ldr	r3, [r7, #28]
 8010a06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a0c:	69fb      	ldr	r3, [r7, #28]
 8010a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	2200      	movs	r2, #0
 8010a14:	829a      	strh	r2, [r3, #20]
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	8a9a      	ldrh	r2, [r3, #20]
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	825a      	strh	r2, [r3, #18]
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	8a5a      	ldrh	r2, [r3, #18]
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	821a      	strh	r2, [r3, #16]
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	8a1a      	ldrh	r2, [r3, #16]
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 fe1e 	bl	8011670 <dhcp_supplied_address>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d03b      	beq.n	8010ab2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010a3a:	f107 030e 	add.w	r3, r7, #14
 8010a3e:	2207      	movs	r2, #7
 8010a40:	69f9      	ldr	r1, [r7, #28]
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f000 fd10 	bl	8011468 <dhcp_create_msg>
 8010a48:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d030      	beq.n	8010ab2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010a56:	89f8      	ldrh	r0, [r7, #14]
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010a5e:	2304      	movs	r3, #4
 8010a60:	2236      	movs	r2, #54	@ 0x36
 8010a62:	f000 f85f 	bl	8010b24 <dhcp_option>
 8010a66:	4603      	mov	r3, r0
 8010a68:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010a6a:	89fc      	ldrh	r4, [r7, #14]
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7f5 fef5 	bl	8006864 <lwip_htonl>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	4629      	mov	r1, r5
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 f8db 	bl	8010c3c <dhcp_option_long>
 8010a86:	4603      	mov	r3, r0
 8010a88:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a8a:	89f8      	ldrh	r0, [r7, #14]
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	33f0      	adds	r3, #240	@ 0xf0
 8010a90:	69ba      	ldr	r2, [r7, #24]
 8010a92:	4619      	mov	r1, r3
 8010a94:	f000 fdbe 	bl	8011614 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a98:	4b13      	ldr	r3, [pc, #76]	@ (8010ae8 <dhcp_release_and_stop+0x12c>)
 8010a9a:	6818      	ldr	r0, [r3, #0]
 8010a9c:	f107 0210 	add.w	r2, r7, #16
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	2343      	movs	r3, #67	@ 0x43
 8010aa6:	69b9      	ldr	r1, [r7, #24]
 8010aa8:	f7fe fc4a 	bl	800f340 <udp_sendto_if>
      pbuf_free(p_out);
 8010aac:	69b8      	ldr	r0, [r7, #24]
 8010aae:	f7f7 fae9 	bl	8008084 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8010aec <dhcp_release_and_stop+0x130>)
 8010ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8010aec <dhcp_release_and_stop+0x130>)
 8010ab6:	490d      	ldr	r1, [pc, #52]	@ (8010aec <dhcp_release_and_stop+0x130>)
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7f6 fea5 	bl	8007808 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010abe:	2100      	movs	r1, #0
 8010ac0:	69f8      	ldr	r0, [r7, #28]
 8010ac2:	f000 f815 	bl	8010af0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	791b      	ldrb	r3, [r3, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d008      	beq.n	8010ae0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010ace:	f7fe ffa7 	bl	800fa20 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	711a      	strb	r2, [r3, #4]
 8010ad8:	e002      	b.n	8010ae0 <dhcp_release_and_stop+0x124>
    return;
 8010ada:	bf00      	nop
 8010adc:	e000      	b.n	8010ae0 <dhcp_release_and_stop+0x124>
    return;
 8010ade:	bf00      	nop
  }
}
 8010ae0:	3720      	adds	r7, #32
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20003bfc 	.word	0x20003bfc
 8010aec:	08019994 	.word	0x08019994

08010af0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	460b      	mov	r3, r1
 8010afa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	795b      	ldrb	r3, [r3, #5]
 8010b00:	78fa      	ldrb	r2, [r7, #3]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d008      	beq.n	8010b18 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	78fa      	ldrb	r2, [r7, #3]
 8010b0a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2200      	movs	r2, #0
 8010b16:	811a      	strh	r2, [r3, #8]
  }
}
 8010b18:	bf00      	nop
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6039      	str	r1, [r7, #0]
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4603      	mov	r3, r0
 8010b32:	80fb      	strh	r3, [r7, #6]
 8010b34:	460b      	mov	r3, r1
 8010b36:	717b      	strb	r3, [r7, #5]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010b3c:	88fa      	ldrh	r2, [r7, #6]
 8010b3e:	793b      	ldrb	r3, [r7, #4]
 8010b40:	4413      	add	r3, r2
 8010b42:	3302      	adds	r3, #2
 8010b44:	2b44      	cmp	r3, #68	@ 0x44
 8010b46:	d906      	bls.n	8010b56 <dhcp_option+0x32>
 8010b48:	4b0d      	ldr	r3, [pc, #52]	@ (8010b80 <dhcp_option+0x5c>)
 8010b4a:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010b4e:	490d      	ldr	r1, [pc, #52]	@ (8010b84 <dhcp_option+0x60>)
 8010b50:	480d      	ldr	r0, [pc, #52]	@ (8010b88 <dhcp_option+0x64>)
 8010b52:	f005 f815 	bl	8015b80 <iprintf>
  options[options_out_len++] = option_type;
 8010b56:	88fb      	ldrh	r3, [r7, #6]
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	80fa      	strh	r2, [r7, #6]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	4413      	add	r3, r2
 8010b62:	797a      	ldrb	r2, [r7, #5]
 8010b64:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010b66:	88fb      	ldrh	r3, [r7, #6]
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	80fa      	strh	r2, [r7, #6]
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	4413      	add	r3, r2
 8010b72:	793a      	ldrb	r2, [r7, #4]
 8010b74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b76:	88fb      	ldrh	r3, [r7, #6]
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	08018c54 	.word	0x08018c54
 8010b84:	08018de8 	.word	0x08018de8
 8010b88:	08018cb4 	.word	0x08018cb4

08010b8c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	4603      	mov	r3, r0
 8010b94:	6039      	str	r1, [r7, #0]
 8010b96:	80fb      	strh	r3, [r7, #6]
 8010b98:	4613      	mov	r3, r2
 8010b9a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010b9c:	88fb      	ldrh	r3, [r7, #6]
 8010b9e:	2b43      	cmp	r3, #67	@ 0x43
 8010ba0:	d906      	bls.n	8010bb0 <dhcp_option_byte+0x24>
 8010ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bcc <dhcp_option_byte+0x40>)
 8010ba4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010ba8:	4909      	ldr	r1, [pc, #36]	@ (8010bd0 <dhcp_option_byte+0x44>)
 8010baa:	480a      	ldr	r0, [pc, #40]	@ (8010bd4 <dhcp_option_byte+0x48>)
 8010bac:	f004 ffe8 	bl	8015b80 <iprintf>
  options[options_out_len++] = value;
 8010bb0:	88fb      	ldrh	r3, [r7, #6]
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	80fa      	strh	r2, [r7, #6]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	4413      	add	r3, r2
 8010bbc:	797a      	ldrb	r2, [r7, #5]
 8010bbe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010bc0:	88fb      	ldrh	r3, [r7, #6]
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3708      	adds	r7, #8
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	08018c54 	.word	0x08018c54
 8010bd0:	08018e2c 	.word	0x08018e2c
 8010bd4:	08018cb4 	.word	0x08018cb4

08010bd8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	6039      	str	r1, [r7, #0]
 8010be2:	80fb      	strh	r3, [r7, #6]
 8010be4:	4613      	mov	r3, r2
 8010be6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010be8:	88fb      	ldrh	r3, [r7, #6]
 8010bea:	3302      	adds	r3, #2
 8010bec:	2b44      	cmp	r3, #68	@ 0x44
 8010bee:	d906      	bls.n	8010bfe <dhcp_option_short+0x26>
 8010bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8010c30 <dhcp_option_short+0x58>)
 8010bf2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010bf6:	490f      	ldr	r1, [pc, #60]	@ (8010c34 <dhcp_option_short+0x5c>)
 8010bf8:	480f      	ldr	r0, [pc, #60]	@ (8010c38 <dhcp_option_short+0x60>)
 8010bfa:	f004 ffc1 	bl	8015b80 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010bfe:	88bb      	ldrh	r3, [r7, #4]
 8010c00:	0a1b      	lsrs	r3, r3, #8
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	88fb      	ldrh	r3, [r7, #6]
 8010c06:	1c59      	adds	r1, r3, #1
 8010c08:	80f9      	strh	r1, [r7, #6]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	440b      	add	r3, r1
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010c14:	88fb      	ldrh	r3, [r7, #6]
 8010c16:	1c5a      	adds	r2, r3, #1
 8010c18:	80fa      	strh	r2, [r7, #6]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	4413      	add	r3, r2
 8010c20:	88ba      	ldrh	r2, [r7, #4]
 8010c22:	b2d2      	uxtb	r2, r2
 8010c24:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c26:	88fb      	ldrh	r3, [r7, #6]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	08018c54 	.word	0x08018c54
 8010c34:	08018e64 	.word	0x08018e64
 8010c38:	08018cb4 	.word	0x08018cb4

08010c3c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]
 8010c48:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010c4a:	89fb      	ldrh	r3, [r7, #14]
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	2b44      	cmp	r3, #68	@ 0x44
 8010c50:	d906      	bls.n	8010c60 <dhcp_option_long+0x24>
 8010c52:	4b19      	ldr	r3, [pc, #100]	@ (8010cb8 <dhcp_option_long+0x7c>)
 8010c54:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010c58:	4918      	ldr	r1, [pc, #96]	@ (8010cbc <dhcp_option_long+0x80>)
 8010c5a:	4819      	ldr	r0, [pc, #100]	@ (8010cc0 <dhcp_option_long+0x84>)
 8010c5c:	f004 ff90 	bl	8015b80 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	0e1a      	lsrs	r2, r3, #24
 8010c64:	89fb      	ldrh	r3, [r7, #14]
 8010c66:	1c59      	adds	r1, r3, #1
 8010c68:	81f9      	strh	r1, [r7, #14]
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	440b      	add	r3, r1
 8010c70:	b2d2      	uxtb	r2, r2
 8010c72:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	0c1a      	lsrs	r2, r3, #16
 8010c78:	89fb      	ldrh	r3, [r7, #14]
 8010c7a:	1c59      	adds	r1, r3, #1
 8010c7c:	81f9      	strh	r1, [r7, #14]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	440b      	add	r3, r1
 8010c84:	b2d2      	uxtb	r2, r2
 8010c86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	0a1a      	lsrs	r2, r3, #8
 8010c8c:	89fb      	ldrh	r3, [r7, #14]
 8010c8e:	1c59      	adds	r1, r3, #1
 8010c90:	81f9      	strh	r1, [r7, #14]
 8010c92:	4619      	mov	r1, r3
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	440b      	add	r3, r1
 8010c98:	b2d2      	uxtb	r2, r2
 8010c9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010c9c:	89fb      	ldrh	r3, [r7, #14]
 8010c9e:	1c5a      	adds	r2, r3, #1
 8010ca0:	81fa      	strh	r2, [r7, #14]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	b2d2      	uxtb	r2, r2
 8010cac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cae:	89fb      	ldrh	r3, [r7, #14]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3710      	adds	r7, #16
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	08018c54 	.word	0x08018c54
 8010cbc:	08018ea0 	.word	0x08018ea0
 8010cc0:	08018cb4 	.word	0x08018cb4

08010cc4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b090      	sub	sp, #64	@ 0x40
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010cd6:	220a      	movs	r2, #10
 8010cd8:	2100      	movs	r1, #0
 8010cda:	48ba      	ldr	r0, [pc, #744]	@ (8010fc4 <dhcp_parse_reply+0x300>)
 8010cdc:	f004 ffb5 	bl	8015c4a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	895b      	ldrh	r3, [r3, #10]
 8010ce4:	2b2b      	cmp	r3, #43	@ 0x2b
 8010ce6:	d802      	bhi.n	8010cee <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010ce8:	f06f 0301 	mvn.w	r3, #1
 8010cec:	e2ea      	b.n	80112c4 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010cf4:	23f0      	movs	r3, #240	@ 0xf0
 8010cf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	891b      	ldrh	r3, [r3, #8]
 8010cfc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010d02:	e00c      	b.n	8010d1e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d06:	895b      	ldrh	r3, [r3, #10]
 8010d08:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d10:	895b      	ldrh	r3, [r3, #10]
 8010d12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d004      	beq.n	8010d2e <dhcp_parse_reply+0x6a>
 8010d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d26:	895b      	ldrh	r3, [r3, #10]
 8010d28:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d2ea      	bcs.n	8010d04 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d102      	bne.n	8010d3a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010d34:	f06f 0301 	mvn.w	r3, #1
 8010d38:	e2c4      	b.n	80112c4 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8010d3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010d3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010d3e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010d40:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010d48:	e267      	b.n	801121a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8010d4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d4e:	4413      	add	r3, r2
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d5e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010d60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d62:	3302      	adds	r3, #2
 8010d64:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010d66:	8bfa      	ldrh	r2, [r7, #30]
 8010d68:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d202      	bcs.n	8010d74 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010d6e:	f06f 0301 	mvn.w	r3, #1
 8010d72:	e2a7      	b.n	80112c4 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010d74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d76:	3301      	adds	r3, #1
 8010d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d7a:	8952      	ldrh	r2, [r2, #10]
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	da07      	bge.n	8010d90 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010d80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d82:	3301      	adds	r3, #1
 8010d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d86:	4413      	add	r3, r2
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010d8e:	e00b      	b.n	8010da8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d004      	beq.n	8010da2 <dhcp_parse_reply+0xde>
 8010d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	e000      	b.n	8010da4 <dhcp_parse_reply+0xe0>
 8010da2:	2300      	movs	r3, #0
 8010da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010dac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b3b      	cmp	r3, #59	@ 0x3b
 8010db4:	f200 815a 	bhi.w	801106c <dhcp_parse_reply+0x3a8>
 8010db8:	a201      	add	r2, pc, #4	@ (adr r2, 8010dc0 <dhcp_parse_reply+0xfc>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010eb1 	.word	0x08010eb1
 8010dc4:	08010ec1 	.word	0x08010ec1
 8010dc8:	0801106d 	.word	0x0801106d
 8010dcc:	08010ee3 	.word	0x08010ee3
 8010dd0:	0801106d 	.word	0x0801106d
 8010dd4:	0801106d 	.word	0x0801106d
 8010dd8:	08010f0f 	.word	0x08010f0f
 8010ddc:	0801106d 	.word	0x0801106d
 8010de0:	0801106d 	.word	0x0801106d
 8010de4:	0801106d 	.word	0x0801106d
 8010de8:	0801106d 	.word	0x0801106d
 8010dec:	0801106d 	.word	0x0801106d
 8010df0:	0801106d 	.word	0x0801106d
 8010df4:	0801106d 	.word	0x0801106d
 8010df8:	0801106d 	.word	0x0801106d
 8010dfc:	0801106d 	.word	0x0801106d
 8010e00:	0801106d 	.word	0x0801106d
 8010e04:	0801106d 	.word	0x0801106d
 8010e08:	0801106d 	.word	0x0801106d
 8010e0c:	0801106d 	.word	0x0801106d
 8010e10:	0801106d 	.word	0x0801106d
 8010e14:	0801106d 	.word	0x0801106d
 8010e18:	0801106d 	.word	0x0801106d
 8010e1c:	0801106d 	.word	0x0801106d
 8010e20:	0801106d 	.word	0x0801106d
 8010e24:	0801106d 	.word	0x0801106d
 8010e28:	0801106d 	.word	0x0801106d
 8010e2c:	0801106d 	.word	0x0801106d
 8010e30:	0801106d 	.word	0x0801106d
 8010e34:	0801106d 	.word	0x0801106d
 8010e38:	0801106d 	.word	0x0801106d
 8010e3c:	0801106d 	.word	0x0801106d
 8010e40:	0801106d 	.word	0x0801106d
 8010e44:	0801106d 	.word	0x0801106d
 8010e48:	0801106d 	.word	0x0801106d
 8010e4c:	0801106d 	.word	0x0801106d
 8010e50:	0801106d 	.word	0x0801106d
 8010e54:	0801106d 	.word	0x0801106d
 8010e58:	0801106d 	.word	0x0801106d
 8010e5c:	0801106d 	.word	0x0801106d
 8010e60:	0801106d 	.word	0x0801106d
 8010e64:	0801106d 	.word	0x0801106d
 8010e68:	0801106d 	.word	0x0801106d
 8010e6c:	0801106d 	.word	0x0801106d
 8010e70:	0801106d 	.word	0x0801106d
 8010e74:	0801106d 	.word	0x0801106d
 8010e78:	0801106d 	.word	0x0801106d
 8010e7c:	0801106d 	.word	0x0801106d
 8010e80:	0801106d 	.word	0x0801106d
 8010e84:	0801106d 	.word	0x0801106d
 8010e88:	0801106d 	.word	0x0801106d
 8010e8c:	08010f65 	.word	0x08010f65
 8010e90:	08010f87 	.word	0x08010f87
 8010e94:	08010fe5 	.word	0x08010fe5
 8010e98:	08011007 	.word	0x08011007
 8010e9c:	0801106d 	.word	0x0801106d
 8010ea0:	0801106d 	.word	0x0801106d
 8010ea4:	0801106d 	.word	0x0801106d
 8010ea8:	08011029 	.word	0x08011029
 8010eac:	0801104b 	.word	0x0801104b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010eba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010ebe:	e0d9      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d009      	beq.n	8010edc <dhcp_parse_reply+0x218>
 8010ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010eca:	f240 622e 	movw	r2, #1582	@ 0x62e
 8010ece:	493f      	ldr	r1, [pc, #252]	@ (8010fcc <dhcp_parse_reply+0x308>)
 8010ed0:	483f      	ldr	r0, [pc, #252]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010ed2:	f004 fe55 	bl	8015b80 <iprintf>
 8010ed6:	f06f 0305 	mvn.w	r3, #5
 8010eda:	e1f3      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010edc:	2306      	movs	r3, #6
 8010ede:	623b      	str	r3, [r7, #32]
        break;
 8010ee0:	e0c8      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010ee2:	2304      	movs	r3, #4
 8010ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010ee8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010eec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d209      	bcs.n	8010f08 <dhcp_parse_reply+0x244>
 8010ef4:	4b34      	ldr	r3, [pc, #208]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010ef6:	f240 6233 	movw	r2, #1587	@ 0x633
 8010efa:	4936      	ldr	r1, [pc, #216]	@ (8010fd4 <dhcp_parse_reply+0x310>)
 8010efc:	4834      	ldr	r0, [pc, #208]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010efe:	f004 fe3f 	bl	8015b80 <iprintf>
 8010f02:	f06f 0305 	mvn.w	r3, #5
 8010f06:	e1dd      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010f08:	2307      	movs	r3, #7
 8010f0a:	623b      	str	r3, [r7, #32]
        break;
 8010f0c:	e0b2      	b.n	8011074 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8010f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f12:	f003 0303 	and.w	r3, r3, #3
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d009      	beq.n	8010f30 <dhcp_parse_reply+0x26c>
 8010f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010f1e:	f240 6239 	movw	r2, #1593	@ 0x639
 8010f22:	492d      	ldr	r1, [pc, #180]	@ (8010fd8 <dhcp_parse_reply+0x314>)
 8010f24:	482a      	ldr	r0, [pc, #168]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010f26:	f004 fe2b 	bl	8015b80 <iprintf>
 8010f2a:	f06f 0305 	mvn.w	r3, #5
 8010f2e:	e1c9      	b.n	80112c4 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8010f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f34:	2b08      	cmp	r3, #8
 8010f36:	bf28      	it	cs
 8010f38:	2308      	movcs	r3, #8
 8010f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010f3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010f42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d209      	bcs.n	8010f5e <dhcp_parse_reply+0x29a>
 8010f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010f4c:	f240 623c 	movw	r2, #1596	@ 0x63c
 8010f50:	4920      	ldr	r1, [pc, #128]	@ (8010fd4 <dhcp_parse_reply+0x310>)
 8010f52:	481f      	ldr	r0, [pc, #124]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010f54:	f004 fe14 	bl	8015b80 <iprintf>
 8010f58:	f06f 0305 	mvn.w	r3, #5
 8010f5c:	e1b2      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8010f5e:	2308      	movs	r3, #8
 8010f60:	623b      	str	r3, [r7, #32]
        break;
 8010f62:	e087      	b.n	8011074 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f68:	2b04      	cmp	r3, #4
 8010f6a:	d009      	beq.n	8010f80 <dhcp_parse_reply+0x2bc>
 8010f6c:	4b16      	ldr	r3, [pc, #88]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010f6e:	f240 6241 	movw	r2, #1601	@ 0x641
 8010f72:	4916      	ldr	r1, [pc, #88]	@ (8010fcc <dhcp_parse_reply+0x308>)
 8010f74:	4816      	ldr	r0, [pc, #88]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010f76:	f004 fe03 	bl	8015b80 <iprintf>
 8010f7a:	f06f 0305 	mvn.w	r3, #5
 8010f7e:	e1a1      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010f80:	2303      	movs	r3, #3
 8010f82:	623b      	str	r3, [r7, #32]
        break;
 8010f84:	e076      	b.n	8011074 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d009      	beq.n	8010fa2 <dhcp_parse_reply+0x2de>
 8010f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010f90:	f240 624f 	movw	r2, #1615	@ 0x64f
 8010f94:	4911      	ldr	r1, [pc, #68]	@ (8010fdc <dhcp_parse_reply+0x318>)
 8010f96:	480e      	ldr	r0, [pc, #56]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010f98:	f004 fdf2 	bl	8015b80 <iprintf>
 8010f9c:	f06f 0305 	mvn.w	r3, #5
 8010fa0:	e190      	b.n	80112c4 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010fa2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010fa4:	2bf0      	cmp	r3, #240	@ 0xf0
 8010fa6:	d009      	beq.n	8010fbc <dhcp_parse_reply+0x2f8>
 8010fa8:	4b07      	ldr	r3, [pc, #28]	@ (8010fc8 <dhcp_parse_reply+0x304>)
 8010faa:	f240 6251 	movw	r2, #1617	@ 0x651
 8010fae:	490c      	ldr	r1, [pc, #48]	@ (8010fe0 <dhcp_parse_reply+0x31c>)
 8010fb0:	4807      	ldr	r0, [pc, #28]	@ (8010fd0 <dhcp_parse_reply+0x30c>)
 8010fb2:	f004 fde5 	bl	8015b80 <iprintf>
 8010fb6:	f06f 0305 	mvn.w	r3, #5
 8010fba:	e183      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	623b      	str	r3, [r7, #32]
        break;
 8010fc0:	e058      	b.n	8011074 <dhcp_parse_reply+0x3b0>
 8010fc2:	bf00      	nop
 8010fc4:	20003bf0 	.word	0x20003bf0
 8010fc8:	08018c54 	.word	0x08018c54
 8010fcc:	08018edc 	.word	0x08018edc
 8010fd0:	08018cb4 	.word	0x08018cb4
 8010fd4:	08018ee8 	.word	0x08018ee8
 8010fd8:	08018efc 	.word	0x08018efc
 8010fdc:	08018f0c 	.word	0x08018f0c
 8010fe0:	08018f18 	.word	0x08018f18
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d009      	beq.n	8011000 <dhcp_parse_reply+0x33c>
 8010fec:	4b9d      	ldr	r3, [pc, #628]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8010fee:	f240 6255 	movw	r2, #1621	@ 0x655
 8010ff2:	499d      	ldr	r1, [pc, #628]	@ (8011268 <dhcp_parse_reply+0x5a4>)
 8010ff4:	489d      	ldr	r0, [pc, #628]	@ (801126c <dhcp_parse_reply+0x5a8>)
 8010ff6:	f004 fdc3 	bl	8015b80 <iprintf>
 8010ffa:	f06f 0305 	mvn.w	r3, #5
 8010ffe:	e161      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011000:	2301      	movs	r3, #1
 8011002:	623b      	str	r3, [r7, #32]
        break;
 8011004:	e036      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801100a:	2b04      	cmp	r3, #4
 801100c:	d009      	beq.n	8011022 <dhcp_parse_reply+0x35e>
 801100e:	4b95      	ldr	r3, [pc, #596]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8011010:	f240 6259 	movw	r2, #1625	@ 0x659
 8011014:	4996      	ldr	r1, [pc, #600]	@ (8011270 <dhcp_parse_reply+0x5ac>)
 8011016:	4895      	ldr	r0, [pc, #596]	@ (801126c <dhcp_parse_reply+0x5a8>)
 8011018:	f004 fdb2 	bl	8015b80 <iprintf>
 801101c:	f06f 0305 	mvn.w	r3, #5
 8011020:	e150      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011022:	2302      	movs	r3, #2
 8011024:	623b      	str	r3, [r7, #32]
        break;
 8011026:	e025      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801102c:	2b04      	cmp	r3, #4
 801102e:	d009      	beq.n	8011044 <dhcp_parse_reply+0x380>
 8011030:	4b8c      	ldr	r3, [pc, #560]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8011032:	f240 625d 	movw	r2, #1629	@ 0x65d
 8011036:	498e      	ldr	r1, [pc, #568]	@ (8011270 <dhcp_parse_reply+0x5ac>)
 8011038:	488c      	ldr	r0, [pc, #560]	@ (801126c <dhcp_parse_reply+0x5a8>)
 801103a:	f004 fda1 	bl	8015b80 <iprintf>
 801103e:	f06f 0305 	mvn.w	r3, #5
 8011042:	e13f      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011044:	2304      	movs	r3, #4
 8011046:	623b      	str	r3, [r7, #32]
        break;
 8011048:	e014      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801104a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801104e:	2b04      	cmp	r3, #4
 8011050:	d009      	beq.n	8011066 <dhcp_parse_reply+0x3a2>
 8011052:	4b84      	ldr	r3, [pc, #528]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8011054:	f240 6261 	movw	r2, #1633	@ 0x661
 8011058:	4985      	ldr	r1, [pc, #532]	@ (8011270 <dhcp_parse_reply+0x5ac>)
 801105a:	4884      	ldr	r0, [pc, #528]	@ (801126c <dhcp_parse_reply+0x5a8>)
 801105c:	f004 fd90 	bl	8015b80 <iprintf>
 8011060:	f06f 0305 	mvn.w	r3, #5
 8011064:	e12e      	b.n	80112c4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011066:	2305      	movs	r3, #5
 8011068:	623b      	str	r3, [r7, #32]
        break;
 801106a:	e003      	b.n	8011074 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8011072:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011074:	7dfb      	ldrb	r3, [r7, #23]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d103      	bne.n	8011082 <dhcp_parse_reply+0x3be>
      offset++;
 801107a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801107c:	3301      	adds	r3, #1
 801107e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8011080:	e0a1      	b.n	80111c6 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8011082:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011088:	4413      	add	r3, r2
 801108a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801108e:	4293      	cmp	r3, r2
 8011090:	dd02      	ble.n	8011098 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8011092:	f06f 0301 	mvn.w	r3, #1
 8011096:	e115      	b.n	80112c4 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8011098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801109c:	b29a      	uxth	r2, r3
 801109e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80110a0:	4413      	add	r3, r2
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	3302      	adds	r3, #2
 80110a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 80110a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f000 808a 	beq.w	80111c6 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 80110b2:	2300      	movs	r3, #0
 80110b4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	db02      	blt.n	80110c2 <dhcp_parse_reply+0x3fe>
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	2b09      	cmp	r3, #9
 80110c0:	dd06      	ble.n	80110d0 <dhcp_parse_reply+0x40c>
 80110c2:	4b68      	ldr	r3, [pc, #416]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 80110c4:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80110c8:	496a      	ldr	r1, [pc, #424]	@ (8011274 <dhcp_parse_reply+0x5b0>)
 80110ca:	4868      	ldr	r0, [pc, #416]	@ (801126c <dhcp_parse_reply+0x5a8>)
 80110cc:	f004 fd58 	bl	8015b80 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80110d0:	4a69      	ldr	r2, [pc, #420]	@ (8011278 <dhcp_parse_reply+0x5b4>)
 80110d2:	6a3b      	ldr	r3, [r7, #32]
 80110d4:	4413      	add	r3, r2
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d174      	bne.n	80111c6 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 80110dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110e0:	2b04      	cmp	r3, #4
 80110e2:	bf28      	it	cs
 80110e4:	2304      	movcs	r3, #4
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80110ea:	8bfb      	ldrh	r3, [r7, #30]
 80110ec:	8aba      	ldrh	r2, [r7, #20]
 80110ee:	f107 0108 	add.w	r1, r7, #8
 80110f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80110f4:	f7f7 f9cc 	bl	8008490 <pbuf_copy_partial>
 80110f8:	4603      	mov	r3, r0
 80110fa:	461a      	mov	r2, r3
 80110fc:	8abb      	ldrh	r3, [r7, #20]
 80110fe:	4293      	cmp	r3, r2
 8011100:	d002      	beq.n	8011108 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8011102:	f06f 0301 	mvn.w	r3, #1
 8011106:	e0dd      	b.n	80112c4 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8011108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801110c:	2b04      	cmp	r3, #4
 801110e:	d933      	bls.n	8011178 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011114:	f003 0303 	and.w	r3, r3, #3
 8011118:	b2db      	uxtb	r3, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	d009      	beq.n	8011132 <dhcp_parse_reply+0x46e>
 801111e:	4b51      	ldr	r3, [pc, #324]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8011120:	f240 6281 	movw	r2, #1665	@ 0x681
 8011124:	4955      	ldr	r1, [pc, #340]	@ (801127c <dhcp_parse_reply+0x5b8>)
 8011126:	4851      	ldr	r0, [pc, #324]	@ (801126c <dhcp_parse_reply+0x5a8>)
 8011128:	f004 fd2a 	bl	8015b80 <iprintf>
 801112c:	f06f 0305 	mvn.w	r3, #5
 8011130:	e0c8      	b.n	80112c4 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8011132:	4a51      	ldr	r2, [pc, #324]	@ (8011278 <dhcp_parse_reply+0x5b4>)
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	4413      	add	r3, r2
 8011138:	2201      	movs	r2, #1
 801113a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	4618      	mov	r0, r3
 8011140:	f7f5 fb90 	bl	8006864 <lwip_htonl>
 8011144:	4602      	mov	r2, r0
 8011146:	494e      	ldr	r1, [pc, #312]	@ (8011280 <dhcp_parse_reply+0x5bc>)
 8011148:	6a3b      	ldr	r3, [r7, #32]
 801114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801114e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011152:	3b04      	subs	r3, #4
 8011154:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011158:	8bfb      	ldrh	r3, [r7, #30]
 801115a:	3304      	adds	r3, #4
 801115c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801115e:	8a7a      	ldrh	r2, [r7, #18]
 8011160:	8bfb      	ldrh	r3, [r7, #30]
 8011162:	429a      	cmp	r2, r3
 8011164:	d202      	bcs.n	801116c <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8011166:	f06f 0301 	mvn.w	r3, #1
 801116a:	e0ab      	b.n	80112c4 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801116c:	8a7b      	ldrh	r3, [r7, #18]
 801116e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	3301      	adds	r3, #1
 8011174:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011176:	e79e      	b.n	80110b6 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8011178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801117c:	2b04      	cmp	r3, #4
 801117e:	d106      	bne.n	801118e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	4618      	mov	r0, r3
 8011184:	f7f5 fb6e 	bl	8006864 <lwip_htonl>
 8011188:	4603      	mov	r3, r0
 801118a:	60bb      	str	r3, [r7, #8]
 801118c:	e011      	b.n	80111b2 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801118e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011192:	2b01      	cmp	r3, #1
 8011194:	d009      	beq.n	80111aa <dhcp_parse_reply+0x4e6>
 8011196:	4b33      	ldr	r3, [pc, #204]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 8011198:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801119c:	4939      	ldr	r1, [pc, #228]	@ (8011284 <dhcp_parse_reply+0x5c0>)
 801119e:	4833      	ldr	r0, [pc, #204]	@ (801126c <dhcp_parse_reply+0x5a8>)
 80111a0:	f004 fcee 	bl	8015b80 <iprintf>
 80111a4:	f06f 0305 	mvn.w	r3, #5
 80111a8:	e08c      	b.n	80112c4 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 80111aa:	f107 0308 	add.w	r3, r7, #8
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80111b2:	4a31      	ldr	r2, [pc, #196]	@ (8011278 <dhcp_parse_reply+0x5b4>)
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	4413      	add	r3, r2
 80111b8:	2201      	movs	r2, #1
 80111ba:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	4930      	ldr	r1, [pc, #192]	@ (8011280 <dhcp_parse_reply+0x5bc>)
 80111c0:	6a3b      	ldr	r3, [r7, #32]
 80111c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80111c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111c8:	895b      	ldrh	r3, [r3, #10]
 80111ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d324      	bcc.n	801121a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 80111d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d2:	895b      	ldrh	r3, [r3, #10]
 80111d4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80111d6:	1ad3      	subs	r3, r2, r3
 80111d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80111da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111dc:	895b      	ldrh	r3, [r3, #10]
 80111de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80111e0:	1ad3      	subs	r3, r2, r3
 80111e2:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80111e4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80111e6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d213      	bcs.n	8011214 <dhcp_parse_reply+0x550>
        q = q->next;
 80111ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80111f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d109      	bne.n	801120c <dhcp_parse_reply+0x548>
 80111f8:	4b1a      	ldr	r3, [pc, #104]	@ (8011264 <dhcp_parse_reply+0x5a0>)
 80111fa:	f240 629d 	movw	r2, #1693	@ 0x69d
 80111fe:	4922      	ldr	r1, [pc, #136]	@ (8011288 <dhcp_parse_reply+0x5c4>)
 8011200:	481a      	ldr	r0, [pc, #104]	@ (801126c <dhcp_parse_reply+0x5a8>)
 8011202:	f004 fcbd 	bl	8015b80 <iprintf>
 8011206:	f06f 0305 	mvn.w	r3, #5
 801120a:	e05b      	b.n	80112c4 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801120c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011212:	e002      	b.n	801121a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011214:	f06f 0301 	mvn.w	r3, #1
 8011218:	e054      	b.n	80112c4 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801121a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00a      	beq.n	8011236 <dhcp_parse_reply+0x572>
 8011220:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011222:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011224:	429a      	cmp	r2, r3
 8011226:	d206      	bcs.n	8011236 <dhcp_parse_reply+0x572>
 8011228:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801122a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801122c:	4413      	add	r3, r2
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2bff      	cmp	r3, #255	@ 0xff
 8011232:	f47f ad8a 	bne.w	8010d4a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011236:	4b10      	ldr	r3, [pc, #64]	@ (8011278 <dhcp_parse_reply+0x5b4>)
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d02d      	beq.n	801129a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801123e:	4b10      	ldr	r3, [pc, #64]	@ (8011280 <dhcp_parse_reply+0x5bc>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011244:	4b0c      	ldr	r3, [pc, #48]	@ (8011278 <dhcp_parse_reply+0x5b4>)
 8011246:	2200      	movs	r2, #0
 8011248:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b01      	cmp	r3, #1
 801124e:	d102      	bne.n	8011256 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8011250:	2301      	movs	r3, #1
 8011252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011254:	e021      	b.n	801129a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2b02      	cmp	r3, #2
 801125a:	d117      	bne.n	801128c <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801125c:	2301      	movs	r3, #1
 801125e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011260:	e01b      	b.n	801129a <dhcp_parse_reply+0x5d6>
 8011262:	bf00      	nop
 8011264:	08018c54 	.word	0x08018c54
 8011268:	08018f0c 	.word	0x08018f0c
 801126c:	08018cb4 	.word	0x08018cb4
 8011270:	08018edc 	.word	0x08018edc
 8011274:	08018f30 	.word	0x08018f30
 8011278:	20003bf0 	.word	0x20003bf0
 801127c:	08018f44 	.word	0x08018f44
 8011280:	20003bc8 	.word	0x20003bc8
 8011284:	08018f5c 	.word	0x08018f5c
 8011288:	08018f70 	.word	0x08018f70
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2b03      	cmp	r3, #3
 8011290:	d103      	bne.n	801129a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8011292:	2301      	movs	r3, #1
 8011294:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8011296:	2301      	movs	r3, #1
 8011298:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801129a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801129c:	2b00      	cmp	r3, #0
 801129e:	d006      	beq.n	80112ae <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80112a4:	236c      	movs	r3, #108	@ 0x6c
 80112a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80112a8:	23ec      	movs	r3, #236	@ 0xec
 80112aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80112ac:	e527      	b.n	8010cfe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80112ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d006      	beq.n	80112c2 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 80112b4:	2300      	movs	r3, #0
 80112b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80112b8:	232c      	movs	r3, #44	@ 0x2c
 80112ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80112bc:	236c      	movs	r3, #108	@ 0x6c
 80112be:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80112c0:	e51d      	b.n	8010cfe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80112c2:	2300      	movs	r3, #0
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3740      	adds	r7, #64	@ 0x40
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b08a      	sub	sp, #40	@ 0x28
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
 80112d8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80112da:	4b60      	ldr	r3, [pc, #384]	@ (801145c <dhcp_recv+0x190>)
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80112e0:	6a3b      	ldr	r3, [r7, #32]
 80112e2:	6a1b      	ldr	r3, [r3, #32]
 80112e4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 809d 	beq.w	801142e <dhcp_recv+0x162>
 80112f4:	69fb      	ldr	r3, [r7, #28]
 80112f6:	791b      	ldrb	r3, [r3, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 8098 	beq.w	801142e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	895b      	ldrh	r3, [r3, #10]
 8011302:	2b2b      	cmp	r3, #43	@ 0x2b
 8011304:	f240 8095 	bls.w	8011432 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	2b02      	cmp	r3, #2
 801130e:	f040 8092 	bne.w	8011436 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011312:	2300      	movs	r3, #0
 8011314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011318:	e012      	b.n	8011340 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801131a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801131e:	6a3a      	ldr	r2, [r7, #32]
 8011320:	4413      	add	r3, r2
 8011322:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8011326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801132a:	69b9      	ldr	r1, [r7, #24]
 801132c:	440b      	add	r3, r1
 801132e:	7f1b      	ldrb	r3, [r3, #28]
 8011330:	429a      	cmp	r2, r3
 8011332:	f040 8082 	bne.w	801143a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801133a:	3301      	adds	r3, #1
 801133c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011340:	6a3b      	ldr	r3, [r7, #32]
 8011342:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011346:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801134a:	429a      	cmp	r2, r3
 801134c:	d203      	bcs.n	8011356 <dhcp_recv+0x8a>
 801134e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011352:	2b05      	cmp	r3, #5
 8011354:	d9e1      	bls.n	801131a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011356:	69bb      	ldr	r3, [r7, #24]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	4618      	mov	r0, r3
 801135c:	f7f5 fa82 	bl	8006864 <lwip_htonl>
 8011360:	4602      	mov	r2, r0
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d169      	bne.n	801143e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801136a:	69f9      	ldr	r1, [r7, #28]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff fca9 	bl	8010cc4 <dhcp_parse_reply>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d164      	bne.n	8011442 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011378:	4b39      	ldr	r3, [pc, #228]	@ (8011460 <dhcp_recv+0x194>)
 801137a:	785b      	ldrb	r3, [r3, #1]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d062      	beq.n	8011446 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8011386:	4b37      	ldr	r3, [pc, #220]	@ (8011464 <dhcp_recv+0x198>)
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801138c:	7cfb      	ldrb	r3, [r7, #19]
 801138e:	2b05      	cmp	r3, #5
 8011390:	d12a      	bne.n	80113e8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	795b      	ldrb	r3, [r3, #5]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d112      	bne.n	80113c0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801139a:	6979      	ldr	r1, [r7, #20]
 801139c:	6a38      	ldr	r0, [r7, #32]
 801139e:	f7fe fe09 	bl	800ffb4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113a8:	f003 0308 	and.w	r3, r3, #8
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80113b0:	6a38      	ldr	r0, [r7, #32]
 80113b2:	f7fe fb79 	bl	800faa8 <dhcp_check>
 80113b6:	e049      	b.n	801144c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80113b8:	6a38      	ldr	r0, [r7, #32]
 80113ba:	f7ff f83d 	bl	8010438 <dhcp_bind>
 80113be:	e045      	b.n	801144c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	795b      	ldrb	r3, [r3, #5]
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	d007      	beq.n	80113d8 <dhcp_recv+0x10c>
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	795b      	ldrb	r3, [r3, #5]
 80113cc:	2b04      	cmp	r3, #4
 80113ce:	d003      	beq.n	80113d8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80113d4:	2b05      	cmp	r3, #5
 80113d6:	d139      	bne.n	801144c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80113d8:	6979      	ldr	r1, [r7, #20]
 80113da:	6a38      	ldr	r0, [r7, #32]
 80113dc:	f7fe fdea 	bl	800ffb4 <dhcp_handle_ack>
      dhcp_bind(netif);
 80113e0:	6a38      	ldr	r0, [r7, #32]
 80113e2:	f7ff f829 	bl	8010438 <dhcp_bind>
 80113e6:	e031      	b.n	801144c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80113e8:	7cfb      	ldrb	r3, [r7, #19]
 80113ea:	2b06      	cmp	r3, #6
 80113ec:	d113      	bne.n	8011416 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80113f2:	2b03      	cmp	r3, #3
 80113f4:	d00b      	beq.n	801140e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	795b      	ldrb	r3, [r3, #5]
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d007      	beq.n	801140e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011402:	2b04      	cmp	r3, #4
 8011404:	d003      	beq.n	801140e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011406:	69fb      	ldr	r3, [r7, #28]
 8011408:	795b      	ldrb	r3, [r3, #5]
 801140a:	2b05      	cmp	r3, #5
 801140c:	d103      	bne.n	8011416 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801140e:	6a38      	ldr	r0, [r7, #32]
 8011410:	f7fe fb30 	bl	800fa74 <dhcp_handle_nak>
 8011414:	e01a      	b.n	801144c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011416:	7cfb      	ldrb	r3, [r7, #19]
 8011418:	2b02      	cmp	r3, #2
 801141a:	d116      	bne.n	801144a <dhcp_recv+0x17e>
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	795b      	ldrb	r3, [r3, #5]
 8011420:	2b06      	cmp	r3, #6
 8011422:	d112      	bne.n	801144a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011424:	6979      	ldr	r1, [r7, #20]
 8011426:	6a38      	ldr	r0, [r7, #32]
 8011428:	f7fe fb72 	bl	800fb10 <dhcp_handle_offer>
 801142c:	e00e      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801142e:	bf00      	nop
 8011430:	e00c      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011432:	bf00      	nop
 8011434:	e00a      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011436:	bf00      	nop
 8011438:	e008      	b.n	801144c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801143a:	bf00      	nop
 801143c:	e006      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801143e:	bf00      	nop
 8011440:	e004      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011442:	bf00      	nop
 8011444:	e002      	b.n	801144c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011446:	bf00      	nop
 8011448:	e000      	b.n	801144c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801144a:	bf00      	nop
  pbuf_free(p);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7f6 fe19 	bl	8008084 <pbuf_free>
}
 8011452:	bf00      	nop
 8011454:	3728      	adds	r7, #40	@ 0x28
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	20000aa8 	.word	0x20000aa8
 8011460:	20003bf0 	.word	0x20003bf0
 8011464:	20003bc8 	.word	0x20003bc8

08011468 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b088      	sub	sp, #32
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	603b      	str	r3, [r7, #0]
 8011474:	4613      	mov	r3, r2
 8011476:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d108      	bne.n	8011490 <dhcp_create_msg+0x28>
 801147e:	4b5f      	ldr	r3, [pc, #380]	@ (80115fc <dhcp_create_msg+0x194>)
 8011480:	f240 7269 	movw	r2, #1897	@ 0x769
 8011484:	495e      	ldr	r1, [pc, #376]	@ (8011600 <dhcp_create_msg+0x198>)
 8011486:	485f      	ldr	r0, [pc, #380]	@ (8011604 <dhcp_create_msg+0x19c>)
 8011488:	f004 fb7a 	bl	8015b80 <iprintf>
 801148c:	2300      	movs	r3, #0
 801148e:	e0b1      	b.n	80115f4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d108      	bne.n	80114a8 <dhcp_create_msg+0x40>
 8011496:	4b59      	ldr	r3, [pc, #356]	@ (80115fc <dhcp_create_msg+0x194>)
 8011498:	f240 726a 	movw	r2, #1898	@ 0x76a
 801149c:	495a      	ldr	r1, [pc, #360]	@ (8011608 <dhcp_create_msg+0x1a0>)
 801149e:	4859      	ldr	r0, [pc, #356]	@ (8011604 <dhcp_create_msg+0x19c>)
 80114a0:	f004 fb6e 	bl	8015b80 <iprintf>
 80114a4:	2300      	movs	r3, #0
 80114a6:	e0a5      	b.n	80115f4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80114a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114ac:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80114b0:	2036      	movs	r0, #54	@ 0x36
 80114b2:	f7f6 fb05 	bl	8007ac0 <pbuf_alloc>
 80114b6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d101      	bne.n	80114c2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80114be:	2300      	movs	r3, #0
 80114c0:	e098      	b.n	80115f4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	895b      	ldrh	r3, [r3, #10]
 80114c6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80114ca:	d206      	bcs.n	80114da <dhcp_create_msg+0x72>
 80114cc:	4b4b      	ldr	r3, [pc, #300]	@ (80115fc <dhcp_create_msg+0x194>)
 80114ce:	f240 7271 	movw	r2, #1905	@ 0x771
 80114d2:	494e      	ldr	r1, [pc, #312]	@ (801160c <dhcp_create_msg+0x1a4>)
 80114d4:	484b      	ldr	r0, [pc, #300]	@ (8011604 <dhcp_create_msg+0x19c>)
 80114d6:	f004 fb53 	bl	8015b80 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80114da:	79fb      	ldrb	r3, [r7, #7]
 80114dc:	2b03      	cmp	r3, #3
 80114de:	d103      	bne.n	80114e8 <dhcp_create_msg+0x80>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	795b      	ldrb	r3, [r3, #5]
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d10d      	bne.n	8011504 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	799b      	ldrb	r3, [r3, #6]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d105      	bne.n	80114fc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80114f0:	f004 fa46 	bl	8015980 <rand>
 80114f4:	4603      	mov	r3, r0
 80114f6:	461a      	mov	r2, r3
 80114f8:	4b45      	ldr	r3, [pc, #276]	@ (8011610 <dhcp_create_msg+0x1a8>)
 80114fa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80114fc:	4b44      	ldr	r3, [pc, #272]	@ (8011610 <dhcp_create_msg+0x1a8>)
 80114fe:	681a      	ldr	r2, [r3, #0]
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801150a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801150e:	2100      	movs	r1, #0
 8011510:	6978      	ldr	r0, [r7, #20]
 8011512:	f004 fb9a 	bl	8015c4a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	2201      	movs	r2, #1
 801151a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	2201      	movs	r2, #1
 8011520:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4618      	mov	r0, r3
 8011532:	f7f5 f997 	bl	8006864 <lwip_htonl>
 8011536:	4602      	mov	r2, r0
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801153c:	79fb      	ldrb	r3, [r7, #7]
 801153e:	2b08      	cmp	r3, #8
 8011540:	d010      	beq.n	8011564 <dhcp_create_msg+0xfc>
 8011542:	79fb      	ldrb	r3, [r7, #7]
 8011544:	2b04      	cmp	r3, #4
 8011546:	d00d      	beq.n	8011564 <dhcp_create_msg+0xfc>
 8011548:	79fb      	ldrb	r3, [r7, #7]
 801154a:	2b07      	cmp	r3, #7
 801154c:	d00a      	beq.n	8011564 <dhcp_create_msg+0xfc>
 801154e:	79fb      	ldrb	r3, [r7, #7]
 8011550:	2b03      	cmp	r3, #3
 8011552:	d10c      	bne.n	801156e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011558:	2b05      	cmp	r3, #5
 801155a:	d003      	beq.n	8011564 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	795b      	ldrb	r3, [r3, #5]
 8011560:	2b04      	cmp	r3, #4
 8011562:	d104      	bne.n	801156e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	3304      	adds	r3, #4
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801156e:	2300      	movs	r3, #0
 8011570:	83fb      	strh	r3, [r7, #30]
 8011572:	e00c      	b.n	801158e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011574:	8bfa      	ldrh	r2, [r7, #30]
 8011576:	8bfb      	ldrh	r3, [r7, #30]
 8011578:	68f9      	ldr	r1, [r7, #12]
 801157a:	440a      	add	r2, r1
 801157c:	f892 1026 	ldrb.w	r1, [r2, #38]	@ 0x26
 8011580:	697a      	ldr	r2, [r7, #20]
 8011582:	4413      	add	r3, r2
 8011584:	460a      	mov	r2, r1
 8011586:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011588:	8bfb      	ldrh	r3, [r7, #30]
 801158a:	3301      	adds	r3, #1
 801158c:	83fb      	strh	r3, [r7, #30]
 801158e:	8bfb      	ldrh	r3, [r7, #30]
 8011590:	2b05      	cmp	r3, #5
 8011592:	d9ef      	bls.n	8011574 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	2200      	movs	r2, #0
 8011598:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801159c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80115a0:	2200      	movs	r2, #0
 80115a2:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80115a6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80115aa:	2200      	movs	r2, #0
 80115ac:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80115b0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80115b4:	2200      	movs	r2, #0
 80115b6:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80115ba:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80115c4:	2301      	movs	r3, #1
 80115c6:	2235      	movs	r2, #53	@ 0x35
 80115c8:	2000      	movs	r0, #0
 80115ca:	f7ff faab 	bl	8010b24 <dhcp_option>
 80115ce:	4603      	mov	r3, r0
 80115d0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80115d8:	79fa      	ldrb	r2, [r7, #7]
 80115da:	8a7b      	ldrh	r3, [r7, #18]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff fad5 	bl	8010b8c <dhcp_option_byte>
 80115e2:	4603      	mov	r3, r0
 80115e4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	8a7a      	ldrh	r2, [r7, #18]
 80115f0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80115f2:	69bb      	ldr	r3, [r7, #24]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3720      	adds	r7, #32
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	08018c54 	.word	0x08018c54
 8011600:	08018f84 	.word	0x08018f84
 8011604:	08018cb4 	.word	0x08018cb4
 8011608:	08018fa4 	.word	0x08018fa4
 801160c:	08018fc4 	.word	0x08018fc4
 8011610:	20003c04 	.word	0x20003c04

08011614 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	4603      	mov	r3, r0
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
 8011620:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011622:	89fb      	ldrh	r3, [r7, #14]
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	81fa      	strh	r2, [r7, #14]
 8011628:	461a      	mov	r2, r3
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	4413      	add	r3, r2
 801162e:	22ff      	movs	r2, #255	@ 0xff
 8011630:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011632:	e007      	b.n	8011644 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011634:	89fb      	ldrh	r3, [r7, #14]
 8011636:	1c5a      	adds	r2, r3, #1
 8011638:	81fa      	strh	r2, [r7, #14]
 801163a:	461a      	mov	r2, r3
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	4413      	add	r3, r2
 8011640:	2200      	movs	r2, #0
 8011642:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011644:	89fb      	ldrh	r3, [r7, #14]
 8011646:	2b43      	cmp	r3, #67	@ 0x43
 8011648:	d904      	bls.n	8011654 <dhcp_option_trailer+0x40>
 801164a:	89fb      	ldrh	r3, [r7, #14]
 801164c:	f003 0303 	and.w	r3, r3, #3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d002      	beq.n	801165a <dhcp_option_trailer+0x46>
 8011654:	89fb      	ldrh	r3, [r7, #14]
 8011656:	2b43      	cmp	r3, #67	@ 0x43
 8011658:	d9ec      	bls.n	8011634 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801165a:	89fb      	ldrh	r3, [r7, #14]
 801165c:	33f0      	adds	r3, #240	@ 0xf0
 801165e:	b29b      	uxth	r3, r3
 8011660:	4619      	mov	r1, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7f6 fb8a 	bl	8007d7c <pbuf_realloc>
}
 8011668:	bf00      	nop
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d017      	beq.n	80116ae <dhcp_supplied_address+0x3e>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6a1b      	ldr	r3, [r3, #32]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d013      	beq.n	80116ae <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a1b      	ldr	r3, [r3, #32]
 801168a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	795b      	ldrb	r3, [r3, #5]
 8011690:	2b0a      	cmp	r3, #10
 8011692:	d007      	beq.n	80116a4 <dhcp_supplied_address+0x34>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	795b      	ldrb	r3, [r3, #5]
 8011698:	2b05      	cmp	r3, #5
 801169a:	d003      	beq.n	80116a4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80116a0:	2b04      	cmp	r3, #4
 80116a2:	d101      	bne.n	80116a8 <dhcp_supplied_address+0x38>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <dhcp_supplied_address+0x3a>
 80116a8:	2300      	movs	r3, #0
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	e000      	b.n	80116b0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3714      	adds	r7, #20
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80116c4:	4915      	ldr	r1, [pc, #84]	@ (801171c <etharp_free_entry+0x60>)
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	4613      	mov	r3, r2
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	440b      	add	r3, r1
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d013      	beq.n	8011700 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80116d8:	4910      	ldr	r1, [pc, #64]	@ (801171c <etharp_free_entry+0x60>)
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	4613      	mov	r3, r2
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	4413      	add	r3, r2
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	440b      	add	r3, r1
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7f6 fccb 	bl	8008084 <pbuf_free>
    arp_table[i].q = NULL;
 80116ee:	490b      	ldr	r1, [pc, #44]	@ (801171c <etharp_free_entry+0x60>)
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	4613      	mov	r3, r2
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	4413      	add	r3, r2
 80116f8:	00db      	lsls	r3, r3, #3
 80116fa:	440b      	add	r3, r1
 80116fc:	2200      	movs	r2, #0
 80116fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011700:	4906      	ldr	r1, [pc, #24]	@ (801171c <etharp_free_entry+0x60>)
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	440b      	add	r3, r1
 801170e:	3314      	adds	r3, #20
 8011710:	2200      	movs	r2, #0
 8011712:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011714:	bf00      	nop
 8011716:	3708      	adds	r7, #8
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	20003c08 	.word	0x20003c08

08011720 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011726:	2300      	movs	r3, #0
 8011728:	607b      	str	r3, [r7, #4]
 801172a:	e096      	b.n	801185a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801172c:	494f      	ldr	r1, [pc, #316]	@ (801186c <etharp_tmr+0x14c>)
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	4613      	mov	r3, r2
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	4413      	add	r3, r2
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	440b      	add	r3, r1
 801173a:	3314      	adds	r3, #20
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011740:	78fb      	ldrb	r3, [r7, #3]
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 8086 	beq.w	8011854 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011748:	4948      	ldr	r1, [pc, #288]	@ (801186c <etharp_tmr+0x14c>)
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	4613      	mov	r3, r2
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	4413      	add	r3, r2
 8011752:	00db      	lsls	r3, r3, #3
 8011754:	440b      	add	r3, r1
 8011756:	3312      	adds	r3, #18
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	3301      	adds	r3, #1
 801175c:	b298      	uxth	r0, r3
 801175e:	4943      	ldr	r1, [pc, #268]	@ (801186c <etharp_tmr+0x14c>)
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	4613      	mov	r3, r2
 8011764:	005b      	lsls	r3, r3, #1
 8011766:	4413      	add	r3, r2
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	440b      	add	r3, r1
 801176c:	3312      	adds	r3, #18
 801176e:	4602      	mov	r2, r0
 8011770:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011772:	493e      	ldr	r1, [pc, #248]	@ (801186c <etharp_tmr+0x14c>)
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	4613      	mov	r3, r2
 8011778:	005b      	lsls	r3, r3, #1
 801177a:	4413      	add	r3, r2
 801177c:	00db      	lsls	r3, r3, #3
 801177e:	440b      	add	r3, r1
 8011780:	3312      	adds	r3, #18
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011788:	d215      	bcs.n	80117b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801178a:	4938      	ldr	r1, [pc, #224]	@ (801186c <etharp_tmr+0x14c>)
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	4613      	mov	r3, r2
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	4413      	add	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	440b      	add	r3, r1
 8011798:	3314      	adds	r3, #20
 801179a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801179c:	2b01      	cmp	r3, #1
 801179e:	d10e      	bne.n	80117be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80117a0:	4932      	ldr	r1, [pc, #200]	@ (801186c <etharp_tmr+0x14c>)
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	4613      	mov	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	4413      	add	r3, r2
 80117aa:	00db      	lsls	r3, r3, #3
 80117ac:	440b      	add	r3, r1
 80117ae:	3312      	adds	r3, #18
 80117b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80117b2:	2b04      	cmp	r3, #4
 80117b4:	d903      	bls.n	80117be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff ff80 	bl	80116bc <etharp_free_entry>
 80117bc:	e04a      	b.n	8011854 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80117be:	492b      	ldr	r1, [pc, #172]	@ (801186c <etharp_tmr+0x14c>)
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	4613      	mov	r3, r2
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4413      	add	r3, r2
 80117c8:	00db      	lsls	r3, r3, #3
 80117ca:	440b      	add	r3, r1
 80117cc:	3314      	adds	r3, #20
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b03      	cmp	r3, #3
 80117d2:	d10a      	bne.n	80117ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80117d4:	4925      	ldr	r1, [pc, #148]	@ (801186c <etharp_tmr+0x14c>)
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	440b      	add	r3, r1
 80117e2:	3314      	adds	r3, #20
 80117e4:	2204      	movs	r2, #4
 80117e6:	701a      	strb	r2, [r3, #0]
 80117e8:	e034      	b.n	8011854 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80117ea:	4920      	ldr	r1, [pc, #128]	@ (801186c <etharp_tmr+0x14c>)
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	3314      	adds	r3, #20
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b04      	cmp	r3, #4
 80117fe:	d10a      	bne.n	8011816 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011800:	491a      	ldr	r1, [pc, #104]	@ (801186c <etharp_tmr+0x14c>)
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	4613      	mov	r3, r2
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	4413      	add	r3, r2
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	440b      	add	r3, r1
 801180e:	3314      	adds	r3, #20
 8011810:	2202      	movs	r2, #2
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	e01e      	b.n	8011854 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011816:	4915      	ldr	r1, [pc, #84]	@ (801186c <etharp_tmr+0x14c>)
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	4613      	mov	r3, r2
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	440b      	add	r3, r1
 8011824:	3314      	adds	r3, #20
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d113      	bne.n	8011854 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801182c:	490f      	ldr	r1, [pc, #60]	@ (801186c <etharp_tmr+0x14c>)
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4613      	mov	r3, r2
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	440b      	add	r3, r1
 801183a:	3308      	adds	r3, #8
 801183c:	6818      	ldr	r0, [r3, #0]
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	4613      	mov	r3, r2
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	4413      	add	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4a08      	ldr	r2, [pc, #32]	@ (801186c <etharp_tmr+0x14c>)
 801184a:	4413      	add	r3, r2
 801184c:	3304      	adds	r3, #4
 801184e:	4619      	mov	r1, r3
 8011850:	f000 fe84 	bl	801255c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3301      	adds	r3, #1
 8011858:	607b      	str	r3, [r7, #4]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b09      	cmp	r3, #9
 801185e:	f77f af65 	ble.w	801172c <etharp_tmr+0xc>
      }
    }
  }
}
 8011862:	bf00      	nop
 8011864:	bf00      	nop
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20003c08 	.word	0x20003c08

08011870 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08a      	sub	sp, #40	@ 0x28
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	460b      	mov	r3, r1
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801187e:	230a      	movs	r3, #10
 8011880:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011882:	230a      	movs	r3, #10
 8011884:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011886:	230a      	movs	r3, #10
 8011888:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801188a:	2300      	movs	r3, #0
 801188c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801188e:	230a      	movs	r3, #10
 8011890:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	83bb      	strh	r3, [r7, #28]
 8011896:	2300      	movs	r3, #0
 8011898:	837b      	strh	r3, [r7, #26]
 801189a:	2300      	movs	r3, #0
 801189c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801189e:	2300      	movs	r3, #0
 80118a0:	843b      	strh	r3, [r7, #32]
 80118a2:	e0ae      	b.n	8011a02 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80118a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118a8:	49a6      	ldr	r1, [pc, #664]	@ (8011b44 <etharp_find_entry+0x2d4>)
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	440b      	add	r3, r1
 80118b4:	3314      	adds	r3, #20
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80118ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80118be:	2b0a      	cmp	r3, #10
 80118c0:	d105      	bne.n	80118ce <etharp_find_entry+0x5e>
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d102      	bne.n	80118ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80118c8:	8c3b      	ldrh	r3, [r7, #32]
 80118ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80118cc:	e095      	b.n	80119fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80118ce:	7dfb      	ldrb	r3, [r7, #23]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f000 8092 	beq.w	80119fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d009      	beq.n	80118f0 <etharp_find_entry+0x80>
 80118dc:	7dfb      	ldrb	r3, [r7, #23]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d806      	bhi.n	80118f0 <etharp_find_entry+0x80>
 80118e2:	4b99      	ldr	r3, [pc, #612]	@ (8011b48 <etharp_find_entry+0x2d8>)
 80118e4:	f240 1223 	movw	r2, #291	@ 0x123
 80118e8:	4998      	ldr	r1, [pc, #608]	@ (8011b4c <etharp_find_entry+0x2dc>)
 80118ea:	4899      	ldr	r0, [pc, #612]	@ (8011b50 <etharp_find_entry+0x2e0>)
 80118ec:	f004 f948 	bl	8015b80 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d020      	beq.n	8011938 <etharp_find_entry+0xc8>
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6819      	ldr	r1, [r3, #0]
 80118fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118fe:	4891      	ldr	r0, [pc, #580]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011900:	4613      	mov	r3, r2
 8011902:	005b      	lsls	r3, r3, #1
 8011904:	4413      	add	r3, r2
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	4403      	add	r3, r0
 801190a:	3304      	adds	r3, #4
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	4299      	cmp	r1, r3
 8011910:	d112      	bne.n	8011938 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00c      	beq.n	8011932 <etharp_find_entry+0xc2>
 8011918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801191c:	4989      	ldr	r1, [pc, #548]	@ (8011b44 <etharp_find_entry+0x2d4>)
 801191e:	4613      	mov	r3, r2
 8011920:	005b      	lsls	r3, r3, #1
 8011922:	4413      	add	r3, r2
 8011924:	00db      	lsls	r3, r3, #3
 8011926:	440b      	add	r3, r1
 8011928:	3308      	adds	r3, #8
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	429a      	cmp	r2, r3
 8011930:	d102      	bne.n	8011938 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011932:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011936:	e100      	b.n	8011b3a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011938:	7dfb      	ldrb	r3, [r7, #23]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d140      	bne.n	80119c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801193e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011942:	4980      	ldr	r1, [pc, #512]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011944:	4613      	mov	r3, r2
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	4413      	add	r3, r2
 801194a:	00db      	lsls	r3, r3, #3
 801194c:	440b      	add	r3, r1
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d01a      	beq.n	801198a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011954:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011958:	497a      	ldr	r1, [pc, #488]	@ (8011b44 <etharp_find_entry+0x2d4>)
 801195a:	4613      	mov	r3, r2
 801195c:	005b      	lsls	r3, r3, #1
 801195e:	4413      	add	r3, r2
 8011960:	00db      	lsls	r3, r3, #3
 8011962:	440b      	add	r3, r1
 8011964:	3312      	adds	r3, #18
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	8bba      	ldrh	r2, [r7, #28]
 801196a:	429a      	cmp	r2, r3
 801196c:	d845      	bhi.n	80119fa <etharp_find_entry+0x18a>
            old_queue = i;
 801196e:	8c3b      	ldrh	r3, [r7, #32]
 8011970:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011972:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011976:	4973      	ldr	r1, [pc, #460]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011978:	4613      	mov	r3, r2
 801197a:	005b      	lsls	r3, r3, #1
 801197c:	4413      	add	r3, r2
 801197e:	00db      	lsls	r3, r3, #3
 8011980:	440b      	add	r3, r1
 8011982:	3312      	adds	r3, #18
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	83bb      	strh	r3, [r7, #28]
 8011988:	e037      	b.n	80119fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801198a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801198e:	496d      	ldr	r1, [pc, #436]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011990:	4613      	mov	r3, r2
 8011992:	005b      	lsls	r3, r3, #1
 8011994:	4413      	add	r3, r2
 8011996:	00db      	lsls	r3, r3, #3
 8011998:	440b      	add	r3, r1
 801199a:	3312      	adds	r3, #18
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	8b7a      	ldrh	r2, [r7, #26]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d82a      	bhi.n	80119fa <etharp_find_entry+0x18a>
            old_pending = i;
 80119a4:	8c3b      	ldrh	r3, [r7, #32]
 80119a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80119a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119ac:	4965      	ldr	r1, [pc, #404]	@ (8011b44 <etharp_find_entry+0x2d4>)
 80119ae:	4613      	mov	r3, r2
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	4413      	add	r3, r2
 80119b4:	00db      	lsls	r3, r3, #3
 80119b6:	440b      	add	r3, r1
 80119b8:	3312      	adds	r3, #18
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	837b      	strh	r3, [r7, #26]
 80119be:	e01c      	b.n	80119fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80119c0:	7dfb      	ldrb	r3, [r7, #23]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d919      	bls.n	80119fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80119c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119ca:	495e      	ldr	r1, [pc, #376]	@ (8011b44 <etharp_find_entry+0x2d4>)
 80119cc:	4613      	mov	r3, r2
 80119ce:	005b      	lsls	r3, r3, #1
 80119d0:	4413      	add	r3, r2
 80119d2:	00db      	lsls	r3, r3, #3
 80119d4:	440b      	add	r3, r1
 80119d6:	3312      	adds	r3, #18
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	8b3a      	ldrh	r2, [r7, #24]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d80c      	bhi.n	80119fa <etharp_find_entry+0x18a>
            old_stable = i;
 80119e0:	8c3b      	ldrh	r3, [r7, #32]
 80119e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80119e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119e8:	4956      	ldr	r1, [pc, #344]	@ (8011b44 <etharp_find_entry+0x2d4>)
 80119ea:	4613      	mov	r3, r2
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	4413      	add	r3, r2
 80119f0:	00db      	lsls	r3, r3, #3
 80119f2:	440b      	add	r3, r1
 80119f4:	3312      	adds	r3, #18
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119fa:	8c3b      	ldrh	r3, [r7, #32]
 80119fc:	3301      	adds	r3, #1
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	843b      	strh	r3, [r7, #32]
 8011a02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a06:	2b09      	cmp	r3, #9
 8011a08:	f77f af4c 	ble.w	80118a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011a0c:	7afb      	ldrb	r3, [r7, #11]
 8011a0e:	f003 0302 	and.w	r3, r3, #2
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d108      	bne.n	8011a28 <etharp_find_entry+0x1b8>
 8011a16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011a1a:	2b0a      	cmp	r3, #10
 8011a1c:	d107      	bne.n	8011a2e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011a1e:	7afb      	ldrb	r3, [r7, #11]
 8011a20:	f003 0301 	and.w	r3, r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a2c:	e085      	b.n	8011b3a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011a2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	dc02      	bgt.n	8011a3c <etharp_find_entry+0x1cc>
    i = empty;
 8011a36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011a38:	843b      	strh	r3, [r7, #32]
 8011a3a:	e039      	b.n	8011ab0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011a3c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011a40:	2b09      	cmp	r3, #9
 8011a42:	dc14      	bgt.n	8011a6e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011a44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011a46:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011a48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a4c:	493d      	ldr	r1, [pc, #244]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011a4e:	4613      	mov	r3, r2
 8011a50:	005b      	lsls	r3, r3, #1
 8011a52:	4413      	add	r3, r2
 8011a54:	00db      	lsls	r3, r3, #3
 8011a56:	440b      	add	r3, r1
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d018      	beq.n	8011a90 <etharp_find_entry+0x220>
 8011a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8011b48 <etharp_find_entry+0x2d8>)
 8011a60:	f240 126d 	movw	r2, #365	@ 0x16d
 8011a64:	493b      	ldr	r1, [pc, #236]	@ (8011b54 <etharp_find_entry+0x2e4>)
 8011a66:	483a      	ldr	r0, [pc, #232]	@ (8011b50 <etharp_find_entry+0x2e0>)
 8011a68:	f004 f88a 	bl	8015b80 <iprintf>
 8011a6c:	e010      	b.n	8011a90 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011a72:	2b09      	cmp	r3, #9
 8011a74:	dc02      	bgt.n	8011a7c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011a76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011a78:	843b      	strh	r3, [r7, #32]
 8011a7a:	e009      	b.n	8011a90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011a7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a80:	2b09      	cmp	r3, #9
 8011a82:	dc02      	bgt.n	8011a8a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011a84:	8bfb      	ldrh	r3, [r7, #30]
 8011a86:	843b      	strh	r3, [r7, #32]
 8011a88:	e002      	b.n	8011a90 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a8e:	e054      	b.n	8011b3a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a94:	2b09      	cmp	r3, #9
 8011a96:	dd06      	ble.n	8011aa6 <etharp_find_entry+0x236>
 8011a98:	4b2b      	ldr	r3, [pc, #172]	@ (8011b48 <etharp_find_entry+0x2d8>)
 8011a9a:	f240 127f 	movw	r2, #383	@ 0x17f
 8011a9e:	492e      	ldr	r1, [pc, #184]	@ (8011b58 <etharp_find_entry+0x2e8>)
 8011aa0:	482b      	ldr	r0, [pc, #172]	@ (8011b50 <etharp_find_entry+0x2e0>)
 8011aa2:	f004 f86d 	bl	8015b80 <iprintf>
    etharp_free_entry(i);
 8011aa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7ff fe06 	bl	80116bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ab0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ab4:	2b09      	cmp	r3, #9
 8011ab6:	dd06      	ble.n	8011ac6 <etharp_find_entry+0x256>
 8011ab8:	4b23      	ldr	r3, [pc, #140]	@ (8011b48 <etharp_find_entry+0x2d8>)
 8011aba:	f240 1283 	movw	r2, #387	@ 0x183
 8011abe:	4926      	ldr	r1, [pc, #152]	@ (8011b58 <etharp_find_entry+0x2e8>)
 8011ac0:	4823      	ldr	r0, [pc, #140]	@ (8011b50 <etharp_find_entry+0x2e0>)
 8011ac2:	f004 f85d 	bl	8015b80 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011ac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aca:	491e      	ldr	r1, [pc, #120]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011acc:	4613      	mov	r3, r2
 8011ace:	005b      	lsls	r3, r3, #1
 8011ad0:	4413      	add	r3, r2
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	440b      	add	r3, r1
 8011ad6:	3314      	adds	r3, #20
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d006      	beq.n	8011aec <etharp_find_entry+0x27c>
 8011ade:	4b1a      	ldr	r3, [pc, #104]	@ (8011b48 <etharp_find_entry+0x2d8>)
 8011ae0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011ae4:	491d      	ldr	r1, [pc, #116]	@ (8011b5c <etharp_find_entry+0x2ec>)
 8011ae6:	481a      	ldr	r0, [pc, #104]	@ (8011b50 <etharp_find_entry+0x2e0>)
 8011ae8:	f004 f84a 	bl	8015b80 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00b      	beq.n	8011b0a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6819      	ldr	r1, [r3, #0]
 8011afa:	4812      	ldr	r0, [pc, #72]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011afc:	4613      	mov	r3, r2
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	4413      	add	r3, r2
 8011b02:	00db      	lsls	r3, r3, #3
 8011b04:	4403      	add	r3, r0
 8011b06:	3304      	adds	r3, #4
 8011b08:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011b0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b0e:	490d      	ldr	r1, [pc, #52]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011b10:	4613      	mov	r3, r2
 8011b12:	005b      	lsls	r3, r3, #1
 8011b14:	4413      	add	r3, r2
 8011b16:	00db      	lsls	r3, r3, #3
 8011b18:	440b      	add	r3, r1
 8011b1a:	3312      	adds	r3, #18
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b24:	4907      	ldr	r1, [pc, #28]	@ (8011b44 <etharp_find_entry+0x2d4>)
 8011b26:	4613      	mov	r3, r2
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	4413      	add	r3, r2
 8011b2c:	00db      	lsls	r3, r3, #3
 8011b2e:	440b      	add	r3, r1
 8011b30:	3308      	adds	r3, #8
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011b36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3728      	adds	r7, #40	@ 0x28
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	20003c08 	.word	0x20003c08
 8011b48:	08019004 	.word	0x08019004
 8011b4c:	0801903c 	.word	0x0801903c
 8011b50:	0801907c 	.word	0x0801907c
 8011b54:	080190a4 	.word	0x080190a4
 8011b58:	080190bc 	.word	0x080190bc
 8011b5c:	080190d0 	.word	0x080190d0

08011b60 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b088      	sub	sp, #32
 8011b64:	af02      	add	r7, sp, #8
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
 8011b6c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011b74:	2b06      	cmp	r3, #6
 8011b76:	d006      	beq.n	8011b86 <etharp_update_arp_entry+0x26>
 8011b78:	4b48      	ldr	r3, [pc, #288]	@ (8011c9c <etharp_update_arp_entry+0x13c>)
 8011b7a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011b7e:	4948      	ldr	r1, [pc, #288]	@ (8011ca0 <etharp_update_arp_entry+0x140>)
 8011b80:	4848      	ldr	r0, [pc, #288]	@ (8011ca4 <etharp_update_arp_entry+0x144>)
 8011b82:	f003 fffd 	bl	8015b80 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d012      	beq.n	8011bb2 <etharp_update_arp_entry+0x52>
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00e      	beq.n	8011bb2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	68f9      	ldr	r1, [r7, #12]
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f001 fa9e 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8011ba0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d105      	bne.n	8011bb2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011bae:	2be0      	cmp	r3, #224	@ 0xe0
 8011bb0:	d102      	bne.n	8011bb8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011bb2:	f06f 030f 	mvn.w	r3, #15
 8011bb6:	e06c      	b.n	8011c92 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011bb8:	78fb      	ldrb	r3, [r7, #3]
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	68b8      	ldr	r0, [r7, #8]
 8011bc0:	f7ff fe56 	bl	8011870 <etharp_find_entry>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011bc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	da02      	bge.n	8011bd6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011bd0:	8afb      	ldrh	r3, [r7, #22]
 8011bd2:	b25b      	sxtb	r3, r3
 8011bd4:	e05d      	b.n	8011c92 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011bd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bda:	4933      	ldr	r1, [pc, #204]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011bdc:	4613      	mov	r3, r2
 8011bde:	005b      	lsls	r3, r3, #1
 8011be0:	4413      	add	r3, r2
 8011be2:	00db      	lsls	r3, r3, #3
 8011be4:	440b      	add	r3, r1
 8011be6:	3314      	adds	r3, #20
 8011be8:	2202      	movs	r2, #2
 8011bea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011bec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bf0:	492d      	ldr	r1, [pc, #180]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	4413      	add	r3, r2
 8011bf8:	00db      	lsls	r3, r3, #3
 8011bfa:	440b      	add	r3, r1
 8011bfc:	3308      	adds	r3, #8
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011c02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c06:	4613      	mov	r3, r2
 8011c08:	005b      	lsls	r3, r3, #1
 8011c0a:	4413      	add	r3, r2
 8011c0c:	00db      	lsls	r3, r3, #3
 8011c0e:	3308      	adds	r3, #8
 8011c10:	4a25      	ldr	r2, [pc, #148]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011c12:	4413      	add	r3, r2
 8011c14:	3304      	adds	r3, #4
 8011c16:	2206      	movs	r2, #6
 8011c18:	6879      	ldr	r1, [r7, #4]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f004 f8b9 	bl	8015d92 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011c20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c24:	4920      	ldr	r1, [pc, #128]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011c26:	4613      	mov	r3, r2
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	4413      	add	r3, r2
 8011c2c:	00db      	lsls	r3, r3, #3
 8011c2e:	440b      	add	r3, r1
 8011c30:	3312      	adds	r3, #18
 8011c32:	2200      	movs	r2, #0
 8011c34:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011c36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c3a:	491b      	ldr	r1, [pc, #108]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	005b      	lsls	r3, r3, #1
 8011c40:	4413      	add	r3, r2
 8011c42:	00db      	lsls	r3, r3, #3
 8011c44:	440b      	add	r3, r1
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d021      	beq.n	8011c90 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011c4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c50:	4915      	ldr	r1, [pc, #84]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011c52:	4613      	mov	r3, r2
 8011c54:	005b      	lsls	r3, r3, #1
 8011c56:	4413      	add	r3, r2
 8011c58:	00db      	lsls	r3, r3, #3
 8011c5a:	440b      	add	r3, r1
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011c60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c64:	4910      	ldr	r1, [pc, #64]	@ (8011ca8 <etharp_update_arp_entry+0x148>)
 8011c66:	4613      	mov	r3, r2
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	4413      	add	r3, r2
 8011c6c:	00db      	lsls	r3, r3, #3
 8011c6e:	440b      	add	r3, r1
 8011c70:	2200      	movs	r2, #0
 8011c72:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6939      	ldr	r1, [r7, #16]
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f002 f999 	bl	8013fbc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011c8a:	6938      	ldr	r0, [r7, #16]
 8011c8c:	f7f6 f9fa 	bl	8008084 <pbuf_free>
  }
  return ERR_OK;
 8011c90:	2300      	movs	r3, #0
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3718      	adds	r7, #24
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	08019004 	.word	0x08019004
 8011ca0:	080190fc 	.word	0x080190fc
 8011ca4:	0801907c 	.word	0x0801907c
 8011ca8:	20003c08 	.word	0x20003c08

08011cac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011cac:	b5b0      	push	{r4, r5, r7, lr}
 8011cae:	b08a      	sub	sp, #40	@ 0x28
 8011cb0:	af04      	add	r7, sp, #16
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d107      	bne.n	8011ccc <etharp_input+0x20>
 8011cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8011df0 <etharp_input+0x144>)
 8011cbe:	f240 228a 	movw	r2, #650	@ 0x28a
 8011cc2:	494c      	ldr	r1, [pc, #304]	@ (8011df4 <etharp_input+0x148>)
 8011cc4:	484c      	ldr	r0, [pc, #304]	@ (8011df8 <etharp_input+0x14c>)
 8011cc6:	f003 ff5b 	bl	8015b80 <iprintf>
 8011cca:	e08d      	b.n	8011de8 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cdc:	d10c      	bne.n	8011cf8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011ce2:	2b06      	cmp	r3, #6
 8011ce4:	d108      	bne.n	8011cf8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011cea:	2b04      	cmp	r3, #4
 8011cec:	d104      	bne.n	8011cf8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	885b      	ldrh	r3, [r3, #2]
 8011cf2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011cf4:	2b08      	cmp	r3, #8
 8011cf6:	d00f      	beq.n	8011d18 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8011cf8:	4b40      	ldr	r3, [pc, #256]	@ (8011dfc <etharp_input+0x150>)
 8011cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	4b3e      	ldr	r3, [pc, #248]	@ (8011dfc <etharp_input+0x150>)
 8011d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011d04:	4b3d      	ldr	r3, [pc, #244]	@ (8011dfc <etharp_input+0x150>)
 8011d06:	8bdb      	ldrh	r3, [r3, #30]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8011dfc <etharp_input+0x150>)
 8011d0e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7f6 f9b7 	bl	8008084 <pbuf_free>
    return;
 8011d16:	e067      	b.n	8011de8 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 8011d18:	4b38      	ldr	r3, [pc, #224]	@ (8011dfc <etharp_input+0x150>)
 8011d1a:	8b5b      	ldrh	r3, [r3, #26]
 8011d1c:	3301      	adds	r3, #1
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	4b36      	ldr	r3, [pc, #216]	@ (8011dfc <etharp_input+0x150>)
 8011d22:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	330e      	adds	r3, #14
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	3318      	adds	r3, #24
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	3304      	adds	r3, #4
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d102      	bne.n	8011d44 <etharp_input+0x98>
    for_us = 0;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	75fb      	strb	r3, [r7, #23]
 8011d42:	e009      	b.n	8011d58 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	3304      	adds	r3, #4
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	bf0c      	ite	eq
 8011d50:	2301      	moveq	r3, #1
 8011d52:	2300      	movne	r3, #0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	f103 0208 	add.w	r2, r3, #8
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <etharp_input+0xbc>
 8011d64:	2301      	movs	r3, #1
 8011d66:	e000      	b.n	8011d6a <etharp_input+0xbe>
 8011d68:	2302      	movs	r3, #2
 8011d6a:	f107 010c 	add.w	r1, r7, #12
 8011d6e:	6838      	ldr	r0, [r7, #0]
 8011d70:	f7ff fef6 	bl	8011b60 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	88db      	ldrh	r3, [r3, #6]
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011d7e:	d003      	beq.n	8011d88 <etharp_input+0xdc>
 8011d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d84:	d01e      	beq.n	8011dc4 <etharp_input+0x118>
 8011d86:	e024      	b.n	8011dd2 <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d028      	beq.n	8011de0 <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011da4:	693a      	ldr	r2, [r7, #16]
 8011da6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011da8:	2102      	movs	r1, #2
 8011daa:	9103      	str	r1, [sp, #12]
 8011dac:	f107 010c 	add.w	r1, r7, #12
 8011db0:	9102      	str	r1, [sp, #8]
 8011db2:	9201      	str	r2, [sp, #4]
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	462b      	mov	r3, r5
 8011db8:	4622      	mov	r2, r4
 8011dba:	4601      	mov	r1, r0
 8011dbc:	6838      	ldr	r0, [r7, #0]
 8011dbe:	f000 fb11 	bl	80123e4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8011dc2:	e00d      	b.n	8011de0 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8011dc4:	f107 030c 	add.w	r3, r7, #12
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6838      	ldr	r0, [r7, #0]
 8011dcc:	f7fe f9f0 	bl	80101b0 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8011dd0:	e007      	b.n	8011de2 <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8011dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8011dfc <etharp_input+0x150>)
 8011dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	4b08      	ldr	r3, [pc, #32]	@ (8011dfc <etharp_input+0x150>)
 8011ddc:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 8011dde:	e000      	b.n	8011de2 <etharp_input+0x136>
      break;
 8011de0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7f6 f94e 	bl	8008084 <pbuf_free>
}
 8011de8:	3718      	adds	r7, #24
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bdb0      	pop	{r4, r5, r7, pc}
 8011dee:	bf00      	nop
 8011df0:	08019004 	.word	0x08019004
 8011df4:	08019154 	.word	0x08019154
 8011df8:	0801907c 	.word	0x0801907c
 8011dfc:	20003a9c 	.word	0x20003a9c

08011e00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b086      	sub	sp, #24
 8011e04:	af02      	add	r7, sp, #8
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011e0e:	79fa      	ldrb	r2, [r7, #7]
 8011e10:	4944      	ldr	r1, [pc, #272]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e12:	4613      	mov	r3, r2
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4413      	add	r3, r2
 8011e18:	00db      	lsls	r3, r3, #3
 8011e1a:	440b      	add	r3, r1
 8011e1c:	3314      	adds	r3, #20
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d806      	bhi.n	8011e32 <etharp_output_to_arp_index+0x32>
 8011e24:	4b40      	ldr	r3, [pc, #256]	@ (8011f28 <etharp_output_to_arp_index+0x128>)
 8011e26:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011e2a:	4940      	ldr	r1, [pc, #256]	@ (8011f2c <etharp_output_to_arp_index+0x12c>)
 8011e2c:	4840      	ldr	r0, [pc, #256]	@ (8011f30 <etharp_output_to_arp_index+0x130>)
 8011e2e:	f003 fea7 	bl	8015b80 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011e32:	79fa      	ldrb	r2, [r7, #7]
 8011e34:	493b      	ldr	r1, [pc, #236]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e36:	4613      	mov	r3, r2
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	4413      	add	r3, r2
 8011e3c:	00db      	lsls	r3, r3, #3
 8011e3e:	440b      	add	r3, r1
 8011e40:	3314      	adds	r3, #20
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d153      	bne.n	8011ef0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011e48:	79fa      	ldrb	r2, [r7, #7]
 8011e4a:	4936      	ldr	r1, [pc, #216]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	005b      	lsls	r3, r3, #1
 8011e50:	4413      	add	r3, r2
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	440b      	add	r3, r1
 8011e56:	3312      	adds	r3, #18
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011e5e:	d919      	bls.n	8011e94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011e60:	79fa      	ldrb	r2, [r7, #7]
 8011e62:	4613      	mov	r3, r2
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	4413      	add	r3, r2
 8011e68:	00db      	lsls	r3, r3, #3
 8011e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3304      	adds	r3, #4
 8011e70:	4619      	mov	r1, r3
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f000 fb72 	bl	801255c <etharp_request>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d138      	bne.n	8011ef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e7e:	79fa      	ldrb	r2, [r7, #7]
 8011e80:	4928      	ldr	r1, [pc, #160]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e82:	4613      	mov	r3, r2
 8011e84:	005b      	lsls	r3, r3, #1
 8011e86:	4413      	add	r3, r2
 8011e88:	00db      	lsls	r3, r3, #3
 8011e8a:	440b      	add	r3, r1
 8011e8c:	3314      	adds	r3, #20
 8011e8e:	2203      	movs	r2, #3
 8011e90:	701a      	strb	r2, [r3, #0]
 8011e92:	e02d      	b.n	8011ef0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011e94:	79fa      	ldrb	r2, [r7, #7]
 8011e96:	4923      	ldr	r1, [pc, #140]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011e98:	4613      	mov	r3, r2
 8011e9a:	005b      	lsls	r3, r3, #1
 8011e9c:	4413      	add	r3, r2
 8011e9e:	00db      	lsls	r3, r3, #3
 8011ea0:	440b      	add	r3, r1
 8011ea2:	3312      	adds	r3, #18
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011eaa:	d321      	bcc.n	8011ef0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011eac:	79fa      	ldrb	r2, [r7, #7]
 8011eae:	4613      	mov	r3, r2
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	4413      	add	r3, r2
 8011eb4:	00db      	lsls	r3, r3, #3
 8011eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011eb8:	4413      	add	r3, r2
 8011eba:	1d19      	adds	r1, r3, #4
 8011ebc:	79fa      	ldrb	r2, [r7, #7]
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	005b      	lsls	r3, r3, #1
 8011ec2:	4413      	add	r3, r2
 8011ec4:	00db      	lsls	r3, r3, #3
 8011ec6:	3308      	adds	r3, #8
 8011ec8:	4a16      	ldr	r2, [pc, #88]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011eca:	4413      	add	r3, r2
 8011ecc:	3304      	adds	r3, #4
 8011ece:	461a      	mov	r2, r3
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f000 fb21 	bl	8012518 <etharp_request_dst>
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d109      	bne.n	8011ef0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011edc:	79fa      	ldrb	r2, [r7, #7]
 8011ede:	4911      	ldr	r1, [pc, #68]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011ee0:	4613      	mov	r3, r2
 8011ee2:	005b      	lsls	r3, r3, #1
 8011ee4:	4413      	add	r3, r2
 8011ee6:	00db      	lsls	r3, r3, #3
 8011ee8:	440b      	add	r3, r1
 8011eea:	3314      	adds	r3, #20
 8011eec:	2203      	movs	r2, #3
 8011eee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8011ef6:	79fa      	ldrb	r2, [r7, #7]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	4413      	add	r3, r2
 8011efe:	00db      	lsls	r3, r3, #3
 8011f00:	3308      	adds	r3, #8
 8011f02:	4a08      	ldr	r2, [pc, #32]	@ (8011f24 <etharp_output_to_arp_index+0x124>)
 8011f04:	4413      	add	r3, r2
 8011f06:	3304      	adds	r3, #4
 8011f08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011f0c:	9200      	str	r2, [sp, #0]
 8011f0e:	460a      	mov	r2, r1
 8011f10:	68b9      	ldr	r1, [r7, #8]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f002 f852 	bl	8013fbc <ethernet_output>
 8011f18:	4603      	mov	r3, r0
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20003c08 	.word	0x20003c08
 8011f28:	08019004 	.word	0x08019004
 8011f2c:	08019174 	.word	0x08019174
 8011f30:	0801907c 	.word	0x0801907c

08011f34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b08a      	sub	sp, #40	@ 0x28
 8011f38:	af02      	add	r7, sp, #8
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d106      	bne.n	8011f58 <etharp_output+0x24>
 8011f4a:	4b76      	ldr	r3, [pc, #472]	@ (8012124 <etharp_output+0x1f0>)
 8011f4c:	f240 321e 	movw	r2, #798	@ 0x31e
 8011f50:	4975      	ldr	r1, [pc, #468]	@ (8012128 <etharp_output+0x1f4>)
 8011f52:	4876      	ldr	r0, [pc, #472]	@ (801212c <etharp_output+0x1f8>)
 8011f54:	f003 fe14 	bl	8015b80 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <etharp_output+0x38>
 8011f5e:	4b71      	ldr	r3, [pc, #452]	@ (8012124 <etharp_output+0x1f0>)
 8011f60:	f240 321f 	movw	r2, #799	@ 0x31f
 8011f64:	4972      	ldr	r1, [pc, #456]	@ (8012130 <etharp_output+0x1fc>)
 8011f66:	4871      	ldr	r0, [pc, #452]	@ (801212c <etharp_output+0x1f8>)
 8011f68:	f003 fe0a 	bl	8015b80 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <etharp_output+0x4c>
 8011f72:	4b6c      	ldr	r3, [pc, #432]	@ (8012124 <etharp_output+0x1f0>)
 8011f74:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011f78:	496e      	ldr	r1, [pc, #440]	@ (8012134 <etharp_output+0x200>)
 8011f7a:	486c      	ldr	r0, [pc, #432]	@ (801212c <etharp_output+0x1f8>)
 8011f7c:	f003 fe00 	bl	8015b80 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	68f9      	ldr	r1, [r7, #12]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f001 f8a8 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d002      	beq.n	8011f98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011f92:	4b69      	ldr	r3, [pc, #420]	@ (8012138 <etharp_output+0x204>)
 8011f94:	61fb      	str	r3, [r7, #28]
 8011f96:	e0b5      	b.n	8012104 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011fa0:	2be0      	cmp	r3, #224	@ 0xe0
 8011fa2:	d118      	bne.n	8011fd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011fac:	235e      	movs	r3, #94	@ 0x5e
 8011fae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	3302      	adds	r3, #2
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	3303      	adds	r3, #3
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011fce:	f107 0310 	add.w	r3, r7, #16
 8011fd2:	61fb      	str	r3, [r7, #28]
 8011fd4:	e096      	b.n	8012104 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	405a      	eors	r2, r3
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	3308      	adds	r3, #8
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4013      	ands	r3, r2
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d012      	beq.n	8012014 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ff4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d00b      	beq.n	8012014 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	330c      	adds	r3, #12
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d003      	beq.n	801200e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	330c      	adds	r3, #12
 801200a:	61bb      	str	r3, [r7, #24]
 801200c:	e002      	b.n	8012014 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801200e:	f06f 0303 	mvn.w	r3, #3
 8012012:	e083      	b.n	801211c <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012014:	4b49      	ldr	r3, [pc, #292]	@ (801213c <etharp_output+0x208>)
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	4619      	mov	r1, r3
 801201a:	4a49      	ldr	r2, [pc, #292]	@ (8012140 <etharp_output+0x20c>)
 801201c:	460b      	mov	r3, r1
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	440b      	add	r3, r1
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	4413      	add	r3, r2
 8012026:	3314      	adds	r3, #20
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d92b      	bls.n	8012086 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801202e:	4b43      	ldr	r3, [pc, #268]	@ (801213c <etharp_output+0x208>)
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	4619      	mov	r1, r3
 8012034:	4a42      	ldr	r2, [pc, #264]	@ (8012140 <etharp_output+0x20c>)
 8012036:	460b      	mov	r3, r1
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	440b      	add	r3, r1
 801203c:	00db      	lsls	r3, r3, #3
 801203e:	4413      	add	r3, r2
 8012040:	3308      	adds	r3, #8
 8012042:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	429a      	cmp	r2, r3
 8012048:	d11d      	bne.n	8012086 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	4b3b      	ldr	r3, [pc, #236]	@ (801213c <etharp_output+0x208>)
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	4618      	mov	r0, r3
 8012054:	493a      	ldr	r1, [pc, #232]	@ (8012140 <etharp_output+0x20c>)
 8012056:	4603      	mov	r3, r0
 8012058:	005b      	lsls	r3, r3, #1
 801205a:	4403      	add	r3, r0
 801205c:	00db      	lsls	r3, r3, #3
 801205e:	440b      	add	r3, r1
 8012060:	3304      	adds	r3, #4
 8012062:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012064:	429a      	cmp	r2, r3
 8012066:	d10e      	bne.n	8012086 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8012068:	4b36      	ldr	r3, [pc, #216]	@ (8012144 <etharp_output+0x210>)
 801206a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801206c:	3301      	adds	r3, #1
 801206e:	b29a      	uxth	r2, r3
 8012070:	4b34      	ldr	r3, [pc, #208]	@ (8012144 <etharp_output+0x210>)
 8012072:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012074:	4b31      	ldr	r3, [pc, #196]	@ (801213c <etharp_output+0x208>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	461a      	mov	r2, r3
 801207a:	68b9      	ldr	r1, [r7, #8]
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f7ff febf 	bl	8011e00 <etharp_output_to_arp_index>
 8012082:	4603      	mov	r3, r0
 8012084:	e04a      	b.n	801211c <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012086:	2300      	movs	r3, #0
 8012088:	75fb      	strb	r3, [r7, #23]
 801208a:	e031      	b.n	80120f0 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801208c:	7dfa      	ldrb	r2, [r7, #23]
 801208e:	492c      	ldr	r1, [pc, #176]	@ (8012140 <etharp_output+0x20c>)
 8012090:	4613      	mov	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	4413      	add	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	440b      	add	r3, r1
 801209a:	3314      	adds	r3, #20
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d923      	bls.n	80120ea <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80120a2:	7dfa      	ldrb	r2, [r7, #23]
 80120a4:	4926      	ldr	r1, [pc, #152]	@ (8012140 <etharp_output+0x20c>)
 80120a6:	4613      	mov	r3, r2
 80120a8:	005b      	lsls	r3, r3, #1
 80120aa:	4413      	add	r3, r2
 80120ac:	00db      	lsls	r3, r3, #3
 80120ae:	440b      	add	r3, r1
 80120b0:	3308      	adds	r3, #8
 80120b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d117      	bne.n	80120ea <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	6819      	ldr	r1, [r3, #0]
 80120be:	7dfa      	ldrb	r2, [r7, #23]
 80120c0:	481f      	ldr	r0, [pc, #124]	@ (8012140 <etharp_output+0x20c>)
 80120c2:	4613      	mov	r3, r2
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	4403      	add	r3, r0
 80120cc:	3304      	adds	r3, #4
 80120ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80120d0:	4299      	cmp	r1, r3
 80120d2:	d10a      	bne.n	80120ea <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80120d4:	4a19      	ldr	r2, [pc, #100]	@ (801213c <etharp_output+0x208>)
 80120d6:	7dfb      	ldrb	r3, [r7, #23]
 80120d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80120da:	7dfb      	ldrb	r3, [r7, #23]
 80120dc:	461a      	mov	r2, r3
 80120de:	68b9      	ldr	r1, [r7, #8]
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f7ff fe8d 	bl	8011e00 <etharp_output_to_arp_index>
 80120e6:	4603      	mov	r3, r0
 80120e8:	e018      	b.n	801211c <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80120ea:	7dfb      	ldrb	r3, [r7, #23]
 80120ec:	3301      	adds	r3, #1
 80120ee:	75fb      	strb	r3, [r7, #23]
 80120f0:	7dfb      	ldrb	r3, [r7, #23]
 80120f2:	2b09      	cmp	r3, #9
 80120f4:	d9ca      	bls.n	801208c <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80120f6:	68ba      	ldr	r2, [r7, #8]
 80120f8:	69b9      	ldr	r1, [r7, #24]
 80120fa:	68f8      	ldr	r0, [r7, #12]
 80120fc:	f000 f824 	bl	8012148 <etharp_query>
 8012100:	4603      	mov	r3, r0
 8012102:	e00b      	b.n	801211c <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801210a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801210e:	9300      	str	r3, [sp, #0]
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	68b9      	ldr	r1, [r7, #8]
 8012114:	68f8      	ldr	r0, [r7, #12]
 8012116:	f001 ff51 	bl	8013fbc <ethernet_output>
 801211a:	4603      	mov	r3, r0
}
 801211c:	4618      	mov	r0, r3
 801211e:	3720      	adds	r7, #32
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	08019004 	.word	0x08019004
 8012128:	08019154 	.word	0x08019154
 801212c:	0801907c 	.word	0x0801907c
 8012130:	080191a4 	.word	0x080191a4
 8012134:	08019144 	.word	0x08019144
 8012138:	0801999c 	.word	0x0801999c
 801213c:	20003cf8 	.word	0x20003cf8
 8012140:	20003c08 	.word	0x20003c08
 8012144:	20003a9c 	.word	0x20003a9c

08012148 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b08c      	sub	sp, #48	@ 0x30
 801214c:	af02      	add	r7, sp, #8
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	3326      	adds	r3, #38	@ 0x26
 8012158:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801215a:	23ff      	movs	r3, #255	@ 0xff
 801215c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	68f9      	ldr	r1, [r7, #12]
 801216a:	4618      	mov	r0, r3
 801216c:	f000 ffb6 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10c      	bne.n	8012190 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801217e:	2be0      	cmp	r3, #224	@ 0xe0
 8012180:	d006      	beq.n	8012190 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d003      	beq.n	8012190 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d102      	bne.n	8012196 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012190:	f06f 030f 	mvn.w	r3, #15
 8012194:	e110      	b.n	80123b8 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	2101      	movs	r1, #1
 801219a:	68b8      	ldr	r0, [r7, #8]
 801219c:	f7ff fb68 	bl	8011870 <etharp_find_entry>
 80121a0:	4603      	mov	r3, r0
 80121a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80121a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	da0b      	bge.n	80121c4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d005      	beq.n	80121be <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80121b2:	4b83      	ldr	r3, [pc, #524]	@ (80123c0 <etharp_query+0x278>)
 80121b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80121b6:	3301      	adds	r3, #1
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	4b81      	ldr	r3, [pc, #516]	@ (80123c0 <etharp_query+0x278>)
 80121bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 80121be:	8a7b      	ldrh	r3, [r7, #18]
 80121c0:	b25b      	sxtb	r3, r3
 80121c2:	e0f9      	b.n	80123b8 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80121c4:	8a7b      	ldrh	r3, [r7, #18]
 80121c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80121c8:	d906      	bls.n	80121d8 <etharp_query+0x90>
 80121ca:	4b7e      	ldr	r3, [pc, #504]	@ (80123c4 <etharp_query+0x27c>)
 80121cc:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80121d0:	497d      	ldr	r1, [pc, #500]	@ (80123c8 <etharp_query+0x280>)
 80121d2:	487e      	ldr	r0, [pc, #504]	@ (80123cc <etharp_query+0x284>)
 80121d4:	f003 fcd4 	bl	8015b80 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80121d8:	8a7b      	ldrh	r3, [r7, #18]
 80121da:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80121dc:	7c7a      	ldrb	r2, [r7, #17]
 80121de:	497c      	ldr	r1, [pc, #496]	@ (80123d0 <etharp_query+0x288>)
 80121e0:	4613      	mov	r3, r2
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	440b      	add	r3, r1
 80121ea:	3314      	adds	r3, #20
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d115      	bne.n	801221e <etharp_query+0xd6>
    is_new_entry = 1;
 80121f2:	2301      	movs	r3, #1
 80121f4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80121f6:	7c7a      	ldrb	r2, [r7, #17]
 80121f8:	4975      	ldr	r1, [pc, #468]	@ (80123d0 <etharp_query+0x288>)
 80121fa:	4613      	mov	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	4413      	add	r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	440b      	add	r3, r1
 8012204:	3314      	adds	r3, #20
 8012206:	2201      	movs	r2, #1
 8012208:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801220a:	7c7a      	ldrb	r2, [r7, #17]
 801220c:	4970      	ldr	r1, [pc, #448]	@ (80123d0 <etharp_query+0x288>)
 801220e:	4613      	mov	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	440b      	add	r3, r1
 8012218:	3308      	adds	r3, #8
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801221e:	7c7a      	ldrb	r2, [r7, #17]
 8012220:	496b      	ldr	r1, [pc, #428]	@ (80123d0 <etharp_query+0x288>)
 8012222:	4613      	mov	r3, r2
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	4413      	add	r3, r2
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	440b      	add	r3, r1
 801222c:	3314      	adds	r3, #20
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d011      	beq.n	8012258 <etharp_query+0x110>
 8012234:	7c7a      	ldrb	r2, [r7, #17]
 8012236:	4966      	ldr	r1, [pc, #408]	@ (80123d0 <etharp_query+0x288>)
 8012238:	4613      	mov	r3, r2
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	4413      	add	r3, r2
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	440b      	add	r3, r1
 8012242:	3314      	adds	r3, #20
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d806      	bhi.n	8012258 <etharp_query+0x110>
 801224a:	4b5e      	ldr	r3, [pc, #376]	@ (80123c4 <etharp_query+0x27c>)
 801224c:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012250:	4960      	ldr	r1, [pc, #384]	@ (80123d4 <etharp_query+0x28c>)
 8012252:	485e      	ldr	r0, [pc, #376]	@ (80123cc <etharp_query+0x284>)
 8012254:	f003 fc94 	bl	8015b80 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012258:	6a3b      	ldr	r3, [r7, #32]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d102      	bne.n	8012264 <etharp_query+0x11c>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10c      	bne.n	801227e <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012264:	68b9      	ldr	r1, [r7, #8]
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f000 f978 	bl	801255c <etharp_request>
 801226c:	4603      	mov	r3, r0
 801226e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d102      	bne.n	801227e <etharp_query+0x136>
      return result;
 8012278:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801227c:	e09c      	b.n	80123b8 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d106      	bne.n	8012292 <etharp_query+0x14a>
 8012284:	4b4f      	ldr	r3, [pc, #316]	@ (80123c4 <etharp_query+0x27c>)
 8012286:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801228a:	4953      	ldr	r1, [pc, #332]	@ (80123d8 <etharp_query+0x290>)
 801228c:	484f      	ldr	r0, [pc, #316]	@ (80123cc <etharp_query+0x284>)
 801228e:	f003 fc77 	bl	8015b80 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012292:	7c7a      	ldrb	r2, [r7, #17]
 8012294:	494e      	ldr	r1, [pc, #312]	@ (80123d0 <etharp_query+0x288>)
 8012296:	4613      	mov	r3, r2
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	4413      	add	r3, r2
 801229c:	00db      	lsls	r3, r3, #3
 801229e:	440b      	add	r3, r1
 80122a0:	3314      	adds	r3, #20
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d917      	bls.n	80122d8 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80122a8:	4a4c      	ldr	r2, [pc, #304]	@ (80123dc <etharp_query+0x294>)
 80122aa:	7c7b      	ldrb	r3, [r7, #17]
 80122ac:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80122ae:	7c7a      	ldrb	r2, [r7, #17]
 80122b0:	4613      	mov	r3, r2
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	4413      	add	r3, r2
 80122b6:	00db      	lsls	r3, r3, #3
 80122b8:	3308      	adds	r3, #8
 80122ba:	4a45      	ldr	r2, [pc, #276]	@ (80123d0 <etharp_query+0x288>)
 80122bc:	4413      	add	r3, r2
 80122be:	3304      	adds	r3, #4
 80122c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80122c4:	9200      	str	r2, [sp, #0]
 80122c6:	697a      	ldr	r2, [r7, #20]
 80122c8:	6879      	ldr	r1, [r7, #4]
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	f001 fe76 	bl	8013fbc <ethernet_output>
 80122d0:	4603      	mov	r3, r0
 80122d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80122d6:	e06d      	b.n	80123b4 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80122d8:	7c7a      	ldrb	r2, [r7, #17]
 80122da:	493d      	ldr	r1, [pc, #244]	@ (80123d0 <etharp_query+0x288>)
 80122dc:	4613      	mov	r3, r2
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	4413      	add	r3, r2
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	440b      	add	r3, r1
 80122e6:	3314      	adds	r3, #20
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d162      	bne.n	80123b4 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80122f6:	e01c      	b.n	8012332 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	895a      	ldrh	r2, [r3, #10]
 80122fc:	69fb      	ldr	r3, [r7, #28]
 80122fe:	891b      	ldrh	r3, [r3, #8]
 8012300:	429a      	cmp	r2, r3
 8012302:	d10a      	bne.n	801231a <etharp_query+0x1d2>
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d006      	beq.n	801231a <etharp_query+0x1d2>
 801230c:	4b2d      	ldr	r3, [pc, #180]	@ (80123c4 <etharp_query+0x27c>)
 801230e:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012312:	4933      	ldr	r1, [pc, #204]	@ (80123e0 <etharp_query+0x298>)
 8012314:	482d      	ldr	r0, [pc, #180]	@ (80123cc <etharp_query+0x284>)
 8012316:	f003 fc33 	bl	8015b80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	7b1b      	ldrb	r3, [r3, #12]
 801231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012322:	2b00      	cmp	r3, #0
 8012324:	d002      	beq.n	801232c <etharp_query+0x1e4>
        copy_needed = 1;
 8012326:	2301      	movs	r3, #1
 8012328:	61bb      	str	r3, [r7, #24]
        break;
 801232a:	e005      	b.n	8012338 <etharp_query+0x1f0>
      }
      p = p->next;
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d1df      	bne.n	80122f8 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d007      	beq.n	801234e <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012344:	200e      	movs	r0, #14
 8012346:	f7f6 fa4d 	bl	80087e4 <pbuf_clone>
 801234a:	61f8      	str	r0, [r7, #28]
 801234c:	e004      	b.n	8012358 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012352:	69f8      	ldr	r0, [r7, #28]
 8012354:	f7f5 ff3c 	bl	80081d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d021      	beq.n	80123a2 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801235e:	7c7a      	ldrb	r2, [r7, #17]
 8012360:	491b      	ldr	r1, [pc, #108]	@ (80123d0 <etharp_query+0x288>)
 8012362:	4613      	mov	r3, r2
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	4413      	add	r3, r2
 8012368:	00db      	lsls	r3, r3, #3
 801236a:	440b      	add	r3, r1
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00a      	beq.n	8012388 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012372:	7c7a      	ldrb	r2, [r7, #17]
 8012374:	4916      	ldr	r1, [pc, #88]	@ (80123d0 <etharp_query+0x288>)
 8012376:	4613      	mov	r3, r2
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	4413      	add	r3, r2
 801237c:	00db      	lsls	r3, r3, #3
 801237e:	440b      	add	r3, r1
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4618      	mov	r0, r3
 8012384:	f7f5 fe7e 	bl	8008084 <pbuf_free>
      }
      arp_table[i].q = p;
 8012388:	7c7a      	ldrb	r2, [r7, #17]
 801238a:	4911      	ldr	r1, [pc, #68]	@ (80123d0 <etharp_query+0x288>)
 801238c:	4613      	mov	r3, r2
 801238e:	005b      	lsls	r3, r3, #1
 8012390:	4413      	add	r3, r2
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	440b      	add	r3, r1
 8012396:	69fa      	ldr	r2, [r7, #28]
 8012398:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801239a:	2300      	movs	r3, #0
 801239c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80123a0:	e008      	b.n	80123b4 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80123a2:	4b07      	ldr	r3, [pc, #28]	@ (80123c0 <etharp_query+0x278>)
 80123a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80123a6:	3301      	adds	r3, #1
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	4b05      	ldr	r3, [pc, #20]	@ (80123c0 <etharp_query+0x278>)
 80123ac:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80123ae:	23ff      	movs	r3, #255	@ 0xff
 80123b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80123b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3728      	adds	r7, #40	@ 0x28
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	20003a9c 	.word	0x20003a9c
 80123c4:	08019004 	.word	0x08019004
 80123c8:	080191b0 	.word	0x080191b0
 80123cc:	0801907c 	.word	0x0801907c
 80123d0:	20003c08 	.word	0x20003c08
 80123d4:	080191c0 	.word	0x080191c0
 80123d8:	080191a4 	.word	0x080191a4
 80123dc:	20003cf8 	.word	0x20003cf8
 80123e0:	080191e8 	.word	0x080191e8

080123e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08a      	sub	sp, #40	@ 0x28
 80123e8:	af02      	add	r7, sp, #8
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80123f2:	2300      	movs	r3, #0
 80123f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <etharp_raw+0x26>
 80123fc:	4b40      	ldr	r3, [pc, #256]	@ (8012500 <etharp_raw+0x11c>)
 80123fe:	f240 4257 	movw	r2, #1111	@ 0x457
 8012402:	4940      	ldr	r1, [pc, #256]	@ (8012504 <etharp_raw+0x120>)
 8012404:	4840      	ldr	r0, [pc, #256]	@ (8012508 <etharp_raw+0x124>)
 8012406:	f003 fbbb 	bl	8015b80 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801240a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801240e:	211c      	movs	r1, #28
 8012410:	200e      	movs	r0, #14
 8012412:	f7f5 fb55 	bl	8007ac0 <pbuf_alloc>
 8012416:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d108      	bne.n	8012430 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801241e:	4b3b      	ldr	r3, [pc, #236]	@ (801250c <etharp_raw+0x128>)
 8012420:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012422:	3301      	adds	r3, #1
 8012424:	b29a      	uxth	r2, r3
 8012426:	4b39      	ldr	r3, [pc, #228]	@ (801250c <etharp_raw+0x128>)
 8012428:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801242a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801242e:	e063      	b.n	80124f8 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	895b      	ldrh	r3, [r3, #10]
 8012434:	2b1b      	cmp	r3, #27
 8012436:	d806      	bhi.n	8012446 <etharp_raw+0x62>
 8012438:	4b31      	ldr	r3, [pc, #196]	@ (8012500 <etharp_raw+0x11c>)
 801243a:	f240 4262 	movw	r2, #1122	@ 0x462
 801243e:	4934      	ldr	r1, [pc, #208]	@ (8012510 <etharp_raw+0x12c>)
 8012440:	4831      	ldr	r0, [pc, #196]	@ (8012508 <etharp_raw+0x124>)
 8012442:	f003 fb9d 	bl	8015b80 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801244c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801244e:	4618      	mov	r0, r3
 8012450:	f7f4 f9f2 	bl	8006838 <lwip_htons>
 8012454:	4603      	mov	r3, r0
 8012456:	461a      	mov	r2, r3
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012462:	2b06      	cmp	r3, #6
 8012464:	d006      	beq.n	8012474 <etharp_raw+0x90>
 8012466:	4b26      	ldr	r3, [pc, #152]	@ (8012500 <etharp_raw+0x11c>)
 8012468:	f240 4269 	movw	r2, #1129	@ 0x469
 801246c:	4929      	ldr	r1, [pc, #164]	@ (8012514 <etharp_raw+0x130>)
 801246e:	4826      	ldr	r0, [pc, #152]	@ (8012508 <etharp_raw+0x124>)
 8012470:	f003 fb86 	bl	8015b80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	3308      	adds	r3, #8
 8012478:	2206      	movs	r2, #6
 801247a:	6839      	ldr	r1, [r7, #0]
 801247c:	4618      	mov	r0, r3
 801247e:	f003 fc88 	bl	8015d92 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	3312      	adds	r3, #18
 8012486:	2206      	movs	r2, #6
 8012488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801248a:	4618      	mov	r0, r3
 801248c:	f003 fc81 	bl	8015d92 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	330e      	adds	r3, #14
 8012494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012496:	6812      	ldr	r2, [r2, #0]
 8012498:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	3318      	adds	r3, #24
 801249e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124a0:	6812      	ldr	r2, [r2, #0]
 80124a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	2200      	movs	r2, #0
 80124a8:	701a      	strb	r2, [r3, #0]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f042 0201 	orr.w	r2, r2, #1
 80124b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2200      	movs	r2, #0
 80124b6:	f042 0208 	orr.w	r2, r2, #8
 80124ba:	709a      	strb	r2, [r3, #2]
 80124bc:	2200      	movs	r2, #0
 80124be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	2206      	movs	r2, #6
 80124c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	2204      	movs	r2, #4
 80124ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80124cc:	f640 0306 	movw	r3, #2054	@ 0x806
 80124d0:	9300      	str	r3, [sp, #0]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	68ba      	ldr	r2, [r7, #8]
 80124d6:	69b9      	ldr	r1, [r7, #24]
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f001 fd6f 	bl	8013fbc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80124de:	4b0b      	ldr	r3, [pc, #44]	@ (801250c <etharp_raw+0x128>)
 80124e0:	8b1b      	ldrh	r3, [r3, #24]
 80124e2:	3301      	adds	r3, #1
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	4b09      	ldr	r3, [pc, #36]	@ (801250c <etharp_raw+0x128>)
 80124e8:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80124ea:	69b8      	ldr	r0, [r7, #24]
 80124ec:	f7f5 fdca 	bl	8008084 <pbuf_free>
  p = NULL;
 80124f0:	2300      	movs	r3, #0
 80124f2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80124f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3720      	adds	r7, #32
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	08019004 	.word	0x08019004
 8012504:	08019154 	.word	0x08019154
 8012508:	0801907c 	.word	0x0801907c
 801250c:	20003a9c 	.word	0x20003a9c
 8012510:	08019204 	.word	0x08019204
 8012514:	08019238 	.word	0x08019238

08012518 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b088      	sub	sp, #32
 801251c:	af04      	add	r7, sp, #16
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012534:	2201      	movs	r2, #1
 8012536:	9203      	str	r2, [sp, #12]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	9202      	str	r2, [sp, #8]
 801253c:	4a06      	ldr	r2, [pc, #24]	@ (8012558 <etharp_request_dst+0x40>)
 801253e:	9201      	str	r2, [sp, #4]
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	4603      	mov	r3, r0
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7ff ff4c 	bl	80123e4 <etharp_raw>
 801254c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801254e:	4618      	mov	r0, r3
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	080199a4 	.word	0x080199a4

0801255c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012566:	4a05      	ldr	r2, [pc, #20]	@ (801257c <etharp_request+0x20>)
 8012568:	6839      	ldr	r1, [r7, #0]
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7ff ffd4 	bl	8012518 <etharp_request_dst>
 8012570:	4603      	mov	r3, r0
}
 8012572:	4618      	mov	r0, r3
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
 801257a:	bf00      	nop
 801257c:	0801999c 	.word	0x0801999c

08012580 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08e      	sub	sp, #56	@ 0x38
 8012584:	af04      	add	r7, sp, #16
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801258a:	4ba8      	ldr	r3, [pc, #672]	@ (801282c <icmp_input+0x2ac>)
 801258c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012590:	3301      	adds	r3, #1
 8012592:	b29a      	uxth	r2, r3
 8012594:	4ba5      	ldr	r3, [pc, #660]	@ (801282c <icmp_input+0x2ac>)
 8012596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801259a:	4ba5      	ldr	r3, [pc, #660]	@ (8012830 <icmp_input+0x2b0>)
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80125a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f003 030f 	and.w	r3, r3, #15
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80125b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125b2:	2b13      	cmp	r3, #19
 80125b4:	f240 8112 	bls.w	80127dc <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	895b      	ldrh	r3, [r3, #10]
 80125bc:	2b03      	cmp	r3, #3
 80125be:	f240 810f 	bls.w	80127e0 <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80125cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f000 80fc 	beq.w	80127ce <icmp_input+0x24e>
 80125d6:	2b08      	cmp	r3, #8
 80125d8:	f040 80e8 	bne.w	80127ac <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80125dc:	4b95      	ldr	r3, [pc, #596]	@ (8012834 <icmp_input+0x2b4>)
 80125de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125e0:	4b93      	ldr	r3, [pc, #588]	@ (8012830 <icmp_input+0x2b0>)
 80125e2:	695b      	ldr	r3, [r3, #20]
 80125e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125e8:	2be0      	cmp	r3, #224	@ 0xe0
 80125ea:	f000 8108 	beq.w	80127fe <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80125ee:	4b90      	ldr	r3, [pc, #576]	@ (8012830 <icmp_input+0x2b0>)
 80125f0:	695b      	ldr	r3, [r3, #20]
 80125f2:	4a8f      	ldr	r2, [pc, #572]	@ (8012830 <icmp_input+0x2b0>)
 80125f4:	6812      	ldr	r2, [r2, #0]
 80125f6:	4611      	mov	r1, r2
 80125f8:	4618      	mov	r0, r3
 80125fa:	f000 fd6f 	bl	80130dc <ip4_addr_isbroadcast_u32>
 80125fe:	4603      	mov	r3, r0
 8012600:	2b00      	cmp	r3, #0
 8012602:	f040 80fe 	bne.w	8012802 <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	891b      	ldrh	r3, [r3, #8]
 801260a:	2b07      	cmp	r3, #7
 801260c:	f240 80ea 	bls.w	80127e4 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f7f4 fd8e 	bl	8007132 <inet_chksum_pbuf>
 8012616:	4603      	mov	r3, r0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d00b      	beq.n	8012634 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7f5 fd31 	bl	8008084 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8012622:	4b82      	ldr	r3, [pc, #520]	@ (801282c <icmp_input+0x2ac>)
 8012624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012628:	3301      	adds	r3, #1
 801262a:	b29a      	uxth	r2, r3
 801262c:	4b7f      	ldr	r3, [pc, #508]	@ (801282c <icmp_input+0x2ac>)
 801262e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012632:	e0f7      	b.n	8012824 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012634:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012636:	330e      	adds	r3, #14
 8012638:	4619      	mov	r1, r3
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7f5 fc8c 	bl	8007f58 <pbuf_add_header>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d04b      	beq.n	80126de <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	891a      	ldrh	r2, [r3, #8]
 801264a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801264c:	4413      	add	r3, r2
 801264e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	891b      	ldrh	r3, [r3, #8]
 8012654:	8b7a      	ldrh	r2, [r7, #26]
 8012656:	429a      	cmp	r2, r3
 8012658:	f0c0 80d5 	bcc.w	8012806 <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801265c:	8b7b      	ldrh	r3, [r7, #26]
 801265e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012662:	4619      	mov	r1, r3
 8012664:	200e      	movs	r0, #14
 8012666:	f7f5 fa2b 	bl	8007ac0 <pbuf_alloc>
 801266a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	2b00      	cmp	r3, #0
 8012670:	f000 80cb 	beq.w	801280a <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	895b      	ldrh	r3, [r3, #10]
 8012678:	461a      	mov	r2, r3
 801267a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801267c:	3308      	adds	r3, #8
 801267e:	429a      	cmp	r2, r3
 8012680:	d203      	bcs.n	801268a <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012682:	6978      	ldr	r0, [r7, #20]
 8012684:	f7f5 fcfe 	bl	8008084 <pbuf_free>
          goto icmperr;
 8012688:	e0c0      	b.n	801280c <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012692:	4618      	mov	r0, r3
 8012694:	f003 fb7d 	bl	8015d92 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012698:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801269a:	4619      	mov	r1, r3
 801269c:	6978      	ldr	r0, [r7, #20]
 801269e:	f7f5 fc6b 	bl	8007f78 <pbuf_remove_header>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d009      	beq.n	80126bc <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80126a8:	4b63      	ldr	r3, [pc, #396]	@ (8012838 <icmp_input+0x2b8>)
 80126aa:	22b6      	movs	r2, #182	@ 0xb6
 80126ac:	4963      	ldr	r1, [pc, #396]	@ (801283c <icmp_input+0x2bc>)
 80126ae:	4864      	ldr	r0, [pc, #400]	@ (8012840 <icmp_input+0x2c0>)
 80126b0:	f003 fa66 	bl	8015b80 <iprintf>
          pbuf_free(r);
 80126b4:	6978      	ldr	r0, [r7, #20]
 80126b6:	f7f5 fce5 	bl	8008084 <pbuf_free>
          goto icmperr;
 80126ba:	e0a7      	b.n	801280c <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80126bc:	6879      	ldr	r1, [r7, #4]
 80126be:	6978      	ldr	r0, [r7, #20]
 80126c0:	f7f5 fe14 	bl	80082ec <pbuf_copy>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d003      	beq.n	80126d2 <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80126ca:	6978      	ldr	r0, [r7, #20]
 80126cc:	f7f5 fcda 	bl	8008084 <pbuf_free>
          goto icmperr;
 80126d0:	e09c      	b.n	801280c <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f7f5 fcd6 	bl	8008084 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	607b      	str	r3, [r7, #4]
 80126dc:	e00f      	b.n	80126fe <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80126de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126e0:	330e      	adds	r3, #14
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7f5 fc47 	bl	8007f78 <pbuf_remove_header>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d006      	beq.n	80126fe <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80126f0:	4b51      	ldr	r3, [pc, #324]	@ (8012838 <icmp_input+0x2b8>)
 80126f2:	22c7      	movs	r2, #199	@ 0xc7
 80126f4:	4953      	ldr	r1, [pc, #332]	@ (8012844 <icmp_input+0x2c4>)
 80126f6:	4852      	ldr	r0, [pc, #328]	@ (8012840 <icmp_input+0x2c0>)
 80126f8:	f003 fa42 	bl	8015b80 <iprintf>
          goto icmperr;
 80126fc:	e086      	b.n	801280c <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012704:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012706:	4619      	mov	r1, r3
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7f5 fc25 	bl	8007f58 <pbuf_add_header>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d15e      	bne.n	80127d2 <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012722:	4b43      	ldr	r3, [pc, #268]	@ (8012830 <icmp_input+0x2b0>)
 8012724:	691a      	ldr	r2, [r3, #16]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	885b      	ldrh	r3, [r3, #2]
 8012734:	b29b      	uxth	r3, r3
 8012736:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801273a:	4293      	cmp	r3, r2
 801273c:	d907      	bls.n	801274e <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	885b      	ldrh	r3, [r3, #2]
 8012742:	b29b      	uxth	r3, r3
 8012744:	3309      	adds	r3, #9
 8012746:	b29a      	uxth	r2, r3
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	805a      	strh	r2, [r3, #2]
 801274c:	e006      	b.n	801275c <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801274e:	693b      	ldr	r3, [r7, #16]
 8012750:	885b      	ldrh	r3, [r3, #2]
 8012752:	b29b      	uxth	r3, r3
 8012754:	3308      	adds	r3, #8
 8012756:	b29a      	uxth	r2, r3
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	22ff      	movs	r2, #255	@ 0xff
 8012760:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2200      	movs	r2, #0
 8012766:	729a      	strb	r2, [r3, #10]
 8012768:	2200      	movs	r2, #0
 801276a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801276c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801276e:	4619      	mov	r1, r3
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f7f4 fccc 	bl	800710e <inet_chksum>
 8012776:	4603      	mov	r3, r0
 8012778:	461a      	mov	r2, r3
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801277e:	4b2b      	ldr	r3, [pc, #172]	@ (801282c <icmp_input+0x2ac>)
 8012780:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012784:	3301      	adds	r3, #1
 8012786:	b29a      	uxth	r2, r3
 8012788:	4b28      	ldr	r3, [pc, #160]	@ (801282c <icmp_input+0x2ac>)
 801278a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	9302      	str	r3, [sp, #8]
 8012792:	2301      	movs	r3, #1
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	2300      	movs	r3, #0
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	23ff      	movs	r3, #255	@ 0xff
 801279c:	2200      	movs	r2, #0
 801279e:	69f9      	ldr	r1, [r7, #28]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 fb41 	bl	8012e28 <ip4_output_if>
 80127a6:	4603      	mov	r3, r0
 80127a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80127aa:	e012      	b.n	80127d2 <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 80127ac:	4b1f      	ldr	r3, [pc, #124]	@ (801282c <icmp_input+0x2ac>)
 80127ae:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80127b2:	3301      	adds	r3, #1
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	4b1d      	ldr	r3, [pc, #116]	@ (801282c <icmp_input+0x2ac>)
 80127b8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 80127bc:	4b1b      	ldr	r3, [pc, #108]	@ (801282c <icmp_input+0x2ac>)
 80127be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127c2:	3301      	adds	r3, #1
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	4b19      	ldr	r3, [pc, #100]	@ (801282c <icmp_input+0x2ac>)
 80127c8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 80127cc:	e002      	b.n	80127d4 <icmp_input+0x254>
      break;
 80127ce:	bf00      	nop
 80127d0:	e000      	b.n	80127d4 <icmp_input+0x254>
      break;
 80127d2:	bf00      	nop
  }
  pbuf_free(p);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7f5 fc55 	bl	8008084 <pbuf_free>
  return;
 80127da:	e023      	b.n	8012824 <icmp_input+0x2a4>
    goto lenerr;
 80127dc:	bf00      	nop
 80127de:	e002      	b.n	80127e6 <icmp_input+0x266>
    goto lenerr;
 80127e0:	bf00      	nop
 80127e2:	e000      	b.n	80127e6 <icmp_input+0x266>
        goto lenerr;
 80127e4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7f5 fc4c 	bl	8008084 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 80127ec:	4b0f      	ldr	r3, [pc, #60]	@ (801282c <icmp_input+0x2ac>)
 80127ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80127f2:	3301      	adds	r3, #1
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	4b0d      	ldr	r3, [pc, #52]	@ (801282c <icmp_input+0x2ac>)
 80127f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80127fc:	e012      	b.n	8012824 <icmp_input+0x2a4>
        goto icmperr;
 80127fe:	bf00      	nop
 8012800:	e004      	b.n	801280c <icmp_input+0x28c>
        goto icmperr;
 8012802:	bf00      	nop
 8012804:	e002      	b.n	801280c <icmp_input+0x28c>
          goto icmperr;
 8012806:	bf00      	nop
 8012808:	e000      	b.n	801280c <icmp_input+0x28c>
          goto icmperr;
 801280a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7f5 fc39 	bl	8008084 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8012812:	4b06      	ldr	r3, [pc, #24]	@ (801282c <icmp_input+0x2ac>)
 8012814:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012818:	3301      	adds	r3, #1
 801281a:	b29a      	uxth	r2, r3
 801281c:	4b03      	ldr	r3, [pc, #12]	@ (801282c <icmp_input+0x2ac>)
 801281e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012822:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012824:	3728      	adds	r7, #40	@ 0x28
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	20003a9c 	.word	0x20003a9c
 8012830:	20000aa8 	.word	0x20000aa8
 8012834:	20000abc 	.word	0x20000abc
 8012838:	0801927c 	.word	0x0801927c
 801283c:	080192b4 	.word	0x080192b4
 8012840:	080192ec 	.word	0x080192ec
 8012844:	08019314 	.word	0x08019314

08012848 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	460b      	mov	r3, r1
 8012852:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012854:	78fb      	ldrb	r3, [r7, #3]
 8012856:	461a      	mov	r2, r3
 8012858:	2103      	movs	r1, #3
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 f814 	bl	8012888 <icmp_send_response>
}
 8012860:	bf00      	nop
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	460b      	mov	r3, r1
 8012872:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012874:	78fb      	ldrb	r3, [r7, #3]
 8012876:	461a      	mov	r2, r3
 8012878:	210b      	movs	r1, #11
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f000 f804 	bl	8012888 <icmp_send_response>
}
 8012880:	bf00      	nop
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b08c      	sub	sp, #48	@ 0x30
 801288c:	af04      	add	r7, sp, #16
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	70fb      	strb	r3, [r7, #3]
 8012894:	4613      	mov	r3, r2
 8012896:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012898:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801289c:	2124      	movs	r1, #36	@ 0x24
 801289e:	2022      	movs	r0, #34	@ 0x22
 80128a0:	f7f5 f90e 	bl	8007ac0 <pbuf_alloc>
 80128a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d05e      	beq.n	801296a <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	895b      	ldrh	r3, [r3, #10]
 80128b0:	2b23      	cmp	r3, #35	@ 0x23
 80128b2:	d806      	bhi.n	80128c2 <icmp_send_response+0x3a>
 80128b4:	4b2f      	ldr	r3, [pc, #188]	@ (8012974 <icmp_send_response+0xec>)
 80128b6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80128ba:	492f      	ldr	r1, [pc, #188]	@ (8012978 <icmp_send_response+0xf0>)
 80128bc:	482f      	ldr	r0, [pc, #188]	@ (801297c <icmp_send_response+0xf4>)
 80128be:	f003 f95f 	bl	8015b80 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	78fa      	ldrb	r2, [r7, #3]
 80128d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	78ba      	ldrb	r2, [r7, #2]
 80128d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	2200      	movs	r2, #0
 80128de:	711a      	strb	r2, [r3, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	2200      	movs	r2, #0
 80128e8:	719a      	strb	r2, [r3, #6]
 80128ea:	2200      	movs	r2, #0
 80128ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	f103 0008 	add.w	r0, r3, #8
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	221c      	movs	r2, #28
 80128fc:	4619      	mov	r1, r3
 80128fe:	f003 fa48 	bl	8015d92 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012908:	f107 030c 	add.w	r3, r7, #12
 801290c:	4618      	mov	r0, r3
 801290e:	f000 f839 	bl	8012984 <ip4_route>
 8012912:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d023      	beq.n	8012962 <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2200      	movs	r2, #0
 801291e:	709a      	strb	r2, [r3, #2]
 8012920:	2200      	movs	r2, #0
 8012922:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	895b      	ldrh	r3, [r3, #10]
 8012928:	4619      	mov	r1, r3
 801292a:	6978      	ldr	r0, [r7, #20]
 801292c:	f7f4 fbef 	bl	800710e <inet_chksum>
 8012930:	4603      	mov	r3, r0
 8012932:	461a      	mov	r2, r3
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8012938:	4b11      	ldr	r3, [pc, #68]	@ (8012980 <icmp_send_response+0xf8>)
 801293a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801293e:	3301      	adds	r3, #1
 8012940:	b29a      	uxth	r2, r3
 8012942:	4b0f      	ldr	r3, [pc, #60]	@ (8012980 <icmp_send_response+0xf8>)
 8012944:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012948:	f107 020c 	add.w	r2, r7, #12
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	9302      	str	r3, [sp, #8]
 8012950:	2301      	movs	r3, #1
 8012952:	9301      	str	r3, [sp, #4]
 8012954:	2300      	movs	r3, #0
 8012956:	9300      	str	r3, [sp, #0]
 8012958:	23ff      	movs	r3, #255	@ 0xff
 801295a:	2100      	movs	r1, #0
 801295c:	69f8      	ldr	r0, [r7, #28]
 801295e:	f000 fa63 	bl	8012e28 <ip4_output_if>
  }
  pbuf_free(q);
 8012962:	69f8      	ldr	r0, [r7, #28]
 8012964:	f7f5 fb8e 	bl	8008084 <pbuf_free>
 8012968:	e000      	b.n	801296c <icmp_send_response+0xe4>
    return;
 801296a:	bf00      	nop
}
 801296c:	3720      	adds	r7, #32
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	0801927c 	.word	0x0801927c
 8012978:	08019348 	.word	0x08019348
 801297c:	080192ec 	.word	0x080192ec
 8012980:	20003a9c 	.word	0x20003a9c

08012984 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801298c:	4b37      	ldr	r3, [pc, #220]	@ (8012a6c <ip4_route+0xe8>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e036      	b.n	8012a02 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d02b      	beq.n	80129fc <ip4_route+0x78>
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80129aa:	089b      	lsrs	r3, r3, #2
 80129ac:	f003 0301 	and.w	r3, r3, #1
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d022      	beq.n	80129fc <ip4_route+0x78>
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	3304      	adds	r3, #4
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d01d      	beq.n	80129fc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	3304      	adds	r3, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	405a      	eors	r2, r3
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	3308      	adds	r3, #8
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4013      	ands	r3, r2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	e040      	b.n	8012a5e <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80129e2:	f003 0302 	and.w	r3, r3, #2
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d108      	bne.n	80129fc <ip4_route+0x78>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	330c      	adds	r3, #12
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d101      	bne.n	80129fc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	e030      	b.n	8012a5e <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	60fb      	str	r3, [r7, #12]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d1c5      	bne.n	8012994 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a08:	4b19      	ldr	r3, [pc, #100]	@ (8012a70 <ip4_route+0xec>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d01a      	beq.n	8012a46 <ip4_route+0xc2>
 8012a10:	4b17      	ldr	r3, [pc, #92]	@ (8012a70 <ip4_route+0xec>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d012      	beq.n	8012a46 <ip4_route+0xc2>
 8012a20:	4b13      	ldr	r3, [pc, #76]	@ (8012a70 <ip4_route+0xec>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a28:	f003 0304 	and.w	r3, r3, #4
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d00a      	beq.n	8012a46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a30:	4b0f      	ldr	r3, [pc, #60]	@ (8012a70 <ip4_route+0xec>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	3304      	adds	r3, #4
 8012a36:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d004      	beq.n	8012a46 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a44:	d109      	bne.n	8012a5a <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8012a46:	4b0b      	ldr	r3, [pc, #44]	@ (8012a74 <ip4_route+0xf0>)
 8012a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	4b08      	ldr	r3, [pc, #32]	@ (8012a74 <ip4_route+0xf0>)
 8012a52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e001      	b.n	8012a5e <ip4_route+0xda>
  }

  return netif_default;
 8012a5a:	4b05      	ldr	r3, [pc, #20]	@ (8012a70 <ip4_route+0xec>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3714      	adds	r7, #20
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	20003a90 	.word	0x20003a90
 8012a70:	20003a94 	.word	0x20003a94
 8012a74:	20003a9c 	.word	0x20003a9c

08012a78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012a86:	f003 0301 	and.w	r3, r3, #1
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d016      	beq.n	8012abe <ip4_input_accept+0x46>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	3304      	adds	r3, #4
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d011      	beq.n	8012abe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8012ac8 <ip4_input_accept+0x50>)
 8012a9c:	695a      	ldr	r2, [r3, #20]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	3304      	adds	r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d008      	beq.n	8012aba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012aa8:	4b07      	ldr	r3, [pc, #28]	@ (8012ac8 <ip4_input_accept+0x50>)
 8012aaa:	695b      	ldr	r3, [r3, #20]
 8012aac:	6879      	ldr	r1, [r7, #4]
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f000 fb14 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8012ab4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d001      	beq.n	8012abe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012aba:	2301      	movs	r3, #1
 8012abc:	e000      	b.n	8012ac0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	20000aa8 	.word	0x20000aa8

08012acc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b088      	sub	sp, #32
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8012ada:	4b91      	ldr	r3, [pc, #580]	@ (8012d20 <ip4_input+0x254>)
 8012adc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	4b8e      	ldr	r3, [pc, #568]	@ (8012d20 <ip4_input+0x254>)
 8012ae6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	091b      	lsrs	r3, r3, #4
 8012af6:	b2db      	uxtb	r3, r3
 8012af8:	2b04      	cmp	r3, #4
 8012afa:	d014      	beq.n	8012b26 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7f5 fac1 	bl	8008084 <pbuf_free>
    IP_STATS_INC(ip.err);
 8012b02:	4b87      	ldr	r3, [pc, #540]	@ (8012d20 <ip4_input+0x254>)
 8012b04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012b08:	3301      	adds	r3, #1
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	4b84      	ldr	r3, [pc, #528]	@ (8012d20 <ip4_input+0x254>)
 8012b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 8012b12:	4b83      	ldr	r3, [pc, #524]	@ (8012d20 <ip4_input+0x254>)
 8012b14:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012b18:	3301      	adds	r3, #1
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	4b80      	ldr	r3, [pc, #512]	@ (8012d20 <ip4_input+0x254>)
 8012b1e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	e177      	b.n	8012e16 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	f003 030f 	and.w	r3, r3, #15
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	009b      	lsls	r3, r3, #2
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	885b      	ldrh	r3, [r3, #2]
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f3 fe7b 	bl	8006838 <lwip_htons>
 8012b42:	4603      	mov	r3, r0
 8012b44:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	891b      	ldrh	r3, [r3, #8]
 8012b4a:	8a3a      	ldrh	r2, [r7, #16]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d204      	bcs.n	8012b5a <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8012b50:	8a3b      	ldrh	r3, [r7, #16]
 8012b52:	4619      	mov	r1, r3
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f7f5 f911 	bl	8007d7c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	895b      	ldrh	r3, [r3, #10]
 8012b5e:	8a7a      	ldrh	r2, [r7, #18]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d807      	bhi.n	8012b74 <ip4_input+0xa8>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	891b      	ldrh	r3, [r3, #8]
 8012b68:	8a3a      	ldrh	r2, [r7, #16]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d802      	bhi.n	8012b74 <ip4_input+0xa8>
 8012b6e:	8a7b      	ldrh	r3, [r7, #18]
 8012b70:	2b13      	cmp	r3, #19
 8012b72:	d814      	bhi.n	8012b9e <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7f5 fa85 	bl	8008084 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8012b7a:	4b69      	ldr	r3, [pc, #420]	@ (8012d20 <ip4_input+0x254>)
 8012b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8012b80:	3301      	adds	r3, #1
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	4b66      	ldr	r3, [pc, #408]	@ (8012d20 <ip4_input+0x254>)
 8012b86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 8012b8a:	4b65      	ldr	r3, [pc, #404]	@ (8012d20 <ip4_input+0x254>)
 8012b8c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012b90:	3301      	adds	r3, #1
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	4b62      	ldr	r3, [pc, #392]	@ (8012d20 <ip4_input+0x254>)
 8012b96:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	e13b      	b.n	8012e16 <ip4_input+0x34a>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8012b9e:	8a7b      	ldrh	r3, [r7, #18]
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	69f8      	ldr	r0, [r7, #28]
 8012ba4:	f7f4 fab3 	bl	800710e <inet_chksum>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d014      	beq.n	8012bd8 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7f5 fa68 	bl	8008084 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8012bb4:	4b5a      	ldr	r3, [pc, #360]	@ (8012d20 <ip4_input+0x254>)
 8012bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012bba:	3301      	adds	r3, #1
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	4b58      	ldr	r3, [pc, #352]	@ (8012d20 <ip4_input+0x254>)
 8012bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      IP_STATS_INC(ip.drop);
 8012bc4:	4b56      	ldr	r3, [pc, #344]	@ (8012d20 <ip4_input+0x254>)
 8012bc6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012bca:	3301      	adds	r3, #1
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	4b54      	ldr	r3, [pc, #336]	@ (8012d20 <ip4_input+0x254>)
 8012bd0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e11e      	b.n	8012e16 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	4a51      	ldr	r2, [pc, #324]	@ (8012d24 <ip4_input+0x258>)
 8012bde:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	4a4f      	ldr	r2, [pc, #316]	@ (8012d24 <ip4_input+0x258>)
 8012be6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012be8:	4b4e      	ldr	r3, [pc, #312]	@ (8012d24 <ip4_input+0x258>)
 8012bea:	695b      	ldr	r3, [r3, #20]
 8012bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bf0:	2be0      	cmp	r3, #224	@ 0xe0
 8012bf2:	d112      	bne.n	8012c1a <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bfa:	f003 0301 	and.w	r3, r3, #1
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d007      	beq.n	8012c14 <ip4_input+0x148>
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	3304      	adds	r3, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d002      	beq.n	8012c14 <ip4_input+0x148>
      netif = inp;
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	61bb      	str	r3, [r7, #24]
 8012c12:	e02a      	b.n	8012c6a <ip4_input+0x19e>
    } else {
      netif = NULL;
 8012c14:	2300      	movs	r3, #0
 8012c16:	61bb      	str	r3, [r7, #24]
 8012c18:	e027      	b.n	8012c6a <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012c1a:	6838      	ldr	r0, [r7, #0]
 8012c1c:	f7ff ff2c 	bl	8012a78 <ip4_input_accept>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <ip4_input+0x160>
      netif = inp;
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	61bb      	str	r3, [r7, #24]
 8012c2a:	e01e      	b.n	8012c6a <ip4_input+0x19e>
    } else {
      netif = NULL;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012c30:	4b3c      	ldr	r3, [pc, #240]	@ (8012d24 <ip4_input+0x258>)
 8012c32:	695b      	ldr	r3, [r3, #20]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c38:	d017      	beq.n	8012c6a <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8012d28 <ip4_input+0x25c>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	61bb      	str	r3, [r7, #24]
 8012c40:	e00e      	b.n	8012c60 <ip4_input+0x194>
          if (netif == inp) {
 8012c42:	69ba      	ldr	r2, [r7, #24]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d006      	beq.n	8012c58 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012c4a:	69b8      	ldr	r0, [r7, #24]
 8012c4c:	f7ff ff14 	bl	8012a78 <ip4_input_accept>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d108      	bne.n	8012c68 <ip4_input+0x19c>
 8012c56:	e000      	b.n	8012c5a <ip4_input+0x18e>
            continue;
 8012c58:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	61bb      	str	r3, [r7, #24]
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d1ed      	bne.n	8012c42 <ip4_input+0x176>
 8012c66:	e000      	b.n	8012c6a <ip4_input+0x19e>
            break;
 8012c68:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d111      	bne.n	8012c94 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	7a5b      	ldrb	r3, [r3, #9]
 8012c74:	2b11      	cmp	r3, #17
 8012c76:	d10d      	bne.n	8012c94 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012c78:	8a7b      	ldrh	r3, [r7, #18]
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	885b      	ldrh	r3, [r3, #2]
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012c8a:	d103      	bne.n	8012c94 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d01f      	beq.n	8012cda <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012c9a:	4b22      	ldr	r3, [pc, #136]	@ (8012d24 <ip4_input+0x258>)
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d01b      	beq.n	8012cda <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ca2:	4b20      	ldr	r3, [pc, #128]	@ (8012d24 <ip4_input+0x258>)
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f000 fa17 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d105      	bne.n	8012cc0 <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8012d24 <ip4_input+0x258>)
 8012cb6:	691b      	ldr	r3, [r3, #16]
 8012cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012cbc:	2be0      	cmp	r3, #224	@ 0xe0
 8012cbe:	d10c      	bne.n	8012cda <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f5 f9df 	bl	8008084 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8012cc6:	4b16      	ldr	r3, [pc, #88]	@ (8012d20 <ip4_input+0x254>)
 8012cc8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012ccc:	3301      	adds	r3, #1
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	4b13      	ldr	r3, [pc, #76]	@ (8012d20 <ip4_input+0x254>)
 8012cd2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e09d      	b.n	8012e16 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10c      	bne.n	8012cfa <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8012ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8012d20 <ip4_input+0x254>)
 8012ce2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	4b0d      	ldr	r3, [pc, #52]	@ (8012d20 <ip4_input+0x254>)
 8012cec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7f5 f9c7 	bl	8008084 <pbuf_free>
    return ERR_OK;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	e08d      	b.n	8012e16 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	88db      	ldrh	r3, [r3, #6]
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	461a      	mov	r2, r3
 8012d02:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012d06:	4013      	ands	r3, r2
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d012      	beq.n	8012d32 <ip4_input+0x266>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f000 fd33 	bl	8013778 <ip4_reass>
 8012d12:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d108      	bne.n	8012d2c <ip4_input+0x260>
      return ERR_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	e07b      	b.n	8012e16 <ip4_input+0x34a>
 8012d1e:	bf00      	nop
 8012d20:	20003a9c 	.word	0x20003a9c
 8012d24:	20000aa8 	.word	0x20000aa8
 8012d28:	20003a90 	.word	0x20003a90
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012d32:	4a3b      	ldr	r2, [pc, #236]	@ (8012e20 <ip4_input+0x354>)
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012d38:	4a39      	ldr	r2, [pc, #228]	@ (8012e20 <ip4_input+0x354>)
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012d3e:	4a38      	ldr	r2, [pc, #224]	@ (8012e20 <ip4_input+0x354>)
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	f003 030f 	and.w	r3, r3, #15
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	b2db      	uxtb	r3, r3
 8012d52:	461a      	mov	r2, r3
 8012d54:	4b32      	ldr	r3, [pc, #200]	@ (8012e20 <ip4_input+0x354>)
 8012d56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012d58:	8a7b      	ldrh	r3, [r7, #18]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f7f5 f90b 	bl	8007f78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	7a5b      	ldrb	r3, [r3, #9]
 8012d66:	2b11      	cmp	r3, #17
 8012d68:	d006      	beq.n	8012d78 <ip4_input+0x2ac>
 8012d6a:	2b11      	cmp	r3, #17
 8012d6c:	dc13      	bgt.n	8012d96 <ip4_input+0x2ca>
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d00c      	beq.n	8012d8c <ip4_input+0x2c0>
 8012d72:	2b06      	cmp	r3, #6
 8012d74:	d005      	beq.n	8012d82 <ip4_input+0x2b6>
 8012d76:	e00e      	b.n	8012d96 <ip4_input+0x2ca>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f7fc f900 	bl	800ef80 <udp_input>
        break;
 8012d80:	e036      	b.n	8012df0 <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012d82:	6839      	ldr	r1, [r7, #0]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7f7 fbf5 	bl	800a574 <tcp_input>
        break;
 8012d8a:	e031      	b.n	8012df0 <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012d8c:	6839      	ldr	r1, [r7, #0]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff fbf6 	bl	8012580 <icmp_input>
        break;
 8012d94:	e02c      	b.n	8012df0 <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d96:	4b22      	ldr	r3, [pc, #136]	@ (8012e20 <ip4_input+0x354>)
 8012d98:	695b      	ldr	r3, [r3, #20]
 8012d9a:	69b9      	ldr	r1, [r7, #24]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f000 f99d 	bl	80130dc <ip4_addr_isbroadcast_u32>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10f      	bne.n	8012dc8 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012da8:	4b1d      	ldr	r3, [pc, #116]	@ (8012e20 <ip4_input+0x354>)
 8012daa:	695b      	ldr	r3, [r3, #20]
 8012dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012db0:	2be0      	cmp	r3, #224	@ 0xe0
 8012db2:	d009      	beq.n	8012dc8 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012db8:	4619      	mov	r1, r3
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7f5 f94f 	bl	800805e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7ff fd40 	bl	8012848 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8012dc8:	4b16      	ldr	r3, [pc, #88]	@ (8012e24 <ip4_input+0x358>)
 8012dca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012dce:	3301      	adds	r3, #1
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	4b14      	ldr	r3, [pc, #80]	@ (8012e24 <ip4_input+0x358>)
 8012dd4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 8012dd8:	4b12      	ldr	r3, [pc, #72]	@ (8012e24 <ip4_input+0x358>)
 8012dda:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012dde:	3301      	adds	r3, #1
 8012de0:	b29a      	uxth	r2, r3
 8012de2:	4b10      	ldr	r3, [pc, #64]	@ (8012e24 <ip4_input+0x358>)
 8012de4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7f5 f94b 	bl	8008084 <pbuf_free>
        break;
 8012dee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012df0:	4b0b      	ldr	r3, [pc, #44]	@ (8012e20 <ip4_input+0x354>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012df6:	4b0a      	ldr	r3, [pc, #40]	@ (8012e20 <ip4_input+0x354>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012dfc:	4b08      	ldr	r3, [pc, #32]	@ (8012e20 <ip4_input+0x354>)
 8012dfe:	2200      	movs	r2, #0
 8012e00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012e02:	4b07      	ldr	r3, [pc, #28]	@ (8012e20 <ip4_input+0x354>)
 8012e04:	2200      	movs	r2, #0
 8012e06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012e08:	4b05      	ldr	r3, [pc, #20]	@ (8012e20 <ip4_input+0x354>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012e0e:	4b04      	ldr	r3, [pc, #16]	@ (8012e20 <ip4_input+0x354>)
 8012e10:	2200      	movs	r2, #0
 8012e12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012e14:	2300      	movs	r3, #0
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3720      	adds	r7, #32
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	20000aa8 	.word	0x20000aa8
 8012e24:	20003a9c 	.word	0x20003a9c

08012e28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08a      	sub	sp, #40	@ 0x28
 8012e2c:	af04      	add	r7, sp, #16
 8012e2e:	60f8      	str	r0, [r7, #12]
 8012e30:	60b9      	str	r1, [r7, #8]
 8012e32:	607a      	str	r2, [r7, #4]
 8012e34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d009      	beq.n	8012e54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <ip4_output_if+0x26>
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d102      	bne.n	8012e54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e50:	3304      	adds	r3, #4
 8012e52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012e54:	78fa      	ldrb	r2, [r7, #3]
 8012e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e58:	9302      	str	r3, [sp, #8]
 8012e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012e5e:	9301      	str	r3, [sp, #4]
 8012e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e64:	9300      	str	r3, [sp, #0]
 8012e66:	4613      	mov	r3, r2
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	6979      	ldr	r1, [r7, #20]
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f000 f805 	bl	8012e7c <ip4_output_if_src>
 8012e72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3718      	adds	r7, #24
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	7b9b      	ldrb	r3, [r3, #14]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d006      	beq.n	8012ea4 <ip4_output_if_src+0x28>
 8012e96:	4b8a      	ldr	r3, [pc, #552]	@ (80130c0 <ip4_output_if_src+0x244>)
 8012e98:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012e9c:	4989      	ldr	r1, [pc, #548]	@ (80130c4 <ip4_output_if_src+0x248>)
 8012e9e:	488a      	ldr	r0, [pc, #552]	@ (80130c8 <ip4_output_if_src+0x24c>)
 8012ea0:	f002 fe6e 	bl	8015b80 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f000 80ce 	beq.w	8013048 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8012eac:	2314      	movs	r3, #20
 8012eae:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012eb0:	2114      	movs	r1, #20
 8012eb2:	68f8      	ldr	r0, [r7, #12]
 8012eb4:	f7f5 f850 	bl	8007f58 <pbuf_add_header>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00a      	beq.n	8012ed4 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8012ebe:	4b83      	ldr	r3, [pc, #524]	@ (80130cc <ip4_output_if_src+0x250>)
 8012ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	4b80      	ldr	r3, [pc, #512]	@ (80130cc <ip4_output_if_src+0x250>)
 8012eca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012ece:	f06f 0301 	mvn.w	r3, #1
 8012ed2:	e0f1      	b.n	80130b8 <ip4_output_if_src+0x23c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	895b      	ldrh	r3, [r3, #10]
 8012ede:	2b13      	cmp	r3, #19
 8012ee0:	d806      	bhi.n	8012ef0 <ip4_output_if_src+0x74>
 8012ee2:	4b77      	ldr	r3, [pc, #476]	@ (80130c0 <ip4_output_if_src+0x244>)
 8012ee4:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012ee8:	4979      	ldr	r1, [pc, #484]	@ (80130d0 <ip4_output_if_src+0x254>)
 8012eea:	4877      	ldr	r0, [pc, #476]	@ (80130c8 <ip4_output_if_src+0x24c>)
 8012eec:	f002 fe48 	bl	8015b80 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	78fa      	ldrb	r2, [r7, #3]
 8012ef4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012efc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8012efe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012f02:	78fb      	ldrb	r3, [r7, #3]
 8012f04:	021b      	lsls	r3, r3, #8
 8012f06:	4313      	orrs	r3, r2
 8012f08:	b21b      	sxth	r3, r3
 8012f0a:	021b      	lsls	r3, r3, #8
 8012f0c:	b21a      	sxth	r2, r3
 8012f0e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8012f12:	78fb      	ldrb	r3, [r7, #3]
 8012f14:	021b      	lsls	r3, r3, #8
 8012f16:	430b      	orrs	r3, r1
 8012f18:	121b      	asrs	r3, r3, #8
 8012f1a:	b21b      	sxth	r3, r3
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	b21b      	sxth	r3, r3
 8012f20:	4313      	orrs	r3, r2
 8012f22:	b21b      	sxth	r3, r3
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	69fa      	ldr	r2, [r7, #28]
 8012f3e:	4413      	add	r3, r2
 8012f40:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8012f42:	69bb      	ldr	r3, [r7, #24]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	0c1b      	lsrs	r3, r3, #16
 8012f48:	69fa      	ldr	r2, [r7, #28]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012f4e:	8afb      	ldrh	r3, [r7, #22]
 8012f50:	089b      	lsrs	r3, r3, #2
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f5a:	b2da      	uxtb	r2, r3
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012f60:	69bb      	ldr	r3, [r7, #24]
 8012f62:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012f66:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8012f68:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	021b      	lsls	r3, r3, #8
 8012f72:	4313      	orrs	r3, r2
 8012f74:	b21b      	sxth	r3, r3
 8012f76:	021b      	lsls	r3, r3, #8
 8012f78:	b21a      	sxth	r2, r3
 8012f7a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	021b      	lsls	r3, r3, #8
 8012f84:	430b      	orrs	r3, r1
 8012f86:	121b      	asrs	r3, r3, #8
 8012f88:	b21b      	sxth	r3, r3
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	b21b      	sxth	r3, r3
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	b21b      	sxth	r3, r3
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	461a      	mov	r2, r3
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	4413      	add	r3, r2
 8012f9a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	891b      	ldrh	r3, [r3, #8]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7f3 fc49 	bl	8006838 <lwip_htons>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	461a      	mov	r2, r3
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	885b      	ldrh	r3, [r3, #2]
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	4413      	add	r3, r2
 8012fba:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	719a      	strb	r2, [r3, #6]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012fc6:	4b43      	ldr	r3, [pc, #268]	@ (80130d4 <ip4_output_if_src+0x258>)
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7f3 fc34 	bl	8006838 <lwip_htons>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	889b      	ldrh	r3, [r3, #4]
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	461a      	mov	r2, r3
 8012fe0:	69fb      	ldr	r3, [r7, #28]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80130d4 <ip4_output_if_src+0x258>)
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	3301      	adds	r3, #1
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	4b39      	ldr	r3, [pc, #228]	@ (80130d4 <ip4_output_if_src+0x258>)
 8012ff0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d104      	bne.n	8013002 <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012ff8:	4b37      	ldr	r3, [pc, #220]	@ (80130d8 <ip4_output_if_src+0x25c>)
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	60da      	str	r2, [r3, #12]
 8013000:	e003      	b.n	801300a <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	b29b      	uxth	r3, r3
 8013010:	69fa      	ldr	r2, [r7, #28]
 8013012:	4413      	add	r3, r2
 8013014:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	68db      	ldr	r3, [r3, #12]
 801301a:	0c1b      	lsrs	r3, r3, #16
 801301c:	69fa      	ldr	r2, [r7, #28]
 801301e:	4413      	add	r3, r2
 8013020:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	0c1a      	lsrs	r2, r3, #16
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	b29b      	uxth	r3, r3
 801302a:	4413      	add	r3, r2
 801302c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	0c1b      	lsrs	r3, r3, #16
 8013032:	69fa      	ldr	r2, [r7, #28]
 8013034:	4413      	add	r3, r2
 8013036:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8013038:	69fb      	ldr	r3, [r7, #28]
 801303a:	43db      	mvns	r3, r3
 801303c:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	b29a      	uxth	r2, r3
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	815a      	strh	r2, [r3, #10]
 8013046:	e017      	b.n	8013078 <ip4_output_if_src+0x1fc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	895b      	ldrh	r3, [r3, #10]
 801304c:	2b13      	cmp	r3, #19
 801304e:	d80a      	bhi.n	8013066 <ip4_output_if_src+0x1ea>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8013050:	4b1e      	ldr	r3, [pc, #120]	@ (80130cc <ip4_output_if_src+0x250>)
 8013052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013056:	3301      	adds	r3, #1
 8013058:	b29a      	uxth	r2, r3
 801305a:	4b1c      	ldr	r3, [pc, #112]	@ (80130cc <ip4_output_if_src+0x250>)
 801305c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013060:	f06f 0301 	mvn.w	r3, #1
 8013064:	e028      	b.n	80130b8 <ip4_output_if_src+0x23c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8013072:	f107 0310 	add.w	r3, r7, #16
 8013076:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8013078:	4b14      	ldr	r3, [pc, #80]	@ (80130cc <ip4_output_if_src+0x250>)
 801307a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801307e:	3301      	adds	r3, #1
 8013080:	b29a      	uxth	r2, r3
 8013082:	4b12      	ldr	r3, [pc, #72]	@ (80130cc <ip4_output_if_src+0x250>)
 8013084:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801308c:	2b00      	cmp	r3, #0
 801308e:	d00c      	beq.n	80130aa <ip4_output_if_src+0x22e>
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	891a      	ldrh	r2, [r3, #8]
 8013094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013096:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013098:	429a      	cmp	r2, r3
 801309a:	d906      	bls.n	80130aa <ip4_output_if_src+0x22e>
    return ip4_frag(p, netif, dest);
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 fd83 	bl	8013bac <ip4_frag>
 80130a6:	4603      	mov	r3, r0
 80130a8:	e006      	b.n	80130b8 <ip4_output_if_src+0x23c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80130aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	68f9      	ldr	r1, [r7, #12]
 80130b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130b4:	4798      	blx	r3
 80130b6:	4603      	mov	r3, r0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3720      	adds	r7, #32
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	08019374 	.word	0x08019374
 80130c4:	080193a8 	.word	0x080193a8
 80130c8:	080193b4 	.word	0x080193b4
 80130cc:	20003a9c 	.word	0x20003a9c
 80130d0:	080193dc 	.word	0x080193dc
 80130d4:	20003cfa 	.word	0x20003cfa
 80130d8:	08019994 	.word	0x08019994

080130dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80130dc:	b480      	push	{r7}
 80130de:	b085      	sub	sp, #20
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130f0:	d002      	beq.n	80130f8 <ip4_addr_isbroadcast_u32+0x1c>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d101      	bne.n	80130fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80130f8:	2301      	movs	r3, #1
 80130fa:	e02a      	b.n	8013152 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013102:	f003 0302 	and.w	r3, r3, #2
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801310a:	2300      	movs	r3, #0
 801310c:	e021      	b.n	8013152 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	3304      	adds	r3, #4
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	429a      	cmp	r2, r3
 8013118:	d101      	bne.n	801311e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801311a:	2300      	movs	r3, #0
 801311c:	e019      	b.n	8013152 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801311e:	68fa      	ldr	r2, [r7, #12]
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	3304      	adds	r3, #4
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	405a      	eors	r2, r3
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	3308      	adds	r3, #8
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4013      	ands	r3, r2
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10d      	bne.n	8013150 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	3308      	adds	r3, #8
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	43da      	mvns	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	3308      	adds	r3, #8
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013148:	429a      	cmp	r2, r3
 801314a:	d101      	bne.n	8013150 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801314c:	2301      	movs	r3, #1
 801314e:	e000      	b.n	8013152 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013150:	2300      	movs	r3, #0
  }
}
 8013152:	4618      	mov	r0, r3
 8013154:	3714      	adds	r7, #20
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr
	...

08013160 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013166:	2300      	movs	r3, #0
 8013168:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801316a:	4b12      	ldr	r3, [pc, #72]	@ (80131b4 <ip_reass_tmr+0x54>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013170:	e018      	b.n	80131a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	7fdb      	ldrb	r3, [r3, #31]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00b      	beq.n	8013192 <ip_reass_tmr+0x32>
      r->timer--;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	7fdb      	ldrb	r3, [r3, #31]
 801317e:	3b01      	subs	r3, #1
 8013180:	b2da      	uxtb	r2, r3
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	60fb      	str	r3, [r7, #12]
 8013190:	e008      	b.n	80131a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801319c:	68b9      	ldr	r1, [r7, #8]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 f80a 	bl	80131b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1e3      	bne.n	8013172 <ip_reass_tmr+0x12>
    }
  }
}
 80131aa:	bf00      	nop
 80131ac:	bf00      	nop
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	20003cfc 	.word	0x20003cfc

080131b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b088      	sub	sp, #32
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80131c6:	683a      	ldr	r2, [r7, #0]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d105      	bne.n	80131da <ip_reass_free_complete_datagram+0x22>
 80131ce:	4b45      	ldr	r3, [pc, #276]	@ (80132e4 <ip_reass_free_complete_datagram+0x12c>)
 80131d0:	22ab      	movs	r2, #171	@ 0xab
 80131d2:	4945      	ldr	r1, [pc, #276]	@ (80132e8 <ip_reass_free_complete_datagram+0x130>)
 80131d4:	4845      	ldr	r0, [pc, #276]	@ (80132ec <ip_reass_free_complete_datagram+0x134>)
 80131d6:	f002 fcd3 	bl	8015b80 <iprintf>
  if (prev != NULL) {
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00a      	beq.n	80131f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d005      	beq.n	80131f6 <ip_reass_free_complete_datagram+0x3e>
 80131ea:	4b3e      	ldr	r3, [pc, #248]	@ (80132e4 <ip_reass_free_complete_datagram+0x12c>)
 80131ec:	22ad      	movs	r2, #173	@ 0xad
 80131ee:	4940      	ldr	r1, [pc, #256]	@ (80132f0 <ip_reass_free_complete_datagram+0x138>)
 80131f0:	483e      	ldr	r0, [pc, #248]	@ (80132ec <ip_reass_free_complete_datagram+0x134>)
 80131f2:	f002 fcc5 	bl	8015b80 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	889b      	ldrh	r3, [r3, #4]
 8013202:	b29b      	uxth	r3, r3
 8013204:	2b00      	cmp	r3, #0
 8013206:	d12a      	bne.n	801325e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	6858      	ldr	r0, [r3, #4]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	3308      	adds	r3, #8
 801321e:	2214      	movs	r2, #20
 8013220:	4619      	mov	r1, r3
 8013222:	f002 fdb6 	bl	8015d92 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013226:	2101      	movs	r1, #1
 8013228:	69b8      	ldr	r0, [r7, #24]
 801322a:	f7ff fb1d 	bl	8012868 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801322e:	69b8      	ldr	r0, [r7, #24]
 8013230:	f7f4 ffb6 	bl	80081a0 <pbuf_clen>
 8013234:	4603      	mov	r3, r0
 8013236:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013238:	8bfa      	ldrh	r2, [r7, #30]
 801323a:	8a7b      	ldrh	r3, [r7, #18]
 801323c:	4413      	add	r3, r2
 801323e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013242:	db05      	blt.n	8013250 <ip_reass_free_complete_datagram+0x98>
 8013244:	4b27      	ldr	r3, [pc, #156]	@ (80132e4 <ip_reass_free_complete_datagram+0x12c>)
 8013246:	22bc      	movs	r2, #188	@ 0xbc
 8013248:	492a      	ldr	r1, [pc, #168]	@ (80132f4 <ip_reass_free_complete_datagram+0x13c>)
 801324a:	4828      	ldr	r0, [pc, #160]	@ (80132ec <ip_reass_free_complete_datagram+0x134>)
 801324c:	f002 fc98 	bl	8015b80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013250:	8bfa      	ldrh	r2, [r7, #30]
 8013252:	8a7b      	ldrh	r3, [r7, #18]
 8013254:	4413      	add	r3, r2
 8013256:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013258:	69b8      	ldr	r0, [r7, #24]
 801325a:	f7f4 ff13 	bl	8008084 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013264:	e01f      	b.n	80132a6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	685b      	ldr	r3, [r3, #4]
 801326a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801326c:	69bb      	ldr	r3, [r7, #24]
 801326e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013276:	68f8      	ldr	r0, [r7, #12]
 8013278:	f7f4 ff92 	bl	80081a0 <pbuf_clen>
 801327c:	4603      	mov	r3, r0
 801327e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013280:	8bfa      	ldrh	r2, [r7, #30]
 8013282:	8a7b      	ldrh	r3, [r7, #18]
 8013284:	4413      	add	r3, r2
 8013286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801328a:	db05      	blt.n	8013298 <ip_reass_free_complete_datagram+0xe0>
 801328c:	4b15      	ldr	r3, [pc, #84]	@ (80132e4 <ip_reass_free_complete_datagram+0x12c>)
 801328e:	22cc      	movs	r2, #204	@ 0xcc
 8013290:	4918      	ldr	r1, [pc, #96]	@ (80132f4 <ip_reass_free_complete_datagram+0x13c>)
 8013292:	4816      	ldr	r0, [pc, #88]	@ (80132ec <ip_reass_free_complete_datagram+0x134>)
 8013294:	f002 fc74 	bl	8015b80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013298:	8bfa      	ldrh	r2, [r7, #30]
 801329a:	8a7b      	ldrh	r3, [r7, #18]
 801329c:	4413      	add	r3, r2
 801329e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f7f4 feef 	bl	8008084 <pbuf_free>
  while (p != NULL) {
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d1dc      	bne.n	8013266 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f000 f8ca 	bl	8013448 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80132b4:	4b10      	ldr	r3, [pc, #64]	@ (80132f8 <ip_reass_free_complete_datagram+0x140>)
 80132b6:	881b      	ldrh	r3, [r3, #0]
 80132b8:	8bfa      	ldrh	r2, [r7, #30]
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d905      	bls.n	80132ca <ip_reass_free_complete_datagram+0x112>
 80132be:	4b09      	ldr	r3, [pc, #36]	@ (80132e4 <ip_reass_free_complete_datagram+0x12c>)
 80132c0:	22d2      	movs	r2, #210	@ 0xd2
 80132c2:	490e      	ldr	r1, [pc, #56]	@ (80132fc <ip_reass_free_complete_datagram+0x144>)
 80132c4:	4809      	ldr	r0, [pc, #36]	@ (80132ec <ip_reass_free_complete_datagram+0x134>)
 80132c6:	f002 fc5b 	bl	8015b80 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80132ca:	4b0b      	ldr	r3, [pc, #44]	@ (80132f8 <ip_reass_free_complete_datagram+0x140>)
 80132cc:	881a      	ldrh	r2, [r3, #0]
 80132ce:	8bfb      	ldrh	r3, [r7, #30]
 80132d0:	1ad3      	subs	r3, r2, r3
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	4b08      	ldr	r3, [pc, #32]	@ (80132f8 <ip_reass_free_complete_datagram+0x140>)
 80132d6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80132d8:	8bfb      	ldrh	r3, [r7, #30]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3720      	adds	r7, #32
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	0801940c 	.word	0x0801940c
 80132e8:	08019448 	.word	0x08019448
 80132ec:	08019454 	.word	0x08019454
 80132f0:	0801947c 	.word	0x0801947c
 80132f4:	08019490 	.word	0x08019490
 80132f8:	20003d00 	.word	0x20003d00
 80132fc:	080194b0 	.word	0x080194b0

08013300 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b08a      	sub	sp, #40	@ 0x28
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801330a:	2300      	movs	r3, #0
 801330c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801330e:	2300      	movs	r3, #0
 8013310:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013312:	2300      	movs	r3, #0
 8013314:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013316:	2300      	movs	r3, #0
 8013318:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801331e:	4b28      	ldr	r3, [pc, #160]	@ (80133c0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013324:	e030      	b.n	8013388 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013328:	695a      	ldr	r2, [r3, #20]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	429a      	cmp	r2, r3
 8013330:	d10c      	bne.n	801334c <ip_reass_remove_oldest_datagram+0x4c>
 8013332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013334:	699a      	ldr	r2, [r3, #24]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	691b      	ldr	r3, [r3, #16]
 801333a:	429a      	cmp	r2, r3
 801333c:	d106      	bne.n	801334c <ip_reass_remove_oldest_datagram+0x4c>
 801333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013340:	899a      	ldrh	r2, [r3, #12]
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	889b      	ldrh	r3, [r3, #4]
 8013346:	b29b      	uxth	r3, r3
 8013348:	429a      	cmp	r2, r3
 801334a:	d014      	beq.n	8013376 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	3301      	adds	r3, #1
 8013350:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013352:	6a3b      	ldr	r3, [r7, #32]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d104      	bne.n	8013362 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801335a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	61bb      	str	r3, [r7, #24]
 8013360:	e009      	b.n	8013376 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013364:	7fda      	ldrb	r2, [r3, #31]
 8013366:	6a3b      	ldr	r3, [r7, #32]
 8013368:	7fdb      	ldrb	r3, [r3, #31]
 801336a:	429a      	cmp	r2, r3
 801336c:	d803      	bhi.n	8013376 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013370:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d001      	beq.n	8013382 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013380:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801338a:	2b00      	cmp	r3, #0
 801338c:	d1cb      	bne.n	8013326 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801338e:	6a3b      	ldr	r3, [r7, #32]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d008      	beq.n	80133a6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013394:	69b9      	ldr	r1, [r7, #24]
 8013396:	6a38      	ldr	r0, [r7, #32]
 8013398:	f7ff ff0e 	bl	80131b8 <ip_reass_free_complete_datagram>
 801339c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801339e:	697a      	ldr	r2, [r7, #20]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	4413      	add	r3, r2
 80133a4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80133a6:	697a      	ldr	r2, [r7, #20]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	da02      	bge.n	80133b4 <ip_reass_remove_oldest_datagram+0xb4>
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	dcac      	bgt.n	801330e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80133b4:	697b      	ldr	r3, [r7, #20]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3728      	adds	r7, #40	@ 0x28
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	20003cfc 	.word	0x20003cfc

080133c4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80133ce:	2004      	movs	r0, #4
 80133d0:	f7f4 f824 	bl	800741c <memp_malloc>
 80133d4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d116      	bne.n	801340a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff ff8e 	bl	8013300 <ip_reass_remove_oldest_datagram>
 80133e4:	4602      	mov	r2, r0
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	4293      	cmp	r3, r2
 80133ea:	dc03      	bgt.n	80133f4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80133ec:	2004      	movs	r0, #4
 80133ee:	f7f4 f815 	bl	800741c <memp_malloc>
 80133f2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d107      	bne.n	801340a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 80133fa:	4b11      	ldr	r3, [pc, #68]	@ (8013440 <ip_reass_enqueue_new_datagram+0x7c>)
 80133fc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80133fe:	3301      	adds	r3, #1
 8013400:	b29a      	uxth	r2, r3
 8013402:	4b0f      	ldr	r3, [pc, #60]	@ (8013440 <ip_reass_enqueue_new_datagram+0x7c>)
 8013404:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013406:	2300      	movs	r3, #0
 8013408:	e016      	b.n	8013438 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801340a:	2220      	movs	r2, #32
 801340c:	2100      	movs	r1, #0
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f002 fc1b 	bl	8015c4a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	220f      	movs	r2, #15
 8013418:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801341a:	4b0a      	ldr	r3, [pc, #40]	@ (8013444 <ip_reass_enqueue_new_datagram+0x80>)
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013422:	4a08      	ldr	r2, [pc, #32]	@ (8013444 <ip_reass_enqueue_new_datagram+0x80>)
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	3308      	adds	r3, #8
 801342c:	2214      	movs	r2, #20
 801342e:	6879      	ldr	r1, [r7, #4]
 8013430:	4618      	mov	r0, r3
 8013432:	f002 fcae 	bl	8015d92 <memcpy>
  return ipr;
 8013436:	68fb      	ldr	r3, [r7, #12]
}
 8013438:	4618      	mov	r0, r3
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	20003a9c 	.word	0x20003a9c
 8013444:	20003cfc 	.word	0x20003cfc

08013448 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013452:	4b10      	ldr	r3, [pc, #64]	@ (8013494 <ip_reass_dequeue_datagram+0x4c>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	429a      	cmp	r2, r3
 801345a:	d104      	bne.n	8013466 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	4a0c      	ldr	r2, [pc, #48]	@ (8013494 <ip_reass_dequeue_datagram+0x4c>)
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	e00d      	b.n	8013482 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <ip_reass_dequeue_datagram+0x32>
 801346c:	4b0a      	ldr	r3, [pc, #40]	@ (8013498 <ip_reass_dequeue_datagram+0x50>)
 801346e:	f240 1245 	movw	r2, #325	@ 0x145
 8013472:	490a      	ldr	r1, [pc, #40]	@ (801349c <ip_reass_dequeue_datagram+0x54>)
 8013474:	480a      	ldr	r0, [pc, #40]	@ (80134a0 <ip_reass_dequeue_datagram+0x58>)
 8013476:	f002 fb83 	bl	8015b80 <iprintf>
    prev->next = ipr->next;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013482:	6879      	ldr	r1, [r7, #4]
 8013484:	2004      	movs	r0, #4
 8013486:	f7f4 f821 	bl	80074cc <memp_free>
}
 801348a:	bf00      	nop
 801348c:	3708      	adds	r7, #8
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	20003cfc 	.word	0x20003cfc
 8013498:	0801940c 	.word	0x0801940c
 801349c:	080194d4 	.word	0x080194d4
 80134a0:	08019454 	.word	0x08019454

080134a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b08c      	sub	sp, #48	@ 0x30
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80134b0:	2300      	movs	r3, #0
 80134b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80134b4:	2301      	movs	r3, #1
 80134b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	885b      	ldrh	r3, [r3, #2]
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f3 f9b7 	bl	8006838 <lwip_htons>
 80134ca:	4603      	mov	r3, r0
 80134cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	f003 030f 	and.w	r3, r3, #15
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	009b      	lsls	r3, r3, #2
 80134da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80134dc:	7e7b      	ldrb	r3, [r7, #25]
 80134de:	b29b      	uxth	r3, r3
 80134e0:	8b7a      	ldrh	r2, [r7, #26]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d202      	bcs.n	80134ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134ea:	e135      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80134ec:	7e7b      	ldrb	r3, [r7, #25]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	8b7a      	ldrh	r2, [r7, #26]
 80134f2:	1ad3      	subs	r3, r2, r3
 80134f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	88db      	ldrh	r3, [r3, #6]
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f3 f99b 	bl	8006838 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013508:	b29b      	uxth	r3, r3
 801350a:	00db      	lsls	r3, r3, #3
 801350c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013516:	2200      	movs	r2, #0
 8013518:	701a      	strb	r2, [r3, #0]
 801351a:	2200      	movs	r2, #0
 801351c:	705a      	strb	r2, [r3, #1]
 801351e:	2200      	movs	r2, #0
 8013520:	709a      	strb	r2, [r3, #2]
 8013522:	2200      	movs	r2, #0
 8013524:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013528:	8afa      	ldrh	r2, [r7, #22]
 801352a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801352c:	8afa      	ldrh	r2, [r7, #22]
 801352e:	8b7b      	ldrh	r3, [r7, #26]
 8013530:	4413      	add	r3, r2
 8013532:	b29a      	uxth	r2, r3
 8013534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013536:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353a:	88db      	ldrh	r3, [r3, #6]
 801353c:	b29b      	uxth	r3, r3
 801353e:	8afa      	ldrh	r2, [r7, #22]
 8013540:	429a      	cmp	r2, r3
 8013542:	d902      	bls.n	801354a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013548:	e106      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013550:	e068      	b.n	8013624 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355a:	889b      	ldrh	r3, [r3, #4]
 801355c:	b29a      	uxth	r2, r3
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	889b      	ldrh	r3, [r3, #4]
 8013562:	b29b      	uxth	r3, r3
 8013564:	429a      	cmp	r2, r3
 8013566:	d235      	bcs.n	80135d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801356a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801356c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013570:	2b00      	cmp	r3, #0
 8013572:	d020      	beq.n	80135b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013576:	889b      	ldrh	r3, [r3, #4]
 8013578:	b29a      	uxth	r2, r3
 801357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801357c:	88db      	ldrh	r3, [r3, #6]
 801357e:	b29b      	uxth	r3, r3
 8013580:	429a      	cmp	r2, r3
 8013582:	d307      	bcc.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013586:	88db      	ldrh	r3, [r3, #6]
 8013588:	b29a      	uxth	r2, r3
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	889b      	ldrh	r3, [r3, #4]
 801358e:	b29b      	uxth	r3, r3
 8013590:	429a      	cmp	r2, r3
 8013592:	d902      	bls.n	801359a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013598:	e0de      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80135a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a2:	88db      	ldrh	r3, [r3, #6]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135a8:	889b      	ldrh	r3, [r3, #4]
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d03d      	beq.n	801362c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80135b0:	2300      	movs	r3, #0
 80135b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80135b4:	e03a      	b.n	801362c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80135b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b8:	88db      	ldrh	r3, [r3, #6]
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	889b      	ldrh	r3, [r3, #4]
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d902      	bls.n	80135cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135ca:	e0c5      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68ba      	ldr	r2, [r7, #8]
 80135d0:	605a      	str	r2, [r3, #4]
      break;
 80135d2:	e02b      	b.n	801362c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80135d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d6:	889b      	ldrh	r3, [r3, #4]
 80135d8:	b29a      	uxth	r2, r3
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	889b      	ldrh	r3, [r3, #4]
 80135de:	b29b      	uxth	r3, r3
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d102      	bne.n	80135ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135e8:	e0b6      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80135ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ec:	889b      	ldrh	r3, [r3, #4]
 80135ee:	b29a      	uxth	r2, r3
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	88db      	ldrh	r3, [r3, #6]
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d202      	bcs.n	8013600 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135fe:	e0ab      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013602:	2b00      	cmp	r3, #0
 8013604:	d009      	beq.n	801361a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013608:	88db      	ldrh	r3, [r3, #6]
 801360a:	b29a      	uxth	r2, r3
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	889b      	ldrh	r3, [r3, #4]
 8013610:	b29b      	uxth	r3, r3
 8013612:	429a      	cmp	r2, r3
 8013614:	d001      	beq.n	801361a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013616:	2300      	movs	r3, #0
 8013618:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013626:	2b00      	cmp	r3, #0
 8013628:	d193      	bne.n	8013552 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801362a:	e000      	b.n	801362e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801362c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013630:	2b00      	cmp	r3, #0
 8013632:	d12d      	bne.n	8013690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013636:	2b00      	cmp	r3, #0
 8013638:	d01c      	beq.n	8013674 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363c:	88db      	ldrh	r3, [r3, #6]
 801363e:	b29a      	uxth	r2, r3
 8013640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013642:	889b      	ldrh	r3, [r3, #4]
 8013644:	b29b      	uxth	r3, r3
 8013646:	429a      	cmp	r2, r3
 8013648:	d906      	bls.n	8013658 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801364a:	4b45      	ldr	r3, [pc, #276]	@ (8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801364c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013650:	4944      	ldr	r1, [pc, #272]	@ (8013764 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013652:	4845      	ldr	r0, [pc, #276]	@ (8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013654:	f002 fa94 	bl	8015b80 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365a:	68ba      	ldr	r2, [r7, #8]
 801365c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013660:	88db      	ldrh	r3, [r3, #6]
 8013662:	b29a      	uxth	r2, r3
 8013664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013666:	889b      	ldrh	r3, [r3, #4]
 8013668:	b29b      	uxth	r3, r3
 801366a:	429a      	cmp	r2, r3
 801366c:	d010      	beq.n	8013690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	623b      	str	r3, [r7, #32]
 8013672:	e00d      	b.n	8013690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d006      	beq.n	801368a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801367c:	4b38      	ldr	r3, [pc, #224]	@ (8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801367e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013682:	493a      	ldr	r1, [pc, #232]	@ (801376c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013684:	4838      	ldr	r0, [pc, #224]	@ (8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013686:	f002 fa7b 	bl	8015b80 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d105      	bne.n	80136a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	7f9b      	ldrb	r3, [r3, #30]
 801369a:	f003 0301 	and.w	r3, r3, #1
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d059      	beq.n	8013756 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d04f      	beq.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d006      	beq.n	80136be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	889b      	ldrh	r3, [r3, #4]
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d002      	beq.n	80136c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	623b      	str	r3, [r7, #32]
 80136c2:	e041      	b.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80136c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80136c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80136ce:	e012      	b.n	80136f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80136d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80136d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d8:	88db      	ldrh	r3, [r3, #6]
 80136da:	b29a      	uxth	r2, r3
 80136dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136de:	889b      	ldrh	r3, [r3, #4]
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d002      	beq.n	80136ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80136e6:	2300      	movs	r3, #0
 80136e8:	623b      	str	r3, [r7, #32]
            break;
 80136ea:	e007      	b.n	80136fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80136ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80136f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80136f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1e9      	bne.n	80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80136fc:	6a3b      	ldr	r3, [r7, #32]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d022      	beq.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d106      	bne.n	8013718 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801370a:	4b15      	ldr	r3, [pc, #84]	@ (8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801370c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013710:	4917      	ldr	r1, [pc, #92]	@ (8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013712:	4815      	ldr	r0, [pc, #84]	@ (8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013714:	f002 fa34 	bl	8015b80 <iprintf>
          LWIP_ASSERT("sanity check",
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013720:	429a      	cmp	r2, r3
 8013722:	d106      	bne.n	8013732 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013724:	4b0e      	ldr	r3, [pc, #56]	@ (8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013726:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801372a:	4911      	ldr	r1, [pc, #68]	@ (8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801372c:	480e      	ldr	r0, [pc, #56]	@ (8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801372e:	f002 fa27 	bl	8015b80 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d006      	beq.n	8013748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801373a:	4b09      	ldr	r3, [pc, #36]	@ (8013760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801373c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013740:	490c      	ldr	r1, [pc, #48]	@ (8013774 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013742:	4809      	ldr	r0, [pc, #36]	@ (8013768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013744:	f002 fa1c 	bl	8015b80 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013748:	6a3b      	ldr	r3, [r7, #32]
 801374a:	2b00      	cmp	r3, #0
 801374c:	bf14      	ite	ne
 801374e:	2301      	movne	r3, #1
 8013750:	2300      	moveq	r3, #0
 8013752:	b2db      	uxtb	r3, r3
 8013754:	e000      	b.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013756:	2300      	movs	r3, #0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3730      	adds	r7, #48	@ 0x30
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	0801940c 	.word	0x0801940c
 8013764:	080194f0 	.word	0x080194f0
 8013768:	08019454 	.word	0x08019454
 801376c:	08019510 	.word	0x08019510
 8013770:	08019548 	.word	0x08019548
 8013774:	08019558 	.word	0x08019558

08013778 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b08e      	sub	sp, #56	@ 0x38
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8013780:	4b94      	ldr	r3, [pc, #592]	@ (80139d4 <ip4_reass+0x25c>)
 8013782:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013784:	3301      	adds	r3, #1
 8013786:	b29a      	uxth	r2, r3
 8013788:	4b92      	ldr	r3, [pc, #584]	@ (80139d4 <ip4_reass+0x25c>)
 801378a:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	f003 030f 	and.w	r3, r3, #15
 801379a:	b2db      	uxtb	r3, r3
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b14      	cmp	r3, #20
 80137a2:	d008      	beq.n	80137b6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 80137a4:	4b8b      	ldr	r3, [pc, #556]	@ (80139d4 <ip4_reass+0x25c>)
 80137a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80137aa:	3301      	adds	r3, #1
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	4b89      	ldr	r3, [pc, #548]	@ (80139d4 <ip4_reass+0x25c>)
 80137b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 80137b4:	e183      	b.n	8013abe <ip4_reass+0x346>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80137b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b8:	88db      	ldrh	r3, [r3, #6]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	4618      	mov	r0, r3
 80137be:	f7f3 f83b 	bl	8006838 <lwip_htons>
 80137c2:	4603      	mov	r3, r0
 80137c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	00db      	lsls	r3, r3, #3
 80137cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80137ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d0:	885b      	ldrh	r3, [r3, #2]
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7f3 f82f 	bl	8006838 <lwip_htons>
 80137da:	4603      	mov	r3, r0
 80137dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80137de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	f003 030f 	and.w	r3, r3, #15
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80137ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80137f6:	429a      	cmp	r2, r3
 80137f8:	f0c0 815e 	bcc.w	8013ab8 <ip4_reass+0x340>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80137fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013800:	b29b      	uxth	r3, r3
 8013802:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7f4 fcc9 	bl	80081a0 <pbuf_clen>
 801380e:	4603      	mov	r3, r0
 8013810:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013812:	4b71      	ldr	r3, [pc, #452]	@ (80139d8 <ip4_reass+0x260>)
 8013814:	881b      	ldrh	r3, [r3, #0]
 8013816:	461a      	mov	r2, r3
 8013818:	8c3b      	ldrh	r3, [r7, #32]
 801381a:	4413      	add	r3, r2
 801381c:	2b0a      	cmp	r3, #10
 801381e:	dd15      	ble.n	801384c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013820:	8c3b      	ldrh	r3, [r7, #32]
 8013822:	4619      	mov	r1, r3
 8013824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013826:	f7ff fd6b 	bl	8013300 <ip_reass_remove_oldest_datagram>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d006      	beq.n	801383e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013830:	4b69      	ldr	r3, [pc, #420]	@ (80139d8 <ip4_reass+0x260>)
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	461a      	mov	r2, r3
 8013836:	8c3b      	ldrh	r3, [r7, #32]
 8013838:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801383a:	2b0a      	cmp	r3, #10
 801383c:	dd06      	ble.n	801384c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801383e:	4b65      	ldr	r3, [pc, #404]	@ (80139d4 <ip4_reass+0x25c>)
 8013840:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8013842:	3301      	adds	r3, #1
 8013844:	b29a      	uxth	r2, r3
 8013846:	4b63      	ldr	r3, [pc, #396]	@ (80139d4 <ip4_reass+0x25c>)
 8013848:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801384a:	e138      	b.n	8013abe <ip4_reass+0x346>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801384c:	4b63      	ldr	r3, [pc, #396]	@ (80139dc <ip4_reass+0x264>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	633b      	str	r3, [r7, #48]	@ 0x30
 8013852:	e01e      	b.n	8013892 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013856:	695a      	ldr	r2, [r3, #20]
 8013858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	429a      	cmp	r2, r3
 801385e:	d115      	bne.n	801388c <ip4_reass+0x114>
 8013860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013862:	699a      	ldr	r2, [r3, #24]
 8013864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013866:	691b      	ldr	r3, [r3, #16]
 8013868:	429a      	cmp	r2, r3
 801386a:	d10f      	bne.n	801388c <ip4_reass+0x114>
 801386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801386e:	899a      	ldrh	r2, [r3, #12]
 8013870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013872:	889b      	ldrh	r3, [r3, #4]
 8013874:	b29b      	uxth	r3, r3
 8013876:	429a      	cmp	r2, r3
 8013878:	d108      	bne.n	801388c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801387a:	4b56      	ldr	r3, [pc, #344]	@ (80139d4 <ip4_reass+0x25c>)
 801387c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8013880:	3301      	adds	r3, #1
 8013882:	b29a      	uxth	r2, r3
 8013884:	4b53      	ldr	r3, [pc, #332]	@ (80139d4 <ip4_reass+0x25c>)
 8013886:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801388a:	e005      	b.n	8013898 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	633b      	str	r3, [r7, #48]	@ 0x30
 8013892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1dd      	bne.n	8013854 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8013898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389a:	2b00      	cmp	r3, #0
 801389c:	d109      	bne.n	80138b2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801389e:	8c3b      	ldrh	r3, [r7, #32]
 80138a0:	4619      	mov	r1, r3
 80138a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138a4:	f7ff fd8e 	bl	80133c4 <ip_reass_enqueue_new_datagram>
 80138a8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80138aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d11c      	bne.n	80138ea <ip4_reass+0x172>
      goto nullreturn;
 80138b0:	e105      	b.n	8013abe <ip4_reass+0x346>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b4:	88db      	ldrh	r3, [r3, #6]
 80138b6:	b29b      	uxth	r3, r3
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7f2 ffbd 	bl	8006838 <lwip_htons>
 80138be:	4603      	mov	r3, r0
 80138c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d110      	bne.n	80138ea <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80138c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ca:	89db      	ldrh	r3, [r3, #14]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7f2 ffb3 	bl	8006838 <lwip_htons>
 80138d2:	4603      	mov	r3, r0
 80138d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d006      	beq.n	80138ea <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80138dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138de:	3308      	adds	r3, #8
 80138e0:	2214      	movs	r2, #20
 80138e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80138e4:	4618      	mov	r0, r3
 80138e6:	f002 fa54 	bl	8015d92 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80138ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ec:	88db      	ldrh	r3, [r3, #6]
 80138ee:	b29b      	uxth	r3, r3
 80138f0:	f003 0320 	and.w	r3, r3, #32
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	bf0c      	ite	eq
 80138f8:	2301      	moveq	r3, #1
 80138fa:	2300      	movne	r3, #0
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00e      	beq.n	8013924 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8013906:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013908:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801390a:	4413      	add	r3, r2
 801390c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801390e:	8b7a      	ldrh	r2, [r7, #26]
 8013910:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013912:	429a      	cmp	r2, r3
 8013914:	f0c0 80ae 	bcc.w	8013a74 <ip4_reass+0x2fc>
 8013918:	8b7b      	ldrh	r3, [r7, #26]
 801391a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801391e:	4293      	cmp	r3, r2
 8013920:	f200 80a8 	bhi.w	8013a74 <ip4_reass+0x2fc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013924:	69fa      	ldr	r2, [r7, #28]
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801392a:	f7ff fdbb 	bl	80134a4 <ip_reass_chain_frag_into_datagram_and_validate>
 801392e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013936:	f000 809f 	beq.w	8013a78 <ip4_reass+0x300>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801393a:	4b27      	ldr	r3, [pc, #156]	@ (80139d8 <ip4_reass+0x260>)
 801393c:	881a      	ldrh	r2, [r3, #0]
 801393e:	8c3b      	ldrh	r3, [r7, #32]
 8013940:	4413      	add	r3, r2
 8013942:	b29a      	uxth	r2, r3
 8013944:	4b24      	ldr	r3, [pc, #144]	@ (80139d8 <ip4_reass+0x260>)
 8013946:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00d      	beq.n	801396a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801394e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013952:	4413      	add	r3, r2
 8013954:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013958:	8a7a      	ldrh	r2, [r7, #18]
 801395a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395e:	7f9b      	ldrb	r3, [r3, #30]
 8013960:	f043 0301 	orr.w	r3, r3, #1
 8013964:	b2da      	uxtb	r2, r3
 8013966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013968:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d17f      	bne.n	8013a70 <ip4_reass+0x2f8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013972:	8b9b      	ldrh	r3, [r3, #28]
 8013974:	3314      	adds	r3, #20
 8013976:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013984:	685b      	ldr	r3, [r3, #4]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801398c:	3308      	adds	r3, #8
 801398e:	2214      	movs	r2, #20
 8013990:	4619      	mov	r1, r3
 8013992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013994:	f002 f9fd 	bl	8015d92 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013998:	8a3b      	ldrh	r3, [r7, #16]
 801399a:	4618      	mov	r0, r3
 801399c:	f7f2 ff4c 	bl	8006838 <lwip_htons>
 80139a0:	4603      	mov	r3, r0
 80139a2:	461a      	mov	r2, r3
 80139a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80139a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139aa:	2200      	movs	r2, #0
 80139ac:	719a      	strb	r2, [r3, #6]
 80139ae:	2200      	movs	r2, #0
 80139b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80139b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b4:	2200      	movs	r2, #0
 80139b6:	729a      	strb	r2, [r3, #10]
 80139b8:	2200      	movs	r2, #0
 80139ba:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80139bc:	2114      	movs	r1, #20
 80139be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139c0:	f7f3 fba5 	bl	800710e <inet_chksum>
 80139c4:	4603      	mov	r3, r0
 80139c6:	461a      	mov	r2, r3
 80139c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ca:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80139cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80139d2:	e013      	b.n	80139fc <ip4_reass+0x284>
 80139d4:	20003a9c 	.word	0x20003a9c
 80139d8:	20003d00 	.word	0x20003d00
 80139dc:	20003cfc 	.word	0x20003cfc
      iprh = (struct ip_reass_helper *)r->payload;
 80139e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80139e6:	2114      	movs	r1, #20
 80139e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80139ea:	f7f4 fac5 	bl	8007f78 <pbuf_remove_header>
      pbuf_cat(p, r);
 80139ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7f4 fc15 	bl	8008220 <pbuf_cat>
      r = iprh->next_pbuf;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80139fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d1ee      	bne.n	80139e0 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013a02:	4b36      	ldr	r3, [pc, #216]	@ (8013adc <ip4_reass+0x364>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d102      	bne.n	8013a12 <ip4_reass+0x29a>
      ipr_prev = NULL;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a10:	e010      	b.n	8013a34 <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013a12:	4b32      	ldr	r3, [pc, #200]	@ (8013adc <ip4_reass+0x364>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a18:	e007      	b.n	8013a2a <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 8013a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d006      	beq.n	8013a32 <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d1f4      	bne.n	8013a1a <ip4_reass+0x2a2>
 8013a30:	e000      	b.n	8013a34 <ip4_reass+0x2bc>
          break;
 8013a32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013a34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013a36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a38:	f7ff fd06 	bl	8013448 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f7f4 fbaf 	bl	80081a0 <pbuf_clen>
 8013a42:	4603      	mov	r3, r0
 8013a44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013a46:	4b26      	ldr	r3, [pc, #152]	@ (8013ae0 <ip4_reass+0x368>)
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	8c3a      	ldrh	r2, [r7, #32]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d906      	bls.n	8013a5e <ip4_reass+0x2e6>
 8013a50:	4b24      	ldr	r3, [pc, #144]	@ (8013ae4 <ip4_reass+0x36c>)
 8013a52:	f240 229b 	movw	r2, #667	@ 0x29b
 8013a56:	4924      	ldr	r1, [pc, #144]	@ (8013ae8 <ip4_reass+0x370>)
 8013a58:	4824      	ldr	r0, [pc, #144]	@ (8013aec <ip4_reass+0x374>)
 8013a5a:	f002 f891 	bl	8015b80 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013a5e:	4b20      	ldr	r3, [pc, #128]	@ (8013ae0 <ip4_reass+0x368>)
 8013a60:	881a      	ldrh	r2, [r3, #0]
 8013a62:	8c3b      	ldrh	r3, [r7, #32]
 8013a64:	1ad3      	subs	r3, r2, r3
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	4b1d      	ldr	r3, [pc, #116]	@ (8013ae0 <ip4_reass+0x368>)
 8013a6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	e030      	b.n	8013ad2 <ip4_reass+0x35a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013a70:	2300      	movs	r3, #0
 8013a72:	e02e      	b.n	8013ad2 <ip4_reass+0x35a>
      goto nullreturn_ipr;
 8013a74:	bf00      	nop
 8013a76:	e000      	b.n	8013a7a <ip4_reass+0x302>
    goto nullreturn_ipr;
 8013a78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d106      	bne.n	8013a8e <ip4_reass+0x316>
 8013a80:	4b18      	ldr	r3, [pc, #96]	@ (8013ae4 <ip4_reass+0x36c>)
 8013a82:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013a86:	491a      	ldr	r1, [pc, #104]	@ (8013af0 <ip4_reass+0x378>)
 8013a88:	4818      	ldr	r0, [pc, #96]	@ (8013aec <ip4_reass+0x374>)
 8013a8a:	f002 f879 	bl	8015b80 <iprintf>
  if (ipr->p == NULL) {
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d112      	bne.n	8013abc <ip4_reass+0x344>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013a96:	4b11      	ldr	r3, [pc, #68]	@ (8013adc <ip4_reass+0x364>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d006      	beq.n	8013aae <ip4_reass+0x336>
 8013aa0:	4b10      	ldr	r3, [pc, #64]	@ (8013ae4 <ip4_reass+0x36c>)
 8013aa2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013aa6:	4913      	ldr	r1, [pc, #76]	@ (8013af4 <ip4_reass+0x37c>)
 8013aa8:	4810      	ldr	r0, [pc, #64]	@ (8013aec <ip4_reass+0x374>)
 8013aaa:	f002 f869 	bl	8015b80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013aae:	2100      	movs	r1, #0
 8013ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ab2:	f7ff fcc9 	bl	8013448 <ip_reass_dequeue_datagram>
 8013ab6:	e002      	b.n	8013abe <ip4_reass+0x346>
    goto nullreturn;
 8013ab8:	bf00      	nop
 8013aba:	e000      	b.n	8013abe <ip4_reass+0x346>
  }

nullreturn:
 8013abc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8013abe:	4b0e      	ldr	r3, [pc, #56]	@ (8013af8 <ip4_reass+0x380>)
 8013ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8013af8 <ip4_reass+0x380>)
 8013ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7f4 fada 	bl	8008084 <pbuf_free>
  return NULL;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3738      	adds	r7, #56	@ 0x38
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	20003cfc 	.word	0x20003cfc
 8013ae0:	20003d00 	.word	0x20003d00
 8013ae4:	0801940c 	.word	0x0801940c
 8013ae8:	0801957c 	.word	0x0801957c
 8013aec:	08019454 	.word	0x08019454
 8013af0:	08019598 	.word	0x08019598
 8013af4:	080195a4 	.word	0x080195a4
 8013af8:	20003a9c 	.word	0x20003a9c

08013afc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013b00:	2005      	movs	r0, #5
 8013b02:	f7f3 fc8b 	bl	800741c <memp_malloc>
 8013b06:	4603      	mov	r3, r0
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d106      	bne.n	8013b28 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013b1a:	4b07      	ldr	r3, [pc, #28]	@ (8013b38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013b1c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013b20:	4906      	ldr	r1, [pc, #24]	@ (8013b3c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013b22:	4807      	ldr	r0, [pc, #28]	@ (8013b40 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013b24:	f002 f82c 	bl	8015b80 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013b28:	6879      	ldr	r1, [r7, #4]
 8013b2a:	2005      	movs	r0, #5
 8013b2c:	f7f3 fcce 	bl	80074cc <memp_free>
}
 8013b30:	bf00      	nop
 8013b32:	3708      	adds	r7, #8
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	0801940c 	.word	0x0801940c
 8013b3c:	080195c4 	.word	0x080195c4
 8013b40:	08019454 	.word	0x08019454

08013b44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d106      	bne.n	8013b64 <ipfrag_free_pbuf_custom+0x20>
 8013b56:	4b11      	ldr	r3, [pc, #68]	@ (8013b9c <ipfrag_free_pbuf_custom+0x58>)
 8013b58:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013b5c:	4910      	ldr	r1, [pc, #64]	@ (8013ba0 <ipfrag_free_pbuf_custom+0x5c>)
 8013b5e:	4811      	ldr	r0, [pc, #68]	@ (8013ba4 <ipfrag_free_pbuf_custom+0x60>)
 8013b60:	f002 f80e 	bl	8015b80 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d006      	beq.n	8013b7a <ipfrag_free_pbuf_custom+0x36>
 8013b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b9c <ipfrag_free_pbuf_custom+0x58>)
 8013b6e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013b72:	490d      	ldr	r1, [pc, #52]	@ (8013ba8 <ipfrag_free_pbuf_custom+0x64>)
 8013b74:	480b      	ldr	r0, [pc, #44]	@ (8013ba4 <ipfrag_free_pbuf_custom+0x60>)
 8013b76:	f002 f803 	bl	8015b80 <iprintf>
  if (pcr->original != NULL) {
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d004      	beq.n	8013b8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	695b      	ldr	r3, [r3, #20]
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f4 fa7c 	bl	8008084 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f7ff ffbd 	bl	8013b0c <ip_frag_free_pbuf_custom_ref>
}
 8013b92:	bf00      	nop
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	0801940c 	.word	0x0801940c
 8013ba0:	080195d0 	.word	0x080195d0
 8013ba4:	08019454 	.word	0x08019454
 8013ba8:	080195dc 	.word	0x080195dc

08013bac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b094      	sub	sp, #80	@ 0x50
 8013bb0:	af02      	add	r7, sp, #8
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013bc2:	3b14      	subs	r3, #20
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	da00      	bge.n	8013bca <ip4_frag+0x1e>
 8013bc8:	3307      	adds	r3, #7
 8013bca:	10db      	asrs	r3, r3, #3
 8013bcc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013bce:	2314      	movs	r3, #20
 8013bd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	f003 030f 	and.w	r3, r3, #15
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b14      	cmp	r3, #20
 8013bec:	d002      	beq.n	8013bf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013bee:	f06f 0305 	mvn.w	r3, #5
 8013bf2:	e11e      	b.n	8013e32 <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	895b      	ldrh	r3, [r3, #10]
 8013bf8:	2b13      	cmp	r3, #19
 8013bfa:	d809      	bhi.n	8013c10 <ip4_frag+0x64>
 8013bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8013e3c <ip4_frag+0x290>)
 8013bfe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013c02:	498f      	ldr	r1, [pc, #572]	@ (8013e40 <ip4_frag+0x294>)
 8013c04:	488f      	ldr	r0, [pc, #572]	@ (8013e44 <ip4_frag+0x298>)
 8013c06:	f001 ffbb 	bl	8015b80 <iprintf>
 8013c0a:	f06f 0305 	mvn.w	r3, #5
 8013c0e:	e110      	b.n	8013e32 <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c12:	88db      	ldrh	r3, [r3, #6]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7f2 fe0e 	bl	8006838 <lwip_htons>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013c20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013c2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013c30:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	891b      	ldrh	r3, [r3, #8]
 8013c36:	3b14      	subs	r3, #20
 8013c38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013c3c:	e0ef      	b.n	8013e1e <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013c3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013c40:	00db      	lsls	r3, r3, #3
 8013c42:	b29b      	uxth	r3, r3
 8013c44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	bf28      	it	cs
 8013c4c:	4613      	movcs	r3, r2
 8013c4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013c50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013c54:	2114      	movs	r1, #20
 8013c56:	200e      	movs	r0, #14
 8013c58:	f7f3 ff32 	bl	8007ac0 <pbuf_alloc>
 8013c5c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f000 80e3 	beq.w	8013e2c <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c68:	895b      	ldrh	r3, [r3, #10]
 8013c6a:	2b13      	cmp	r3, #19
 8013c6c:	d806      	bhi.n	8013c7c <ip4_frag+0xd0>
 8013c6e:	4b73      	ldr	r3, [pc, #460]	@ (8013e3c <ip4_frag+0x290>)
 8013c70:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013c74:	4974      	ldr	r1, [pc, #464]	@ (8013e48 <ip4_frag+0x29c>)
 8013c76:	4873      	ldr	r0, [pc, #460]	@ (8013e44 <ip4_frag+0x298>)
 8013c78:	f001 ff82 	bl	8015b80 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	2214      	movs	r2, #20
 8013c82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013c84:	4618      	mov	r0, r3
 8013c86:	f002 f884 	bl	8015d92 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013c90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013c92:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013c96:	e064      	b.n	8013d62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	895a      	ldrh	r2, [r3, #10]
 8013c9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c9e:	1ad3      	subs	r3, r2, r3
 8013ca0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	895b      	ldrh	r3, [r3, #10]
 8013ca6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d906      	bls.n	8013cba <ip4_frag+0x10e>
 8013cac:	4b63      	ldr	r3, [pc, #396]	@ (8013e3c <ip4_frag+0x290>)
 8013cae:	f240 322d 	movw	r2, #813	@ 0x32d
 8013cb2:	4966      	ldr	r1, [pc, #408]	@ (8013e4c <ip4_frag+0x2a0>)
 8013cb4:	4863      	ldr	r0, [pc, #396]	@ (8013e44 <ip4_frag+0x298>)
 8013cb6:	f001 ff63 	bl	8015b80 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013cba:	8bfa      	ldrh	r2, [r7, #30]
 8013cbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013cc0:	4293      	cmp	r3, r2
 8013cc2:	bf28      	it	cs
 8013cc4:	4613      	movcs	r3, r2
 8013cc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013cca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d105      	bne.n	8013cde <ip4_frag+0x132>
        poff = 0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	60fb      	str	r3, [r7, #12]
        continue;
 8013cdc:	e041      	b.n	8013d62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013cde:	f7ff ff0d 	bl	8013afc <ip_frag_alloc_pbuf_custom_ref>
 8013ce2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013ce4:	69bb      	ldr	r3, [r7, #24]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d103      	bne.n	8013cf2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013cea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cec:	f7f4 f9ca 	bl	8008084 <pbuf_free>
        goto memerr;
 8013cf0:	e09d      	b.n	8013e2e <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013cf2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013cf8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013cfa:	4413      	add	r3, r2
 8013cfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013d00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013d04:	9201      	str	r2, [sp, #4]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2241      	movs	r2, #65	@ 0x41
 8013d0c:	2000      	movs	r0, #0
 8013d0e:	f7f4 f801 	bl	8007d14 <pbuf_alloced_custom>
 8013d12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d106      	bne.n	8013d28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013d1a:	69b8      	ldr	r0, [r7, #24]
 8013d1c:	f7ff fef6 	bl	8013b0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d22:	f7f4 f9af 	bl	8008084 <pbuf_free>
        goto memerr;
 8013d26:	e082      	b.n	8013e2e <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f7f4 fa51 	bl	80081d0 <pbuf_ref>
      pcr->original = p;
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	68fa      	ldr	r2, [r7, #12]
 8013d32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	4a46      	ldr	r2, [pc, #280]	@ (8013e50 <ip4_frag+0x2a4>)
 8013d38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013d3a:	6979      	ldr	r1, [r7, #20]
 8013d3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d3e:	f7f4 fa6f 	bl	8008220 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013d42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013d46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013d50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d004      	beq.n	8013d62 <ip4_frag+0x1b6>
        poff = 0;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013d62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d196      	bne.n	8013c98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013d6a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d70:	4413      	add	r3, r2
 8013d72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013d78:	f1a3 0213 	sub.w	r2, r3, #19
 8013d7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d80:	429a      	cmp	r2, r3
 8013d82:	bfcc      	ite	gt
 8013d84:	2301      	movgt	r3, #1
 8013d86:	2300      	movle	r3, #0
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013d8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013d96:	6a3b      	ldr	r3, [r7, #32]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d002      	beq.n	8013da2 <ip4_frag+0x1f6>
 8013d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d003      	beq.n	8013daa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013da2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013da8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013daa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7f2 fd43 	bl	8006838 <lwip_htons>
 8013db2:	4603      	mov	r3, r0
 8013db4:	461a      	mov	r2, r3
 8013db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013dba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013dbc:	3314      	adds	r3, #20
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f2 fd39 	bl	8006838 <lwip_htons>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	461a      	mov	r2, r3
 8013dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dcc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	729a      	strb	r2, [r3, #10]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013dd8:	2114      	movs	r1, #20
 8013dda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ddc:	f7f3 f997 	bl	800710e <inet_chksum>
 8013de0:	4603      	mov	r3, r0
 8013de2:	461a      	mov	r2, r3
 8013de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013de6:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	695b      	ldr	r3, [r3, #20]
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013df0:	68b8      	ldr	r0, [r7, #8]
 8013df2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8013df4:	4b17      	ldr	r3, [pc, #92]	@ (8013e54 <ip4_frag+0x2a8>)
 8013df6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013df8:	3301      	adds	r3, #1
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	4b15      	ldr	r3, [pc, #84]	@ (8013e54 <ip4_frag+0x2a8>)
 8013dfe:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013e00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e02:	f7f4 f93f 	bl	8008084 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013e06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013e0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013e0c:	1ad3      	subs	r3, r2, r3
 8013e0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013e12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013e16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013e18:	4413      	add	r3, r2
 8013e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	f47f af0b 	bne.w	8013c3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e002      	b.n	8013e32 <ip4_frag+0x286>
      goto memerr;
 8013e2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3748      	adds	r7, #72	@ 0x48
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	0801940c 	.word	0x0801940c
 8013e40:	080195e8 	.word	0x080195e8
 8013e44:	08019454 	.word	0x08019454
 8013e48:	08019604 	.word	0x08019604
 8013e4c:	08019624 	.word	0x08019624
 8013e50:	08013b45 	.word	0x08013b45
 8013e54:	20003a9c 	.word	0x20003a9c

08013e58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013e62:	230e      	movs	r3, #14
 8013e64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	895b      	ldrh	r3, [r3, #10]
 8013e6a:	2b0e      	cmp	r3, #14
 8013e6c:	d80c      	bhi.n	8013e88 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8013e6e:	4b51      	ldr	r3, [pc, #324]	@ (8013fb4 <ethernet_input+0x15c>)
 8013e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e72:	3301      	adds	r3, #1
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	4b4f      	ldr	r3, [pc, #316]	@ (8013fb4 <ethernet_input+0x15c>)
 8013e78:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8013e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8013fb4 <ethernet_input+0x15c>)
 8013e7c:	8bdb      	ldrh	r3, [r3, #30]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	4b4c      	ldr	r3, [pc, #304]	@ (8013fb4 <ethernet_input+0x15c>)
 8013e84:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8013e86:	e08d      	b.n	8013fa4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	7bdb      	ldrb	r3, [r3, #15]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d106      	bne.n	8013e9e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013e96:	3301      	adds	r3, #1
 8013e98:	b2da      	uxtb	r2, r3
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	7b1a      	ldrb	r2, [r3, #12]
 8013ea8:	7b5b      	ldrb	r3, [r3, #13]
 8013eaa:	021b      	lsls	r3, r3, #8
 8013eac:	4313      	orrs	r3, r2
 8013eae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	f003 0301 	and.w	r3, r3, #1
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d023      	beq.n	8013f04 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d10f      	bne.n	8013ee4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	785b      	ldrb	r3, [r3, #1]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d11b      	bne.n	8013f04 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013ed0:	2b5e      	cmp	r3, #94	@ 0x5e
 8013ed2:	d117      	bne.n	8013f04 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	7b5b      	ldrb	r3, [r3, #13]
 8013ed8:	f043 0310 	orr.w	r3, r3, #16
 8013edc:	b2da      	uxtb	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	735a      	strb	r2, [r3, #13]
 8013ee2:	e00f      	b.n	8013f04 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	2206      	movs	r2, #6
 8013ee8:	4933      	ldr	r1, [pc, #204]	@ (8013fb8 <ethernet_input+0x160>)
 8013eea:	4618      	mov	r0, r3
 8013eec:	f001 fe9d 	bl	8015c2a <memcmp>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d106      	bne.n	8013f04 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	7b5b      	ldrb	r3, [r3, #13]
 8013efa:	f043 0308 	orr.w	r3, r3, #8
 8013efe:	b2da      	uxtb	r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013f04:	89fb      	ldrh	r3, [r7, #14]
 8013f06:	2b08      	cmp	r3, #8
 8013f08:	d003      	beq.n	8013f12 <ethernet_input+0xba>
 8013f0a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013f0e:	d014      	beq.n	8013f3a <ethernet_input+0xe2>
 8013f10:	e034      	b.n	8013f7c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f18:	f003 0308 	and.w	r3, r3, #8
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d03c      	beq.n	8013f9a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f20:	8afb      	ldrh	r3, [r7, #22]
 8013f22:	4619      	mov	r1, r3
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f7f4 f827 	bl	8007f78 <pbuf_remove_header>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d136      	bne.n	8013f9e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8013f30:	6839      	ldr	r1, [r7, #0]
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f7fe fdca 	bl	8012acc <ip4_input>
      }
      break;
 8013f38:	e02d      	b.n	8013f96 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f40:	f003 0308 	and.w	r3, r3, #8
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d02c      	beq.n	8013fa2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f48:	8afb      	ldrh	r3, [r7, #22]
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f7f4 f813 	bl	8007f78 <pbuf_remove_header>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d00c      	beq.n	8013f72 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8013f58:	4b16      	ldr	r3, [pc, #88]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	b29a      	uxth	r2, r3
 8013f60:	4b14      	ldr	r3, [pc, #80]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f62:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013f64:	4b13      	ldr	r3, [pc, #76]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f66:	8bdb      	ldrh	r3, [r3, #30]
 8013f68:	3301      	adds	r3, #1
 8013f6a:	b29a      	uxth	r2, r3
 8013f6c:	4b11      	ldr	r3, [pc, #68]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f6e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8013f70:	e018      	b.n	8013fa4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7fd fe99 	bl	8011cac <etharp_input>
      }
      break;
 8013f7a:	e00c      	b.n	8013f96 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8013f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f80:	3301      	adds	r3, #1
 8013f82:	b29a      	uxth	r2, r3
 8013f84:	4b0b      	ldr	r3, [pc, #44]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8013f88:	4b0a      	ldr	r3, [pc, #40]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f8a:	8bdb      	ldrh	r3, [r3, #30]
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	4b08      	ldr	r3, [pc, #32]	@ (8013fb4 <ethernet_input+0x15c>)
 8013f92:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013f94:	e006      	b.n	8013fa4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013f96:	2300      	movs	r3, #0
 8013f98:	e008      	b.n	8013fac <ethernet_input+0x154>
        goto free_and_return;
 8013f9a:	bf00      	nop
 8013f9c:	e002      	b.n	8013fa4 <ethernet_input+0x14c>
        goto free_and_return;
 8013f9e:	bf00      	nop
 8013fa0:	e000      	b.n	8013fa4 <ethernet_input+0x14c>
        goto free_and_return;
 8013fa2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7f4 f86d 	bl	8008084 <pbuf_free>
  return ERR_OK;
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	20003a9c 	.word	0x20003a9c
 8013fb8:	0801999c 	.word	0x0801999c

08013fbc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b086      	sub	sp, #24
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	607a      	str	r2, [r7, #4]
 8013fc8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013fca:	8c3b      	ldrh	r3, [r7, #32]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7f2 fc33 	bl	8006838 <lwip_htons>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013fd6:	210e      	movs	r1, #14
 8013fd8:	68b8      	ldr	r0, [r7, #8]
 8013fda:	f7f3 ffbd 	bl	8007f58 <pbuf_add_header>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d125      	bne.n	8014030 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	8afa      	ldrh	r2, [r7, #22]
 8013fee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	2206      	movs	r2, #6
 8013ff4:	6839      	ldr	r1, [r7, #0]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f001 fecb 	bl	8015d92 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	3306      	adds	r3, #6
 8014000:	2206      	movs	r2, #6
 8014002:	6879      	ldr	r1, [r7, #4]
 8014004:	4618      	mov	r0, r3
 8014006:	f001 fec4 	bl	8015d92 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014010:	2b06      	cmp	r3, #6
 8014012:	d006      	beq.n	8014022 <ethernet_output+0x66>
 8014014:	4b0d      	ldr	r3, [pc, #52]	@ (801404c <ethernet_output+0x90>)
 8014016:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801401a:	490d      	ldr	r1, [pc, #52]	@ (8014050 <ethernet_output+0x94>)
 801401c:	480d      	ldr	r0, [pc, #52]	@ (8014054 <ethernet_output+0x98>)
 801401e:	f001 fdaf 	bl	8015b80 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	699b      	ldr	r3, [r3, #24]
 8014026:	68b9      	ldr	r1, [r7, #8]
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	4798      	blx	r3
 801402c:	4603      	mov	r3, r0
 801402e:	e008      	b.n	8014042 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8014030:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8014032:	4b09      	ldr	r3, [pc, #36]	@ (8014058 <ethernet_output+0x9c>)
 8014034:	895b      	ldrh	r3, [r3, #10]
 8014036:	3301      	adds	r3, #1
 8014038:	b29a      	uxth	r2, r3
 801403a:	4b07      	ldr	r3, [pc, #28]	@ (8014058 <ethernet_output+0x9c>)
 801403c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801403e:	f06f 0301 	mvn.w	r3, #1
}
 8014042:	4618      	mov	r0, r3
 8014044:	3718      	adds	r7, #24
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	08019634 	.word	0x08019634
 8014050:	0801966c 	.word	0x0801966c
 8014054:	080196a0 	.word	0x080196a0
 8014058:	20003a9c 	.word	0x20003a9c

0801405c <sys_now>:
#include "lwip/arch.h"
#include "stm32f4xx_hal.h"

u32_t sys_now(void)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	af00      	add	r7, sp, #0
  return HAL_GetTick();  // returns system time in ms
 8014060:	f7ec fd98 	bl	8000b94 <HAL_GetTick>
 8014064:	4603      	mov	r3, r0
}
 8014066:	4618      	mov	r0, r3
 8014068:	bd80      	pop	{r7, pc}

0801406a <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
 801406a:	b480      	push	{r7}
 801406c:	af00      	add	r7, sp, #0
  return 1; // no real protection, just dummy
 801406e:	2301      	movs	r3, #1
}
 8014070:	4618      	mov	r0, r3
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr

0801407a <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
 801407a:	b480      	push	{r7}
 801407c:	b083      	sub	sp, #12
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
  (void)pval; // no real unprotection
}
 8014082:	bf00      	nop
 8014084:	370c      	adds	r7, #12
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
	...

08014090 <cdc_ecm_netif_init>:
#include "lwip/netif.h"

extern USBD_HandleTypeDef hUsbDeviceFS;

err_t cdc_ecm_netif_init(struct netif *netif)
{
 8014090:	b480      	push	{r7}
 8014092:	b083      	sub	sp, #12
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
    netif->name[0] = 'u';  // usb ethernet
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2275      	movs	r2, #117	@ 0x75
 801409c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    netif->name[1] = 's';
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2273      	movs	r2, #115	@ 0x73
 80140a4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    netif->output = etharp_output;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	4a1a      	ldr	r2, [pc, #104]	@ (8014114 <cdc_ecm_netif_init+0x84>)
 80140ac:	615a      	str	r2, [r3, #20]
    netif->linkoutput = cdc_ecm_low_level_output;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	4a19      	ldr	r2, [pc, #100]	@ (8014118 <cdc_ecm_netif_init+0x88>)
 80140b2:	619a      	str	r2, [r3, #24]

    netif->hwaddr_len = ETH_HWADDR_LEN;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2206      	movs	r2, #6
 80140b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    netif->hwaddr[0] = 0x02;  // 02:A1:B2:C3:D4:E5
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2202      	movs	r2, #2
 80140c0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    netif->hwaddr[1] = 0xA1;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	22a1      	movs	r2, #161	@ 0xa1
 80140c8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    netif->hwaddr[2] = 0xB2;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	22b2      	movs	r2, #178	@ 0xb2
 80140d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    netif->hwaddr[3] = 0xC3;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	22c3      	movs	r2, #195	@ 0xc3
 80140d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    netif->hwaddr[4] = 0xD4;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	22d4      	movs	r2, #212	@ 0xd4
 80140e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    netif->hwaddr[5] = 0xE5;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	22e5      	movs	r2, #229	@ 0xe5
 80140e8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

    netif->mtu = 1500;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80140f2:	849a      	strh	r2, [r3, #36]	@ 0x24
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	220e      	movs	r2, #14
 80140f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    netif->hwaddr_len = ETH_HWADDR_LEN;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2206      	movs	r2, #6
 8014100:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    return ERR_OK;
 8014104:	2300      	movs	r3, #0
}
 8014106:	4618      	mov	r0, r3
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	08011f35 	.word	0x08011f35
 8014118:	0801411d 	.word	0x0801411d

0801411c <cdc_ecm_low_level_output>:

static uint8_t cdc_ecm_tx_buffer[CDC_ECM_ETH_MAX_SEGSZE]; // Static, global buffer

err_t cdc_ecm_low_level_output(struct netif *netif, struct pbuf *p)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
    USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)(hUsbDeviceFS.pClassData);
 8014126:	4b26      	ldr	r3, [pc, #152]	@ (80141c0 <cdc_ecm_low_level_output+0xa4>)
 8014128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801412c:	60fb      	str	r3, [r7, #12]
    if (hcdc == NULL || hcdc->TxState != 0)
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d004      	beq.n	801413e <cdc_ecm_low_level_output+0x22>
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 801413a:	2b00      	cmp	r3, #0
 801413c:	d002      	beq.n	8014144 <cdc_ecm_low_level_output+0x28>
    {
        return ERR_IF; // USB not ready
 801413e:	f06f 030b 	mvn.w	r3, #11
 8014142:	e039      	b.n	80141b8 <cdc_ecm_low_level_output+0x9c>
    }

    if (p->tot_len > CDC_ECM_ETH_MAX_SEGSZE)
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	891b      	ldrh	r3, [r3, #8]
 8014148:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 801414c:	4293      	cmp	r3, r2
 801414e:	d902      	bls.n	8014156 <cdc_ecm_low_level_output+0x3a>
    {
        return ERR_MEM; // Packet too large
 8014150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014154:	e030      	b.n	80141b8 <cdc_ecm_low_level_output+0x9c>
    }

    /* Copy the data into the internal TX buffer directly */
    uint8_t *dest = hcdc->TxBuffer;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 801415c:	60bb      	str	r3, [r7, #8]
    struct pbuf *q;
    uint32_t offset = 0;
 801415e:	2300      	movs	r3, #0
 8014160:	613b      	str	r3, [r7, #16]

    for (q = p; q != NULL; q = q->next)
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	617b      	str	r3, [r7, #20]
 8014166:	e012      	b.n	801418e <cdc_ecm_low_level_output+0x72>
    {
        memcpy(dest + offset, q->payload, q->len);
 8014168:	68ba      	ldr	r2, [r7, #8]
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	18d0      	adds	r0, r2, r3
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	6859      	ldr	r1, [r3, #4]
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	895b      	ldrh	r3, [r3, #10]
 8014176:	461a      	mov	r2, r3
 8014178:	f001 fe0b 	bl	8015d92 <memcpy>
        offset += q->len;
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	895b      	ldrh	r3, [r3, #10]
 8014180:	461a      	mov	r2, r3
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	4413      	add	r3, r2
 8014186:	613b      	str	r3, [r7, #16]
    for (q = p; q != NULL; q = q->next)
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	617b      	str	r3, [r7, #20]
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d1e9      	bne.n	8014168 <cdc_ecm_low_level_output+0x4c>
    }

    /* Setup and send */
    USBD_CDC_ECM_SetTxBuffer(&hUsbDeviceFS, hcdc->TxBuffer, offset);
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 801419a:	693a      	ldr	r2, [r7, #16]
 801419c:	4619      	mov	r1, r3
 801419e:	4808      	ldr	r0, [pc, #32]	@ (80141c0 <cdc_ecm_low_level_output+0xa4>)
 80141a0:	f000 fcda 	bl	8014b58 <USBD_CDC_ECM_SetTxBuffer>
    if (USBD_CDC_ECM_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 80141a4:	4806      	ldr	r0, [pc, #24]	@ (80141c0 <cdc_ecm_low_level_output+0xa4>)
 80141a6:	f000 fd17 	bl	8014bd8 <USBD_CDC_ECM_TransmitPacket>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <cdc_ecm_low_level_output+0x9a>
    {
        return ERR_IF;
 80141b0:	f06f 030b 	mvn.w	r3, #11
 80141b4:	e000      	b.n	80141b8 <cdc_ecm_low_level_output+0x9c>
    }

    return ERR_OK;
 80141b6:	2300      	movs	r3, #0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3718      	adds	r7, #24
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	20003d04 	.word	0x20003d04

080141c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80141c8:	2200      	movs	r2, #0
 80141ca:	4912      	ldr	r1, [pc, #72]	@ (8014214 <MX_USB_DEVICE_Init+0x50>)
 80141cc:	4812      	ldr	r0, [pc, #72]	@ (8014218 <MX_USB_DEVICE_Init+0x54>)
 80141ce:	f7f0 f9fc 	bl	80045ca <USBD_Init>
 80141d2:	4603      	mov	r3, r0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d001      	beq.n	80141dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80141d8:	f7ec fb08 	bl	80007ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC_ECM) != USBD_OK)
 80141dc:	490f      	ldr	r1, [pc, #60]	@ (801421c <MX_USB_DEVICE_Init+0x58>)
 80141de:	480e      	ldr	r0, [pc, #56]	@ (8014218 <MX_USB_DEVICE_Init+0x54>)
 80141e0:	f7f0 fa23 	bl	800462a <USBD_RegisterClass>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d001      	beq.n	80141ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80141ea:	f7ec faff 	bl	80007ec <Error_Handler>
  }
  if (USBD_CDC_ECM_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_ECM_fops) != USBD_OK)
 80141ee:	490c      	ldr	r1, [pc, #48]	@ (8014220 <MX_USB_DEVICE_Init+0x5c>)
 80141f0:	4809      	ldr	r0, [pc, #36]	@ (8014218 <MX_USB_DEVICE_Init+0x54>)
 80141f2:	f000 fc75 	bl	8014ae0 <USBD_CDC_ECM_RegisterInterface>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d001      	beq.n	8014200 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80141fc:	f7ec faf6 	bl	80007ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014200:	4805      	ldr	r0, [pc, #20]	@ (8014218 <MX_USB_DEVICE_Init+0x54>)
 8014202:	f7f0 fa48 	bl	8004696 <USBD_Start>
 8014206:	4603      	mov	r3, r0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d001      	beq.n	8014210 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801420c:	f7ec faee 	bl	80007ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014210:	bf00      	nop
 8014212:	bd80      	pop	{r7, pc}
 8014214:	200000d8 	.word	0x200000d8
 8014218:	20003d04 	.word	0x20003d04
 801421c:	2000002c 	.word	0x2000002c
 8014220:	200000bc 	.word	0x200000bc

08014224 <USBD_CDC_ECM_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_ECM_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	460b      	mov	r3, r1
 801422e:	70fb      	strb	r3, [r7, #3]
  ECMInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hcdc = (USBD_CDC_ECM_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_ECM_HandleTypeDef));
 8014230:	f640 0008 	movw	r0, #2056	@ 0x808
 8014234:	f001 faa2 	bl	801577c <USBD_static_malloc>
 8014238:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d109      	bne.n	8014254 <USBD_CDC_ECM_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	32b0      	adds	r2, #176	@ 0xb0
 801424a:	2100      	movs	r1, #0
 801424c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014250:	2302      	movs	r3, #2
 8014252:	e0e2      	b.n	801441a <USBD_CDC_ECM_Init+0x1f6>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_ECM_HandleTypeDef));
 8014254:	f640 0208 	movw	r2, #2056	@ 0x808
 8014258:	2100      	movs	r1, #0
 801425a:	68f8      	ldr	r0, [r7, #12]
 801425c:	f001 fcf5 	bl	8015c4a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	32b0      	adds	r2, #176	@ 0xb0
 801426a:	68f9      	ldr	r1, [r7, #12]
 801426c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	32b0      	adds	r2, #176	@ 0xb0
 801427a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7c1b      	ldrb	r3, [r3, #16]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d138      	bne.n	80142fe <USBD_CDC_ECM_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, ECMInEpAdd, USBD_EP_TYPE_BULK,
 801428c:	4b65      	ldr	r3, [pc, #404]	@ (8014424 <USBD_CDC_ECM_Init+0x200>)
 801428e:	7819      	ldrb	r1, [r3, #0]
 8014290:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014294:	2202      	movs	r2, #2
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f001 f94d 	bl	8015536 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 1U;
 801429c:	4b61      	ldr	r3, [pc, #388]	@ (8014424 <USBD_CDC_ECM_Init+0x200>)
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	f003 020f 	and.w	r2, r3, #15
 80142a4:	6879      	ldr	r1, [r7, #4]
 80142a6:	4613      	mov	r3, r2
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	4413      	add	r3, r2
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	440b      	add	r3, r1
 80142b0:	3324      	adds	r3, #36	@ 0x24
 80142b2:	2201      	movs	r2, #1
 80142b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, ECMOutEpAdd, USBD_EP_TYPE_BULK,
 80142b6:	4b5c      	ldr	r3, [pc, #368]	@ (8014428 <USBD_CDC_ECM_Init+0x204>)
 80142b8:	7819      	ldrb	r1, [r3, #0]
 80142ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80142be:	2202      	movs	r2, #2
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f001 f938 	bl	8015536 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 1U;
 80142c6:	4b58      	ldr	r3, [pc, #352]	@ (8014428 <USBD_CDC_ECM_Init+0x204>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	f003 020f 	and.w	r2, r3, #15
 80142ce:	6879      	ldr	r1, [r7, #4]
 80142d0:	4613      	mov	r3, r2
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	4413      	add	r3, r2
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	440b      	add	r3, r1
 80142da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80142de:	2201      	movs	r2, #1
 80142e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC ECM CMD Endpoint */
    pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = CDC_ECM_HS_BINTERVAL;
 80142e2:	4b52      	ldr	r3, [pc, #328]	@ (801442c <USBD_CDC_ECM_Init+0x208>)
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	f003 020f 	and.w	r2, r3, #15
 80142ea:	6879      	ldr	r1, [r7, #4]
 80142ec:	4613      	mov	r3, r2
 80142ee:	009b      	lsls	r3, r3, #2
 80142f0:	4413      	add	r3, r2
 80142f2:	009b      	lsls	r3, r3, #2
 80142f4:	440b      	add	r3, r1
 80142f6:	3326      	adds	r3, #38	@ 0x26
 80142f8:	2210      	movs	r2, #16
 80142fa:	801a      	strh	r2, [r3, #0]
 80142fc:	e035      	b.n	801436a <USBD_CDC_ECM_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, ECMInEpAdd, USBD_EP_TYPE_BULK,
 80142fe:	4b49      	ldr	r3, [pc, #292]	@ (8014424 <USBD_CDC_ECM_Init+0x200>)
 8014300:	7819      	ldrb	r1, [r3, #0]
 8014302:	2340      	movs	r3, #64	@ 0x40
 8014304:	2202      	movs	r2, #2
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f001 f915 	bl	8015536 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 1U;
 801430c:	4b45      	ldr	r3, [pc, #276]	@ (8014424 <USBD_CDC_ECM_Init+0x200>)
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	f003 020f 	and.w	r2, r3, #15
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	4613      	mov	r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	4413      	add	r3, r2
 801431c:	009b      	lsls	r3, r3, #2
 801431e:	440b      	add	r3, r1
 8014320:	3324      	adds	r3, #36	@ 0x24
 8014322:	2201      	movs	r2, #1
 8014324:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, ECMOutEpAdd, USBD_EP_TYPE_BULK,
 8014326:	4b40      	ldr	r3, [pc, #256]	@ (8014428 <USBD_CDC_ECM_Init+0x204>)
 8014328:	7819      	ldrb	r1, [r3, #0]
 801432a:	2340      	movs	r3, #64	@ 0x40
 801432c:	2202      	movs	r2, #2
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f001 f901 	bl	8015536 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 1U;
 8014334:	4b3c      	ldr	r3, [pc, #240]	@ (8014428 <USBD_CDC_ECM_Init+0x204>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	f003 020f 	and.w	r2, r3, #15
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	4613      	mov	r3, r2
 8014340:	009b      	lsls	r3, r3, #2
 8014342:	4413      	add	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	440b      	add	r3, r1
 8014348:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801434c:	2201      	movs	r2, #1
 801434e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC ECM CMD Endpoint */
    pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = CDC_ECM_FS_BINTERVAL;
 8014350:	4b36      	ldr	r3, [pc, #216]	@ (801442c <USBD_CDC_ECM_Init+0x208>)
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	f003 020f 	and.w	r2, r3, #15
 8014358:	6879      	ldr	r1, [r7, #4]
 801435a:	4613      	mov	r3, r2
 801435c:	009b      	lsls	r3, r3, #2
 801435e:	4413      	add	r3, r2
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	440b      	add	r3, r1
 8014364:	3326      	adds	r3, #38	@ 0x26
 8014366:	2210      	movs	r2, #16
 8014368:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, ECMCmdEpAdd, USBD_EP_TYPE_INTR, CDC_ECM_CMD_PACKET_SIZE);
 801436a:	4b30      	ldr	r3, [pc, #192]	@ (801442c <USBD_CDC_ECM_Init+0x208>)
 801436c:	7819      	ldrb	r1, [r3, #0]
 801436e:	2310      	movs	r3, #16
 8014370:	2203      	movs	r2, #3
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f001 f8df 	bl	8015536 <USBD_LL_OpenEP>
  pdev->ep_in[ECMCmdEpAdd & 0xFU].is_used = 1U;
 8014378:	4b2c      	ldr	r3, [pc, #176]	@ (801442c <USBD_CDC_ECM_Init+0x208>)
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	f003 020f 	and.w	r2, r3, #15
 8014380:	6879      	ldr	r1, [r7, #4]
 8014382:	4613      	mov	r3, r2
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4413      	add	r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	440b      	add	r3, r1
 801438c:	3324      	adds	r3, #36	@ 0x24
 801438e:	2201      	movs	r2, #1
 8014390:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2200      	movs	r2, #0
 8014396:	f8c3 27d4 	str.w	r2, [r3, #2004]	@ 0x7d4

  /* Init  physical Interface components */
  ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	33b0      	adds	r3, #176	@ 0xb0
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4413      	add	r3, r2
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2200      	movs	r2, #0
 80143b2:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
  hcdc->RxState = 0U;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f8c3 27e8 	str.w	r2, [r3, #2024]	@ 0x7e8
  hcdc->RxLength = 0U;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
  hcdc->TxLength = 0U;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2200      	movs	r2, #0
 80143ca:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
  hcdc->LinkStatus = 0U;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2200      	movs	r2, #0
 80143d2:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0
  hcdc->NotificationStatus = 0U;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2200      	movs	r2, #0
 80143da:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
  hcdc->MaxPcktLen = (pdev->dev_speed == USBD_SPEED_HIGH) ? CDC_ECM_DATA_HS_MAX_PACKET_SIZE : \
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	7c1b      	ldrb	r3, [r3, #16]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d102      	bne.n	80143ec <USBD_CDC_ECM_Init+0x1c8>
 80143e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80143ea:	e000      	b.n	80143ee <USBD_CDC_ECM_Init+0x1ca>
 80143ec:	2240      	movs	r2, #64	@ 0x40
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	f8c3 27ec 	str.w	r2, [r3, #2028]	@ 0x7ec
                     CDC_ECM_DATA_FS_MAX_PACKET_SIZE;

  if (hcdc->RxBuffer == NULL)
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d101      	bne.n	8014402 <USBD_CDC_ECM_Init+0x1de>
  {
    return (uint8_t)USBD_EMEM;
 80143fe:	2302      	movs	r3, #2
 8014400:	e00b      	b.n	801441a <USBD_CDC_ECM_Init+0x1f6>
  }

  /* Prepare Out endpoint to receive next packet */
  (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd, hcdc->RxBuffer, hcdc->MaxPcktLen);
 8014402:	4b09      	ldr	r3, [pc, #36]	@ (8014428 <USBD_CDC_ECM_Init+0x204>)
 8014404:	7819      	ldrb	r1, [r3, #0]
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f001 f97e 	bl	8015714 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	200000b7 	.word	0x200000b7
 8014428:	200000b8 	.word	0x200000b8
 801442c:	200000b9 	.word	0x200000b9

08014430 <USBD_CDC_ECM_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	460b      	mov	r3, r1
 801443a:	70fb      	strb	r3, [r7, #3]
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, ECMInEpAdd);
 801443c:	4b3a      	ldr	r3, [pc, #232]	@ (8014528 <USBD_CDC_ECM_DeInit+0xf8>)
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	4619      	mov	r1, r3
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f001 f89d 	bl	8015582 <USBD_LL_CloseEP>
  pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 0U;
 8014448:	4b37      	ldr	r3, [pc, #220]	@ (8014528 <USBD_CDC_ECM_DeInit+0xf8>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f003 020f 	and.w	r2, r3, #15
 8014450:	6879      	ldr	r1, [r7, #4]
 8014452:	4613      	mov	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	4413      	add	r3, r2
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	440b      	add	r3, r1
 801445c:	3324      	adds	r3, #36	@ 0x24
 801445e:	2200      	movs	r2, #0
 8014460:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, ECMOutEpAdd);
 8014462:	4b32      	ldr	r3, [pc, #200]	@ (801452c <USBD_CDC_ECM_DeInit+0xfc>)
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	4619      	mov	r1, r3
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f001 f88a 	bl	8015582 <USBD_LL_CloseEP>
  pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 0U;
 801446e:	4b2f      	ldr	r3, [pc, #188]	@ (801452c <USBD_CDC_ECM_DeInit+0xfc>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 020f 	and.w	r2, r3, #15
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4613      	mov	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	440b      	add	r3, r1
 8014482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014486:	2200      	movs	r2, #0
 8014488:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, ECMCmdEpAdd);
 801448a:	4b29      	ldr	r3, [pc, #164]	@ (8014530 <USBD_CDC_ECM_DeInit+0x100>)
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	4619      	mov	r1, r3
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f001 f876 	bl	8015582 <USBD_LL_CloseEP>
  pdev->ep_in[ECMCmdEpAdd & 0xFU].is_used = 0U;
 8014496:	4b26      	ldr	r3, [pc, #152]	@ (8014530 <USBD_CDC_ECM_DeInit+0x100>)
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	f003 020f 	and.w	r2, r3, #15
 801449e:	6879      	ldr	r1, [r7, #4]
 80144a0:	4613      	mov	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	4413      	add	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	440b      	add	r3, r1
 80144aa:	3324      	adds	r3, #36	@ 0x24
 80144ac:	2200      	movs	r2, #0
 80144ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = 0U;
 80144b0:	4b1f      	ldr	r3, [pc, #124]	@ (8014530 <USBD_CDC_ECM_DeInit+0x100>)
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	f003 020f 	and.w	r2, r3, #15
 80144b8:	6879      	ldr	r1, [r7, #4]
 80144ba:	4613      	mov	r3, r2
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	4413      	add	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	440b      	add	r3, r1
 80144c4:	3326      	adds	r3, #38	@ 0x26
 80144c6:	2200      	movs	r2, #0
 80144c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	32b0      	adds	r2, #176	@ 0xb0
 80144d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d01f      	beq.n	801451c <USBD_CDC_ECM_DeInit+0xec>
  {
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	33b0      	adds	r3, #176	@ 0xb0
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	4413      	add	r3, r2
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	685b      	ldr	r3, [r3, #4]
 80144ee:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	32b0      	adds	r2, #176	@ 0xb0
 80144fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144fe:	4618      	mov	r0, r3
 8014500:	f001 f94a 	bl	8015798 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	32b0      	adds	r2, #176	@ 0xb0
 801450e:	2100      	movs	r1, #0
 8014510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2200      	movs	r2, #0
 8014518:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	200000b7 	.word	0x200000b7
 801452c:	200000b8 	.word	0x200000b8
 8014530:	200000b9 	.word	0x200000b9

08014534 <USBD_CDC_ECM_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_ECM_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b088      	sub	sp, #32
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *) pdev->pClassDataCmsit[pdev->classId];
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	32b0      	adds	r2, #176	@ 0xb0
 8014548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801454c:	61bb      	str	r3, [r7, #24]
  USBD_CDC_ECM_ItfTypeDef *EcmInterface = (USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId];
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	33b0      	adds	r3, #176	@ 0xb0
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	4413      	add	r3, r2
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	617b      	str	r3, [r7, #20]
  USBD_StatusTypeDef ret = USBD_OK;
 8014560:	2300      	movs	r3, #0
 8014562:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint16_t status_info = 0U;
 8014564:	2300      	movs	r3, #0
 8014566:	823b      	strh	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014568:	2300      	movs	r3, #0
 801456a:	73fb      	strb	r3, [r7, #15]

  if (hcdc == NULL)
 801456c:	69bb      	ldr	r3, [r7, #24]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <USBD_CDC_ECM_Setup+0x42>
  {
    return (uint8_t)USBD_FAIL;
 8014572:	2303      	movs	r3, #3
 8014574:	e0b4      	b.n	80146e0 <USBD_CDC_ECM_Setup+0x1ac>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801457e:	2b00      	cmp	r3, #0
 8014580:	d044      	beq.n	801460c <USBD_CDC_ECM_Setup+0xd8>
 8014582:	2b20      	cmp	r3, #32
 8014584:	f040 80a4 	bne.w	80146d0 <USBD_CDC_ECM_Setup+0x19c>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength != 0U)
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	88db      	ldrh	r3, [r3, #6]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d035      	beq.n	80145fc <USBD_CDC_ECM_Setup+0xc8>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	b25b      	sxtb	r3, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	da16      	bge.n	80145c8 <USBD_CDC_ECM_Setup+0x94>
        {
          EcmInterface->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	689b      	ldr	r3, [r3, #8]
 801459e:	683a      	ldr	r2, [r7, #0]
 80145a0:	7850      	ldrb	r0, [r2, #1]
 80145a2:	69b9      	ldr	r1, [r7, #24]
 80145a4:	683a      	ldr	r2, [r7, #0]
 80145a6:	88d2      	ldrh	r2, [r2, #6]
 80145a8:	4798      	blx	r3

          len = MIN(CDC_ECM_DATA_BUFFER_SIZE, req->wLength);
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	88db      	ldrh	r3, [r3, #6]
 80145ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80145b2:	bf28      	it	cs
 80145b4:	f44f 63fa 	movcs.w	r3, #2000	@ 0x7d0
 80145b8:	827b      	strh	r3, [r7, #18]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	8a7a      	ldrh	r2, [r7, #18]
 80145be:	4619      	mov	r1, r3
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f7f1 faab 	bl	8005b1c <USBD_CtlSendData>
      }
      else
      {
        EcmInterface->Control(req->bRequest, (uint8_t *)req, 0U);
      }
      break;
 80145c6:	e08a      	b.n	80146de <USBD_CDC_ECM_Setup+0x1aa>
          hcdc->CmdOpCode = req->bRequest;
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	785a      	ldrb	r2, [r3, #1]
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	88db      	ldrh	r3, [r3, #6]
 80145d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80145d8:	d803      	bhi.n	80145e2 <USBD_CDC_ECM_Setup+0xae>
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	88db      	ldrh	r3, [r3, #6]
 80145de:	b2da      	uxtb	r2, r3
 80145e0:	e000      	b.n	80145e4 <USBD_CDC_ECM_Setup+0xb0>
 80145e2:	2240      	movs	r2, #64	@ 0x40
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	f883 27d1 	strb.w	r2, [r3, #2001]	@ 0x7d1
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80145ea:	69b9      	ldr	r1, [r7, #24]
 80145ec:	69bb      	ldr	r3, [r7, #24]
 80145ee:	f893 37d1 	ldrb.w	r3, [r3, #2001]	@ 0x7d1
 80145f2:	461a      	mov	r2, r3
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7f1 fabd 	bl	8005b74 <USBD_CtlPrepareRx>
      break;
 80145fa:	e070      	b.n	80146de <USBD_CDC_ECM_Setup+0x1aa>
        EcmInterface->Control(req->bRequest, (uint8_t *)req, 0U);
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	689b      	ldr	r3, [r3, #8]
 8014600:	683a      	ldr	r2, [r7, #0]
 8014602:	7850      	ldrb	r0, [r2, #1]
 8014604:	2200      	movs	r2, #0
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	4798      	blx	r3
      break;
 801460a:	e068      	b.n	80146de <USBD_CDC_ECM_Setup+0x1aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	785b      	ldrb	r3, [r3, #1]
 8014610:	2b0b      	cmp	r3, #11
 8014612:	d852      	bhi.n	80146ba <USBD_CDC_ECM_Setup+0x186>
 8014614:	a201      	add	r2, pc, #4	@ (adr r2, 801461c <USBD_CDC_ECM_Setup+0xe8>)
 8014616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801461a:	bf00      	nop
 801461c:	0801464d 	.word	0x0801464d
 8014620:	080146c9 	.word	0x080146c9
 8014624:	080146bb 	.word	0x080146bb
 8014628:	080146bb 	.word	0x080146bb
 801462c:	080146bb 	.word	0x080146bb
 8014630:	080146bb 	.word	0x080146bb
 8014634:	080146bb 	.word	0x080146bb
 8014638:	080146bb 	.word	0x080146bb
 801463c:	080146bb 	.word	0x080146bb
 8014640:	080146bb 	.word	0x080146bb
 8014644:	08014677 	.word	0x08014677
 8014648:	080146a1 	.word	0x080146a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014652:	b2db      	uxtb	r3, r3
 8014654:	2b03      	cmp	r3, #3
 8014656:	d107      	bne.n	8014668 <USBD_CDC_ECM_Setup+0x134>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014658:	f107 0310 	add.w	r3, r7, #16
 801465c:	2202      	movs	r2, #2
 801465e:	4619      	mov	r1, r3
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f7f1 fa5b 	bl	8005b1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014666:	e032      	b.n	80146ce <USBD_CDC_ECM_Setup+0x19a>
            USBD_CtlError(pdev, req);
 8014668:	6839      	ldr	r1, [r7, #0]
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7f1 f9d9 	bl	8005a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8014670:	2303      	movs	r3, #3
 8014672:	77fb      	strb	r3, [r7, #31]
          break;
 8014674:	e02b      	b.n	80146ce <USBD_CDC_ECM_Setup+0x19a>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b03      	cmp	r3, #3
 8014680:	d107      	bne.n	8014692 <USBD_CDC_ECM_Setup+0x15e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014682:	f107 030f 	add.w	r3, r7, #15
 8014686:	2201      	movs	r2, #1
 8014688:	4619      	mov	r1, r3
 801468a:	6878      	ldr	r0, [r7, #4]
 801468c:	f7f1 fa46 	bl	8005b1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014690:	e01d      	b.n	80146ce <USBD_CDC_ECM_Setup+0x19a>
            USBD_CtlError(pdev, req);
 8014692:	6839      	ldr	r1, [r7, #0]
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7f1 f9c4 	bl	8005a22 <USBD_CtlError>
            ret = USBD_FAIL;
 801469a:	2303      	movs	r3, #3
 801469c:	77fb      	strb	r3, [r7, #31]
          break;
 801469e:	e016      	b.n	80146ce <USBD_CDC_ECM_Setup+0x19a>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	2b03      	cmp	r3, #3
 80146aa:	d00f      	beq.n	80146cc <USBD_CDC_ECM_Setup+0x198>
          {
            USBD_CtlError(pdev, req);
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f7f1 f9b7 	bl	8005a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80146b4:	2303      	movs	r3, #3
 80146b6:	77fb      	strb	r3, [r7, #31]
          }
          break;
 80146b8:	e008      	b.n	80146cc <USBD_CDC_ECM_Setup+0x198>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80146ba:	6839      	ldr	r1, [r7, #0]
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f7f1 f9b0 	bl	8005a22 <USBD_CtlError>
          ret = USBD_FAIL;
 80146c2:	2303      	movs	r3, #3
 80146c4:	77fb      	strb	r3, [r7, #31]
          break;
 80146c6:	e002      	b.n	80146ce <USBD_CDC_ECM_Setup+0x19a>
          break;
 80146c8:	bf00      	nop
 80146ca:	e008      	b.n	80146de <USBD_CDC_ECM_Setup+0x1aa>
          break;
 80146cc:	bf00      	nop
      }
      break;
 80146ce:	e006      	b.n	80146de <USBD_CDC_ECM_Setup+0x1aa>

    default:
      USBD_CtlError(pdev, req);
 80146d0:	6839      	ldr	r1, [r7, #0]
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f7f1 f9a5 	bl	8005a22 <USBD_CtlError>
      ret = USBD_FAIL;
 80146d8:	2303      	movs	r3, #3
 80146da:	77fb      	strb	r3, [r7, #31]
      break;
 80146dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80146de:	7ffb      	ldrb	r3, [r7, #31]
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3720      	adds	r7, #32
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <USBD_CDC_ECM_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	32b0      	adds	r2, #176	@ 0xb0
 80146fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014702:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801470a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	32b0      	adds	r2, #176	@ 0xb0
 8014716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d101      	bne.n	8014722 <USBD_CDC_ECM_DataIn+0x3a>
  {
    return (uint8_t)USBD_FAIL;
 801471e:	2303      	movs	r3, #3
 8014720:	e07e      	b.n	8014820 <USBD_CDC_ECM_DataIn+0x138>
  }

  if (epnum == (ECMInEpAdd & 0x7FU))
 8014722:	78fa      	ldrb	r2, [r7, #3]
 8014724:	4b40      	ldr	r3, [pc, #256]	@ (8014828 <USBD_CDC_ECM_DataIn+0x140>)
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801472c:	429a      	cmp	r2, r3
 801472e:	d15d      	bne.n	80147ec <USBD_CDC_ECM_DataIn+0x104>
  {
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014730:	78fb      	ldrb	r3, [r7, #3]
 8014732:	f003 020f 	and.w	r2, r3, #15
 8014736:	6879      	ldr	r1, [r7, #4]
 8014738:	4613      	mov	r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	4413      	add	r3, r2
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	440b      	add	r3, r1
 8014742:	3318      	adds	r3, #24
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d02f      	beq.n	80147aa <USBD_CDC_ECM_DataIn+0xc2>
        ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801474a:	78fb      	ldrb	r3, [r7, #3]
 801474c:	f003 020f 	and.w	r2, r3, #15
 8014750:	6879      	ldr	r1, [r7, #4]
 8014752:	4613      	mov	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	440b      	add	r3, r1
 801475c:	3318      	adds	r3, #24
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	78fb      	ldrb	r3, [r7, #3]
 8014762:	f003 010f 	and.w	r1, r3, #15
 8014766:	68b8      	ldr	r0, [r7, #8]
 8014768:	460b      	mov	r3, r1
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	440b      	add	r3, r1
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	4403      	add	r3, r0
 8014772:	331c      	adds	r3, #28
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	fbb2 f1f3 	udiv	r1, r2, r3
 801477a:	fb01 f303 	mul.w	r3, r1, r3
 801477e:	1ad3      	subs	r3, r2, r3
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014780:	2b00      	cmp	r3, #0
 8014782:	d112      	bne.n	80147aa <USBD_CDC_ECM_DataIn+0xc2>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014784:	78fb      	ldrb	r3, [r7, #3]
 8014786:	f003 020f 	and.w	r2, r3, #15
 801478a:	6879      	ldr	r1, [r7, #4]
 801478c:	4613      	mov	r3, r2
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	4413      	add	r3, r2
 8014792:	009b      	lsls	r3, r3, #2
 8014794:	440b      	add	r3, r1
 8014796:	3318      	adds	r3, #24
 8014798:	2200      	movs	r2, #0
 801479a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801479c:	78f9      	ldrb	r1, [r7, #3]
 801479e:	2300      	movs	r3, #0
 80147a0:	2200      	movs	r2, #0
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f000 ff95 	bl	80156d2 <USBD_LL_Transmit>
 80147a8:	e039      	b.n	801481e <USBD_CDC_ECM_DataIn+0x136>
    }
    else
    {
      hcdc->TxState = 0U;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	2200      	movs	r2, #0
 80147ae:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
      if (((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	33b0      	adds	r3, #176	@ 0xb0
 80147bc:	009b      	lsls	r3, r3, #2
 80147be:	4413      	add	r3, r2
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	691b      	ldr	r3, [r3, #16]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d02a      	beq.n	801481e <USBD_CDC_ECM_DataIn+0x136>
      {
        ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer,
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	33b0      	adds	r3, #176	@ 0xb0
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4413      	add	r3, r2
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	691b      	ldr	r3, [r3, #16]
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	f8d2 07d8 	ldr.w	r0, [r2, #2008]	@ 0x7d8
 80147e0:	68fa      	ldr	r2, [r7, #12]
 80147e2:	f502 61fc 	add.w	r1, r2, #2016	@ 0x7e0
 80147e6:	78fa      	ldrb	r2, [r7, #3]
 80147e8:	4798      	blx	r3
 80147ea:	e018      	b.n	801481e <USBD_CDC_ECM_DataIn+0x136>
                                                                                  &hcdc->TxLength, epnum);
      }
    }
  }
  else if (epnum == (ECMCmdEpAdd & 0x7FU))
 80147ec:	78fa      	ldrb	r2, [r7, #3]
 80147ee:	4b0f      	ldr	r3, [pc, #60]	@ (801482c <USBD_CDC_ECM_DataIn+0x144>)
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d10f      	bne.n	801481a <USBD_CDC_ECM_DataIn+0x132>
  {
    if (hcdc->NotificationStatus != 0U)
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	@ 0x7f4
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00c      	beq.n	801481e <USBD_CDC_ECM_DataIn+0x136>
    {
      (void)USBD_CDC_ECM_SendNotification(pdev, CONNECTION_SPEED_CHANGE, 0U, (uint8_t *)ConnSpeedTab);
 8014804:	4b0a      	ldr	r3, [pc, #40]	@ (8014830 <USBD_CDC_ECM_DataIn+0x148>)
 8014806:	2200      	movs	r2, #0
 8014808:	212a      	movs	r1, #42	@ 0x2a
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fa4e 	bl	8014cac <USBD_CDC_ECM_SendNotification>

      hcdc->NotificationStatus = 0U;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2200      	movs	r2, #0
 8014814:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
 8014818:	e001      	b.n	801481e <USBD_CDC_ECM_DataIn+0x136>
    }
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 801481a:	2303      	movs	r3, #3
 801481c:	e000      	b.n	8014820 <USBD_CDC_ECM_DataIn+0x138>
  }

  return (uint8_t)USBD_OK;
 801481e:	2300      	movs	r3, #0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	200000b7 	.word	0x200000b7
 801482c:	200000b9 	.word	0x200000b9
 8014830:	20000024 	.word	0x20000024

08014834 <USBD_CDC_ECM_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b084      	sub	sp, #16
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	32b0      	adds	r2, #176	@ 0xb0
 801484a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801484e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	32b0      	adds	r2, #176	@ 0xb0
 801485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d101      	bne.n	8014866 <USBD_CDC_ECM_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014862:	2303      	movs	r3, #3
 8014864:	e044      	b.n	80148f0 <USBD_CDC_ECM_DataOut+0xbc>
  }

  if (epnum == ECMOutEpAdd)
 8014866:	4b24      	ldr	r3, [pc, #144]	@ (80148f8 <USBD_CDC_ECM_DataOut+0xc4>)
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	78fa      	ldrb	r2, [r7, #3]
 801486c:	429a      	cmp	r2, r3
 801486e:	d13c      	bne.n	80148ea <USBD_CDC_ECM_DataOut+0xb6>
  {
    /* Get the received data length */
    CurrPcktLen = USBD_LL_GetRxDataSize(pdev, epnum);
 8014870:	78fb      	ldrb	r3, [r7, #3]
 8014872:	4619      	mov	r1, r3
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 ff6e 	bl	8015756 <USBD_LL_GetRxDataSize>
 801487a:	60b8      	str	r0, [r7, #8]

    /* Increment the frame length */
    hcdc->RxLength += CurrPcktLen;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	@ 0x7dc
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	441a      	add	r2, r3
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc

    /* If the buffer size is less than max packet size: it is the last packet in current frame */
    if ((CurrPcktLen < hcdc->MaxPcktLen) || (hcdc->RxLength >= CDC_ECM_ETH_MAX_SEGSZE))
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	429a      	cmp	r2, r3
 8014896:	d306      	bcc.n	80148a6 <USBD_CDC_ECM_DataOut+0x72>
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 801489e:	f240 52e9 	movw	r2, #1513	@ 0x5e9
 80148a2:	4293      	cmp	r3, r2
 80148a4:	d911      	bls.n	80148ca <USBD_CDC_ECM_DataOut+0x96>
      /* USB data will be immediately processed, this allow next USB traffic being
      NAKed till the end of the application Xfer */

      /* Process data by application (ie. copy to app buffer or notify user)
      hcdc->RxLength must be reset to zero at the end of the call of this function */
      ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	33b0      	adds	r3, #176	@ 0xb0
 80148b0:	009b      	lsls	r3, r3, #2
 80148b2:	4413      	add	r3, r2
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	f8d2 07d4 	ldr.w	r0, [r2, #2004]	@ 0x7d4
 80148be:	68fa      	ldr	r2, [r7, #12]
 80148c0:	f202 72dc 	addw	r2, r2, #2012	@ 0x7dc
 80148c4:	4611      	mov	r1, r2
 80148c6:	4798      	blx	r3
 80148c8:	e011      	b.n	80148ee <USBD_CDC_ECM_DataOut+0xba>
    }
    else
    {
      /* Prepare Out endpoint to receive next packet in current/new frame */
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80148ca:	4b0b      	ldr	r3, [pc, #44]	@ (80148f8 <USBD_CDC_ECM_DataOut+0xc4>)
 80148cc:	7819      	ldrb	r1, [r3, #0]
                                   (uint8_t *)(hcdc->RxBuffer + hcdc->RxLength),
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80148da:	441a      	add	r2, r3
                                   hcdc->MaxPcktLen);
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 ff16 	bl	8015714 <USBD_LL_PrepareReceive>
 80148e8:	e001      	b.n	80148ee <USBD_CDC_ECM_DataOut+0xba>
    }
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80148ea:	2303      	movs	r3, #3
 80148ec:	e000      	b.n	80148f0 <USBD_CDC_ECM_DataOut+0xbc>
  }

  return (uint8_t)USBD_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	200000b8 	.word	0x200000b8

080148fc <USBD_CDC_ECM_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_ECM_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	32b0      	adds	r2, #176	@ 0xb0
 801490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014912:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <USBD_CDC_ECM_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801491a:	2303      	movs	r3, #3
 801491c:	e024      	b.n	8014968 <USBD_CDC_ECM_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	33b0      	adds	r3, #176	@ 0xb0
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	4413      	add	r3, r2
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d019      	beq.n	8014966 <USBD_CDC_ECM_EP0_RxReady+0x6a>
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8014938:	2bff      	cmp	r3, #255	@ 0xff
 801493a:	d014      	beq.n	8014966 <USBD_CDC_ECM_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	33b0      	adds	r3, #176	@ 0xb0
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	f892 07d0 	ldrb.w	r0, [r2, #2000]	@ 0x7d0
                                                                         (uint8_t *)hcdc->data,
 8014954:	68f9      	ldr	r1, [r7, #12]
                                                                         (uint16_t)hcdc->CmdLength);
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	f892 27d1 	ldrb.w	r2, [r2, #2001]	@ 0x7d1
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801495c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	22ff      	movs	r2, #255	@ 0xff
 8014962:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0

  }
  return (uint8_t)USBD_OK;
 8014966:	2300      	movs	r3, #0
}
 8014968:	4618      	mov	r0, r3
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <USBD_CDC_ECM_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetFSCfgDesc(uint16_t *length)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b086      	sub	sp, #24
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 8014978:	2182      	movs	r1, #130	@ 0x82
 801497a:	4818      	ldr	r0, [pc, #96]	@ (80149dc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 801497c:	f7f0 f9f4 	bl	8004d68 <USBD_GetEpDesc>
 8014980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 8014982:	2101      	movs	r1, #1
 8014984:	4815      	ldr	r0, [pc, #84]	@ (80149dc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 8014986:	f7f0 f9ef 	bl	8004d68 <USBD_GetEpDesc>
 801498a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 801498c:	2181      	movs	r1, #129	@ 0x81
 801498e:	4813      	ldr	r0, [pc, #76]	@ (80149dc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 8014990:	f7f0 f9ea 	bl	8004d68 <USBD_GetEpDesc>
 8014994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d002      	beq.n	80149a2 <USBD_CDC_ECM_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_FS_BINTERVAL;
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	2210      	movs	r2, #16
 80149a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d006      	beq.n	80149b6 <USBD_CDC_ECM_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	2200      	movs	r2, #0
 80149ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80149b0:	711a      	strb	r2, [r3, #4]
 80149b2:	2200      	movs	r2, #0
 80149b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d006      	beq.n	80149ca <USBD_CDC_ECM_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2200      	movs	r2, #0
 80149c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80149c4:	711a      	strb	r2, [r3, #4]
 80149c6:	2200      	movs	r2, #0
 80149c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	224f      	movs	r2, #79	@ 0x4f
 80149ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 80149d0:	4b02      	ldr	r3, [pc, #8]	@ (80149dc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3718      	adds	r7, #24
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	20000068 	.word	0x20000068

080149e0 <USBD_CDC_ECM_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetHSCfgDesc(uint16_t *length)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 80149e8:	2182      	movs	r1, #130	@ 0x82
 80149ea:	4818      	ldr	r0, [pc, #96]	@ (8014a4c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 80149ec:	f7f0 f9bc 	bl	8004d68 <USBD_GetEpDesc>
 80149f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 80149f2:	2101      	movs	r1, #1
 80149f4:	4815      	ldr	r0, [pc, #84]	@ (8014a4c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 80149f6:	f7f0 f9b7 	bl	8004d68 <USBD_GetEpDesc>
 80149fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 80149fc:	2181      	movs	r1, #129	@ 0x81
 80149fe:	4813      	ldr	r0, [pc, #76]	@ (8014a4c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 8014a00:	f7f0 f9b2 	bl	8004d68 <USBD_GetEpDesc>
 8014a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <USBD_CDC_ECM_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_HS_BINTERVAL;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	2210      	movs	r2, #16
 8014a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d006      	beq.n	8014a26 <USBD_CDC_ECM_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_HS_MAX_PACKET_SIZE;
 8014a18:	693b      	ldr	r3, [r7, #16]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	711a      	strb	r2, [r3, #4]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	f042 0202 	orr.w	r2, r2, #2
 8014a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d006      	beq.n	8014a3a <USBD_CDC_ECM_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_HS_MAX_PACKET_SIZE;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	711a      	strb	r2, [r3, #4]
 8014a32:	2200      	movs	r2, #0
 8014a34:	f042 0202 	orr.w	r2, r2, #2
 8014a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	224f      	movs	r2, #79	@ 0x4f
 8014a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 8014a40:	4b02      	ldr	r3, [pc, #8]	@ (8014a4c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3718      	adds	r7, #24
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20000068 	.word	0x20000068

08014a50 <USBD_CDC_ECM_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b086      	sub	sp, #24
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 8014a58:	2182      	movs	r1, #130	@ 0x82
 8014a5a:	4818      	ldr	r0, [pc, #96]	@ (8014abc <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 8014a5c:	f7f0 f984 	bl	8004d68 <USBD_GetEpDesc>
 8014a60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 8014a62:	2101      	movs	r1, #1
 8014a64:	4815      	ldr	r0, [pc, #84]	@ (8014abc <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 8014a66:	f7f0 f97f 	bl	8004d68 <USBD_GetEpDesc>
 8014a6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 8014a6c:	2181      	movs	r1, #129	@ 0x81
 8014a6e:	4813      	ldr	r0, [pc, #76]	@ (8014abc <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 8014a70:	f7f0 f97a 	bl	8004d68 <USBD_GetEpDesc>
 8014a74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d002      	beq.n	8014a82 <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_FS_BINTERVAL;
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2210      	movs	r2, #16
 8014a80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d006      	beq.n	8014a96 <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014a90:	711a      	strb	r2, [r3, #4]
 8014a92:	2200      	movs	r2, #0
 8014a94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d006      	beq.n	8014aaa <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014aa4:	711a      	strb	r2, [r3, #4]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	224f      	movs	r2, #79	@ 0x4f
 8014aae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 8014ab0:	4b02      	ldr	r3, [pc, #8]	@ (8014abc <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3718      	adds	r7, #24
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20000068 	.word	0x20000068

08014ac0 <USBD_CDC_ECM_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_ECM_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_ECM_DeviceQualifierDesc);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	220a      	movs	r2, #10
 8014acc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_ECM_DeviceQualifierDesc;
 8014ace:	4b03      	ldr	r3, [pc, #12]	@ (8014adc <USBD_CDC_ECM_GetDeviceQualifierDescriptor+0x1c>)
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr
 8014adc:	20000018 	.word	0x20000018

08014ae0 <USBD_CDC_ECM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ECM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ECM_ItfTypeDef *fops)
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	b083      	sub	sp, #12
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d101      	bne.n	8014af4 <USBD_CDC_ECM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014af0:	2303      	movs	r3, #3
 8014af2:	e009      	b.n	8014b08 <USBD_CDC_ECM_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	33b0      	adds	r3, #176	@ 0xb0
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	4413      	add	r3, r2
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014b06:	2300      	movs	r3, #0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <USBD_CDC_ECM_USRStringDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_CDC_ECM_USRStringDescriptor(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];

  /* Check if the requested string interface is supported */
  if (index == CDC_ECM_MAC_STRING_INDEX)
 8014b22:	7afb      	ldrb	r3, [r7, #11]
 8014b24:	2b06      	cmp	r3, #6
 8014b26:	d10f      	bne.n	8014b48 <USBD_CDC_ECM_USRStringDescriptor+0x34>
  {
    USBD_GetString((uint8_t *)((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->pStrDesc,
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	33b0      	adds	r3, #176	@ 0xb0
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4413      	add	r3, r2
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	699b      	ldr	r3, [r3, #24]
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	4905      	ldr	r1, [pc, #20]	@ (8014b54 <USBD_CDC_ECM_USRStringDescriptor+0x40>)
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7f0 ff80 	bl	8005a44 <USBD_GetString>
                   USBD_StrDesc,
                   length);

    return USBD_StrDesc;
 8014b44:	4b03      	ldr	r3, [pc, #12]	@ (8014b54 <USBD_CDC_ECM_USRStringDescriptor+0x40>)
 8014b46:	e000      	b.n	8014b4a <USBD_CDC_ECM_USRStringDescriptor+0x36>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8014b48:	2300      	movs	r3, #0
  }
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	20003fe0 	.word	0x20003fe0

08014b58 <USBD_CDC_ECM_SetTxBuffer>:
uint8_t USBD_CDC_ECM_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_ECM_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b087      	sub	sp, #28
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	607a      	str	r2, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	32b0      	adds	r2, #176	@ 0xb0
 8014b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b72:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d101      	bne.n	8014b7e <USBD_CDC_ECM_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	e008      	b.n	8014b90 <USBD_CDC_ECM_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	68ba      	ldr	r2, [r7, #8]
 8014b82:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
  hcdc->TxLength = length;
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

  return (uint8_t)USBD_OK;
 8014b8e:	2300      	movs	r3, #0
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	371c      	adds	r7, #28
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <USBD_CDC_ECM_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_ECM_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b085      	sub	sp, #20
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	32b0      	adds	r2, #176	@ 0xb0
 8014bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d101      	bne.n	8014bc0 <USBD_CDC_ECM_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014bbc:	2303      	movs	r3, #3
 8014bbe:	e004      	b.n	8014bca <USBD_CDC_ECM_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	683a      	ldr	r2, [r7, #0]
 8014bc4:	f8c3 27d4 	str.w	r2, [r3, #2004]	@ 0x7d4

  return (uint8_t)USBD_OK;
 8014bc8:	2300      	movs	r3, #0
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3714      	adds	r7, #20
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr
	...

08014bd8 <USBD_CDC_ECM_TransmitPacket>:
uint8_t USBD_CDC_ECM_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_ECM_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	32b0      	adds	r2, #176	@ 0xb0
 8014bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bee:	60bb      	str	r3, [r7, #8]
#endif /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d101      	bne.n	8014bfe <USBD_CDC_ECM_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014bfa:	2303      	movs	r3, #3
 8014bfc:	e025      	b.n	8014c4a <USBD_CDC_ECM_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d11f      	bne.n	8014c48 <USBD_CDC_ECM_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4

    /* Update the packet total length */
    pdev->ep_in[ECMInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014c10:	4b10      	ldr	r3, [pc, #64]	@ (8014c54 <USBD_CDC_ECM_TransmitPacket+0x7c>)
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	f003 020f 	and.w	r2, r3, #15
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	f8d3 17e0 	ldr.w	r1, [r3, #2016]	@ 0x7e0
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	4613      	mov	r3, r2
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	4413      	add	r3, r2
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4403      	add	r3, r0
 8014c2a:	3318      	adds	r3, #24
 8014c2c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, ECMInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014c2e:	4b09      	ldr	r3, [pc, #36]	@ (8014c54 <USBD_CDC_ECM_TransmitPacket+0x7c>)
 8014c30:	7819      	ldrb	r1, [r3, #0]
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 fd47 	bl	80156d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014c44:	2300      	movs	r3, #0
 8014c46:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	200000b7 	.word	0x200000b7

08014c58 <USBD_CDC_ECM_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ECM_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	32b0      	adds	r2, #176	@ 0xb0
 8014c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c6e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	32b0      	adds	r2, #176	@ 0xb0
 8014c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d101      	bne.n	8014c86 <USBD_CDC_ECM_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014c82:	2303      	movs	r3, #3
 8014c84:	e00b      	b.n	8014c9e <USBD_CDC_ECM_ReceivePacket+0x46>
  }

  /* Prepare Out endpoint to receive next packet */
  (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd, hcdc->RxBuffer, hcdc->MaxPcktLen);
 8014c86:	4b08      	ldr	r3, [pc, #32]	@ (8014ca8 <USBD_CDC_ECM_ReceivePacket+0x50>)
 8014c88:	7819      	ldrb	r1, [r3, #0]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 fd3c 	bl	8015714 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8014c9c:	2300      	movs	r3, #0
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	200000b8 	.word	0x200000b8

08014cac <USBD_CDC_ECM_SendNotification>:
  * @retval status
  */
uint8_t USBD_CDC_ECM_SendNotification(USBD_HandleTypeDef *pdev,
                                      USBD_CDC_NotifCodeTypeDef Notif,
                                      uint16_t bVal, uint8_t *pData)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b088      	sub	sp, #32
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	607b      	str	r3, [r7, #4]
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	72fb      	strb	r3, [r7, #11]
 8014cba:	4613      	mov	r3, r2
 8014cbc:	813b      	strh	r3, [r7, #8]
  uint32_t Idx;
  uint32_t ReqSize = 0U;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	61bb      	str	r3, [r7, #24]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	32b0      	adds	r2, #176	@ 0xb0
 8014ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cd0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d101      	bne.n	8014ce0 <USBD_CDC_ECM_SendNotification+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	e088      	b.n	8014df2 <USBD_CDC_ECM_SendNotification+0x146>
  /* Get the Endpoints addresses allocated for this class instance */
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Initialize the request fields */
  (hcdc->Req).bmRequest = CDC_ECM_BMREQUEST_TYPE_ECM;
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	22a1      	movs	r2, #161	@ 0xa1
 8014ce4:	f883 27f8 	strb.w	r2, [r3, #2040]	@ 0x7f8
  (hcdc->Req).bRequest = (uint8_t)Notif;
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	7afa      	ldrb	r2, [r7, #11]
 8014cec:	f883 27f9 	strb.w	r2, [r3, #2041]	@ 0x7f9

  switch ((hcdc->Req).bRequest)
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	f893 37f9 	ldrb.w	r3, [r3, #2041]	@ 0x7f9
 8014cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cf8:	d044      	beq.n	8014d84 <USBD_CDC_ECM_SendNotification+0xd8>
 8014cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8014cfc:	dc68      	bgt.n	8014dd0 <USBD_CDC_ECM_SendNotification+0x124>
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d002      	beq.n	8014d08 <USBD_CDC_ECM_SendNotification+0x5c>
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d01f      	beq.n	8014d46 <USBD_CDC_ECM_SendNotification+0x9a>
 8014d06:	e063      	b.n	8014dd0 <USBD_CDC_ECM_SendNotification+0x124>
  {
    case NETWORK_CONNECTION:
      (hcdc->Req).wValue = bVal;
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	893a      	ldrh	r2, [r7, #8]
 8014d0c:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	2200      	movs	r2, #0
 8014d14:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0U;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe

      for (Idx = 0U; Idx < 8U; Idx++)
 8014d20:	2300      	movs	r3, #0
 8014d22:	61fb      	str	r3, [r7, #28]
 8014d24:	e009      	b.n	8014d3a <USBD_CDC_ECM_SendNotification+0x8e>
      {
        (hcdc->Req).data[Idx] = 0U;
 8014d26:	693a      	ldr	r2, [r7, #16]
 8014d28:	69fb      	ldr	r3, [r7, #28]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d30:	2200      	movs	r2, #0
 8014d32:	701a      	strb	r2, [r3, #0]
      for (Idx = 0U; Idx < 8U; Idx++)
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	3301      	adds	r3, #1
 8014d38:	61fb      	str	r3, [r7, #28]
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	2b07      	cmp	r3, #7
 8014d3e:	d9f2      	bls.n	8014d26 <USBD_CDC_ECM_SendNotification+0x7a>
      }
      ReqSize = 8U;
 8014d40:	2308      	movs	r3, #8
 8014d42:	61bb      	str	r3, [r7, #24]
      break;
 8014d44:	e048      	b.n	8014dd8 <USBD_CDC_ECM_SendNotification+0x12c>

    case RESPONSE_AVAILABLE:
      (hcdc->Req).wValue = 0U;
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0U;
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe
      for (Idx = 0U; Idx < 8U; Idx++)
 8014d5e:	2300      	movs	r3, #0
 8014d60:	61fb      	str	r3, [r7, #28]
 8014d62:	e009      	b.n	8014d78 <USBD_CDC_ECM_SendNotification+0xcc>
      {
        (hcdc->Req).data[Idx] = 0U;
 8014d64:	693a      	ldr	r2, [r7, #16]
 8014d66:	69fb      	ldr	r3, [r7, #28]
 8014d68:	4413      	add	r3, r2
 8014d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d6e:	2200      	movs	r2, #0
 8014d70:	701a      	strb	r2, [r3, #0]
      for (Idx = 0U; Idx < 8U; Idx++)
 8014d72:	69fb      	ldr	r3, [r7, #28]
 8014d74:	3301      	adds	r3, #1
 8014d76:	61fb      	str	r3, [r7, #28]
 8014d78:	69fb      	ldr	r3, [r7, #28]
 8014d7a:	2b07      	cmp	r3, #7
 8014d7c:	d9f2      	bls.n	8014d64 <USBD_CDC_ECM_SendNotification+0xb8>
      }
      ReqSize = 8U;
 8014d7e:	2308      	movs	r3, #8
 8014d80:	61bb      	str	r3, [r7, #24]
      break;
 8014d82:	e029      	b.n	8014dd8 <USBD_CDC_ECM_SendNotification+0x12c>

    case CONNECTION_SPEED_CHANGE:
      (hcdc->Req).wValue = 0U;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2200      	movs	r2, #0
 8014d88:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0x0008U;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	2208      	movs	r2, #8
 8014d98:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe
      ReqSize = 16U;
 8014d9c:	2310      	movs	r3, #16
 8014d9e:	61bb      	str	r3, [r7, #24]

      /* Check pointer to data buffer */
      if (pData != NULL)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d017      	beq.n	8014dd6 <USBD_CDC_ECM_SendNotification+0x12a>
      {
        for (Idx = 0U; Idx < 8U; Idx++)
 8014da6:	2300      	movs	r3, #0
 8014da8:	61fb      	str	r3, [r7, #28]
 8014daa:	e00d      	b.n	8014dc8 <USBD_CDC_ECM_SendNotification+0x11c>
        {
          (hcdc->Req).data[Idx] = pData[Idx];
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	69fb      	ldr	r3, [r7, #28]
 8014db0:	4413      	add	r3, r2
 8014db2:	7819      	ldrb	r1, [r3, #0]
 8014db4:	693a      	ldr	r2, [r7, #16]
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	4413      	add	r3, r2
 8014dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014dbe:	460a      	mov	r2, r1
 8014dc0:	701a      	strb	r2, [r3, #0]
        for (Idx = 0U; Idx < 8U; Idx++)
 8014dc2:	69fb      	ldr	r3, [r7, #28]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	61fb      	str	r3, [r7, #28]
 8014dc8:	69fb      	ldr	r3, [r7, #28]
 8014dca:	2b07      	cmp	r3, #7
 8014dcc:	d9ee      	bls.n	8014dac <USBD_CDC_ECM_SendNotification+0x100>
        }
      }
      break;
 8014dce:	e002      	b.n	8014dd6 <USBD_CDC_ECM_SendNotification+0x12a>

    default:
      ret = USBD_FAIL;
 8014dd0:	2303      	movs	r3, #3
 8014dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8014dd4:	e000      	b.n	8014dd8 <USBD_CDC_ECM_SendNotification+0x12c>
      break;
 8014dd6:	bf00      	nop
  }

  /* Transmit notification packet */
  if (ReqSize != 0U)
 8014dd8:	69bb      	ldr	r3, [r7, #24]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d008      	beq.n	8014df0 <USBD_CDC_ECM_SendNotification+0x144>
  {
    (void)USBD_LL_Transmit(pdev, ECMCmdEpAdd, (uint8_t *)&hcdc->Req, ReqSize);
 8014dde:	4b07      	ldr	r3, [pc, #28]	@ (8014dfc <USBD_CDC_ECM_SendNotification+0x150>)
 8014de0:	7819      	ldrb	r1, [r3, #0]
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	f503 62ff 	add.w	r2, r3, #2040	@ 0x7f8
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f000 fc71 	bl	80156d2 <USBD_LL_Transmit>
  }

  return (uint8_t)ret;
 8014df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3720      	adds	r7, #32
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	200000b9 	.word	0x200000b9

08014e00 <CDC_ECM_Itf_Init>:
  *         Initializes the CDC_ECM media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Init(void)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	af00      	add	r7, sp, #0
  if (CDC_ECMInitialized == 0U)
 8014e04:	4b09      	ldr	r3, [pc, #36]	@ (8014e2c <CDC_ECM_Itf_Init+0x2c>)
 8014e06:	781b      	ldrb	r3, [r3, #0]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d102      	bne.n	8014e12 <CDC_ECM_Itf_Init+0x12>
  {
    /*
      Initialize the TCP/IP stack here
    */

    CDC_ECMInitialized = 1U;
 8014e0c:	4b07      	ldr	r3, [pc, #28]	@ (8014e2c <CDC_ECM_Itf_Init+0x2c>)
 8014e0e:	2201      	movs	r2, #1
 8014e10:	701a      	strb	r2, [r3, #0]

  /* Set Application Buffers */
#ifdef USE_USBD_COMPOSITE
  (void)USBD_CDC_ECM_SetTxBuffer(&USBD_Device, UserTxBuffer, 0U, 0U);
#else
  (void)USBD_CDC_ECM_SetTxBuffer(&USBD_Device, UserTxBuffer, 0U);
 8014e12:	2200      	movs	r2, #0
 8014e14:	4906      	ldr	r1, [pc, #24]	@ (8014e30 <CDC_ECM_Itf_Init+0x30>)
 8014e16:	4807      	ldr	r0, [pc, #28]	@ (8014e34 <CDC_ECM_Itf_Init+0x34>)
 8014e18:	f7ff fe9e 	bl	8014b58 <USBD_CDC_ECM_SetTxBuffer>
#endif /* USE_USBD_COMPOSITE */
  (void)USBD_CDC_ECM_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8014e1c:	4906      	ldr	r1, [pc, #24]	@ (8014e38 <CDC_ECM_Itf_Init+0x38>)
 8014e1e:	4805      	ldr	r0, [pc, #20]	@ (8014e34 <CDC_ECM_Itf_Init+0x34>)
 8014e20:	f7ff febc 	bl	8014b9c <USBD_CDC_ECM_SetRxBuffer>

  return (0);
 8014e24:	2300      	movs	r3, #0
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	20004d7e 	.word	0x20004d7e
 8014e30:	20004730 	.word	0x20004730
 8014e34:	20003d04 	.word	0x20003d04
 8014e38:	200040e0 	.word	0x200040e0

08014e3c <CDC_ECM_Itf_DeInit>:
  *         DeInitializes the CDC_ECM media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_DeInit(void)
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b083      	sub	sp, #12
 8014e40:	af00      	add	r7, sp, #0
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *) \
                                             (USBD_Device.pClassDataCmsit[USBD_Device.classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(USBD_Device.pClassData);
 8014e42:	4b07      	ldr	r3, [pc, #28]	@ (8014e60 <CDC_ECM_Itf_DeInit+0x24>)
 8014e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014e48:	607b      	str	r3, [r7, #4]
#endif /* USE_USBD_COMPOSITE */

  /* Notify application layer that link is down */
  hcdc_cdc_ecm->LinkStatus = 0U;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0

  return (0);
 8014e52:	2300      	movs	r3, #0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	370c      	adds	r7, #12
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr
 8014e60:	20003d04 	.word	0x20003d04

08014e64 <CDC_ECM_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b084      	sub	sp, #16
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	6039      	str	r1, [r7, #0]
 8014e6e:	71fb      	strb	r3, [r7, #7]
 8014e70:	4613      	mov	r3, r2
 8014e72:	80bb      	strh	r3, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *) \
                                             (USBD_Device.pClassDataCmsit[USBD_Device.classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(USBD_Device.pClassData);
 8014e74:	4b24      	ldr	r3, [pc, #144]	@ (8014f08 <CDC_ECM_Itf_Control+0xa4>)
 8014e76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014e7a:	60fb      	str	r3, [r7, #12]
#endif /* USE_USBD_COMPOSITE */

  switch (cmd)
 8014e7c:	79fb      	ldrb	r3, [r7, #7]
 8014e7e:	2b44      	cmp	r3, #68	@ 0x44
 8014e80:	dc35      	bgt.n	8014eee <CDC_ECM_Itf_Control+0x8a>
 8014e82:	2b40      	cmp	r3, #64	@ 0x40
 8014e84:	da04      	bge.n	8014e90 <CDC_ECM_Itf_Control+0x2c>
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d033      	beq.n	8014ef2 <CDC_ECM_Itf_Control+0x8e>
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	d033      	beq.n	8014ef6 <CDC_ECM_Itf_Control+0x92>
    case CDC_ECM_GET_ETH_STATISTIC:
      /* Add your code here */
      break;

    default:
      break;
 8014e8e:	e02e      	b.n	8014eee <CDC_ECM_Itf_Control+0x8a>
  switch (cmd)
 8014e90:	3b40      	subs	r3, #64	@ 0x40
 8014e92:	2b04      	cmp	r3, #4
 8014e94:	d82b      	bhi.n	8014eee <CDC_ECM_Itf_Control+0x8a>
 8014e96:	a201      	add	r2, pc, #4	@ (adr r2, 8014e9c <CDC_ECM_Itf_Control+0x38>)
 8014e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e9c:	08014eef 	.word	0x08014eef
 8014ea0:	08014eef 	.word	0x08014eef
 8014ea4:	08014eef 	.word	0x08014eef
 8014ea8:	08014eb1 	.word	0x08014eb1
 8014eac:	08014eef 	.word	0x08014eef
      if (hcdc_cdc_ecm->LinkStatus == 0U)
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d11f      	bne.n	8014efa <CDC_ECM_Itf_Control+0x96>
        hcdc_cdc_ecm->LinkStatus = 1U;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0
        if (hcdc_cdc_ecm->NotificationStatus == 0U)
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	@ 0x7f4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d116      	bne.n	8014efa <CDC_ECM_Itf_Control+0x96>
          (void)USBD_CDC_ECM_SendNotification(&USBD_Device, NETWORK_CONNECTION,
 8014ecc:	2300      	movs	r3, #0
 8014ece:	2201      	movs	r2, #1
 8014ed0:	2100      	movs	r1, #0
 8014ed2:	480d      	ldr	r0, [pc, #52]	@ (8014f08 <CDC_ECM_Itf_Control+0xa4>)
 8014ed4:	f7ff feea 	bl	8014cac <USBD_CDC_ECM_SendNotification>
          (void)USBD_CDC_ECM_SendNotification(&USBD_Device, CONNECTION_SPEED_CHANGE, 0, NULL);
 8014ed8:	2300      	movs	r3, #0
 8014eda:	2200      	movs	r2, #0
 8014edc:	212a      	movs	r1, #42	@ 0x2a
 8014ede:	480a      	ldr	r0, [pc, #40]	@ (8014f08 <CDC_ECM_Itf_Control+0xa4>)
 8014ee0:	f7ff fee4 	bl	8014cac <USBD_CDC_ECM_SendNotification>
          hcdc_cdc_ecm->NotificationStatus = 1U;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
      break;
 8014eec:	e005      	b.n	8014efa <CDC_ECM_Itf_Control+0x96>
      break;
 8014eee:	bf00      	nop
 8014ef0:	e004      	b.n	8014efc <CDC_ECM_Itf_Control+0x98>
      break;
 8014ef2:	bf00      	nop
 8014ef4:	e002      	b.n	8014efc <CDC_ECM_Itf_Control+0x98>
      break;
 8014ef6:	bf00      	nop
 8014ef8:	e000      	b.n	8014efc <CDC_ECM_Itf_Control+0x98>
      break;
 8014efa:	bf00      	nop
  }
  UNUSED(length);
  UNUSED(pbuf);

  return (0);
 8014efc:	2300      	movs	r3, #0
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3710      	adds	r7, #16
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	20003d04 	.word	0x20003d04

08014f0c <CDC_ECM_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Receive(uint8_t *Buf, uint32_t *Len)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	6039      	str	r1, [r7, #0]
    struct pbuf *p;

    p = pbuf_alloc(PBUF_RAW, *Len, PBUF_POOL);
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8014f20:	4619      	mov	r1, r3
 8014f22:	2000      	movs	r0, #0
 8014f24:	f7f2 fdcc 	bl	8007ac0 <pbuf_alloc>
 8014f28:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d012      	beq.n	8014f56 <CDC_ECM_Itf_Receive+0x4a>
    {
        pbuf_take(p, Buf, *Len);
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	461a      	mov	r2, r3
 8014f38:	6879      	ldr	r1, [r7, #4]
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f7f3 fb56 	bl	80085ec <pbuf_take>

        if (gnetif.input(p, &gnetif) != ERR_OK)
 8014f40:	4b09      	ldr	r3, [pc, #36]	@ (8014f68 <CDC_ECM_Itf_Receive+0x5c>)
 8014f42:	691b      	ldr	r3, [r3, #16]
 8014f44:	4908      	ldr	r1, [pc, #32]	@ (8014f68 <CDC_ECM_Itf_Receive+0x5c>)
 8014f46:	68f8      	ldr	r0, [r7, #12]
 8014f48:	4798      	blx	r3
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d002      	beq.n	8014f56 <CDC_ECM_Itf_Receive+0x4a>
        {
            pbuf_free(p);
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f7f3 f897 	bl	8008084 <pbuf_free>
        }
    }

    /* Prepare to receive next packet */
    USBD_CDC_ECM_ReceivePacket(&hUsbDeviceFS);
 8014f56:	4805      	ldr	r0, [pc, #20]	@ (8014f6c <CDC_ECM_Itf_Receive+0x60>)
 8014f58:	f7ff fe7e 	bl	8014c58 <USBD_CDC_ECM_ReceivePacket>

    return (USBD_OK);
 8014f5c:	2300      	movs	r3, #0
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3710      	adds	r7, #16
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	200001a0 	.word	0x200001a0
 8014f6c:	20003d04 	.word	0x20003d04

08014f70 <CDC_ECM_Itf_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014f70:	b480      	push	{r7}
 8014f72:	b085      	sub	sp, #20
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 8014f7e:	2300      	movs	r3, #0
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3714      	adds	r7, #20
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <CDC_ECM_Itf_Process>:
  *         through this function.
  * @param  pdef: pointer to the USB Device Handle
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Process(USBD_HandleTypeDef *pdev)
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b085      	sub	sp, #20
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
  /* Get the CDC_ECM handler pointer */
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(pdev->pClassDataCmsit[pdev->classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(pdev->pClassData);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014f9a:	60fb      	str	r3, [r7, #12]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc_cdc_ecm == NULL)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d102      	bne.n	8014fa8 <CDC_ECM_Itf_Process+0x1c>
  {
    return (-1);
 8014fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014fa6:	e003      	b.n	8014fb0 <CDC_ECM_Itf_Process+0x24>
  }

  if (hcdc_cdc_ecm->LinkStatus != 0U)
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
      to the lwIP for handling
      Call here the TCP/IP background tasks.
    */
  }

  return (0);
 8014fae:	2300      	movs	r3, #0
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3714      	adds	r7, #20
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr

08014fbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b083      	sub	sp, #12
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	6039      	str	r1, [r7, #0]
 8014fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	2212      	movs	r2, #18
 8014fcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014fce:	4b03      	ldr	r3, [pc, #12]	@ (8014fdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr
 8014fdc:	200000f4 	.word	0x200000f4

08014fe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b083      	sub	sp, #12
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	6039      	str	r1, [r7, #0]
 8014fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	2204      	movs	r2, #4
 8014ff0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014ff2:	4b03      	ldr	r3, [pc, #12]	@ (8015000 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	370c      	adds	r7, #12
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr
 8015000:	20000108 	.word	0x20000108

08015004 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	4603      	mov	r3, r0
 801500c:	6039      	str	r1, [r7, #0]
 801500e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015010:	79fb      	ldrb	r3, [r7, #7]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d105      	bne.n	8015022 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015016:	683a      	ldr	r2, [r7, #0]
 8015018:	4907      	ldr	r1, [pc, #28]	@ (8015038 <USBD_FS_ProductStrDescriptor+0x34>)
 801501a:	4808      	ldr	r0, [pc, #32]	@ (801503c <USBD_FS_ProductStrDescriptor+0x38>)
 801501c:	f7f0 fd12 	bl	8005a44 <USBD_GetString>
 8015020:	e004      	b.n	801502c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	4904      	ldr	r1, [pc, #16]	@ (8015038 <USBD_FS_ProductStrDescriptor+0x34>)
 8015026:	4805      	ldr	r0, [pc, #20]	@ (801503c <USBD_FS_ProductStrDescriptor+0x38>)
 8015028:	f7f0 fd0c 	bl	8005a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 801502c:	4b02      	ldr	r3, [pc, #8]	@ (8015038 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	20004d80 	.word	0x20004d80
 801503c:	080196d8 	.word	0x080196d8

08015040 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	4603      	mov	r3, r0
 8015048:	6039      	str	r1, [r7, #0]
 801504a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	4904      	ldr	r1, [pc, #16]	@ (8015060 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015050:	4804      	ldr	r0, [pc, #16]	@ (8015064 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015052:	f7f0 fcf7 	bl	8005a44 <USBD_GetString>
  return USBD_StrDesc;
 8015056:	4b02      	ldr	r3, [pc, #8]	@ (8015060 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015058:	4618      	mov	r0, r3
 801505a:	3708      	adds	r7, #8
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}
 8015060:	20004d80 	.word	0x20004d80
 8015064:	080196f0 	.word	0x080196f0

08015068 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	6039      	str	r1, [r7, #0]
 8015072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	221a      	movs	r2, #26
 8015078:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801507a:	f000 f843 	bl	8015104 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801507e:	4b02      	ldr	r3, [pc, #8]	@ (8015088 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015080:	4618      	mov	r0, r3
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	2000010c 	.word	0x2000010c

0801508c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	4603      	mov	r3, r0
 8015094:	6039      	str	r1, [r7, #0]
 8015096:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015098:	79fb      	ldrb	r3, [r7, #7]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	4907      	ldr	r1, [pc, #28]	@ (80150c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80150a2:	4808      	ldr	r0, [pc, #32]	@ (80150c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150a4:	f7f0 fcce 	bl	8005a44 <USBD_GetString>
 80150a8:	e004      	b.n	80150b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80150aa:	683a      	ldr	r2, [r7, #0]
 80150ac:	4904      	ldr	r1, [pc, #16]	@ (80150c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80150ae:	4805      	ldr	r0, [pc, #20]	@ (80150c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80150b0:	f7f0 fcc8 	bl	8005a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80150b4:	4b02      	ldr	r3, [pc, #8]	@ (80150c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3708      	adds	r7, #8
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20004d80 	.word	0x20004d80
 80150c4:	08019704 	.word	0x08019704

080150c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	6039      	str	r1, [r7, #0]
 80150d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150d4:	79fb      	ldrb	r3, [r7, #7]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d105      	bne.n	80150e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80150da:	683a      	ldr	r2, [r7, #0]
 80150dc:	4907      	ldr	r1, [pc, #28]	@ (80150fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80150de:	4808      	ldr	r0, [pc, #32]	@ (8015100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80150e0:	f7f0 fcb0 	bl	8005a44 <USBD_GetString>
 80150e4:	e004      	b.n	80150f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80150e6:	683a      	ldr	r2, [r7, #0]
 80150e8:	4904      	ldr	r1, [pc, #16]	@ (80150fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80150ea:	4805      	ldr	r0, [pc, #20]	@ (8015100 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80150ec:	f7f0 fcaa 	bl	8005a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80150f0:	4b02      	ldr	r3, [pc, #8]	@ (80150fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	20004d80 	.word	0x20004d80
 8015100:	08019710 	.word	0x08019710

08015104 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801510a:	4b0f      	ldr	r3, [pc, #60]	@ (8015148 <Get_SerialNum+0x44>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015110:	4b0e      	ldr	r3, [pc, #56]	@ (801514c <Get_SerialNum+0x48>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015116:	4b0e      	ldr	r3, [pc, #56]	@ (8015150 <Get_SerialNum+0x4c>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801511c:	68fa      	ldr	r2, [r7, #12]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	4413      	add	r3, r2
 8015122:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d009      	beq.n	801513e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801512a:	2208      	movs	r2, #8
 801512c:	4909      	ldr	r1, [pc, #36]	@ (8015154 <Get_SerialNum+0x50>)
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 f814 	bl	801515c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015134:	2204      	movs	r2, #4
 8015136:	4908      	ldr	r1, [pc, #32]	@ (8015158 <Get_SerialNum+0x54>)
 8015138:	68b8      	ldr	r0, [r7, #8]
 801513a:	f000 f80f 	bl	801515c <IntToUnicode>
  }
}
 801513e:	bf00      	nop
 8015140:	3710      	adds	r7, #16
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	1fff7a10 	.word	0x1fff7a10
 801514c:	1fff7a14 	.word	0x1fff7a14
 8015150:	1fff7a18 	.word	0x1fff7a18
 8015154:	2000010e 	.word	0x2000010e
 8015158:	2000011e 	.word	0x2000011e

0801515c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801515c:	b480      	push	{r7}
 801515e:	b087      	sub	sp, #28
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	4613      	mov	r3, r2
 8015168:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801516a:	2300      	movs	r3, #0
 801516c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801516e:	2300      	movs	r3, #0
 8015170:	75fb      	strb	r3, [r7, #23]
 8015172:	e027      	b.n	80151c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	0f1b      	lsrs	r3, r3, #28
 8015178:	2b09      	cmp	r3, #9
 801517a:	d80b      	bhi.n	8015194 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	0f1b      	lsrs	r3, r3, #28
 8015180:	b2da      	uxtb	r2, r3
 8015182:	7dfb      	ldrb	r3, [r7, #23]
 8015184:	005b      	lsls	r3, r3, #1
 8015186:	4619      	mov	r1, r3
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	440b      	add	r3, r1
 801518c:	3230      	adds	r2, #48	@ 0x30
 801518e:	b2d2      	uxtb	r2, r2
 8015190:	701a      	strb	r2, [r3, #0]
 8015192:	e00a      	b.n	80151aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	0f1b      	lsrs	r3, r3, #28
 8015198:	b2da      	uxtb	r2, r3
 801519a:	7dfb      	ldrb	r3, [r7, #23]
 801519c:	005b      	lsls	r3, r3, #1
 801519e:	4619      	mov	r1, r3
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	440b      	add	r3, r1
 80151a4:	3237      	adds	r2, #55	@ 0x37
 80151a6:	b2d2      	uxtb	r2, r2
 80151a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	011b      	lsls	r3, r3, #4
 80151ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80151b0:	7dfb      	ldrb	r3, [r7, #23]
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	3301      	adds	r3, #1
 80151b6:	68ba      	ldr	r2, [r7, #8]
 80151b8:	4413      	add	r3, r2
 80151ba:	2200      	movs	r2, #0
 80151bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80151be:	7dfb      	ldrb	r3, [r7, #23]
 80151c0:	3301      	adds	r3, #1
 80151c2:	75fb      	strb	r3, [r7, #23]
 80151c4:	7dfa      	ldrb	r2, [r7, #23]
 80151c6:	79fb      	ldrb	r3, [r7, #7]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d3d3      	bcc.n	8015174 <IntToUnicode+0x18>
  }
}
 80151cc:	bf00      	nop
 80151ce:	bf00      	nop
 80151d0:	371c      	adds	r7, #28
 80151d2:	46bd      	mov	sp, r7
 80151d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d8:	4770      	bx	lr
	...

080151dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b08a      	sub	sp, #40	@ 0x28
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80151e4:	f107 0314 	add.w	r3, r7, #20
 80151e8:	2200      	movs	r2, #0
 80151ea:	601a      	str	r2, [r3, #0]
 80151ec:	605a      	str	r2, [r3, #4]
 80151ee:	609a      	str	r2, [r3, #8]
 80151f0:	60da      	str	r2, [r3, #12]
 80151f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80151fc:	d13a      	bne.n	8015274 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80151fe:	2300      	movs	r3, #0
 8015200:	613b      	str	r3, [r7, #16]
 8015202:	4b1e      	ldr	r3, [pc, #120]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 8015204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015206:	4a1d      	ldr	r2, [pc, #116]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 8015208:	f043 0301 	orr.w	r3, r3, #1
 801520c:	6313      	str	r3, [r2, #48]	@ 0x30
 801520e:	4b1b      	ldr	r3, [pc, #108]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 8015210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015212:	f003 0301 	and.w	r3, r3, #1
 8015216:	613b      	str	r3, [r7, #16]
 8015218:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801521a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801521e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015220:	2302      	movs	r3, #2
 8015222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015224:	2300      	movs	r3, #0
 8015226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015228:	2303      	movs	r3, #3
 801522a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801522c:	230a      	movs	r3, #10
 801522e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015230:	f107 0314 	add.w	r3, r7, #20
 8015234:	4619      	mov	r1, r3
 8015236:	4812      	ldr	r0, [pc, #72]	@ (8015280 <HAL_PCD_MspInit+0xa4>)
 8015238:	f7eb fdee 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801523c:	4b0f      	ldr	r3, [pc, #60]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 801523e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015240:	4a0e      	ldr	r2, [pc, #56]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 8015242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015246:	6353      	str	r3, [r2, #52]	@ 0x34
 8015248:	2300      	movs	r3, #0
 801524a:	60fb      	str	r3, [r7, #12]
 801524c:	4b0b      	ldr	r3, [pc, #44]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 801524e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015250:	4a0a      	ldr	r2, [pc, #40]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 8015252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015256:	6453      	str	r3, [r2, #68]	@ 0x44
 8015258:	4b08      	ldr	r3, [pc, #32]	@ (801527c <HAL_PCD_MspInit+0xa0>)
 801525a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801525c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015260:	60fb      	str	r3, [r7, #12]
 8015262:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015264:	2200      	movs	r2, #0
 8015266:	2100      	movs	r1, #0
 8015268:	2043      	movs	r0, #67	@ 0x43
 801526a:	f7eb fd9e 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801526e:	2043      	movs	r0, #67	@ 0x43
 8015270:	f7eb fdb7 	bl	8000de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015274:	bf00      	nop
 8015276:	3728      	adds	r7, #40	@ 0x28
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	40023800 	.word	0x40023800
 8015280:	40020000 	.word	0x40020000

08015284 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015298:	4619      	mov	r1, r3
 801529a:	4610      	mov	r0, r2
 801529c:	f7ef fa48 	bl	8004730 <USBD_LL_SetupStage>
}
 80152a0:	bf00      	nop
 80152a2:	3708      	adds	r7, #8
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80152ba:	78fa      	ldrb	r2, [r7, #3]
 80152bc:	6879      	ldr	r1, [r7, #4]
 80152be:	4613      	mov	r3, r2
 80152c0:	00db      	lsls	r3, r3, #3
 80152c2:	4413      	add	r3, r2
 80152c4:	009b      	lsls	r3, r3, #2
 80152c6:	440b      	add	r3, r1
 80152c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	78fb      	ldrb	r3, [r7, #3]
 80152d0:	4619      	mov	r1, r3
 80152d2:	f7ef fa82 	bl	80047da <USBD_LL_DataOutStage>
}
 80152d6:	bf00      	nop
 80152d8:	3708      	adds	r7, #8
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b082      	sub	sp, #8
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
 80152e6:	460b      	mov	r3, r1
 80152e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80152f0:	78fa      	ldrb	r2, [r7, #3]
 80152f2:	6879      	ldr	r1, [r7, #4]
 80152f4:	4613      	mov	r3, r2
 80152f6:	00db      	lsls	r3, r3, #3
 80152f8:	4413      	add	r3, r2
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	440b      	add	r3, r1
 80152fe:	3320      	adds	r3, #32
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	78fb      	ldrb	r3, [r7, #3]
 8015304:	4619      	mov	r1, r3
 8015306:	f7ef fb1b 	bl	8004940 <USBD_LL_DataInStage>
}
 801530a:	bf00      	nop
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b082      	sub	sp, #8
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015320:	4618      	mov	r0, r3
 8015322:	f7ef fc55 	bl	8004bd0 <USBD_LL_SOF>
}
 8015326:	bf00      	nop
 8015328:	3708      	adds	r7, #8
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}

0801532e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801532e:	b580      	push	{r7, lr}
 8015330:	b084      	sub	sp, #16
 8015332:	af00      	add	r7, sp, #0
 8015334:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015336:	2301      	movs	r3, #1
 8015338:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	79db      	ldrb	r3, [r3, #7]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d102      	bne.n	8015348 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015342:	2300      	movs	r3, #0
 8015344:	73fb      	strb	r3, [r7, #15]
 8015346:	e008      	b.n	801535a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	79db      	ldrb	r3, [r3, #7]
 801534c:	2b02      	cmp	r3, #2
 801534e:	d102      	bne.n	8015356 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015350:	2301      	movs	r3, #1
 8015352:	73fb      	strb	r3, [r7, #15]
 8015354:	e001      	b.n	801535a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015356:	f7eb fa49 	bl	80007ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015360:	7bfa      	ldrb	r2, [r7, #15]
 8015362:	4611      	mov	r1, r2
 8015364:	4618      	mov	r0, r3
 8015366:	f7ef fbef 	bl	8004b48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015370:	4618      	mov	r0, r3
 8015372:	f7ef fb97 	bl	8004aa4 <USBD_LL_Reset>
}
 8015376:	bf00      	nop
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
	...

08015380 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801538e:	4618      	mov	r0, r3
 8015390:	f7ef fbea 	bl	8004b68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	6812      	ldr	r2, [r2, #0]
 80153a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80153a6:	f043 0301 	orr.w	r3, r3, #1
 80153aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	7adb      	ldrb	r3, [r3, #11]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d005      	beq.n	80153c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80153b4:	4b04      	ldr	r3, [pc, #16]	@ (80153c8 <HAL_PCD_SuspendCallback+0x48>)
 80153b6:	691b      	ldr	r3, [r3, #16]
 80153b8:	4a03      	ldr	r2, [pc, #12]	@ (80153c8 <HAL_PCD_SuspendCallback+0x48>)
 80153ba:	f043 0306 	orr.w	r3, r3, #6
 80153be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	e000ed00 	.word	0xe000ed00

080153cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80153da:	4618      	mov	r0, r3
 80153dc:	f7ef fbe0 	bl	8004ba0 <USBD_LL_Resume>
}
 80153e0:	bf00      	nop
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	460b      	mov	r3, r1
 80153f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80153fa:	78fa      	ldrb	r2, [r7, #3]
 80153fc:	4611      	mov	r1, r2
 80153fe:	4618      	mov	r0, r3
 8015400:	f7ef fc38 	bl	8004c74 <USBD_LL_IsoOUTIncomplete>
}
 8015404:	bf00      	nop
 8015406:	3708      	adds	r7, #8
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801541e:	78fa      	ldrb	r2, [r7, #3]
 8015420:	4611      	mov	r1, r2
 8015422:	4618      	mov	r0, r3
 8015424:	f7ef fbf4 	bl	8004c10 <USBD_LL_IsoINIncomplete>
}
 8015428:	bf00      	nop
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801543e:	4618      	mov	r0, r3
 8015440:	f7ef fc4a 	bl	8004cd8 <USBD_LL_DevConnected>
}
 8015444:	bf00      	nop
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801545a:	4618      	mov	r0, r3
 801545c:	f7ef fc47 	bl	8004cee <USBD_LL_DevDisconnected>
}
 8015460:	bf00      	nop
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d13c      	bne.n	80154f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015478:	4a20      	ldr	r2, [pc, #128]	@ (80154fc <USBD_LL_Init+0x94>)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	4a1e      	ldr	r2, [pc, #120]	@ (80154fc <USBD_LL_Init+0x94>)
 8015484:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015488:	4b1c      	ldr	r3, [pc, #112]	@ (80154fc <USBD_LL_Init+0x94>)
 801548a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801548e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015490:	4b1a      	ldr	r3, [pc, #104]	@ (80154fc <USBD_LL_Init+0x94>)
 8015492:	2204      	movs	r2, #4
 8015494:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015496:	4b19      	ldr	r3, [pc, #100]	@ (80154fc <USBD_LL_Init+0x94>)
 8015498:	2202      	movs	r2, #2
 801549a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801549c:	4b17      	ldr	r3, [pc, #92]	@ (80154fc <USBD_LL_Init+0x94>)
 801549e:	2200      	movs	r2, #0
 80154a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80154a2:	4b16      	ldr	r3, [pc, #88]	@ (80154fc <USBD_LL_Init+0x94>)
 80154a4:	2202      	movs	r2, #2
 80154a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80154a8:	4b14      	ldr	r3, [pc, #80]	@ (80154fc <USBD_LL_Init+0x94>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80154ae:	4b13      	ldr	r3, [pc, #76]	@ (80154fc <USBD_LL_Init+0x94>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80154b4:	4b11      	ldr	r3, [pc, #68]	@ (80154fc <USBD_LL_Init+0x94>)
 80154b6:	2200      	movs	r2, #0
 80154b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80154ba:	4b10      	ldr	r3, [pc, #64]	@ (80154fc <USBD_LL_Init+0x94>)
 80154bc:	2200      	movs	r2, #0
 80154be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80154c0:	4b0e      	ldr	r3, [pc, #56]	@ (80154fc <USBD_LL_Init+0x94>)
 80154c2:	2200      	movs	r2, #0
 80154c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80154c6:	480d      	ldr	r0, [pc, #52]	@ (80154fc <USBD_LL_Init+0x94>)
 80154c8:	f7eb fe75 	bl	80011b6 <HAL_PCD_Init>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d001      	beq.n	80154d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80154d2:	f7eb f98b 	bl	80007ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80154d6:	2180      	movs	r1, #128	@ 0x80
 80154d8:	4808      	ldr	r0, [pc, #32]	@ (80154fc <USBD_LL_Init+0x94>)
 80154da:	f7ed f8a2 	bl	8002622 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80154de:	2240      	movs	r2, #64	@ 0x40
 80154e0:	2100      	movs	r1, #0
 80154e2:	4806      	ldr	r0, [pc, #24]	@ (80154fc <USBD_LL_Init+0x94>)
 80154e4:	f7ed f856 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80154e8:	2280      	movs	r2, #128	@ 0x80
 80154ea:	2101      	movs	r1, #1
 80154ec:	4803      	ldr	r0, [pc, #12]	@ (80154fc <USBD_LL_Init+0x94>)
 80154ee:	f7ed f851 	bl	8002594 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80154f2:	2300      	movs	r3, #0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	20004f80 	.word	0x20004f80

08015500 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015508:	2300      	movs	r3, #0
 801550a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801550c:	2300      	movs	r3, #0
 801550e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015516:	4618      	mov	r0, r3
 8015518:	f7eb ff5c 	bl	80013d4 <HAL_PCD_Start>
 801551c:	4603      	mov	r3, r0
 801551e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015520:	7bfb      	ldrb	r3, [r7, #15]
 8015522:	4618      	mov	r0, r3
 8015524:	f000 f942 	bl	80157ac <USBD_Get_USB_Status>
 8015528:	4603      	mov	r3, r0
 801552a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801552c:	7bbb      	ldrb	r3, [r7, #14]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015536:	b580      	push	{r7, lr}
 8015538:	b084      	sub	sp, #16
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
 801553e:	4608      	mov	r0, r1
 8015540:	4611      	mov	r1, r2
 8015542:	461a      	mov	r2, r3
 8015544:	4603      	mov	r3, r0
 8015546:	70fb      	strb	r3, [r7, #3]
 8015548:	460b      	mov	r3, r1
 801554a:	70bb      	strb	r3, [r7, #2]
 801554c:	4613      	mov	r3, r2
 801554e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015550:	2300      	movs	r3, #0
 8015552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015554:	2300      	movs	r3, #0
 8015556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801555e:	78bb      	ldrb	r3, [r7, #2]
 8015560:	883a      	ldrh	r2, [r7, #0]
 8015562:	78f9      	ldrb	r1, [r7, #3]
 8015564:	f7ec fc30 	bl	8001dc8 <HAL_PCD_EP_Open>
 8015568:	4603      	mov	r3, r0
 801556a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801556c:	7bfb      	ldrb	r3, [r7, #15]
 801556e:	4618      	mov	r0, r3
 8015570:	f000 f91c 	bl	80157ac <USBD_Get_USB_Status>
 8015574:	4603      	mov	r3, r0
 8015576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015578:	7bbb      	ldrb	r3, [r7, #14]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3710      	adds	r7, #16
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}

08015582 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015582:	b580      	push	{r7, lr}
 8015584:	b084      	sub	sp, #16
 8015586:	af00      	add	r7, sp, #0
 8015588:	6078      	str	r0, [r7, #4]
 801558a:	460b      	mov	r3, r1
 801558c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801558e:	2300      	movs	r3, #0
 8015590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015592:	2300      	movs	r3, #0
 8015594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	4611      	mov	r1, r2
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ec fc7b 	bl	8001e9c <HAL_PCD_EP_Close>
 80155a6:	4603      	mov	r3, r0
 80155a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155aa:	7bfb      	ldrb	r3, [r7, #15]
 80155ac:	4618      	mov	r0, r3
 80155ae:	f000 f8fd 	bl	80157ac <USBD_Get_USB_Status>
 80155b2:	4603      	mov	r3, r0
 80155b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3710      	adds	r7, #16
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b084      	sub	sp, #16
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	460b      	mov	r3, r1
 80155ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155cc:	2300      	movs	r3, #0
 80155ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155d0:	2300      	movs	r3, #0
 80155d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80155da:	78fa      	ldrb	r2, [r7, #3]
 80155dc:	4611      	mov	r1, r2
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ec fd33 	bl	800204a <HAL_PCD_EP_SetStall>
 80155e4:	4603      	mov	r3, r0
 80155e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155e8:	7bfb      	ldrb	r3, [r7, #15]
 80155ea:	4618      	mov	r0, r3
 80155ec:	f000 f8de 	bl	80157ac <USBD_Get_USB_Status>
 80155f0:	4603      	mov	r3, r0
 80155f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	460b      	mov	r3, r1
 8015608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801560a:	2300      	movs	r3, #0
 801560c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801560e:	2300      	movs	r3, #0
 8015610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015618:	78fa      	ldrb	r2, [r7, #3]
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f7ec fd77 	bl	8002110 <HAL_PCD_EP_ClrStall>
 8015622:	4603      	mov	r3, r0
 8015624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015626:	7bfb      	ldrb	r3, [r7, #15]
 8015628:	4618      	mov	r0, r3
 801562a:	f000 f8bf 	bl	80157ac <USBD_Get_USB_Status>
 801562e:	4603      	mov	r3, r0
 8015630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015632:	7bbb      	ldrb	r3, [r7, #14]
}
 8015634:	4618      	mov	r0, r3
 8015636:	3710      	adds	r7, #16
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801563c:	b480      	push	{r7}
 801563e:	b085      	sub	sp, #20
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	460b      	mov	r3, r1
 8015646:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801564e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015654:	2b00      	cmp	r3, #0
 8015656:	da0b      	bge.n	8015670 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015658:	78fb      	ldrb	r3, [r7, #3]
 801565a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801565e:	68f9      	ldr	r1, [r7, #12]
 8015660:	4613      	mov	r3, r2
 8015662:	00db      	lsls	r3, r3, #3
 8015664:	4413      	add	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	440b      	add	r3, r1
 801566a:	3316      	adds	r3, #22
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	e00b      	b.n	8015688 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015670:	78fb      	ldrb	r3, [r7, #3]
 8015672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015676:	68f9      	ldr	r1, [r7, #12]
 8015678:	4613      	mov	r3, r2
 801567a:	00db      	lsls	r3, r3, #3
 801567c:	4413      	add	r3, r2
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	440b      	add	r3, r1
 8015682:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015686:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015688:	4618      	mov	r0, r3
 801568a:	3714      	adds	r7, #20
 801568c:	46bd      	mov	sp, r7
 801568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015692:	4770      	bx	lr

08015694 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	460b      	mov	r3, r1
 801569e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156a0:	2300      	movs	r3, #0
 80156a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156a4:	2300      	movs	r3, #0
 80156a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80156ae:	78fa      	ldrb	r2, [r7, #3]
 80156b0:	4611      	mov	r1, r2
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7ec fb64 	bl	8001d80 <HAL_PCD_SetAddress>
 80156b8:	4603      	mov	r3, r0
 80156ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156bc:	7bfb      	ldrb	r3, [r7, #15]
 80156be:	4618      	mov	r0, r3
 80156c0:	f000 f874 	bl	80157ac <USBD_Get_USB_Status>
 80156c4:	4603      	mov	r3, r0
 80156c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}

080156d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b086      	sub	sp, #24
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	60f8      	str	r0, [r7, #12]
 80156da:	607a      	str	r2, [r7, #4]
 80156dc:	603b      	str	r3, [r7, #0]
 80156de:	460b      	mov	r3, r1
 80156e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156e2:	2300      	movs	r3, #0
 80156e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156e6:	2300      	movs	r3, #0
 80156e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80156f0:	7af9      	ldrb	r1, [r7, #11]
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	687a      	ldr	r2, [r7, #4]
 80156f6:	f7ec fc6e 	bl	8001fd6 <HAL_PCD_EP_Transmit>
 80156fa:	4603      	mov	r3, r0
 80156fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156fe:	7dfb      	ldrb	r3, [r7, #23]
 8015700:	4618      	mov	r0, r3
 8015702:	f000 f853 	bl	80157ac <USBD_Get_USB_Status>
 8015706:	4603      	mov	r3, r0
 8015708:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801570a:	7dbb      	ldrb	r3, [r7, #22]
}
 801570c:	4618      	mov	r0, r3
 801570e:	3718      	adds	r7, #24
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	607a      	str	r2, [r7, #4]
 801571e:	603b      	str	r3, [r7, #0]
 8015720:	460b      	mov	r3, r1
 8015722:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015724:	2300      	movs	r3, #0
 8015726:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015728:	2300      	movs	r3, #0
 801572a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015732:	7af9      	ldrb	r1, [r7, #11]
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	f7ec fbfa 	bl	8001f30 <HAL_PCD_EP_Receive>
 801573c:	4603      	mov	r3, r0
 801573e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015740:	7dfb      	ldrb	r3, [r7, #23]
 8015742:	4618      	mov	r0, r3
 8015744:	f000 f832 	bl	80157ac <USBD_Get_USB_Status>
 8015748:	4603      	mov	r3, r0
 801574a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801574c:	7dbb      	ldrb	r3, [r7, #22]
}
 801574e:	4618      	mov	r0, r3
 8015750:	3718      	adds	r7, #24
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}

08015756 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015756:	b580      	push	{r7, lr}
 8015758:	b082      	sub	sp, #8
 801575a:	af00      	add	r7, sp, #0
 801575c:	6078      	str	r0, [r7, #4]
 801575e:	460b      	mov	r3, r1
 8015760:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015768:	78fa      	ldrb	r2, [r7, #3]
 801576a:	4611      	mov	r1, r2
 801576c:	4618      	mov	r0, r3
 801576e:	f7ec fc1a 	bl	8001fa6 <HAL_PCD_EP_GetRxCount>
 8015772:	4603      	mov	r3, r0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3708      	adds	r7, #8
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015784:	4b03      	ldr	r3, [pc, #12]	@ (8015794 <USBD_static_malloc+0x18>)
}
 8015786:	4618      	mov	r0, r3
 8015788:	370c      	adds	r7, #12
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop
 8015794:	20005464 	.word	0x20005464

08015798 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015798:	b480      	push	{r7}
 801579a:	b083      	sub	sp, #12
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]

}
 80157a0:	bf00      	nop
 80157a2:	370c      	adds	r7, #12
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b085      	sub	sp, #20
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	4603      	mov	r3, r0
 80157b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157b6:	2300      	movs	r3, #0
 80157b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80157ba:	79fb      	ldrb	r3, [r7, #7]
 80157bc:	2b03      	cmp	r3, #3
 80157be:	d817      	bhi.n	80157f0 <USBD_Get_USB_Status+0x44>
 80157c0:	a201      	add	r2, pc, #4	@ (adr r2, 80157c8 <USBD_Get_USB_Status+0x1c>)
 80157c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157c6:	bf00      	nop
 80157c8:	080157d9 	.word	0x080157d9
 80157cc:	080157df 	.word	0x080157df
 80157d0:	080157e5 	.word	0x080157e5
 80157d4:	080157eb 	.word	0x080157eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80157d8:	2300      	movs	r3, #0
 80157da:	73fb      	strb	r3, [r7, #15]
    break;
 80157dc:	e00b      	b.n	80157f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80157de:	2303      	movs	r3, #3
 80157e0:	73fb      	strb	r3, [r7, #15]
    break;
 80157e2:	e008      	b.n	80157f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80157e4:	2301      	movs	r3, #1
 80157e6:	73fb      	strb	r3, [r7, #15]
    break;
 80157e8:	e005      	b.n	80157f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80157ea:	2303      	movs	r3, #3
 80157ec:	73fb      	strb	r3, [r7, #15]
    break;
 80157ee:	e002      	b.n	80157f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80157f0:	2303      	movs	r3, #3
 80157f2:	73fb      	strb	r3, [r7, #15]
    break;
 80157f4:	bf00      	nop
  }
  return usb_status;
 80157f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3714      	adds	r7, #20
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <malloc>:
 8015804:	4b02      	ldr	r3, [pc, #8]	@ (8015810 <malloc+0xc>)
 8015806:	4601      	mov	r1, r0
 8015808:	6818      	ldr	r0, [r3, #0]
 801580a:	f000 b82d 	b.w	8015868 <_malloc_r>
 801580e:	bf00      	nop
 8015810:	20000134 	.word	0x20000134

08015814 <free>:
 8015814:	4b02      	ldr	r3, [pc, #8]	@ (8015820 <free+0xc>)
 8015816:	4601      	mov	r1, r0
 8015818:	6818      	ldr	r0, [r3, #0]
 801581a:	f000 bae7 	b.w	8015dec <_free_r>
 801581e:	bf00      	nop
 8015820:	20000134 	.word	0x20000134

08015824 <sbrk_aligned>:
 8015824:	b570      	push	{r4, r5, r6, lr}
 8015826:	4e0f      	ldr	r6, [pc, #60]	@ (8015864 <sbrk_aligned+0x40>)
 8015828:	460c      	mov	r4, r1
 801582a:	6831      	ldr	r1, [r6, #0]
 801582c:	4605      	mov	r5, r0
 801582e:	b911      	cbnz	r1, 8015836 <sbrk_aligned+0x12>
 8015830:	f000 fa66 	bl	8015d00 <_sbrk_r>
 8015834:	6030      	str	r0, [r6, #0]
 8015836:	4621      	mov	r1, r4
 8015838:	4628      	mov	r0, r5
 801583a:	f000 fa61 	bl	8015d00 <_sbrk_r>
 801583e:	1c43      	adds	r3, r0, #1
 8015840:	d103      	bne.n	801584a <sbrk_aligned+0x26>
 8015842:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015846:	4620      	mov	r0, r4
 8015848:	bd70      	pop	{r4, r5, r6, pc}
 801584a:	1cc4      	adds	r4, r0, #3
 801584c:	f024 0403 	bic.w	r4, r4, #3
 8015850:	42a0      	cmp	r0, r4
 8015852:	d0f8      	beq.n	8015846 <sbrk_aligned+0x22>
 8015854:	1a21      	subs	r1, r4, r0
 8015856:	4628      	mov	r0, r5
 8015858:	f000 fa52 	bl	8015d00 <_sbrk_r>
 801585c:	3001      	adds	r0, #1
 801585e:	d1f2      	bne.n	8015846 <sbrk_aligned+0x22>
 8015860:	e7ef      	b.n	8015842 <sbrk_aligned+0x1e>
 8015862:	bf00      	nop
 8015864:	20005684 	.word	0x20005684

08015868 <_malloc_r>:
 8015868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801586c:	1ccd      	adds	r5, r1, #3
 801586e:	f025 0503 	bic.w	r5, r5, #3
 8015872:	3508      	adds	r5, #8
 8015874:	2d0c      	cmp	r5, #12
 8015876:	bf38      	it	cc
 8015878:	250c      	movcc	r5, #12
 801587a:	2d00      	cmp	r5, #0
 801587c:	4606      	mov	r6, r0
 801587e:	db01      	blt.n	8015884 <_malloc_r+0x1c>
 8015880:	42a9      	cmp	r1, r5
 8015882:	d904      	bls.n	801588e <_malloc_r+0x26>
 8015884:	230c      	movs	r3, #12
 8015886:	6033      	str	r3, [r6, #0]
 8015888:	2000      	movs	r0, #0
 801588a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801588e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015964 <_malloc_r+0xfc>
 8015892:	f000 f869 	bl	8015968 <__malloc_lock>
 8015896:	f8d8 3000 	ldr.w	r3, [r8]
 801589a:	461c      	mov	r4, r3
 801589c:	bb44      	cbnz	r4, 80158f0 <_malloc_r+0x88>
 801589e:	4629      	mov	r1, r5
 80158a0:	4630      	mov	r0, r6
 80158a2:	f7ff ffbf 	bl	8015824 <sbrk_aligned>
 80158a6:	1c43      	adds	r3, r0, #1
 80158a8:	4604      	mov	r4, r0
 80158aa:	d158      	bne.n	801595e <_malloc_r+0xf6>
 80158ac:	f8d8 4000 	ldr.w	r4, [r8]
 80158b0:	4627      	mov	r7, r4
 80158b2:	2f00      	cmp	r7, #0
 80158b4:	d143      	bne.n	801593e <_malloc_r+0xd6>
 80158b6:	2c00      	cmp	r4, #0
 80158b8:	d04b      	beq.n	8015952 <_malloc_r+0xea>
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	4639      	mov	r1, r7
 80158be:	4630      	mov	r0, r6
 80158c0:	eb04 0903 	add.w	r9, r4, r3
 80158c4:	f000 fa1c 	bl	8015d00 <_sbrk_r>
 80158c8:	4581      	cmp	r9, r0
 80158ca:	d142      	bne.n	8015952 <_malloc_r+0xea>
 80158cc:	6821      	ldr	r1, [r4, #0]
 80158ce:	1a6d      	subs	r5, r5, r1
 80158d0:	4629      	mov	r1, r5
 80158d2:	4630      	mov	r0, r6
 80158d4:	f7ff ffa6 	bl	8015824 <sbrk_aligned>
 80158d8:	3001      	adds	r0, #1
 80158da:	d03a      	beq.n	8015952 <_malloc_r+0xea>
 80158dc:	6823      	ldr	r3, [r4, #0]
 80158de:	442b      	add	r3, r5
 80158e0:	6023      	str	r3, [r4, #0]
 80158e2:	f8d8 3000 	ldr.w	r3, [r8]
 80158e6:	685a      	ldr	r2, [r3, #4]
 80158e8:	bb62      	cbnz	r2, 8015944 <_malloc_r+0xdc>
 80158ea:	f8c8 7000 	str.w	r7, [r8]
 80158ee:	e00f      	b.n	8015910 <_malloc_r+0xa8>
 80158f0:	6822      	ldr	r2, [r4, #0]
 80158f2:	1b52      	subs	r2, r2, r5
 80158f4:	d420      	bmi.n	8015938 <_malloc_r+0xd0>
 80158f6:	2a0b      	cmp	r2, #11
 80158f8:	d917      	bls.n	801592a <_malloc_r+0xc2>
 80158fa:	1961      	adds	r1, r4, r5
 80158fc:	42a3      	cmp	r3, r4
 80158fe:	6025      	str	r5, [r4, #0]
 8015900:	bf18      	it	ne
 8015902:	6059      	strne	r1, [r3, #4]
 8015904:	6863      	ldr	r3, [r4, #4]
 8015906:	bf08      	it	eq
 8015908:	f8c8 1000 	streq.w	r1, [r8]
 801590c:	5162      	str	r2, [r4, r5]
 801590e:	604b      	str	r3, [r1, #4]
 8015910:	4630      	mov	r0, r6
 8015912:	f000 f82f 	bl	8015974 <__malloc_unlock>
 8015916:	f104 000b 	add.w	r0, r4, #11
 801591a:	1d23      	adds	r3, r4, #4
 801591c:	f020 0007 	bic.w	r0, r0, #7
 8015920:	1ac2      	subs	r2, r0, r3
 8015922:	bf1c      	itt	ne
 8015924:	1a1b      	subne	r3, r3, r0
 8015926:	50a3      	strne	r3, [r4, r2]
 8015928:	e7af      	b.n	801588a <_malloc_r+0x22>
 801592a:	6862      	ldr	r2, [r4, #4]
 801592c:	42a3      	cmp	r3, r4
 801592e:	bf0c      	ite	eq
 8015930:	f8c8 2000 	streq.w	r2, [r8]
 8015934:	605a      	strne	r2, [r3, #4]
 8015936:	e7eb      	b.n	8015910 <_malloc_r+0xa8>
 8015938:	4623      	mov	r3, r4
 801593a:	6864      	ldr	r4, [r4, #4]
 801593c:	e7ae      	b.n	801589c <_malloc_r+0x34>
 801593e:	463c      	mov	r4, r7
 8015940:	687f      	ldr	r7, [r7, #4]
 8015942:	e7b6      	b.n	80158b2 <_malloc_r+0x4a>
 8015944:	461a      	mov	r2, r3
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	42a3      	cmp	r3, r4
 801594a:	d1fb      	bne.n	8015944 <_malloc_r+0xdc>
 801594c:	2300      	movs	r3, #0
 801594e:	6053      	str	r3, [r2, #4]
 8015950:	e7de      	b.n	8015910 <_malloc_r+0xa8>
 8015952:	230c      	movs	r3, #12
 8015954:	6033      	str	r3, [r6, #0]
 8015956:	4630      	mov	r0, r6
 8015958:	f000 f80c 	bl	8015974 <__malloc_unlock>
 801595c:	e794      	b.n	8015888 <_malloc_r+0x20>
 801595e:	6005      	str	r5, [r0, #0]
 8015960:	e7d6      	b.n	8015910 <_malloc_r+0xa8>
 8015962:	bf00      	nop
 8015964:	20005688 	.word	0x20005688

08015968 <__malloc_lock>:
 8015968:	4801      	ldr	r0, [pc, #4]	@ (8015970 <__malloc_lock+0x8>)
 801596a:	f000 ba10 	b.w	8015d8e <__retarget_lock_acquire_recursive>
 801596e:	bf00      	nop
 8015970:	200057cc 	.word	0x200057cc

08015974 <__malloc_unlock>:
 8015974:	4801      	ldr	r0, [pc, #4]	@ (801597c <__malloc_unlock+0x8>)
 8015976:	f000 ba0b 	b.w	8015d90 <__retarget_lock_release_recursive>
 801597a:	bf00      	nop
 801597c:	200057cc 	.word	0x200057cc

08015980 <rand>:
 8015980:	4b16      	ldr	r3, [pc, #88]	@ (80159dc <rand+0x5c>)
 8015982:	b510      	push	{r4, lr}
 8015984:	681c      	ldr	r4, [r3, #0]
 8015986:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015988:	b9b3      	cbnz	r3, 80159b8 <rand+0x38>
 801598a:	2018      	movs	r0, #24
 801598c:	f7ff ff3a 	bl	8015804 <malloc>
 8015990:	4602      	mov	r2, r0
 8015992:	6320      	str	r0, [r4, #48]	@ 0x30
 8015994:	b920      	cbnz	r0, 80159a0 <rand+0x20>
 8015996:	4b12      	ldr	r3, [pc, #72]	@ (80159e0 <rand+0x60>)
 8015998:	4812      	ldr	r0, [pc, #72]	@ (80159e4 <rand+0x64>)
 801599a:	2152      	movs	r1, #82	@ 0x52
 801599c:	f000 fa08 	bl	8015db0 <__assert_func>
 80159a0:	4911      	ldr	r1, [pc, #68]	@ (80159e8 <rand+0x68>)
 80159a2:	4b12      	ldr	r3, [pc, #72]	@ (80159ec <rand+0x6c>)
 80159a4:	e9c0 1300 	strd	r1, r3, [r0]
 80159a8:	4b11      	ldr	r3, [pc, #68]	@ (80159f0 <rand+0x70>)
 80159aa:	6083      	str	r3, [r0, #8]
 80159ac:	230b      	movs	r3, #11
 80159ae:	8183      	strh	r3, [r0, #12]
 80159b0:	2100      	movs	r1, #0
 80159b2:	2001      	movs	r0, #1
 80159b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80159b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80159ba:	480e      	ldr	r0, [pc, #56]	@ (80159f4 <rand+0x74>)
 80159bc:	690b      	ldr	r3, [r1, #16]
 80159be:	694c      	ldr	r4, [r1, #20]
 80159c0:	4a0d      	ldr	r2, [pc, #52]	@ (80159f8 <rand+0x78>)
 80159c2:	4358      	muls	r0, r3
 80159c4:	fb02 0004 	mla	r0, r2, r4, r0
 80159c8:	fba3 3202 	umull	r3, r2, r3, r2
 80159cc:	3301      	adds	r3, #1
 80159ce:	eb40 0002 	adc.w	r0, r0, r2
 80159d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80159d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80159da:	bd10      	pop	{r4, pc}
 80159dc:	20000134 	.word	0x20000134
 80159e0:	080199aa 	.word	0x080199aa
 80159e4:	080199c1 	.word	0x080199c1
 80159e8:	abcd330e 	.word	0xabcd330e
 80159ec:	e66d1234 	.word	0xe66d1234
 80159f0:	0005deec 	.word	0x0005deec
 80159f4:	5851f42d 	.word	0x5851f42d
 80159f8:	4c957f2d 	.word	0x4c957f2d

080159fc <std>:
 80159fc:	2300      	movs	r3, #0
 80159fe:	b510      	push	{r4, lr}
 8015a00:	4604      	mov	r4, r0
 8015a02:	e9c0 3300 	strd	r3, r3, [r0]
 8015a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a0a:	6083      	str	r3, [r0, #8]
 8015a0c:	8181      	strh	r1, [r0, #12]
 8015a0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8015a10:	81c2      	strh	r2, [r0, #14]
 8015a12:	6183      	str	r3, [r0, #24]
 8015a14:	4619      	mov	r1, r3
 8015a16:	2208      	movs	r2, #8
 8015a18:	305c      	adds	r0, #92	@ 0x5c
 8015a1a:	f000 f916 	bl	8015c4a <memset>
 8015a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a54 <std+0x58>)
 8015a20:	6263      	str	r3, [r4, #36]	@ 0x24
 8015a22:	4b0d      	ldr	r3, [pc, #52]	@ (8015a58 <std+0x5c>)
 8015a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015a26:	4b0d      	ldr	r3, [pc, #52]	@ (8015a5c <std+0x60>)
 8015a28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015a60 <std+0x64>)
 8015a2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a64 <std+0x68>)
 8015a30:	6224      	str	r4, [r4, #32]
 8015a32:	429c      	cmp	r4, r3
 8015a34:	d006      	beq.n	8015a44 <std+0x48>
 8015a36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015a3a:	4294      	cmp	r4, r2
 8015a3c:	d002      	beq.n	8015a44 <std+0x48>
 8015a3e:	33d0      	adds	r3, #208	@ 0xd0
 8015a40:	429c      	cmp	r4, r3
 8015a42:	d105      	bne.n	8015a50 <std+0x54>
 8015a44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a4c:	f000 b99e 	b.w	8015d8c <__retarget_lock_init_recursive>
 8015a50:	bd10      	pop	{r4, pc}
 8015a52:	bf00      	nop
 8015a54:	08015ba5 	.word	0x08015ba5
 8015a58:	08015bc7 	.word	0x08015bc7
 8015a5c:	08015bff 	.word	0x08015bff
 8015a60:	08015c23 	.word	0x08015c23
 8015a64:	2000568c 	.word	0x2000568c

08015a68 <stdio_exit_handler>:
 8015a68:	4a02      	ldr	r2, [pc, #8]	@ (8015a74 <stdio_exit_handler+0xc>)
 8015a6a:	4903      	ldr	r1, [pc, #12]	@ (8015a78 <stdio_exit_handler+0x10>)
 8015a6c:	4803      	ldr	r0, [pc, #12]	@ (8015a7c <stdio_exit_handler+0x14>)
 8015a6e:	f000 b869 	b.w	8015b44 <_fwalk_sglue>
 8015a72:	bf00      	nop
 8015a74:	20000128 	.word	0x20000128
 8015a78:	08016525 	.word	0x08016525
 8015a7c:	20000138 	.word	0x20000138

08015a80 <cleanup_stdio>:
 8015a80:	6841      	ldr	r1, [r0, #4]
 8015a82:	4b0c      	ldr	r3, [pc, #48]	@ (8015ab4 <cleanup_stdio+0x34>)
 8015a84:	4299      	cmp	r1, r3
 8015a86:	b510      	push	{r4, lr}
 8015a88:	4604      	mov	r4, r0
 8015a8a:	d001      	beq.n	8015a90 <cleanup_stdio+0x10>
 8015a8c:	f000 fd4a 	bl	8016524 <_fflush_r>
 8015a90:	68a1      	ldr	r1, [r4, #8]
 8015a92:	4b09      	ldr	r3, [pc, #36]	@ (8015ab8 <cleanup_stdio+0x38>)
 8015a94:	4299      	cmp	r1, r3
 8015a96:	d002      	beq.n	8015a9e <cleanup_stdio+0x1e>
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f000 fd43 	bl	8016524 <_fflush_r>
 8015a9e:	68e1      	ldr	r1, [r4, #12]
 8015aa0:	4b06      	ldr	r3, [pc, #24]	@ (8015abc <cleanup_stdio+0x3c>)
 8015aa2:	4299      	cmp	r1, r3
 8015aa4:	d004      	beq.n	8015ab0 <cleanup_stdio+0x30>
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aac:	f000 bd3a 	b.w	8016524 <_fflush_r>
 8015ab0:	bd10      	pop	{r4, pc}
 8015ab2:	bf00      	nop
 8015ab4:	2000568c 	.word	0x2000568c
 8015ab8:	200056f4 	.word	0x200056f4
 8015abc:	2000575c 	.word	0x2000575c

08015ac0 <global_stdio_init.part.0>:
 8015ac0:	b510      	push	{r4, lr}
 8015ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8015af0 <global_stdio_init.part.0+0x30>)
 8015ac4:	4c0b      	ldr	r4, [pc, #44]	@ (8015af4 <global_stdio_init.part.0+0x34>)
 8015ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8015af8 <global_stdio_init.part.0+0x38>)
 8015ac8:	601a      	str	r2, [r3, #0]
 8015aca:	4620      	mov	r0, r4
 8015acc:	2200      	movs	r2, #0
 8015ace:	2104      	movs	r1, #4
 8015ad0:	f7ff ff94 	bl	80159fc <std>
 8015ad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015ad8:	2201      	movs	r2, #1
 8015ada:	2109      	movs	r1, #9
 8015adc:	f7ff ff8e 	bl	80159fc <std>
 8015ae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015ae4:	2202      	movs	r2, #2
 8015ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aea:	2112      	movs	r1, #18
 8015aec:	f7ff bf86 	b.w	80159fc <std>
 8015af0:	200057c4 	.word	0x200057c4
 8015af4:	2000568c 	.word	0x2000568c
 8015af8:	08015a69 	.word	0x08015a69

08015afc <__sfp_lock_acquire>:
 8015afc:	4801      	ldr	r0, [pc, #4]	@ (8015b04 <__sfp_lock_acquire+0x8>)
 8015afe:	f000 b946 	b.w	8015d8e <__retarget_lock_acquire_recursive>
 8015b02:	bf00      	nop
 8015b04:	200057cd 	.word	0x200057cd

08015b08 <__sfp_lock_release>:
 8015b08:	4801      	ldr	r0, [pc, #4]	@ (8015b10 <__sfp_lock_release+0x8>)
 8015b0a:	f000 b941 	b.w	8015d90 <__retarget_lock_release_recursive>
 8015b0e:	bf00      	nop
 8015b10:	200057cd 	.word	0x200057cd

08015b14 <__sinit>:
 8015b14:	b510      	push	{r4, lr}
 8015b16:	4604      	mov	r4, r0
 8015b18:	f7ff fff0 	bl	8015afc <__sfp_lock_acquire>
 8015b1c:	6a23      	ldr	r3, [r4, #32]
 8015b1e:	b11b      	cbz	r3, 8015b28 <__sinit+0x14>
 8015b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b24:	f7ff bff0 	b.w	8015b08 <__sfp_lock_release>
 8015b28:	4b04      	ldr	r3, [pc, #16]	@ (8015b3c <__sinit+0x28>)
 8015b2a:	6223      	str	r3, [r4, #32]
 8015b2c:	4b04      	ldr	r3, [pc, #16]	@ (8015b40 <__sinit+0x2c>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d1f5      	bne.n	8015b20 <__sinit+0xc>
 8015b34:	f7ff ffc4 	bl	8015ac0 <global_stdio_init.part.0>
 8015b38:	e7f2      	b.n	8015b20 <__sinit+0xc>
 8015b3a:	bf00      	nop
 8015b3c:	08015a81 	.word	0x08015a81
 8015b40:	200057c4 	.word	0x200057c4

08015b44 <_fwalk_sglue>:
 8015b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b48:	4607      	mov	r7, r0
 8015b4a:	4688      	mov	r8, r1
 8015b4c:	4614      	mov	r4, r2
 8015b4e:	2600      	movs	r6, #0
 8015b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b54:	f1b9 0901 	subs.w	r9, r9, #1
 8015b58:	d505      	bpl.n	8015b66 <_fwalk_sglue+0x22>
 8015b5a:	6824      	ldr	r4, [r4, #0]
 8015b5c:	2c00      	cmp	r4, #0
 8015b5e:	d1f7      	bne.n	8015b50 <_fwalk_sglue+0xc>
 8015b60:	4630      	mov	r0, r6
 8015b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b66:	89ab      	ldrh	r3, [r5, #12]
 8015b68:	2b01      	cmp	r3, #1
 8015b6a:	d907      	bls.n	8015b7c <_fwalk_sglue+0x38>
 8015b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b70:	3301      	adds	r3, #1
 8015b72:	d003      	beq.n	8015b7c <_fwalk_sglue+0x38>
 8015b74:	4629      	mov	r1, r5
 8015b76:	4638      	mov	r0, r7
 8015b78:	47c0      	blx	r8
 8015b7a:	4306      	orrs	r6, r0
 8015b7c:	3568      	adds	r5, #104	@ 0x68
 8015b7e:	e7e9      	b.n	8015b54 <_fwalk_sglue+0x10>

08015b80 <iprintf>:
 8015b80:	b40f      	push	{r0, r1, r2, r3}
 8015b82:	b507      	push	{r0, r1, r2, lr}
 8015b84:	4906      	ldr	r1, [pc, #24]	@ (8015ba0 <iprintf+0x20>)
 8015b86:	ab04      	add	r3, sp, #16
 8015b88:	6808      	ldr	r0, [r1, #0]
 8015b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b8e:	6881      	ldr	r1, [r0, #8]
 8015b90:	9301      	str	r3, [sp, #4]
 8015b92:	f000 f99f 	bl	8015ed4 <_vfiprintf_r>
 8015b96:	b003      	add	sp, #12
 8015b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b9c:	b004      	add	sp, #16
 8015b9e:	4770      	bx	lr
 8015ba0:	20000134 	.word	0x20000134

08015ba4 <__sread>:
 8015ba4:	b510      	push	{r4, lr}
 8015ba6:	460c      	mov	r4, r1
 8015ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bac:	f000 f896 	bl	8015cdc <_read_r>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	bfab      	itete	ge
 8015bb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8015bb8:	181b      	addge	r3, r3, r0
 8015bba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015bbe:	bfac      	ite	ge
 8015bc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015bc2:	81a3      	strhlt	r3, [r4, #12]
 8015bc4:	bd10      	pop	{r4, pc}

08015bc6 <__swrite>:
 8015bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bca:	461f      	mov	r7, r3
 8015bcc:	898b      	ldrh	r3, [r1, #12]
 8015bce:	05db      	lsls	r3, r3, #23
 8015bd0:	4605      	mov	r5, r0
 8015bd2:	460c      	mov	r4, r1
 8015bd4:	4616      	mov	r6, r2
 8015bd6:	d505      	bpl.n	8015be4 <__swrite+0x1e>
 8015bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bdc:	2302      	movs	r3, #2
 8015bde:	2200      	movs	r2, #0
 8015be0:	f000 f86a 	bl	8015cb8 <_lseek_r>
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015bee:	81a3      	strh	r3, [r4, #12]
 8015bf0:	4632      	mov	r2, r6
 8015bf2:	463b      	mov	r3, r7
 8015bf4:	4628      	mov	r0, r5
 8015bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bfa:	f000 b891 	b.w	8015d20 <_write_r>

08015bfe <__sseek>:
 8015bfe:	b510      	push	{r4, lr}
 8015c00:	460c      	mov	r4, r1
 8015c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c06:	f000 f857 	bl	8015cb8 <_lseek_r>
 8015c0a:	1c43      	adds	r3, r0, #1
 8015c0c:	89a3      	ldrh	r3, [r4, #12]
 8015c0e:	bf15      	itete	ne
 8015c10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015c12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015c16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015c1a:	81a3      	strheq	r3, [r4, #12]
 8015c1c:	bf18      	it	ne
 8015c1e:	81a3      	strhne	r3, [r4, #12]
 8015c20:	bd10      	pop	{r4, pc}

08015c22 <__sclose>:
 8015c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c26:	f000 b837 	b.w	8015c98 <_close_r>

08015c2a <memcmp>:
 8015c2a:	b510      	push	{r4, lr}
 8015c2c:	3901      	subs	r1, #1
 8015c2e:	4402      	add	r2, r0
 8015c30:	4290      	cmp	r0, r2
 8015c32:	d101      	bne.n	8015c38 <memcmp+0xe>
 8015c34:	2000      	movs	r0, #0
 8015c36:	e005      	b.n	8015c44 <memcmp+0x1a>
 8015c38:	7803      	ldrb	r3, [r0, #0]
 8015c3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015c3e:	42a3      	cmp	r3, r4
 8015c40:	d001      	beq.n	8015c46 <memcmp+0x1c>
 8015c42:	1b18      	subs	r0, r3, r4
 8015c44:	bd10      	pop	{r4, pc}
 8015c46:	3001      	adds	r0, #1
 8015c48:	e7f2      	b.n	8015c30 <memcmp+0x6>

08015c4a <memset>:
 8015c4a:	4402      	add	r2, r0
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d100      	bne.n	8015c54 <memset+0xa>
 8015c52:	4770      	bx	lr
 8015c54:	f803 1b01 	strb.w	r1, [r3], #1
 8015c58:	e7f9      	b.n	8015c4e <memset+0x4>

08015c5a <strchr>:
 8015c5a:	b2c9      	uxtb	r1, r1
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c64:	b112      	cbz	r2, 8015c6c <strchr+0x12>
 8015c66:	428a      	cmp	r2, r1
 8015c68:	d1f9      	bne.n	8015c5e <strchr+0x4>
 8015c6a:	4770      	bx	lr
 8015c6c:	2900      	cmp	r1, #0
 8015c6e:	bf18      	it	ne
 8015c70:	2000      	movne	r0, #0
 8015c72:	4770      	bx	lr

08015c74 <strncmp>:
 8015c74:	b510      	push	{r4, lr}
 8015c76:	b16a      	cbz	r2, 8015c94 <strncmp+0x20>
 8015c78:	3901      	subs	r1, #1
 8015c7a:	1884      	adds	r4, r0, r2
 8015c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d103      	bne.n	8015c90 <strncmp+0x1c>
 8015c88:	42a0      	cmp	r0, r4
 8015c8a:	d001      	beq.n	8015c90 <strncmp+0x1c>
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	d1f5      	bne.n	8015c7c <strncmp+0x8>
 8015c90:	1ad0      	subs	r0, r2, r3
 8015c92:	bd10      	pop	{r4, pc}
 8015c94:	4610      	mov	r0, r2
 8015c96:	e7fc      	b.n	8015c92 <strncmp+0x1e>

08015c98 <_close_r>:
 8015c98:	b538      	push	{r3, r4, r5, lr}
 8015c9a:	4d06      	ldr	r5, [pc, #24]	@ (8015cb4 <_close_r+0x1c>)
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	4608      	mov	r0, r1
 8015ca2:	602b      	str	r3, [r5, #0]
 8015ca4:	f7ea fe68 	bl	8000978 <_close>
 8015ca8:	1c43      	adds	r3, r0, #1
 8015caa:	d102      	bne.n	8015cb2 <_close_r+0x1a>
 8015cac:	682b      	ldr	r3, [r5, #0]
 8015cae:	b103      	cbz	r3, 8015cb2 <_close_r+0x1a>
 8015cb0:	6023      	str	r3, [r4, #0]
 8015cb2:	bd38      	pop	{r3, r4, r5, pc}
 8015cb4:	200057c8 	.word	0x200057c8

08015cb8 <_lseek_r>:
 8015cb8:	b538      	push	{r3, r4, r5, lr}
 8015cba:	4d07      	ldr	r5, [pc, #28]	@ (8015cd8 <_lseek_r+0x20>)
 8015cbc:	4604      	mov	r4, r0
 8015cbe:	4608      	mov	r0, r1
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	602a      	str	r2, [r5, #0]
 8015cc6:	461a      	mov	r2, r3
 8015cc8:	f7ea fe7d 	bl	80009c6 <_lseek>
 8015ccc:	1c43      	adds	r3, r0, #1
 8015cce:	d102      	bne.n	8015cd6 <_lseek_r+0x1e>
 8015cd0:	682b      	ldr	r3, [r5, #0]
 8015cd2:	b103      	cbz	r3, 8015cd6 <_lseek_r+0x1e>
 8015cd4:	6023      	str	r3, [r4, #0]
 8015cd6:	bd38      	pop	{r3, r4, r5, pc}
 8015cd8:	200057c8 	.word	0x200057c8

08015cdc <_read_r>:
 8015cdc:	b538      	push	{r3, r4, r5, lr}
 8015cde:	4d07      	ldr	r5, [pc, #28]	@ (8015cfc <_read_r+0x20>)
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	4608      	mov	r0, r1
 8015ce4:	4611      	mov	r1, r2
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	602a      	str	r2, [r5, #0]
 8015cea:	461a      	mov	r2, r3
 8015cec:	f7ea fe0b 	bl	8000906 <_read>
 8015cf0:	1c43      	adds	r3, r0, #1
 8015cf2:	d102      	bne.n	8015cfa <_read_r+0x1e>
 8015cf4:	682b      	ldr	r3, [r5, #0]
 8015cf6:	b103      	cbz	r3, 8015cfa <_read_r+0x1e>
 8015cf8:	6023      	str	r3, [r4, #0]
 8015cfa:	bd38      	pop	{r3, r4, r5, pc}
 8015cfc:	200057c8 	.word	0x200057c8

08015d00 <_sbrk_r>:
 8015d00:	b538      	push	{r3, r4, r5, lr}
 8015d02:	4d06      	ldr	r5, [pc, #24]	@ (8015d1c <_sbrk_r+0x1c>)
 8015d04:	2300      	movs	r3, #0
 8015d06:	4604      	mov	r4, r0
 8015d08:	4608      	mov	r0, r1
 8015d0a:	602b      	str	r3, [r5, #0]
 8015d0c:	f7ea fe68 	bl	80009e0 <_sbrk>
 8015d10:	1c43      	adds	r3, r0, #1
 8015d12:	d102      	bne.n	8015d1a <_sbrk_r+0x1a>
 8015d14:	682b      	ldr	r3, [r5, #0]
 8015d16:	b103      	cbz	r3, 8015d1a <_sbrk_r+0x1a>
 8015d18:	6023      	str	r3, [r4, #0]
 8015d1a:	bd38      	pop	{r3, r4, r5, pc}
 8015d1c:	200057c8 	.word	0x200057c8

08015d20 <_write_r>:
 8015d20:	b538      	push	{r3, r4, r5, lr}
 8015d22:	4d07      	ldr	r5, [pc, #28]	@ (8015d40 <_write_r+0x20>)
 8015d24:	4604      	mov	r4, r0
 8015d26:	4608      	mov	r0, r1
 8015d28:	4611      	mov	r1, r2
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	602a      	str	r2, [r5, #0]
 8015d2e:	461a      	mov	r2, r3
 8015d30:	f7ea fe06 	bl	8000940 <_write>
 8015d34:	1c43      	adds	r3, r0, #1
 8015d36:	d102      	bne.n	8015d3e <_write_r+0x1e>
 8015d38:	682b      	ldr	r3, [r5, #0]
 8015d3a:	b103      	cbz	r3, 8015d3e <_write_r+0x1e>
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	200057c8 	.word	0x200057c8

08015d44 <__libc_init_array>:
 8015d44:	b570      	push	{r4, r5, r6, lr}
 8015d46:	4d0d      	ldr	r5, [pc, #52]	@ (8015d7c <__libc_init_array+0x38>)
 8015d48:	4c0d      	ldr	r4, [pc, #52]	@ (8015d80 <__libc_init_array+0x3c>)
 8015d4a:	1b64      	subs	r4, r4, r5
 8015d4c:	10a4      	asrs	r4, r4, #2
 8015d4e:	2600      	movs	r6, #0
 8015d50:	42a6      	cmp	r6, r4
 8015d52:	d109      	bne.n	8015d68 <__libc_init_array+0x24>
 8015d54:	4d0b      	ldr	r5, [pc, #44]	@ (8015d84 <__libc_init_array+0x40>)
 8015d56:	4c0c      	ldr	r4, [pc, #48]	@ (8015d88 <__libc_init_array+0x44>)
 8015d58:	f000 fd82 	bl	8016860 <_init>
 8015d5c:	1b64      	subs	r4, r4, r5
 8015d5e:	10a4      	asrs	r4, r4, #2
 8015d60:	2600      	movs	r6, #0
 8015d62:	42a6      	cmp	r6, r4
 8015d64:	d105      	bne.n	8015d72 <__libc_init_array+0x2e>
 8015d66:	bd70      	pop	{r4, r5, r6, pc}
 8015d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d6c:	4798      	blx	r3
 8015d6e:	3601      	adds	r6, #1
 8015d70:	e7ee      	b.n	8015d50 <__libc_init_array+0xc>
 8015d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d76:	4798      	blx	r3
 8015d78:	3601      	adds	r6, #1
 8015d7a:	e7f2      	b.n	8015d62 <__libc_init_array+0x1e>
 8015d7c:	08019a90 	.word	0x08019a90
 8015d80:	08019a90 	.word	0x08019a90
 8015d84:	08019a90 	.word	0x08019a90
 8015d88:	08019a94 	.word	0x08019a94

08015d8c <__retarget_lock_init_recursive>:
 8015d8c:	4770      	bx	lr

08015d8e <__retarget_lock_acquire_recursive>:
 8015d8e:	4770      	bx	lr

08015d90 <__retarget_lock_release_recursive>:
 8015d90:	4770      	bx	lr

08015d92 <memcpy>:
 8015d92:	440a      	add	r2, r1
 8015d94:	4291      	cmp	r1, r2
 8015d96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015d9a:	d100      	bne.n	8015d9e <memcpy+0xc>
 8015d9c:	4770      	bx	lr
 8015d9e:	b510      	push	{r4, lr}
 8015da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015da8:	4291      	cmp	r1, r2
 8015daa:	d1f9      	bne.n	8015da0 <memcpy+0xe>
 8015dac:	bd10      	pop	{r4, pc}
	...

08015db0 <__assert_func>:
 8015db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015db2:	4614      	mov	r4, r2
 8015db4:	461a      	mov	r2, r3
 8015db6:	4b09      	ldr	r3, [pc, #36]	@ (8015ddc <__assert_func+0x2c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	4605      	mov	r5, r0
 8015dbc:	68d8      	ldr	r0, [r3, #12]
 8015dbe:	b14c      	cbz	r4, 8015dd4 <__assert_func+0x24>
 8015dc0:	4b07      	ldr	r3, [pc, #28]	@ (8015de0 <__assert_func+0x30>)
 8015dc2:	9100      	str	r1, [sp, #0]
 8015dc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015dc8:	4906      	ldr	r1, [pc, #24]	@ (8015de4 <__assert_func+0x34>)
 8015dca:	462b      	mov	r3, r5
 8015dcc:	f000 fbd2 	bl	8016574 <fiprintf>
 8015dd0:	f000 fc76 	bl	80166c0 <abort>
 8015dd4:	4b04      	ldr	r3, [pc, #16]	@ (8015de8 <__assert_func+0x38>)
 8015dd6:	461c      	mov	r4, r3
 8015dd8:	e7f3      	b.n	8015dc2 <__assert_func+0x12>
 8015dda:	bf00      	nop
 8015ddc:	20000134 	.word	0x20000134
 8015de0:	08019a19 	.word	0x08019a19
 8015de4:	08019a26 	.word	0x08019a26
 8015de8:	08019a54 	.word	0x08019a54

08015dec <_free_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	4605      	mov	r5, r0
 8015df0:	2900      	cmp	r1, #0
 8015df2:	d041      	beq.n	8015e78 <_free_r+0x8c>
 8015df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015df8:	1f0c      	subs	r4, r1, #4
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	bfb8      	it	lt
 8015dfe:	18e4      	addlt	r4, r4, r3
 8015e00:	f7ff fdb2 	bl	8015968 <__malloc_lock>
 8015e04:	4a1d      	ldr	r2, [pc, #116]	@ (8015e7c <_free_r+0x90>)
 8015e06:	6813      	ldr	r3, [r2, #0]
 8015e08:	b933      	cbnz	r3, 8015e18 <_free_r+0x2c>
 8015e0a:	6063      	str	r3, [r4, #4]
 8015e0c:	6014      	str	r4, [r2, #0]
 8015e0e:	4628      	mov	r0, r5
 8015e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e14:	f7ff bdae 	b.w	8015974 <__malloc_unlock>
 8015e18:	42a3      	cmp	r3, r4
 8015e1a:	d908      	bls.n	8015e2e <_free_r+0x42>
 8015e1c:	6820      	ldr	r0, [r4, #0]
 8015e1e:	1821      	adds	r1, r4, r0
 8015e20:	428b      	cmp	r3, r1
 8015e22:	bf01      	itttt	eq
 8015e24:	6819      	ldreq	r1, [r3, #0]
 8015e26:	685b      	ldreq	r3, [r3, #4]
 8015e28:	1809      	addeq	r1, r1, r0
 8015e2a:	6021      	streq	r1, [r4, #0]
 8015e2c:	e7ed      	b.n	8015e0a <_free_r+0x1e>
 8015e2e:	461a      	mov	r2, r3
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	b10b      	cbz	r3, 8015e38 <_free_r+0x4c>
 8015e34:	42a3      	cmp	r3, r4
 8015e36:	d9fa      	bls.n	8015e2e <_free_r+0x42>
 8015e38:	6811      	ldr	r1, [r2, #0]
 8015e3a:	1850      	adds	r0, r2, r1
 8015e3c:	42a0      	cmp	r0, r4
 8015e3e:	d10b      	bne.n	8015e58 <_free_r+0x6c>
 8015e40:	6820      	ldr	r0, [r4, #0]
 8015e42:	4401      	add	r1, r0
 8015e44:	1850      	adds	r0, r2, r1
 8015e46:	4283      	cmp	r3, r0
 8015e48:	6011      	str	r1, [r2, #0]
 8015e4a:	d1e0      	bne.n	8015e0e <_free_r+0x22>
 8015e4c:	6818      	ldr	r0, [r3, #0]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	6053      	str	r3, [r2, #4]
 8015e52:	4408      	add	r0, r1
 8015e54:	6010      	str	r0, [r2, #0]
 8015e56:	e7da      	b.n	8015e0e <_free_r+0x22>
 8015e58:	d902      	bls.n	8015e60 <_free_r+0x74>
 8015e5a:	230c      	movs	r3, #12
 8015e5c:	602b      	str	r3, [r5, #0]
 8015e5e:	e7d6      	b.n	8015e0e <_free_r+0x22>
 8015e60:	6820      	ldr	r0, [r4, #0]
 8015e62:	1821      	adds	r1, r4, r0
 8015e64:	428b      	cmp	r3, r1
 8015e66:	bf04      	itt	eq
 8015e68:	6819      	ldreq	r1, [r3, #0]
 8015e6a:	685b      	ldreq	r3, [r3, #4]
 8015e6c:	6063      	str	r3, [r4, #4]
 8015e6e:	bf04      	itt	eq
 8015e70:	1809      	addeq	r1, r1, r0
 8015e72:	6021      	streq	r1, [r4, #0]
 8015e74:	6054      	str	r4, [r2, #4]
 8015e76:	e7ca      	b.n	8015e0e <_free_r+0x22>
 8015e78:	bd38      	pop	{r3, r4, r5, pc}
 8015e7a:	bf00      	nop
 8015e7c:	20005688 	.word	0x20005688

08015e80 <__sfputc_r>:
 8015e80:	6893      	ldr	r3, [r2, #8]
 8015e82:	3b01      	subs	r3, #1
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	b410      	push	{r4}
 8015e88:	6093      	str	r3, [r2, #8]
 8015e8a:	da08      	bge.n	8015e9e <__sfputc_r+0x1e>
 8015e8c:	6994      	ldr	r4, [r2, #24]
 8015e8e:	42a3      	cmp	r3, r4
 8015e90:	db01      	blt.n	8015e96 <__sfputc_r+0x16>
 8015e92:	290a      	cmp	r1, #10
 8015e94:	d103      	bne.n	8015e9e <__sfputc_r+0x1e>
 8015e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e9a:	f000 bb7d 	b.w	8016598 <__swbuf_r>
 8015e9e:	6813      	ldr	r3, [r2, #0]
 8015ea0:	1c58      	adds	r0, r3, #1
 8015ea2:	6010      	str	r0, [r2, #0]
 8015ea4:	7019      	strb	r1, [r3, #0]
 8015ea6:	4608      	mov	r0, r1
 8015ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eac:	4770      	bx	lr

08015eae <__sfputs_r>:
 8015eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eb0:	4606      	mov	r6, r0
 8015eb2:	460f      	mov	r7, r1
 8015eb4:	4614      	mov	r4, r2
 8015eb6:	18d5      	adds	r5, r2, r3
 8015eb8:	42ac      	cmp	r4, r5
 8015eba:	d101      	bne.n	8015ec0 <__sfputs_r+0x12>
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	e007      	b.n	8015ed0 <__sfputs_r+0x22>
 8015ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ec4:	463a      	mov	r2, r7
 8015ec6:	4630      	mov	r0, r6
 8015ec8:	f7ff ffda 	bl	8015e80 <__sfputc_r>
 8015ecc:	1c43      	adds	r3, r0, #1
 8015ece:	d1f3      	bne.n	8015eb8 <__sfputs_r+0xa>
 8015ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ed4 <_vfiprintf_r>:
 8015ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed8:	460d      	mov	r5, r1
 8015eda:	b09d      	sub	sp, #116	@ 0x74
 8015edc:	4614      	mov	r4, r2
 8015ede:	4698      	mov	r8, r3
 8015ee0:	4606      	mov	r6, r0
 8015ee2:	b118      	cbz	r0, 8015eec <_vfiprintf_r+0x18>
 8015ee4:	6a03      	ldr	r3, [r0, #32]
 8015ee6:	b90b      	cbnz	r3, 8015eec <_vfiprintf_r+0x18>
 8015ee8:	f7ff fe14 	bl	8015b14 <__sinit>
 8015eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015eee:	07d9      	lsls	r1, r3, #31
 8015ef0:	d405      	bmi.n	8015efe <_vfiprintf_r+0x2a>
 8015ef2:	89ab      	ldrh	r3, [r5, #12]
 8015ef4:	059a      	lsls	r2, r3, #22
 8015ef6:	d402      	bmi.n	8015efe <_vfiprintf_r+0x2a>
 8015ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015efa:	f7ff ff48 	bl	8015d8e <__retarget_lock_acquire_recursive>
 8015efe:	89ab      	ldrh	r3, [r5, #12]
 8015f00:	071b      	lsls	r3, r3, #28
 8015f02:	d501      	bpl.n	8015f08 <_vfiprintf_r+0x34>
 8015f04:	692b      	ldr	r3, [r5, #16]
 8015f06:	b99b      	cbnz	r3, 8015f30 <_vfiprintf_r+0x5c>
 8015f08:	4629      	mov	r1, r5
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f000 fb82 	bl	8016614 <__swsetup_r>
 8015f10:	b170      	cbz	r0, 8015f30 <_vfiprintf_r+0x5c>
 8015f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f14:	07dc      	lsls	r4, r3, #31
 8015f16:	d504      	bpl.n	8015f22 <_vfiprintf_r+0x4e>
 8015f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f1c:	b01d      	add	sp, #116	@ 0x74
 8015f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f22:	89ab      	ldrh	r3, [r5, #12]
 8015f24:	0598      	lsls	r0, r3, #22
 8015f26:	d4f7      	bmi.n	8015f18 <_vfiprintf_r+0x44>
 8015f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f2a:	f7ff ff31 	bl	8015d90 <__retarget_lock_release_recursive>
 8015f2e:	e7f3      	b.n	8015f18 <_vfiprintf_r+0x44>
 8015f30:	2300      	movs	r3, #0
 8015f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f34:	2320      	movs	r3, #32
 8015f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f3e:	2330      	movs	r3, #48	@ 0x30
 8015f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80160f0 <_vfiprintf_r+0x21c>
 8015f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f48:	f04f 0901 	mov.w	r9, #1
 8015f4c:	4623      	mov	r3, r4
 8015f4e:	469a      	mov	sl, r3
 8015f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f54:	b10a      	cbz	r2, 8015f5a <_vfiprintf_r+0x86>
 8015f56:	2a25      	cmp	r2, #37	@ 0x25
 8015f58:	d1f9      	bne.n	8015f4e <_vfiprintf_r+0x7a>
 8015f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8015f5e:	d00b      	beq.n	8015f78 <_vfiprintf_r+0xa4>
 8015f60:	465b      	mov	r3, fp
 8015f62:	4622      	mov	r2, r4
 8015f64:	4629      	mov	r1, r5
 8015f66:	4630      	mov	r0, r6
 8015f68:	f7ff ffa1 	bl	8015eae <__sfputs_r>
 8015f6c:	3001      	adds	r0, #1
 8015f6e:	f000 80a7 	beq.w	80160c0 <_vfiprintf_r+0x1ec>
 8015f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f74:	445a      	add	r2, fp
 8015f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f78:	f89a 3000 	ldrb.w	r3, [sl]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	f000 809f 	beq.w	80160c0 <_vfiprintf_r+0x1ec>
 8015f82:	2300      	movs	r3, #0
 8015f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f8c:	f10a 0a01 	add.w	sl, sl, #1
 8015f90:	9304      	str	r3, [sp, #16]
 8015f92:	9307      	str	r3, [sp, #28]
 8015f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f9a:	4654      	mov	r4, sl
 8015f9c:	2205      	movs	r2, #5
 8015f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fa2:	4853      	ldr	r0, [pc, #332]	@ (80160f0 <_vfiprintf_r+0x21c>)
 8015fa4:	f7ea f92c 	bl	8000200 <memchr>
 8015fa8:	9a04      	ldr	r2, [sp, #16]
 8015faa:	b9d8      	cbnz	r0, 8015fe4 <_vfiprintf_r+0x110>
 8015fac:	06d1      	lsls	r1, r2, #27
 8015fae:	bf44      	itt	mi
 8015fb0:	2320      	movmi	r3, #32
 8015fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fb6:	0713      	lsls	r3, r2, #28
 8015fb8:	bf44      	itt	mi
 8015fba:	232b      	movmi	r3, #43	@ 0x2b
 8015fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8015fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fc6:	d015      	beq.n	8015ff4 <_vfiprintf_r+0x120>
 8015fc8:	9a07      	ldr	r2, [sp, #28]
 8015fca:	4654      	mov	r4, sl
 8015fcc:	2000      	movs	r0, #0
 8015fce:	f04f 0c0a 	mov.w	ip, #10
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fd8:	3b30      	subs	r3, #48	@ 0x30
 8015fda:	2b09      	cmp	r3, #9
 8015fdc:	d94b      	bls.n	8016076 <_vfiprintf_r+0x1a2>
 8015fde:	b1b0      	cbz	r0, 801600e <_vfiprintf_r+0x13a>
 8015fe0:	9207      	str	r2, [sp, #28]
 8015fe2:	e014      	b.n	801600e <_vfiprintf_r+0x13a>
 8015fe4:	eba0 0308 	sub.w	r3, r0, r8
 8015fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8015fec:	4313      	orrs	r3, r2
 8015fee:	9304      	str	r3, [sp, #16]
 8015ff0:	46a2      	mov	sl, r4
 8015ff2:	e7d2      	b.n	8015f9a <_vfiprintf_r+0xc6>
 8015ff4:	9b03      	ldr	r3, [sp, #12]
 8015ff6:	1d19      	adds	r1, r3, #4
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	9103      	str	r1, [sp, #12]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	bfbb      	ittet	lt
 8016000:	425b      	neglt	r3, r3
 8016002:	f042 0202 	orrlt.w	r2, r2, #2
 8016006:	9307      	strge	r3, [sp, #28]
 8016008:	9307      	strlt	r3, [sp, #28]
 801600a:	bfb8      	it	lt
 801600c:	9204      	strlt	r2, [sp, #16]
 801600e:	7823      	ldrb	r3, [r4, #0]
 8016010:	2b2e      	cmp	r3, #46	@ 0x2e
 8016012:	d10a      	bne.n	801602a <_vfiprintf_r+0x156>
 8016014:	7863      	ldrb	r3, [r4, #1]
 8016016:	2b2a      	cmp	r3, #42	@ 0x2a
 8016018:	d132      	bne.n	8016080 <_vfiprintf_r+0x1ac>
 801601a:	9b03      	ldr	r3, [sp, #12]
 801601c:	1d1a      	adds	r2, r3, #4
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	9203      	str	r2, [sp, #12]
 8016022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016026:	3402      	adds	r4, #2
 8016028:	9305      	str	r3, [sp, #20]
 801602a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016100 <_vfiprintf_r+0x22c>
 801602e:	7821      	ldrb	r1, [r4, #0]
 8016030:	2203      	movs	r2, #3
 8016032:	4650      	mov	r0, sl
 8016034:	f7ea f8e4 	bl	8000200 <memchr>
 8016038:	b138      	cbz	r0, 801604a <_vfiprintf_r+0x176>
 801603a:	9b04      	ldr	r3, [sp, #16]
 801603c:	eba0 000a 	sub.w	r0, r0, sl
 8016040:	2240      	movs	r2, #64	@ 0x40
 8016042:	4082      	lsls	r2, r0
 8016044:	4313      	orrs	r3, r2
 8016046:	3401      	adds	r4, #1
 8016048:	9304      	str	r3, [sp, #16]
 801604a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801604e:	4829      	ldr	r0, [pc, #164]	@ (80160f4 <_vfiprintf_r+0x220>)
 8016050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016054:	2206      	movs	r2, #6
 8016056:	f7ea f8d3 	bl	8000200 <memchr>
 801605a:	2800      	cmp	r0, #0
 801605c:	d03f      	beq.n	80160de <_vfiprintf_r+0x20a>
 801605e:	4b26      	ldr	r3, [pc, #152]	@ (80160f8 <_vfiprintf_r+0x224>)
 8016060:	bb1b      	cbnz	r3, 80160aa <_vfiprintf_r+0x1d6>
 8016062:	9b03      	ldr	r3, [sp, #12]
 8016064:	3307      	adds	r3, #7
 8016066:	f023 0307 	bic.w	r3, r3, #7
 801606a:	3308      	adds	r3, #8
 801606c:	9303      	str	r3, [sp, #12]
 801606e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016070:	443b      	add	r3, r7
 8016072:	9309      	str	r3, [sp, #36]	@ 0x24
 8016074:	e76a      	b.n	8015f4c <_vfiprintf_r+0x78>
 8016076:	fb0c 3202 	mla	r2, ip, r2, r3
 801607a:	460c      	mov	r4, r1
 801607c:	2001      	movs	r0, #1
 801607e:	e7a8      	b.n	8015fd2 <_vfiprintf_r+0xfe>
 8016080:	2300      	movs	r3, #0
 8016082:	3401      	adds	r4, #1
 8016084:	9305      	str	r3, [sp, #20]
 8016086:	4619      	mov	r1, r3
 8016088:	f04f 0c0a 	mov.w	ip, #10
 801608c:	4620      	mov	r0, r4
 801608e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016092:	3a30      	subs	r2, #48	@ 0x30
 8016094:	2a09      	cmp	r2, #9
 8016096:	d903      	bls.n	80160a0 <_vfiprintf_r+0x1cc>
 8016098:	2b00      	cmp	r3, #0
 801609a:	d0c6      	beq.n	801602a <_vfiprintf_r+0x156>
 801609c:	9105      	str	r1, [sp, #20]
 801609e:	e7c4      	b.n	801602a <_vfiprintf_r+0x156>
 80160a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80160a4:	4604      	mov	r4, r0
 80160a6:	2301      	movs	r3, #1
 80160a8:	e7f0      	b.n	801608c <_vfiprintf_r+0x1b8>
 80160aa:	ab03      	add	r3, sp, #12
 80160ac:	9300      	str	r3, [sp, #0]
 80160ae:	462a      	mov	r2, r5
 80160b0:	4b12      	ldr	r3, [pc, #72]	@ (80160fc <_vfiprintf_r+0x228>)
 80160b2:	a904      	add	r1, sp, #16
 80160b4:	4630      	mov	r0, r6
 80160b6:	f3af 8000 	nop.w
 80160ba:	4607      	mov	r7, r0
 80160bc:	1c78      	adds	r0, r7, #1
 80160be:	d1d6      	bne.n	801606e <_vfiprintf_r+0x19a>
 80160c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80160c2:	07d9      	lsls	r1, r3, #31
 80160c4:	d405      	bmi.n	80160d2 <_vfiprintf_r+0x1fe>
 80160c6:	89ab      	ldrh	r3, [r5, #12]
 80160c8:	059a      	lsls	r2, r3, #22
 80160ca:	d402      	bmi.n	80160d2 <_vfiprintf_r+0x1fe>
 80160cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80160ce:	f7ff fe5f 	bl	8015d90 <__retarget_lock_release_recursive>
 80160d2:	89ab      	ldrh	r3, [r5, #12]
 80160d4:	065b      	lsls	r3, r3, #25
 80160d6:	f53f af1f 	bmi.w	8015f18 <_vfiprintf_r+0x44>
 80160da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160dc:	e71e      	b.n	8015f1c <_vfiprintf_r+0x48>
 80160de:	ab03      	add	r3, sp, #12
 80160e0:	9300      	str	r3, [sp, #0]
 80160e2:	462a      	mov	r2, r5
 80160e4:	4b05      	ldr	r3, [pc, #20]	@ (80160fc <_vfiprintf_r+0x228>)
 80160e6:	a904      	add	r1, sp, #16
 80160e8:	4630      	mov	r0, r6
 80160ea:	f000 f879 	bl	80161e0 <_printf_i>
 80160ee:	e7e4      	b.n	80160ba <_vfiprintf_r+0x1e6>
 80160f0:	08019a55 	.word	0x08019a55
 80160f4:	08019a5f 	.word	0x08019a5f
 80160f8:	00000000 	.word	0x00000000
 80160fc:	08015eaf 	.word	0x08015eaf
 8016100:	08019a5b 	.word	0x08019a5b

08016104 <_printf_common>:
 8016104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016108:	4616      	mov	r6, r2
 801610a:	4698      	mov	r8, r3
 801610c:	688a      	ldr	r2, [r1, #8]
 801610e:	690b      	ldr	r3, [r1, #16]
 8016110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016114:	4293      	cmp	r3, r2
 8016116:	bfb8      	it	lt
 8016118:	4613      	movlt	r3, r2
 801611a:	6033      	str	r3, [r6, #0]
 801611c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016120:	4607      	mov	r7, r0
 8016122:	460c      	mov	r4, r1
 8016124:	b10a      	cbz	r2, 801612a <_printf_common+0x26>
 8016126:	3301      	adds	r3, #1
 8016128:	6033      	str	r3, [r6, #0]
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	0699      	lsls	r1, r3, #26
 801612e:	bf42      	ittt	mi
 8016130:	6833      	ldrmi	r3, [r6, #0]
 8016132:	3302      	addmi	r3, #2
 8016134:	6033      	strmi	r3, [r6, #0]
 8016136:	6825      	ldr	r5, [r4, #0]
 8016138:	f015 0506 	ands.w	r5, r5, #6
 801613c:	d106      	bne.n	801614c <_printf_common+0x48>
 801613e:	f104 0a19 	add.w	sl, r4, #25
 8016142:	68e3      	ldr	r3, [r4, #12]
 8016144:	6832      	ldr	r2, [r6, #0]
 8016146:	1a9b      	subs	r3, r3, r2
 8016148:	42ab      	cmp	r3, r5
 801614a:	dc26      	bgt.n	801619a <_printf_common+0x96>
 801614c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016150:	6822      	ldr	r2, [r4, #0]
 8016152:	3b00      	subs	r3, #0
 8016154:	bf18      	it	ne
 8016156:	2301      	movne	r3, #1
 8016158:	0692      	lsls	r2, r2, #26
 801615a:	d42b      	bmi.n	80161b4 <_printf_common+0xb0>
 801615c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016160:	4641      	mov	r1, r8
 8016162:	4638      	mov	r0, r7
 8016164:	47c8      	blx	r9
 8016166:	3001      	adds	r0, #1
 8016168:	d01e      	beq.n	80161a8 <_printf_common+0xa4>
 801616a:	6823      	ldr	r3, [r4, #0]
 801616c:	6922      	ldr	r2, [r4, #16]
 801616e:	f003 0306 	and.w	r3, r3, #6
 8016172:	2b04      	cmp	r3, #4
 8016174:	bf02      	ittt	eq
 8016176:	68e5      	ldreq	r5, [r4, #12]
 8016178:	6833      	ldreq	r3, [r6, #0]
 801617a:	1aed      	subeq	r5, r5, r3
 801617c:	68a3      	ldr	r3, [r4, #8]
 801617e:	bf0c      	ite	eq
 8016180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016184:	2500      	movne	r5, #0
 8016186:	4293      	cmp	r3, r2
 8016188:	bfc4      	itt	gt
 801618a:	1a9b      	subgt	r3, r3, r2
 801618c:	18ed      	addgt	r5, r5, r3
 801618e:	2600      	movs	r6, #0
 8016190:	341a      	adds	r4, #26
 8016192:	42b5      	cmp	r5, r6
 8016194:	d11a      	bne.n	80161cc <_printf_common+0xc8>
 8016196:	2000      	movs	r0, #0
 8016198:	e008      	b.n	80161ac <_printf_common+0xa8>
 801619a:	2301      	movs	r3, #1
 801619c:	4652      	mov	r2, sl
 801619e:	4641      	mov	r1, r8
 80161a0:	4638      	mov	r0, r7
 80161a2:	47c8      	blx	r9
 80161a4:	3001      	adds	r0, #1
 80161a6:	d103      	bne.n	80161b0 <_printf_common+0xac>
 80161a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161b0:	3501      	adds	r5, #1
 80161b2:	e7c6      	b.n	8016142 <_printf_common+0x3e>
 80161b4:	18e1      	adds	r1, r4, r3
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	2030      	movs	r0, #48	@ 0x30
 80161ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80161be:	4422      	add	r2, r4
 80161c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80161c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80161c8:	3302      	adds	r3, #2
 80161ca:	e7c7      	b.n	801615c <_printf_common+0x58>
 80161cc:	2301      	movs	r3, #1
 80161ce:	4622      	mov	r2, r4
 80161d0:	4641      	mov	r1, r8
 80161d2:	4638      	mov	r0, r7
 80161d4:	47c8      	blx	r9
 80161d6:	3001      	adds	r0, #1
 80161d8:	d0e6      	beq.n	80161a8 <_printf_common+0xa4>
 80161da:	3601      	adds	r6, #1
 80161dc:	e7d9      	b.n	8016192 <_printf_common+0x8e>
	...

080161e0 <_printf_i>:
 80161e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161e4:	7e0f      	ldrb	r7, [r1, #24]
 80161e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80161e8:	2f78      	cmp	r7, #120	@ 0x78
 80161ea:	4691      	mov	r9, r2
 80161ec:	4680      	mov	r8, r0
 80161ee:	460c      	mov	r4, r1
 80161f0:	469a      	mov	sl, r3
 80161f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80161f6:	d807      	bhi.n	8016208 <_printf_i+0x28>
 80161f8:	2f62      	cmp	r7, #98	@ 0x62
 80161fa:	d80a      	bhi.n	8016212 <_printf_i+0x32>
 80161fc:	2f00      	cmp	r7, #0
 80161fe:	f000 80d1 	beq.w	80163a4 <_printf_i+0x1c4>
 8016202:	2f58      	cmp	r7, #88	@ 0x58
 8016204:	f000 80b8 	beq.w	8016378 <_printf_i+0x198>
 8016208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801620c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016210:	e03a      	b.n	8016288 <_printf_i+0xa8>
 8016212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016216:	2b15      	cmp	r3, #21
 8016218:	d8f6      	bhi.n	8016208 <_printf_i+0x28>
 801621a:	a101      	add	r1, pc, #4	@ (adr r1, 8016220 <_printf_i+0x40>)
 801621c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016220:	08016279 	.word	0x08016279
 8016224:	0801628d 	.word	0x0801628d
 8016228:	08016209 	.word	0x08016209
 801622c:	08016209 	.word	0x08016209
 8016230:	08016209 	.word	0x08016209
 8016234:	08016209 	.word	0x08016209
 8016238:	0801628d 	.word	0x0801628d
 801623c:	08016209 	.word	0x08016209
 8016240:	08016209 	.word	0x08016209
 8016244:	08016209 	.word	0x08016209
 8016248:	08016209 	.word	0x08016209
 801624c:	0801638b 	.word	0x0801638b
 8016250:	080162b7 	.word	0x080162b7
 8016254:	08016345 	.word	0x08016345
 8016258:	08016209 	.word	0x08016209
 801625c:	08016209 	.word	0x08016209
 8016260:	080163ad 	.word	0x080163ad
 8016264:	08016209 	.word	0x08016209
 8016268:	080162b7 	.word	0x080162b7
 801626c:	08016209 	.word	0x08016209
 8016270:	08016209 	.word	0x08016209
 8016274:	0801634d 	.word	0x0801634d
 8016278:	6833      	ldr	r3, [r6, #0]
 801627a:	1d1a      	adds	r2, r3, #4
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	6032      	str	r2, [r6, #0]
 8016280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016288:	2301      	movs	r3, #1
 801628a:	e09c      	b.n	80163c6 <_printf_i+0x1e6>
 801628c:	6833      	ldr	r3, [r6, #0]
 801628e:	6820      	ldr	r0, [r4, #0]
 8016290:	1d19      	adds	r1, r3, #4
 8016292:	6031      	str	r1, [r6, #0]
 8016294:	0606      	lsls	r6, r0, #24
 8016296:	d501      	bpl.n	801629c <_printf_i+0xbc>
 8016298:	681d      	ldr	r5, [r3, #0]
 801629a:	e003      	b.n	80162a4 <_printf_i+0xc4>
 801629c:	0645      	lsls	r5, r0, #25
 801629e:	d5fb      	bpl.n	8016298 <_printf_i+0xb8>
 80162a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80162a4:	2d00      	cmp	r5, #0
 80162a6:	da03      	bge.n	80162b0 <_printf_i+0xd0>
 80162a8:	232d      	movs	r3, #45	@ 0x2d
 80162aa:	426d      	negs	r5, r5
 80162ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162b0:	4858      	ldr	r0, [pc, #352]	@ (8016414 <_printf_i+0x234>)
 80162b2:	230a      	movs	r3, #10
 80162b4:	e011      	b.n	80162da <_printf_i+0xfa>
 80162b6:	6821      	ldr	r1, [r4, #0]
 80162b8:	6833      	ldr	r3, [r6, #0]
 80162ba:	0608      	lsls	r0, r1, #24
 80162bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80162c0:	d402      	bmi.n	80162c8 <_printf_i+0xe8>
 80162c2:	0649      	lsls	r1, r1, #25
 80162c4:	bf48      	it	mi
 80162c6:	b2ad      	uxthmi	r5, r5
 80162c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80162ca:	4852      	ldr	r0, [pc, #328]	@ (8016414 <_printf_i+0x234>)
 80162cc:	6033      	str	r3, [r6, #0]
 80162ce:	bf14      	ite	ne
 80162d0:	230a      	movne	r3, #10
 80162d2:	2308      	moveq	r3, #8
 80162d4:	2100      	movs	r1, #0
 80162d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80162da:	6866      	ldr	r6, [r4, #4]
 80162dc:	60a6      	str	r6, [r4, #8]
 80162de:	2e00      	cmp	r6, #0
 80162e0:	db05      	blt.n	80162ee <_printf_i+0x10e>
 80162e2:	6821      	ldr	r1, [r4, #0]
 80162e4:	432e      	orrs	r6, r5
 80162e6:	f021 0104 	bic.w	r1, r1, #4
 80162ea:	6021      	str	r1, [r4, #0]
 80162ec:	d04b      	beq.n	8016386 <_printf_i+0x1a6>
 80162ee:	4616      	mov	r6, r2
 80162f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80162f4:	fb03 5711 	mls	r7, r3, r1, r5
 80162f8:	5dc7      	ldrb	r7, [r0, r7]
 80162fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80162fe:	462f      	mov	r7, r5
 8016300:	42bb      	cmp	r3, r7
 8016302:	460d      	mov	r5, r1
 8016304:	d9f4      	bls.n	80162f0 <_printf_i+0x110>
 8016306:	2b08      	cmp	r3, #8
 8016308:	d10b      	bne.n	8016322 <_printf_i+0x142>
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	07df      	lsls	r7, r3, #31
 801630e:	d508      	bpl.n	8016322 <_printf_i+0x142>
 8016310:	6923      	ldr	r3, [r4, #16]
 8016312:	6861      	ldr	r1, [r4, #4]
 8016314:	4299      	cmp	r1, r3
 8016316:	bfde      	ittt	le
 8016318:	2330      	movle	r3, #48	@ 0x30
 801631a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801631e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016322:	1b92      	subs	r2, r2, r6
 8016324:	6122      	str	r2, [r4, #16]
 8016326:	f8cd a000 	str.w	sl, [sp]
 801632a:	464b      	mov	r3, r9
 801632c:	aa03      	add	r2, sp, #12
 801632e:	4621      	mov	r1, r4
 8016330:	4640      	mov	r0, r8
 8016332:	f7ff fee7 	bl	8016104 <_printf_common>
 8016336:	3001      	adds	r0, #1
 8016338:	d14a      	bne.n	80163d0 <_printf_i+0x1f0>
 801633a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801633e:	b004      	add	sp, #16
 8016340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016344:	6823      	ldr	r3, [r4, #0]
 8016346:	f043 0320 	orr.w	r3, r3, #32
 801634a:	6023      	str	r3, [r4, #0]
 801634c:	4832      	ldr	r0, [pc, #200]	@ (8016418 <_printf_i+0x238>)
 801634e:	2778      	movs	r7, #120	@ 0x78
 8016350:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016354:	6823      	ldr	r3, [r4, #0]
 8016356:	6831      	ldr	r1, [r6, #0]
 8016358:	061f      	lsls	r7, r3, #24
 801635a:	f851 5b04 	ldr.w	r5, [r1], #4
 801635e:	d402      	bmi.n	8016366 <_printf_i+0x186>
 8016360:	065f      	lsls	r7, r3, #25
 8016362:	bf48      	it	mi
 8016364:	b2ad      	uxthmi	r5, r5
 8016366:	6031      	str	r1, [r6, #0]
 8016368:	07d9      	lsls	r1, r3, #31
 801636a:	bf44      	itt	mi
 801636c:	f043 0320 	orrmi.w	r3, r3, #32
 8016370:	6023      	strmi	r3, [r4, #0]
 8016372:	b11d      	cbz	r5, 801637c <_printf_i+0x19c>
 8016374:	2310      	movs	r3, #16
 8016376:	e7ad      	b.n	80162d4 <_printf_i+0xf4>
 8016378:	4826      	ldr	r0, [pc, #152]	@ (8016414 <_printf_i+0x234>)
 801637a:	e7e9      	b.n	8016350 <_printf_i+0x170>
 801637c:	6823      	ldr	r3, [r4, #0]
 801637e:	f023 0320 	bic.w	r3, r3, #32
 8016382:	6023      	str	r3, [r4, #0]
 8016384:	e7f6      	b.n	8016374 <_printf_i+0x194>
 8016386:	4616      	mov	r6, r2
 8016388:	e7bd      	b.n	8016306 <_printf_i+0x126>
 801638a:	6833      	ldr	r3, [r6, #0]
 801638c:	6825      	ldr	r5, [r4, #0]
 801638e:	6961      	ldr	r1, [r4, #20]
 8016390:	1d18      	adds	r0, r3, #4
 8016392:	6030      	str	r0, [r6, #0]
 8016394:	062e      	lsls	r6, r5, #24
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	d501      	bpl.n	801639e <_printf_i+0x1be>
 801639a:	6019      	str	r1, [r3, #0]
 801639c:	e002      	b.n	80163a4 <_printf_i+0x1c4>
 801639e:	0668      	lsls	r0, r5, #25
 80163a0:	d5fb      	bpl.n	801639a <_printf_i+0x1ba>
 80163a2:	8019      	strh	r1, [r3, #0]
 80163a4:	2300      	movs	r3, #0
 80163a6:	6123      	str	r3, [r4, #16]
 80163a8:	4616      	mov	r6, r2
 80163aa:	e7bc      	b.n	8016326 <_printf_i+0x146>
 80163ac:	6833      	ldr	r3, [r6, #0]
 80163ae:	1d1a      	adds	r2, r3, #4
 80163b0:	6032      	str	r2, [r6, #0]
 80163b2:	681e      	ldr	r6, [r3, #0]
 80163b4:	6862      	ldr	r2, [r4, #4]
 80163b6:	2100      	movs	r1, #0
 80163b8:	4630      	mov	r0, r6
 80163ba:	f7e9 ff21 	bl	8000200 <memchr>
 80163be:	b108      	cbz	r0, 80163c4 <_printf_i+0x1e4>
 80163c0:	1b80      	subs	r0, r0, r6
 80163c2:	6060      	str	r0, [r4, #4]
 80163c4:	6863      	ldr	r3, [r4, #4]
 80163c6:	6123      	str	r3, [r4, #16]
 80163c8:	2300      	movs	r3, #0
 80163ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80163ce:	e7aa      	b.n	8016326 <_printf_i+0x146>
 80163d0:	6923      	ldr	r3, [r4, #16]
 80163d2:	4632      	mov	r2, r6
 80163d4:	4649      	mov	r1, r9
 80163d6:	4640      	mov	r0, r8
 80163d8:	47d0      	blx	sl
 80163da:	3001      	adds	r0, #1
 80163dc:	d0ad      	beq.n	801633a <_printf_i+0x15a>
 80163de:	6823      	ldr	r3, [r4, #0]
 80163e0:	079b      	lsls	r3, r3, #30
 80163e2:	d413      	bmi.n	801640c <_printf_i+0x22c>
 80163e4:	68e0      	ldr	r0, [r4, #12]
 80163e6:	9b03      	ldr	r3, [sp, #12]
 80163e8:	4298      	cmp	r0, r3
 80163ea:	bfb8      	it	lt
 80163ec:	4618      	movlt	r0, r3
 80163ee:	e7a6      	b.n	801633e <_printf_i+0x15e>
 80163f0:	2301      	movs	r3, #1
 80163f2:	4632      	mov	r2, r6
 80163f4:	4649      	mov	r1, r9
 80163f6:	4640      	mov	r0, r8
 80163f8:	47d0      	blx	sl
 80163fa:	3001      	adds	r0, #1
 80163fc:	d09d      	beq.n	801633a <_printf_i+0x15a>
 80163fe:	3501      	adds	r5, #1
 8016400:	68e3      	ldr	r3, [r4, #12]
 8016402:	9903      	ldr	r1, [sp, #12]
 8016404:	1a5b      	subs	r3, r3, r1
 8016406:	42ab      	cmp	r3, r5
 8016408:	dcf2      	bgt.n	80163f0 <_printf_i+0x210>
 801640a:	e7eb      	b.n	80163e4 <_printf_i+0x204>
 801640c:	2500      	movs	r5, #0
 801640e:	f104 0619 	add.w	r6, r4, #25
 8016412:	e7f5      	b.n	8016400 <_printf_i+0x220>
 8016414:	08019a66 	.word	0x08019a66
 8016418:	08019a77 	.word	0x08019a77

0801641c <__sflush_r>:
 801641c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016424:	0716      	lsls	r6, r2, #28
 8016426:	4605      	mov	r5, r0
 8016428:	460c      	mov	r4, r1
 801642a:	d454      	bmi.n	80164d6 <__sflush_r+0xba>
 801642c:	684b      	ldr	r3, [r1, #4]
 801642e:	2b00      	cmp	r3, #0
 8016430:	dc02      	bgt.n	8016438 <__sflush_r+0x1c>
 8016432:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016434:	2b00      	cmp	r3, #0
 8016436:	dd48      	ble.n	80164ca <__sflush_r+0xae>
 8016438:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801643a:	2e00      	cmp	r6, #0
 801643c:	d045      	beq.n	80164ca <__sflush_r+0xae>
 801643e:	2300      	movs	r3, #0
 8016440:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016444:	682f      	ldr	r7, [r5, #0]
 8016446:	6a21      	ldr	r1, [r4, #32]
 8016448:	602b      	str	r3, [r5, #0]
 801644a:	d030      	beq.n	80164ae <__sflush_r+0x92>
 801644c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801644e:	89a3      	ldrh	r3, [r4, #12]
 8016450:	0759      	lsls	r1, r3, #29
 8016452:	d505      	bpl.n	8016460 <__sflush_r+0x44>
 8016454:	6863      	ldr	r3, [r4, #4]
 8016456:	1ad2      	subs	r2, r2, r3
 8016458:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801645a:	b10b      	cbz	r3, 8016460 <__sflush_r+0x44>
 801645c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801645e:	1ad2      	subs	r2, r2, r3
 8016460:	2300      	movs	r3, #0
 8016462:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016464:	6a21      	ldr	r1, [r4, #32]
 8016466:	4628      	mov	r0, r5
 8016468:	47b0      	blx	r6
 801646a:	1c43      	adds	r3, r0, #1
 801646c:	89a3      	ldrh	r3, [r4, #12]
 801646e:	d106      	bne.n	801647e <__sflush_r+0x62>
 8016470:	6829      	ldr	r1, [r5, #0]
 8016472:	291d      	cmp	r1, #29
 8016474:	d82b      	bhi.n	80164ce <__sflush_r+0xb2>
 8016476:	4a2a      	ldr	r2, [pc, #168]	@ (8016520 <__sflush_r+0x104>)
 8016478:	40ca      	lsrs	r2, r1
 801647a:	07d6      	lsls	r6, r2, #31
 801647c:	d527      	bpl.n	80164ce <__sflush_r+0xb2>
 801647e:	2200      	movs	r2, #0
 8016480:	6062      	str	r2, [r4, #4]
 8016482:	04d9      	lsls	r1, r3, #19
 8016484:	6922      	ldr	r2, [r4, #16]
 8016486:	6022      	str	r2, [r4, #0]
 8016488:	d504      	bpl.n	8016494 <__sflush_r+0x78>
 801648a:	1c42      	adds	r2, r0, #1
 801648c:	d101      	bne.n	8016492 <__sflush_r+0x76>
 801648e:	682b      	ldr	r3, [r5, #0]
 8016490:	b903      	cbnz	r3, 8016494 <__sflush_r+0x78>
 8016492:	6560      	str	r0, [r4, #84]	@ 0x54
 8016494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016496:	602f      	str	r7, [r5, #0]
 8016498:	b1b9      	cbz	r1, 80164ca <__sflush_r+0xae>
 801649a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801649e:	4299      	cmp	r1, r3
 80164a0:	d002      	beq.n	80164a8 <__sflush_r+0x8c>
 80164a2:	4628      	mov	r0, r5
 80164a4:	f7ff fca2 	bl	8015dec <_free_r>
 80164a8:	2300      	movs	r3, #0
 80164aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80164ac:	e00d      	b.n	80164ca <__sflush_r+0xae>
 80164ae:	2301      	movs	r3, #1
 80164b0:	4628      	mov	r0, r5
 80164b2:	47b0      	blx	r6
 80164b4:	4602      	mov	r2, r0
 80164b6:	1c50      	adds	r0, r2, #1
 80164b8:	d1c9      	bne.n	801644e <__sflush_r+0x32>
 80164ba:	682b      	ldr	r3, [r5, #0]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d0c6      	beq.n	801644e <__sflush_r+0x32>
 80164c0:	2b1d      	cmp	r3, #29
 80164c2:	d001      	beq.n	80164c8 <__sflush_r+0xac>
 80164c4:	2b16      	cmp	r3, #22
 80164c6:	d11e      	bne.n	8016506 <__sflush_r+0xea>
 80164c8:	602f      	str	r7, [r5, #0]
 80164ca:	2000      	movs	r0, #0
 80164cc:	e022      	b.n	8016514 <__sflush_r+0xf8>
 80164ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164d2:	b21b      	sxth	r3, r3
 80164d4:	e01b      	b.n	801650e <__sflush_r+0xf2>
 80164d6:	690f      	ldr	r7, [r1, #16]
 80164d8:	2f00      	cmp	r7, #0
 80164da:	d0f6      	beq.n	80164ca <__sflush_r+0xae>
 80164dc:	0793      	lsls	r3, r2, #30
 80164de:	680e      	ldr	r6, [r1, #0]
 80164e0:	bf08      	it	eq
 80164e2:	694b      	ldreq	r3, [r1, #20]
 80164e4:	600f      	str	r7, [r1, #0]
 80164e6:	bf18      	it	ne
 80164e8:	2300      	movne	r3, #0
 80164ea:	eba6 0807 	sub.w	r8, r6, r7
 80164ee:	608b      	str	r3, [r1, #8]
 80164f0:	f1b8 0f00 	cmp.w	r8, #0
 80164f4:	dde9      	ble.n	80164ca <__sflush_r+0xae>
 80164f6:	6a21      	ldr	r1, [r4, #32]
 80164f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80164fa:	4643      	mov	r3, r8
 80164fc:	463a      	mov	r2, r7
 80164fe:	4628      	mov	r0, r5
 8016500:	47b0      	blx	r6
 8016502:	2800      	cmp	r0, #0
 8016504:	dc08      	bgt.n	8016518 <__sflush_r+0xfc>
 8016506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801650a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801650e:	81a3      	strh	r3, [r4, #12]
 8016510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016518:	4407      	add	r7, r0
 801651a:	eba8 0800 	sub.w	r8, r8, r0
 801651e:	e7e7      	b.n	80164f0 <__sflush_r+0xd4>
 8016520:	20400001 	.word	0x20400001

08016524 <_fflush_r>:
 8016524:	b538      	push	{r3, r4, r5, lr}
 8016526:	690b      	ldr	r3, [r1, #16]
 8016528:	4605      	mov	r5, r0
 801652a:	460c      	mov	r4, r1
 801652c:	b913      	cbnz	r3, 8016534 <_fflush_r+0x10>
 801652e:	2500      	movs	r5, #0
 8016530:	4628      	mov	r0, r5
 8016532:	bd38      	pop	{r3, r4, r5, pc}
 8016534:	b118      	cbz	r0, 801653e <_fflush_r+0x1a>
 8016536:	6a03      	ldr	r3, [r0, #32]
 8016538:	b90b      	cbnz	r3, 801653e <_fflush_r+0x1a>
 801653a:	f7ff faeb 	bl	8015b14 <__sinit>
 801653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d0f3      	beq.n	801652e <_fflush_r+0xa>
 8016546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016548:	07d0      	lsls	r0, r2, #31
 801654a:	d404      	bmi.n	8016556 <_fflush_r+0x32>
 801654c:	0599      	lsls	r1, r3, #22
 801654e:	d402      	bmi.n	8016556 <_fflush_r+0x32>
 8016550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016552:	f7ff fc1c 	bl	8015d8e <__retarget_lock_acquire_recursive>
 8016556:	4628      	mov	r0, r5
 8016558:	4621      	mov	r1, r4
 801655a:	f7ff ff5f 	bl	801641c <__sflush_r>
 801655e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016560:	07da      	lsls	r2, r3, #31
 8016562:	4605      	mov	r5, r0
 8016564:	d4e4      	bmi.n	8016530 <_fflush_r+0xc>
 8016566:	89a3      	ldrh	r3, [r4, #12]
 8016568:	059b      	lsls	r3, r3, #22
 801656a:	d4e1      	bmi.n	8016530 <_fflush_r+0xc>
 801656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801656e:	f7ff fc0f 	bl	8015d90 <__retarget_lock_release_recursive>
 8016572:	e7dd      	b.n	8016530 <_fflush_r+0xc>

08016574 <fiprintf>:
 8016574:	b40e      	push	{r1, r2, r3}
 8016576:	b503      	push	{r0, r1, lr}
 8016578:	4601      	mov	r1, r0
 801657a:	ab03      	add	r3, sp, #12
 801657c:	4805      	ldr	r0, [pc, #20]	@ (8016594 <fiprintf+0x20>)
 801657e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016582:	6800      	ldr	r0, [r0, #0]
 8016584:	9301      	str	r3, [sp, #4]
 8016586:	f7ff fca5 	bl	8015ed4 <_vfiprintf_r>
 801658a:	b002      	add	sp, #8
 801658c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016590:	b003      	add	sp, #12
 8016592:	4770      	bx	lr
 8016594:	20000134 	.word	0x20000134

08016598 <__swbuf_r>:
 8016598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801659a:	460e      	mov	r6, r1
 801659c:	4614      	mov	r4, r2
 801659e:	4605      	mov	r5, r0
 80165a0:	b118      	cbz	r0, 80165aa <__swbuf_r+0x12>
 80165a2:	6a03      	ldr	r3, [r0, #32]
 80165a4:	b90b      	cbnz	r3, 80165aa <__swbuf_r+0x12>
 80165a6:	f7ff fab5 	bl	8015b14 <__sinit>
 80165aa:	69a3      	ldr	r3, [r4, #24]
 80165ac:	60a3      	str	r3, [r4, #8]
 80165ae:	89a3      	ldrh	r3, [r4, #12]
 80165b0:	071a      	lsls	r2, r3, #28
 80165b2:	d501      	bpl.n	80165b8 <__swbuf_r+0x20>
 80165b4:	6923      	ldr	r3, [r4, #16]
 80165b6:	b943      	cbnz	r3, 80165ca <__swbuf_r+0x32>
 80165b8:	4621      	mov	r1, r4
 80165ba:	4628      	mov	r0, r5
 80165bc:	f000 f82a 	bl	8016614 <__swsetup_r>
 80165c0:	b118      	cbz	r0, 80165ca <__swbuf_r+0x32>
 80165c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80165c6:	4638      	mov	r0, r7
 80165c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165ca:	6823      	ldr	r3, [r4, #0]
 80165cc:	6922      	ldr	r2, [r4, #16]
 80165ce:	1a98      	subs	r0, r3, r2
 80165d0:	6963      	ldr	r3, [r4, #20]
 80165d2:	b2f6      	uxtb	r6, r6
 80165d4:	4283      	cmp	r3, r0
 80165d6:	4637      	mov	r7, r6
 80165d8:	dc05      	bgt.n	80165e6 <__swbuf_r+0x4e>
 80165da:	4621      	mov	r1, r4
 80165dc:	4628      	mov	r0, r5
 80165de:	f7ff ffa1 	bl	8016524 <_fflush_r>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d1ed      	bne.n	80165c2 <__swbuf_r+0x2a>
 80165e6:	68a3      	ldr	r3, [r4, #8]
 80165e8:	3b01      	subs	r3, #1
 80165ea:	60a3      	str	r3, [r4, #8]
 80165ec:	6823      	ldr	r3, [r4, #0]
 80165ee:	1c5a      	adds	r2, r3, #1
 80165f0:	6022      	str	r2, [r4, #0]
 80165f2:	701e      	strb	r6, [r3, #0]
 80165f4:	6962      	ldr	r2, [r4, #20]
 80165f6:	1c43      	adds	r3, r0, #1
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d004      	beq.n	8016606 <__swbuf_r+0x6e>
 80165fc:	89a3      	ldrh	r3, [r4, #12]
 80165fe:	07db      	lsls	r3, r3, #31
 8016600:	d5e1      	bpl.n	80165c6 <__swbuf_r+0x2e>
 8016602:	2e0a      	cmp	r6, #10
 8016604:	d1df      	bne.n	80165c6 <__swbuf_r+0x2e>
 8016606:	4621      	mov	r1, r4
 8016608:	4628      	mov	r0, r5
 801660a:	f7ff ff8b 	bl	8016524 <_fflush_r>
 801660e:	2800      	cmp	r0, #0
 8016610:	d0d9      	beq.n	80165c6 <__swbuf_r+0x2e>
 8016612:	e7d6      	b.n	80165c2 <__swbuf_r+0x2a>

08016614 <__swsetup_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4b29      	ldr	r3, [pc, #164]	@ (80166bc <__swsetup_r+0xa8>)
 8016618:	4605      	mov	r5, r0
 801661a:	6818      	ldr	r0, [r3, #0]
 801661c:	460c      	mov	r4, r1
 801661e:	b118      	cbz	r0, 8016628 <__swsetup_r+0x14>
 8016620:	6a03      	ldr	r3, [r0, #32]
 8016622:	b90b      	cbnz	r3, 8016628 <__swsetup_r+0x14>
 8016624:	f7ff fa76 	bl	8015b14 <__sinit>
 8016628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801662c:	0719      	lsls	r1, r3, #28
 801662e:	d422      	bmi.n	8016676 <__swsetup_r+0x62>
 8016630:	06da      	lsls	r2, r3, #27
 8016632:	d407      	bmi.n	8016644 <__swsetup_r+0x30>
 8016634:	2209      	movs	r2, #9
 8016636:	602a      	str	r2, [r5, #0]
 8016638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801663c:	81a3      	strh	r3, [r4, #12]
 801663e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016642:	e033      	b.n	80166ac <__swsetup_r+0x98>
 8016644:	0758      	lsls	r0, r3, #29
 8016646:	d512      	bpl.n	801666e <__swsetup_r+0x5a>
 8016648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801664a:	b141      	cbz	r1, 801665e <__swsetup_r+0x4a>
 801664c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016650:	4299      	cmp	r1, r3
 8016652:	d002      	beq.n	801665a <__swsetup_r+0x46>
 8016654:	4628      	mov	r0, r5
 8016656:	f7ff fbc9 	bl	8015dec <_free_r>
 801665a:	2300      	movs	r3, #0
 801665c:	6363      	str	r3, [r4, #52]	@ 0x34
 801665e:	89a3      	ldrh	r3, [r4, #12]
 8016660:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016664:	81a3      	strh	r3, [r4, #12]
 8016666:	2300      	movs	r3, #0
 8016668:	6063      	str	r3, [r4, #4]
 801666a:	6923      	ldr	r3, [r4, #16]
 801666c:	6023      	str	r3, [r4, #0]
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	f043 0308 	orr.w	r3, r3, #8
 8016674:	81a3      	strh	r3, [r4, #12]
 8016676:	6923      	ldr	r3, [r4, #16]
 8016678:	b94b      	cbnz	r3, 801668e <__swsetup_r+0x7a>
 801667a:	89a3      	ldrh	r3, [r4, #12]
 801667c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016684:	d003      	beq.n	801668e <__swsetup_r+0x7a>
 8016686:	4621      	mov	r1, r4
 8016688:	4628      	mov	r0, r5
 801668a:	f000 f846 	bl	801671a <__smakebuf_r>
 801668e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016692:	f013 0201 	ands.w	r2, r3, #1
 8016696:	d00a      	beq.n	80166ae <__swsetup_r+0x9a>
 8016698:	2200      	movs	r2, #0
 801669a:	60a2      	str	r2, [r4, #8]
 801669c:	6962      	ldr	r2, [r4, #20]
 801669e:	4252      	negs	r2, r2
 80166a0:	61a2      	str	r2, [r4, #24]
 80166a2:	6922      	ldr	r2, [r4, #16]
 80166a4:	b942      	cbnz	r2, 80166b8 <__swsetup_r+0xa4>
 80166a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80166aa:	d1c5      	bne.n	8016638 <__swsetup_r+0x24>
 80166ac:	bd38      	pop	{r3, r4, r5, pc}
 80166ae:	0799      	lsls	r1, r3, #30
 80166b0:	bf58      	it	pl
 80166b2:	6962      	ldrpl	r2, [r4, #20]
 80166b4:	60a2      	str	r2, [r4, #8]
 80166b6:	e7f4      	b.n	80166a2 <__swsetup_r+0x8e>
 80166b8:	2000      	movs	r0, #0
 80166ba:	e7f7      	b.n	80166ac <__swsetup_r+0x98>
 80166bc:	20000134 	.word	0x20000134

080166c0 <abort>:
 80166c0:	b508      	push	{r3, lr}
 80166c2:	2006      	movs	r0, #6
 80166c4:	f000 f88e 	bl	80167e4 <raise>
 80166c8:	2001      	movs	r0, #1
 80166ca:	f7ea f911 	bl	80008f0 <_exit>

080166ce <__swhatbuf_r>:
 80166ce:	b570      	push	{r4, r5, r6, lr}
 80166d0:	460c      	mov	r4, r1
 80166d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166d6:	2900      	cmp	r1, #0
 80166d8:	b096      	sub	sp, #88	@ 0x58
 80166da:	4615      	mov	r5, r2
 80166dc:	461e      	mov	r6, r3
 80166de:	da0d      	bge.n	80166fc <__swhatbuf_r+0x2e>
 80166e0:	89a3      	ldrh	r3, [r4, #12]
 80166e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80166e6:	f04f 0100 	mov.w	r1, #0
 80166ea:	bf14      	ite	ne
 80166ec:	2340      	movne	r3, #64	@ 0x40
 80166ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80166f2:	2000      	movs	r0, #0
 80166f4:	6031      	str	r1, [r6, #0]
 80166f6:	602b      	str	r3, [r5, #0]
 80166f8:	b016      	add	sp, #88	@ 0x58
 80166fa:	bd70      	pop	{r4, r5, r6, pc}
 80166fc:	466a      	mov	r2, sp
 80166fe:	f000 f879 	bl	80167f4 <_fstat_r>
 8016702:	2800      	cmp	r0, #0
 8016704:	dbec      	blt.n	80166e0 <__swhatbuf_r+0x12>
 8016706:	9901      	ldr	r1, [sp, #4]
 8016708:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801670c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016710:	4259      	negs	r1, r3
 8016712:	4159      	adcs	r1, r3
 8016714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016718:	e7eb      	b.n	80166f2 <__swhatbuf_r+0x24>

0801671a <__smakebuf_r>:
 801671a:	898b      	ldrh	r3, [r1, #12]
 801671c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801671e:	079d      	lsls	r5, r3, #30
 8016720:	4606      	mov	r6, r0
 8016722:	460c      	mov	r4, r1
 8016724:	d507      	bpl.n	8016736 <__smakebuf_r+0x1c>
 8016726:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801672a:	6023      	str	r3, [r4, #0]
 801672c:	6123      	str	r3, [r4, #16]
 801672e:	2301      	movs	r3, #1
 8016730:	6163      	str	r3, [r4, #20]
 8016732:	b003      	add	sp, #12
 8016734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016736:	ab01      	add	r3, sp, #4
 8016738:	466a      	mov	r2, sp
 801673a:	f7ff ffc8 	bl	80166ce <__swhatbuf_r>
 801673e:	9f00      	ldr	r7, [sp, #0]
 8016740:	4605      	mov	r5, r0
 8016742:	4639      	mov	r1, r7
 8016744:	4630      	mov	r0, r6
 8016746:	f7ff f88f 	bl	8015868 <_malloc_r>
 801674a:	b948      	cbnz	r0, 8016760 <__smakebuf_r+0x46>
 801674c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016750:	059a      	lsls	r2, r3, #22
 8016752:	d4ee      	bmi.n	8016732 <__smakebuf_r+0x18>
 8016754:	f023 0303 	bic.w	r3, r3, #3
 8016758:	f043 0302 	orr.w	r3, r3, #2
 801675c:	81a3      	strh	r3, [r4, #12]
 801675e:	e7e2      	b.n	8016726 <__smakebuf_r+0xc>
 8016760:	89a3      	ldrh	r3, [r4, #12]
 8016762:	6020      	str	r0, [r4, #0]
 8016764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016768:	81a3      	strh	r3, [r4, #12]
 801676a:	9b01      	ldr	r3, [sp, #4]
 801676c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016770:	b15b      	cbz	r3, 801678a <__smakebuf_r+0x70>
 8016772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016776:	4630      	mov	r0, r6
 8016778:	f000 f84e 	bl	8016818 <_isatty_r>
 801677c:	b128      	cbz	r0, 801678a <__smakebuf_r+0x70>
 801677e:	89a3      	ldrh	r3, [r4, #12]
 8016780:	f023 0303 	bic.w	r3, r3, #3
 8016784:	f043 0301 	orr.w	r3, r3, #1
 8016788:	81a3      	strh	r3, [r4, #12]
 801678a:	89a3      	ldrh	r3, [r4, #12]
 801678c:	431d      	orrs	r5, r3
 801678e:	81a5      	strh	r5, [r4, #12]
 8016790:	e7cf      	b.n	8016732 <__smakebuf_r+0x18>

08016792 <_raise_r>:
 8016792:	291f      	cmp	r1, #31
 8016794:	b538      	push	{r3, r4, r5, lr}
 8016796:	4605      	mov	r5, r0
 8016798:	460c      	mov	r4, r1
 801679a:	d904      	bls.n	80167a6 <_raise_r+0x14>
 801679c:	2316      	movs	r3, #22
 801679e:	6003      	str	r3, [r0, #0]
 80167a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167a4:	bd38      	pop	{r3, r4, r5, pc}
 80167a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80167a8:	b112      	cbz	r2, 80167b0 <_raise_r+0x1e>
 80167aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80167ae:	b94b      	cbnz	r3, 80167c4 <_raise_r+0x32>
 80167b0:	4628      	mov	r0, r5
 80167b2:	f000 f853 	bl	801685c <_getpid_r>
 80167b6:	4622      	mov	r2, r4
 80167b8:	4601      	mov	r1, r0
 80167ba:	4628      	mov	r0, r5
 80167bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167c0:	f000 b83a 	b.w	8016838 <_kill_r>
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d00a      	beq.n	80167de <_raise_r+0x4c>
 80167c8:	1c59      	adds	r1, r3, #1
 80167ca:	d103      	bne.n	80167d4 <_raise_r+0x42>
 80167cc:	2316      	movs	r3, #22
 80167ce:	6003      	str	r3, [r0, #0]
 80167d0:	2001      	movs	r0, #1
 80167d2:	e7e7      	b.n	80167a4 <_raise_r+0x12>
 80167d4:	2100      	movs	r1, #0
 80167d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80167da:	4620      	mov	r0, r4
 80167dc:	4798      	blx	r3
 80167de:	2000      	movs	r0, #0
 80167e0:	e7e0      	b.n	80167a4 <_raise_r+0x12>
	...

080167e4 <raise>:
 80167e4:	4b02      	ldr	r3, [pc, #8]	@ (80167f0 <raise+0xc>)
 80167e6:	4601      	mov	r1, r0
 80167e8:	6818      	ldr	r0, [r3, #0]
 80167ea:	f7ff bfd2 	b.w	8016792 <_raise_r>
 80167ee:	bf00      	nop
 80167f0:	20000134 	.word	0x20000134

080167f4 <_fstat_r>:
 80167f4:	b538      	push	{r3, r4, r5, lr}
 80167f6:	4d07      	ldr	r5, [pc, #28]	@ (8016814 <_fstat_r+0x20>)
 80167f8:	2300      	movs	r3, #0
 80167fa:	4604      	mov	r4, r0
 80167fc:	4608      	mov	r0, r1
 80167fe:	4611      	mov	r1, r2
 8016800:	602b      	str	r3, [r5, #0]
 8016802:	f7ea f8c5 	bl	8000990 <_fstat>
 8016806:	1c43      	adds	r3, r0, #1
 8016808:	d102      	bne.n	8016810 <_fstat_r+0x1c>
 801680a:	682b      	ldr	r3, [r5, #0]
 801680c:	b103      	cbz	r3, 8016810 <_fstat_r+0x1c>
 801680e:	6023      	str	r3, [r4, #0]
 8016810:	bd38      	pop	{r3, r4, r5, pc}
 8016812:	bf00      	nop
 8016814:	200057c8 	.word	0x200057c8

08016818 <_isatty_r>:
 8016818:	b538      	push	{r3, r4, r5, lr}
 801681a:	4d06      	ldr	r5, [pc, #24]	@ (8016834 <_isatty_r+0x1c>)
 801681c:	2300      	movs	r3, #0
 801681e:	4604      	mov	r4, r0
 8016820:	4608      	mov	r0, r1
 8016822:	602b      	str	r3, [r5, #0]
 8016824:	f7ea f8c4 	bl	80009b0 <_isatty>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	d102      	bne.n	8016832 <_isatty_r+0x1a>
 801682c:	682b      	ldr	r3, [r5, #0]
 801682e:	b103      	cbz	r3, 8016832 <_isatty_r+0x1a>
 8016830:	6023      	str	r3, [r4, #0]
 8016832:	bd38      	pop	{r3, r4, r5, pc}
 8016834:	200057c8 	.word	0x200057c8

08016838 <_kill_r>:
 8016838:	b538      	push	{r3, r4, r5, lr}
 801683a:	4d07      	ldr	r5, [pc, #28]	@ (8016858 <_kill_r+0x20>)
 801683c:	2300      	movs	r3, #0
 801683e:	4604      	mov	r4, r0
 8016840:	4608      	mov	r0, r1
 8016842:	4611      	mov	r1, r2
 8016844:	602b      	str	r3, [r5, #0]
 8016846:	f7ea f841 	bl	80008cc <_kill>
 801684a:	1c43      	adds	r3, r0, #1
 801684c:	d102      	bne.n	8016854 <_kill_r+0x1c>
 801684e:	682b      	ldr	r3, [r5, #0]
 8016850:	b103      	cbz	r3, 8016854 <_kill_r+0x1c>
 8016852:	6023      	str	r3, [r4, #0]
 8016854:	bd38      	pop	{r3, r4, r5, pc}
 8016856:	bf00      	nop
 8016858:	200057c8 	.word	0x200057c8

0801685c <_getpid_r>:
 801685c:	f7ea b82e 	b.w	80008bc <_getpid>

08016860 <_init>:
 8016860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016862:	bf00      	nop
 8016864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016866:	bc08      	pop	{r3}
 8016868:	469e      	mov	lr, r3
 801686a:	4770      	bx	lr

0801686c <_fini>:
 801686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686e:	bf00      	nop
 8016870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016872:	bc08      	pop	{r3}
 8016874:	469e      	mov	lr, r3
 8016876:	4770      	bx	lr
