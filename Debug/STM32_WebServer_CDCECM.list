
STM32_WebServer_CDCECM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003210  08016768  08016768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019978  08019978  0001b184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019978  08019978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019980  08019980  0001b184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019980  08019980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019984  08019984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08019988  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001b184  2**0
                  CONTENTS
 10 .bss          0000564c  20000184  20000184  0001b184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057d0  200057d0  0001b184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001b184  2**0
                  CONTENTS, READONLY
 13 .debug_info   000235e3  00000000  00000000  0001b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ed3  00000000  00000000  0003e797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00045670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c8  00000000  00000000  00046fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c29a  00000000  00000000  00048390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027d34  00000000  00000000  0007462a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd1b  00000000  00000000  0009c35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016a079  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c94  00000000  00000000  0016a0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00170d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000184 	.word	0x20000184
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016750 	.word	0x08016750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000188 	.word	0x20000188
 80001cc:	08016750 	.word	0x08016750

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <MX_GPIO_Init+0xb8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <MX_GPIO_Init+0xb8>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xb8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a1f      	ldr	r2, [pc, #124]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_GPIO_Init+0xb8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_GPIO_Init+0xb8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_GPIO_Init+0xb8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <MX_GPIO_Init+0xbc>)
 800065a:	f000 fd71 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_GPIO_Init+0xbc>)
 8000678:	f000 fbc6 	bl	8000e08 <HAL_GPIO_Init>

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40020400 	.word	0x40020400

0800068c <MX_LWIP_Init>:
#include "lwip/apps/httpd.h"

struct netif gnetif;

void MX_LWIP_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af04      	add	r7, sp, #16
    ip4_addr_t ipaddr;
    ip4_addr_t netmask;
    ip4_addr_t gw;

    /* Initialize the LwIP stack */
    lwip_init();
 8000692:	f006 fd79 	bl	8007188 <lwip_init>

    /* Set static IP address */
    IP4_ADDR(&ipaddr, 192, 168, 7, 2);  // <<< Change to .2
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_LWIP_Init+0x4c>)
 8000698:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, 255, 255, 255, 0);
 800069a:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800069e:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, 192, 168, 7, 1);      // <<< Gateway is still .1 (the PC)
 80006a0:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_LWIP_Init+0x50>)
 80006a2:	607b      	str	r3, [r7, #4]

    /* Add network interface */
    netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, cdc_ecm_netif_init, ethernet_input);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	f107 0208 	add.w	r2, r7, #8
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <MX_LWIP_Init+0x54>)
 80006b0:	9002      	str	r0, [sp, #8]
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_LWIP_Init+0x58>)
 80006b4:	9001      	str	r0, [sp, #4]
 80006b6:	2000      	movs	r0, #0
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_LWIP_Init+0x5c>)
 80006bc:	f006 ff16 	bl	80074ec <netif_add>

    /* Set it as default */
    netif_set_default(&gnetif);
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <MX_LWIP_Init+0x5c>)
 80006c2:	f007 f8c9 	bl	8007858 <netif_set_default>

    /* Bring it up */
    netif_set_up(&gnetif);
 80006c6:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <MX_LWIP_Init+0x5c>)
 80006c8:	f007 f8d6 	bl	8007878 <netif_set_up>

    /* Initialize the HTTP server */
    httpd_init();
 80006cc:	f006 f826 	bl	800671c <httpd_init>
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	0207a8c0 	.word	0x0207a8c0
 80006dc:	0107a8c0 	.word	0x0107a8c0
 80006e0:	08013d45 	.word	0x08013d45
 80006e4:	08013f7d 	.word	0x08013f7d
 80006e8:	200001a0 	.word	0x200001a0

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 f9e2 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f808 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff68 	bl	80005cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006fc:	f013 fcda 	bl	80140b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MX_LWIP_Init();
 8000700:	f7ff ffc4 	bl	800068c <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x18>

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	@ 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f015 fa0f 	bl	8015b3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f001 ff42 	bl	8002618 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079a:	f000 f81f 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f9a3 	bl	8002b08 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c8:	f000 f808 	bl	80007dc <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	@ 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <MemManage_Handler+0x4>

08000850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088e:	f000 f965 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <OTG_FS_IRQHandler+0x10>)
 800089e:	f000 fdac 	bl	80013fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20004f80 	.word	0x20004f80

080008ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return 1;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <_kill>:

int _kill(int pid, int sig)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <_kill+0x20>)
 80008c8:	2216      	movs	r2, #22
 80008ca:	601a      	str	r2, [r3, #0]
  return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	200057c8 	.word	0x200057c8

080008e0 <_exit>:

void _exit (int status)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffe5 	bl	80008bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f2:	bf00      	nop
 80008f4:	e7fd      	b.n	80008f2 <_exit+0x12>

080008f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e00a      	b.n	800091e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000908:	f3af 8000 	nop.w
 800090c:	4601      	mov	r1, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf0      	blt.n	8000908 <_read+0x12>
  }

  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e009      	b.n	8000956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbf1      	blt.n	8000942 <_write+0x12>
  }
  return len;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_close>:

int _close(int file)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000990:	605a      	str	r2, [r3, #4]
  return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_isatty>:

int _isatty(int file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d205      	bcs.n	8000a0c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <_sbrk+0x6c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a06      	ldr	r2, [pc, #24]	@ (8000a34 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20020000 	.word	0x20020000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	200001d4 	.word	0x200001d4
 8000a38:	200057d0 	.word	0x200057d0
 8000a3c:	200057c8 	.word	0x200057c8

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f015 f8cf 	bl	8015c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fe29 	bl	80006ec <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000aa8:	08019988 	.word	0x08019988
  ldr r2, =_sbss
 8000aac:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000ab0:	200057d0 	.word	0x200057d0

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f94f 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	200f      	movs	r0, #15
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe7c 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f967 	bl	8000dee <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b38:	f000 f92f 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200001d8 	.word	0x200001d8

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001d8 	.word	0x200001d8

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <__NVIC_EnableIRQ+0x38>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff29 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff3e 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff31 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa2 	bl	8000d40 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e16b      	b.n	80010fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 815a 	bne.w	80010f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d130      	bne.n	8000ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80b4 	beq.w	80010f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b60      	ldr	r3, [pc, #384]	@ (8001114 <HAL_GPIO_Init+0x30c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	4a5f      	ldr	r2, [pc, #380]	@ (8001114 <HAL_GPIO_Init+0x30c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001114 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a5b      	ldr	r2, [pc, #364]	@ (8001118 <HAL_GPIO_Init+0x310>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	@ (800111c <HAL_GPIO_Init+0x314>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x226>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	@ (8001120 <HAL_GPIO_Init+0x318>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d025      	beq.n	800102a <HAL_GPIO_Init+0x222>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	@ (8001124 <HAL_GPIO_Init+0x31c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01f      	beq.n	8001026 <HAL_GPIO_Init+0x21e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8001128 <HAL_GPIO_Init+0x320>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d019      	beq.n	8001022 <HAL_GPIO_Init+0x21a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800112c <HAL_GPIO_Init+0x324>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x216>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <HAL_GPIO_Init+0x328>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x212>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	@ (8001134 <HAL_GPIO_Init+0x32c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x20e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	@ (8001138 <HAL_GPIO_Init+0x330>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x20a>
 800100e:	2307      	movs	r3, #7
 8001010:	e00e      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001012:	2308      	movs	r3, #8
 8001014:	e00c      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001016:	2306      	movs	r3, #6
 8001018:	e00a      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101a:	2305      	movs	r3, #5
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101e:	2304      	movs	r3, #4
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	@ (8001118 <HAL_GPIO_Init+0x310>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <HAL_GPIO_Init+0x334>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a32      	ldr	r2, [pc, #200]	@ (800113c <HAL_GPIO_Init+0x334>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b30      	ldr	r3, [pc, #192]	@ (800113c <HAL_GPIO_Init+0x334>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <HAL_GPIO_Init+0x334>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <HAL_GPIO_Init+0x334>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1d      	ldr	r2, [pc, #116]	@ (800113c <HAL_GPIO_Init+0x334>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <HAL_GPIO_Init+0x334>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a12      	ldr	r2, [pc, #72]	@ (800113c <HAL_GPIO_Init+0x334>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f ae90 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af02      	add	r7, sp, #8
 8001178:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e101      	b.n	8001388 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d106      	bne.n	80011a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f013 ff94 	bl	80150cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b2:	d102      	bne.n	80011ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ffb1 	bl	8003126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7c1a      	ldrb	r2, [r3, #16]
 80011cc:	f88d 2000 	strb.w	r2, [sp]
 80011d0:	3304      	adds	r3, #4
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	f001 fe90 	bl	8002ef8 <USB_CoreInit>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2202      	movs	r2, #2
 80011e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0ce      	b.n	8001388 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ffa9 	bl	8003148 <USB_SetCurrentMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0bf      	b.n	8001388 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e04a      	b.n	80012a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3315      	adds	r3, #21
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3314      	adds	r3, #20
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b298      	uxth	r0, r3
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	332e      	adds	r3, #46	@ 0x2e
 800124a:	4602      	mov	r2, r0
 800124c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3318      	adds	r3, #24
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	440b      	add	r3, r1
 8001270:	331c      	adds	r3, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	3320      	adds	r3, #32
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	3324      	adds	r3, #36	@ 0x24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3af      	bcc.n	800120e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e044      	b.n	800133e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	791b      	ldrb	r3, [r3, #4]
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3b5      	bcc.n	80012b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7c1a      	ldrb	r2, [r3, #16]
 8001350:	f88d 2000 	strb.w	r2, [sp]
 8001354:	3304      	adds	r3, #4
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	f001 ff42 	bl	80031e0 <USB_DevInit>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2202      	movs	r2, #2
 8001366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00c      	b.n	8001388 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f002 ff8c 	bl	800429e <USB_DevDisconnect>

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_PCD_Start+0x1c>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e022      	b.n	80013f2 <HAL_PCD_Start+0x62>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d009      	beq.n	80013d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fe93 	bl	8003104 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 ff3a 	bl	800425c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013fa:	b590      	push	{r4, r7, lr}
 80013fc:	b08d      	sub	sp, #52	@ 0x34
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fff8 	bl	8004406 <USB_GetMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 848c 	bne.w	8001d36 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 ff5c 	bl	80042e0 <USB_ReadInterrupts>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8482 	beq.w	8001d34 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 ff49 	bl	80042e0 <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b02      	cmp	r3, #2
 8001456:	d107      	bne.n	8001468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f002 0202 	and.w	r2, r2, #2
 8001466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 ff37 	bl	80042e0 <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b10      	cmp	r3, #16
 800147a:	d161      	bne.n	8001540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0210 	bic.w	r2, r2, #16
 800148a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 020f 	and.w	r2, r3, #15
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80014b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014b6:	d124      	bne.n	8001502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d035      	beq.n	8001530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	6a38      	ldr	r0, [r7, #32]
 80014d8:	f002 fd6e 	bl	8003fb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e8:	441a      	add	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fa:	441a      	add	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	e016      	b.n	8001530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001508:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800150c:	d110      	bne.n	8001530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001514:	2208      	movs	r2, #8
 8001516:	4619      	mov	r1, r3
 8001518:	6a38      	ldr	r0, [r7, #32]
 800151a:	f002 fd4d 	bl	8003fb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	441a      	add	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0210 	orr.w	r2, r2, #16
 800153e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fecb 	bl	80042e0 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001550:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001554:	f040 80a7 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fed0 	bl	8004306 <USB_ReadDevAllOutEpInterrupt>
 8001566:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001568:	e099      	b.n	800169e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 808e 	beq.w	8001692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fef4 	bl	800436e <USB_ReadDevOutEPInterrupt>
 8001586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00c      	beq.n	80015ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800159e:	461a      	mov	r2, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fea4 	bl	80022f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c2:	461a      	mov	r2, r3
 80015c4:	2308      	movs	r3, #8
 80015c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 ff7a 	bl	80024c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015e6:	461a      	mov	r2, r3
 80015e8:	2310      	movs	r3, #16
 80015ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d030      	beq.n	8001658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015fe:	2b80      	cmp	r3, #128	@ 0x80
 8001600:	d109      	bne.n	8001616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	78db      	ldrb	r3, [r3, #3]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2200      	movs	r2, #0
 8001638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f013 fe49 	bl	80152d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001652:	461a      	mov	r2, r3
 8001654:	2302      	movs	r3, #2
 8001656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800166e:	461a      	mov	r2, r3
 8001670:	2320      	movs	r3, #32
 8001672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800168a:	461a      	mov	r2, r3
 800168c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f af62 	bne.w	800156a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fe18 	bl	80042e0 <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016ba:	f040 80db 	bne.w	8001874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fe39 	bl	800433a <USB_ReadDevAllInEpInterrupt>
 80016c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016ce:	e0cd      	b.n	800186c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80c2 	beq.w	8001860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fe5f 	bl	80043aa <USB_ReadDevInEPInterrupt>
 80016ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d057      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	2201      	movs	r2, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800170c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43db      	mvns	r3, r3
 8001712:	69f9      	ldr	r1, [r7, #28]
 8001714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001718:	4013      	ands	r3, r2
 800171a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001728:	461a      	mov	r2, r3
 800172a:	2301      	movs	r3, #1
 800172c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	799b      	ldrb	r3, [r3, #6]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d132      	bne.n	800179c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3320      	adds	r3, #32
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	331c      	adds	r3, #28
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4419      	add	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001760:	4613      	mov	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4403      	add	r3, r0
 800176a:	3320      	adds	r3, #32
 800176c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d113      	bne.n	800179c <HAL_PCD_IRQHandler+0x3a2>
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3324      	adds	r3, #36	@ 0x24
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d108      	bne.n	800179c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001794:	461a      	mov	r2, r3
 8001796:	2101      	movs	r1, #1
 8001798:	f002 fe66 	bl	8004468 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f013 fd13 	bl	80151ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017be:	461a      	mov	r2, r3
 80017c0:	2308      	movs	r3, #8
 80017c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017da:	461a      	mov	r2, r3
 80017dc:	2310      	movs	r3, #16
 80017de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017f6:	461a      	mov	r2, r3
 80017f8:	2340      	movs	r3, #64	@ 0x40
 80017fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001806:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001808:	6a38      	ldr	r0, [r7, #32]
 800180a:	f001 fe4d 	bl	80034a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800180e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3310      	adds	r3, #16
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	3304      	adds	r3, #4
 8001820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	78db      	ldrb	r3, [r3, #3]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2200      	movs	r2, #0
 800182e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f013 fd60 	bl	80152fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001848:	461a      	mov	r2, r3
 800184a:	2302      	movs	r3, #2
 800184c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fcbd 	bl	80021da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f af2e 	bne.w	80016d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fd31 	bl	80042e0 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001888:	d122      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	f023 0301 	bic.w	r3, r3, #1
 800189c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fea4 	bl	8002600 <HAL_PCDEx_LPM_Callback>
 80018b8:	e002      	b.n	80018c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f013 fcfe 	bl	80152bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fd03 	bl	80042e0 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018e4:	d112      	bne.n	800190c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f013 fcba 	bl	8015270 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800190a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fce5 	bl	80042e0 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001920:	f040 80b7 	bne.w	8001a92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2110      	movs	r1, #16
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fdb2 	bl	80034a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001948:	e046      	b.n	80019d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800194a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001956:	461a      	mov	r2, r3
 8001958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800195c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196e:	0151      	lsls	r1, r2, #5
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	440a      	add	r2, r1
 8001974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001978:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800197c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800198a:	461a      	mov	r2, r3
 800198c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019a2:	0151      	lsls	r1, r2, #5
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	440a      	add	r2, r1
 80019a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c2:	0151      	lsls	r1, r2, #5
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	440a      	add	r2, r1
 80019c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80019cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d4:	3301      	adds	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	791b      	ldrb	r3, [r3, #4]
 80019dc:	461a      	mov	r2, r3
 80019de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d3b2      	bcc.n	800194a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80019f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7bdb      	ldrb	r3, [r3, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d016      	beq.n	8001a2e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a10:	f043 030b 	orr.w	r3, r3, #11
 8001a14:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a26:	f043 030b 	orr.w	r3, r3, #11
 8001a2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2c:	e015      	b.n	8001a5a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a40:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001a44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a54:	f043 030b 	orr.w	r3, r3, #11
 8001a58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a68:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f002 fcf3 	bl	8004468 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fc22 	bl	80042e0 <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aa6:	d123      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fcb8 	bl	8004422 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fd6f 	bl	800359a <USB_GetDevSpeed>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681c      	ldr	r4, [r3, #0]
 8001ac8:	f001 fa0a 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8001acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f001 fa73 	bl	8002fc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f013 fb9f 	bl	801521e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fbf3 	bl	80042e0 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d10a      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f013 fb7c 	bl	8015202 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f002 0208 	and.w	r2, r2, #8
 8001b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 fbde 	bl	80042e0 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2a:	2b80      	cmp	r3, #128	@ 0x80
 8001b2c:	d123      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3e:	e014      	b.n	8001b6a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fb0a 	bl	8002178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d3e4      	bcc.n	8001b40 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fbb0 	bl	80042e0 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b8a:	d13c      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b90:	e02b      	b.n	8001bea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d115      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da12      	bge.n	8001be4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3317      	adds	r3, #23
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 faca 	bl	8002178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	3301      	adds	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d3cd      	bcc.n	8001b92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fb68 	bl	80042e0 <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c1a:	d156      	bne.n	8001cca <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c20:	e045      	b.n	8001cae <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d12e      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da2b      	bge.n	8001ca8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d121      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca4:	6053      	str	r3, [r2, #4]
            break;
 8001ca6:	e008      	b.n	8001cba <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	3301      	adds	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d3b3      	bcc.n	8001c22 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fb06 	bl	80042e0 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cde:	d10a      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f013 fb1d 	bl	8015320 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 faf0 	bl	80042e0 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d115      	bne.n	8001d36 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f013 fb0d 	bl	801533c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e000      	b.n	8001d36 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001d34:	bf00      	nop
    }
  }
}
 8001d36:	3734      	adds	r7, #52	@ 0x34
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}

08001d3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_PCD_SetAddress+0x1a>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e012      	b.n	8001d7c <HAL_PCD_SetAddress+0x40>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	78fa      	ldrb	r2, [r7, #3]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fa4f 	bl	8004210 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	70fb      	strb	r3, [r7, #3]
 8001d96:	460b      	mov	r3, r1
 8001d98:	803b      	strh	r3, [r7, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da0f      	bge.n	8001dca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	3310      	adds	r3, #16
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	705a      	strb	r2, [r3, #1]
 8001dc8:	e00f      	b.n	8001dea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001df6:	883b      	ldrh	r3, [r7, #0]
 8001df8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	78ba      	ldrb	r2, [r7, #2]
 8001e04:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d102      	bne.n	8001e24 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_PCD_EP_Open+0xae>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e00e      	b.n	8001e50 <HAL_PCD_EP_Open+0xcc>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fbcf 	bl	80035e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0f      	bge.n	8001e8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3310      	adds	r3, #16
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
 8001e8a:	e00f      	b.n	8001eac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_PCD_EP_Close+0x6e>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e00e      	b.n	8001ee4 <HAL_PCD_EP_Close+0x8c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fc0d 	bl	80036f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	799b      	ldrb	r3, [r3, #6]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d102      	bne.n	8001f48 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	799b      	ldrb	r3, [r3, #6]
 8001f50:	461a      	mov	r2, r3
 8001f52:	6979      	ldr	r1, [r7, #20]
 8001f54:	f001 fcaa 	bl	80038ac <USB_EPStartXfer>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 020f 	and.w	r2, r3, #15
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f84:	681b      	ldr	r3, [r3, #0]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	799b      	ldrb	r3, [r3, #6]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	f001 fc58 	bl	80038ac <USB_EPStartXfer>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	7912      	ldrb	r2, [r2, #4]
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e04f      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0f      	bge.n	800204c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3310      	adds	r3, #16
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	705a      	strb	r2, [r3, #1]
 800204a:	e00d      	b.n	8002068 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_SetStall+0x82>
 8002084:	2302      	movs	r3, #2
 8002086:	e01d      	b.n	80020c4 <HAL_PCD_EP_SetStall+0xbe>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f001 ffe6 	bl	8004068 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7999      	ldrb	r1, [r3, #6]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020b4:	461a      	mov	r2, r3
 80020b6:	f002 f9d7 	bl	8004468 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	7912      	ldrb	r2, [r2, #4]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e042      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da0f      	bge.n	8002112 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 020f 	and.w	r2, r3, #15
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3310      	adds	r3, #16
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3304      	adds	r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	e00f      	b.n	8002132 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	f003 020f 	and.w	r2, r3, #15
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_EP_ClrStall+0x86>
 800214e:	2302      	movs	r3, #2
 8002150:	e00e      	b.n	8002170 <HAL_PCD_EP_ClrStall+0xa4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f001 ffef 	bl	8004144 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0c      	bge.n	80021a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3310      	adds	r3, #16
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00c      	b.n	80021c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fe0e 	bl	8003de8 <USB_EPStopXfer>
 80021cc:	4603      	mov	r3, r0
 80021ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021d0:	7afb      	ldrb	r3, [r7, #11]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b08a      	sub	sp, #40	@ 0x28
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3310      	adds	r3, #16
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	429a      	cmp	r2, r3
 800220c:	d901      	bls.n	8002212 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06b      	b.n	80022ea <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	d902      	bls.n	800222e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3303      	adds	r3, #3
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002236:	e02a      	b.n	800228e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	429a      	cmp	r2, r3
 800224c:	d902      	bls.n	8002254 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3303      	adds	r3, #3
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68d9      	ldr	r1, [r3, #12]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4603      	mov	r3, r0
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	f001 fe63 	bl	8003f3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	441a      	add	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	441a      	add	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d809      	bhi.n	80022b8 <PCD_WriteEmptyTxFifo+0xde>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d203      	bcs.n	80022b8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1bf      	bne.n	8002238 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d811      	bhi.n	80022e8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	2201      	movs	r2, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	43db      	mvns	r3, r3
 80022de:	6939      	ldr	r1, [r7, #16]
 80022e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80022e4:	4013      	ands	r3, r2
 80022e6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	333c      	adds	r3, #60	@ 0x3c
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	799b      	ldrb	r3, [r3, #6]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d17b      	bne.n	8002422 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4a61      	ldr	r2, [pc, #388]	@ (80024bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f240 80b9 	bls.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80b3 	beq.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	e0a7      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	6093      	str	r3, [r2, #8]
 800237c:	e098      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8093 	bne.w	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a4b      	ldr	r2, [pc, #300]	@ (80024bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d90f      	bls.n	80023b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ae:	6093      	str	r3, [r2, #8]
 80023b0:	e07e      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	3304      	adds	r3, #4
 80023c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	0159      	lsls	r1, r3, #5
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d114      	bne.n	8002414 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023fc:	461a      	mov	r2, r3
 80023fe:	2101      	movs	r1, #1
 8002400:	f002 f832 	bl	8004468 <USB_EP0_OutStart>
 8002404:	e006      	b.n	8002414 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	441a      	add	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f012 febc 	bl	8015198 <HAL_PCD_DataOutStageCallback>
 8002420:	e046      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4a26      	ldr	r2, [pc, #152]	@ (80024c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d124      	bne.n	8002474 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002440:	461a      	mov	r2, r3
 8002442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002446:	6093      	str	r3, [r2, #8]
 8002448:	e032      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2320      	movs	r3, #32
 8002464:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f012 fe93 	bl	8015198 <HAL_PCD_DataOutStageCallback>
 8002472:	e01d      	b.n	80024b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800249c:	461a      	mov	r2, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	f001 ffe2 	bl	8004468 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f012 fe74 	bl	8015198 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	4f54300a 	.word	0x4f54300a
 80024c0:	4f54310a 	.word	0x4f54310a

080024c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	333c      	adds	r3, #60	@ 0x3c
 80024dc:	3304      	adds	r3, #4
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a15      	ldr	r2, [pc, #84]	@ (800254c <PCD_EP_OutSetupPacket_int+0x88>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d90e      	bls.n	8002518 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002510:	461a      	mov	r2, r3
 8002512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002516:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f012 fe2b 	bl	8015174 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <PCD_EP_OutSetupPacket_int+0x88>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d90c      	bls.n	8002540 <PCD_EP_OutSetupPacket_int+0x7c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	799b      	ldrb	r3, [r3, #6]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002538:	461a      	mov	r2, r3
 800253a:	2101      	movs	r1, #1
 800253c:	f001 ff94 	bl	8004468 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	4f54300a 	.word	0x4f54300a

08002550 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	4613      	mov	r3, r2
 800255e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800256e:	883b      	ldrh	r3, [r7, #0]
 8002570:	0419      	lsls	r1, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	430a      	orrs	r2, r1
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28
 800257c:	e028      	b.n	80025d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4413      	add	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e00d      	b.n	80025ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	3340      	adds	r3, #64	@ 0x40
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4413      	add	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d3ec      	bcc.n	8002592 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025b8:	883b      	ldrh	r3, [r7, #0]
 80025ba:	0418      	lsls	r0, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4302      	orrs	r2, r0
 80025c8:	3340      	adds	r3, #64	@ 0x40
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e267      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b7e      	ldr	r3, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e242      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6f      	ldr	r2, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b69      	ldr	r3, [pc, #420]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fa58 	bl	8000b84 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fa54 	bl	8000b84 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e207      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa44 	bl	8000b84 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fa40 	bl	8000b84 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f3      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c7      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe f9f9 	bl	8000b84 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe f9f5 	bl	8000b84 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a8      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe f9d8 	bl	8000b84 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe f9d4 	bl	8000b84 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e187      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe f9b8 	bl	8000b84 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe f9b4 	bl	8000b84 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e167      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe f9a1 	bl	8000b84 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe f99d 	bl	8000b84 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e150      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b81      	ldr	r3, [pc, #516]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7d      	ldr	r3, [pc, #500]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a7c      	ldr	r2, [pc, #496]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b74      	ldr	r3, [pc, #464]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe f95d 	bl	8000b84 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe f959 	bl	8000b84 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e10c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ea>
 80028f4:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x30c>
 800290a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a54      	ldr	r2, [pc, #336]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe f91e 	bl	8000b84 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7fe f91a 	bl	8000b84 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0cb      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x334>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe f908 	bl	8000b84 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe f904 	bl	8000b84 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0b5      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d05c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d141      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe f8d8 	bl	8000b84 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe f8d4 	bl	8000b84 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e087      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe f8ad 	bl	8000b84 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe f8a9 	bl	8000b84 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e05c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x416>
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe f896 	bl	8000b84 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe f892 	bl	8000b84 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e045      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
 8002a7a:	e03d      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e038      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d121      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fd ffc4 	bl	8000b84 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fd ffc0 	bl	8000b84 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd ff24 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08019610 	.word	0x08019610
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b094      	sub	sp, #80	@ 0x50
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80e1 	bhi.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e0db      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b73      	ldr	r3, [pc, #460]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0c:	e0db      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b73      	ldr	r3, [pc, #460]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x208>)
 8002d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d12:	e0d8      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d3e:	2300      	movs	r3, #0
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d46:	4622      	mov	r2, r4
 8002d48:	462b      	mov	r3, r5
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4621      	mov	r1, r4
 8002d60:	1a51      	subs	r1, r2, r1
 8002d62:	6139      	str	r1, [r7, #16]
 8002d64:	4629      	mov	r1, r5
 8002d66:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d82:	4651      	mov	r1, sl
 8002d84:	018a      	lsls	r2, r1, #6
 8002d86:	4651      	mov	r1, sl
 8002d88:	ebb2 0801 	subs.w	r8, r2, r1
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002da6:	4690      	mov	r8, r2
 8002da8:	4699      	mov	r9, r3
 8002daa:	4623      	mov	r3, r4
 8002dac:	eb18 0303 	adds.w	r3, r8, r3
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	462b      	mov	r3, r5
 8002db4:	eb49 0303 	adc.w	r3, r9, r3
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	024b      	lsls	r3, r1, #9
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	024a      	lsls	r2, r1, #9
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dda:	2200      	movs	r2, #0
 8002ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002de4:	f7fd fa5c 	bl	80002a0 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df0:	e058      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	464b      	mov	r3, r9
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	0159      	lsls	r1, r3, #5
 8002e1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e1e:	0150      	lsls	r0, r2, #5
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4641      	mov	r1, r8
 8002e26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e44:	ebb2 040a 	subs.w	r4, r2, sl
 8002e48:	eb63 050b 	sbc.w	r5, r3, fp
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	00eb      	lsls	r3, r5, #3
 8002e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e5a:	00e2      	lsls	r2, r4, #3
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	461d      	mov	r5, r3
 8002e60:	4643      	mov	r3, r8
 8002e62:	18e3      	adds	r3, r4, r3
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	464b      	mov	r3, r9
 8002e68:	eb45 0303 	adc.w	r3, r5, r3
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	028b      	lsls	r3, r1, #10
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e84:	4621      	mov	r1, r4
 8002e86:	028a      	lsls	r2, r1, #10
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	61fa      	str	r2, [r7, #28]
 8002e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e98:	f7fd fa02 	bl	80002a0 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3750      	adds	r7, #80	@ 0x50
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000

08002ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ef8:	b084      	sub	sp, #16
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	f107 001c 	add.w	r0, r7, #28
 8002f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d123      	bne.n	8002f5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 fae8 	bl	8004524 <USB_CoreReset>
 8002f54:	4603      	mov	r3, r0
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	e01b      	b.n	8002f92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f001 fadc 	bl	8004524 <USB_CoreReset>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f84:	e005      	b.n	8002f92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f92:	7fbb      	ldrb	r3, [r7, #30]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10b      	bne.n	8002fb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f043 0206 	orr.w	r2, r3, #6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fbc:	b004      	add	sp, #16
 8002fbe:	4770      	bx	lr

08002fc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d165      	bne.n	80030a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4a41      	ldr	r2, [pc, #260]	@ (80030dc <USB_SetTurnaroundTime+0x11c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d906      	bls.n	8002fea <USB_SetTurnaroundTime+0x2a>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4a40      	ldr	r2, [pc, #256]	@ (80030e0 <USB_SetTurnaroundTime+0x120>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d202      	bcs.n	8002fea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e062      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a3c      	ldr	r2, [pc, #240]	@ (80030e0 <USB_SetTurnaroundTime+0x120>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d306      	bcc.n	8003000 <USB_SetTurnaroundTime+0x40>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <USB_SetTurnaroundTime+0x124>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d202      	bcs.n	8003000 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ffa:	230e      	movs	r3, #14
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e057      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a38      	ldr	r2, [pc, #224]	@ (80030e4 <USB_SetTurnaroundTime+0x124>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d306      	bcc.n	8003016 <USB_SetTurnaroundTime+0x56>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4a37      	ldr	r2, [pc, #220]	@ (80030e8 <USB_SetTurnaroundTime+0x128>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d202      	bcs.n	8003016 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003010:	230d      	movs	r3, #13
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e04c      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4a33      	ldr	r2, [pc, #204]	@ (80030e8 <USB_SetTurnaroundTime+0x128>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d306      	bcc.n	800302c <USB_SetTurnaroundTime+0x6c>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <USB_SetTurnaroundTime+0x12c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003026:	230c      	movs	r3, #12
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e041      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4a2f      	ldr	r2, [pc, #188]	@ (80030ec <USB_SetTurnaroundTime+0x12c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d906      	bls.n	8003042 <USB_SetTurnaroundTime+0x82>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4a2e      	ldr	r2, [pc, #184]	@ (80030f0 <USB_SetTurnaroundTime+0x130>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d802      	bhi.n	8003042 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800303c:	230b      	movs	r3, #11
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e036      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4a2a      	ldr	r2, [pc, #168]	@ (80030f0 <USB_SetTurnaroundTime+0x130>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d906      	bls.n	8003058 <USB_SetTurnaroundTime+0x98>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4a29      	ldr	r2, [pc, #164]	@ (80030f4 <USB_SetTurnaroundTime+0x134>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d802      	bhi.n	8003058 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003052:	230a      	movs	r3, #10
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e02b      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4a26      	ldr	r2, [pc, #152]	@ (80030f4 <USB_SetTurnaroundTime+0x134>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d906      	bls.n	800306e <USB_SetTurnaroundTime+0xae>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4a25      	ldr	r2, [pc, #148]	@ (80030f8 <USB_SetTurnaroundTime+0x138>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d202      	bcs.n	800306e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003068:	2309      	movs	r3, #9
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e020      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <USB_SetTurnaroundTime+0x138>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d306      	bcc.n	8003084 <USB_SetTurnaroundTime+0xc4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4a20      	ldr	r2, [pc, #128]	@ (80030fc <USB_SetTurnaroundTime+0x13c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800307e:	2308      	movs	r3, #8
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e015      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <USB_SetTurnaroundTime+0x13c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d906      	bls.n	800309a <USB_SetTurnaroundTime+0xda>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <USB_SetTurnaroundTime+0x140>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d202      	bcs.n	800309a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003094:	2307      	movs	r3, #7
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e00a      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800309a:	2306      	movs	r3, #6
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e007      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80030a6:	2309      	movs	r3, #9
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e001      	b.n	80030b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80030ac:	2309      	movs	r3, #9
 80030ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	371c      	adds	r7, #28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	00d8acbf 	.word	0x00d8acbf
 80030e0:	00e4e1c0 	.word	0x00e4e1c0
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	01067380 	.word	0x01067380
 80030ec:	011a499f 	.word	0x011a499f
 80030f0:	01312cff 	.word	0x01312cff
 80030f4:	014ca43f 	.word	0x014ca43f
 80030f8:	016e3600 	.word	0x016e3600
 80030fc:	01a6ab1f 	.word	0x01a6ab1f
 8003100:	01e84800 	.word	0x01e84800

08003104 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d115      	bne.n	8003196 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003176:	200a      	movs	r0, #10
 8003178:	f7fd fd10 	bl	8000b9c <HAL_Delay>
      ms += 10U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	330a      	adds	r3, #10
 8003180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f001 f93f 	bl	8004406 <USB_GetMode>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d01e      	beq.n	80031cc <USB_SetCurrentMode+0x84>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2bc7      	cmp	r3, #199	@ 0xc7
 8003192:	d9f0      	bls.n	8003176 <USB_SetCurrentMode+0x2e>
 8003194:	e01a      	b.n	80031cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d115      	bne.n	80031c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80031a8:	200a      	movs	r0, #10
 80031aa:	f7fd fcf7 	bl	8000b9c <HAL_Delay>
      ms += 10U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	330a      	adds	r3, #10
 80031b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f001 f926 	bl	8004406 <USB_GetMode>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <USB_SetCurrentMode+0x84>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80031c4:	d9f0      	bls.n	80031a8 <USB_SetCurrentMode+0x60>
 80031c6:	e001      	b.n	80031cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e005      	b.n	80031d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80031d0:	d101      	bne.n	80031d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031e0:	b084      	sub	sp, #16
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80031ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e009      	b.n	8003214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3340      	adds	r3, #64	@ 0x40
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	2200      	movs	r2, #0
 800320c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0e      	cmp	r3, #14
 8003218:	d9f2      	bls.n	8003200 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800321a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11c      	bne.n	800325c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003252:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
 800325a:	e00b      	b.n	8003274 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003280:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10d      	bne.n	80032a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f968 	bl	8003568 <USB_SetDevSpeed>
 8003298:	e008      	b.n	80032ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800329a:	2101      	movs	r1, #1
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f963 	bl	8003568 <USB_SetDevSpeed>
 80032a2:	e003      	b.n	80032ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032a4:	2103      	movs	r1, #3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f95e 	bl	8003568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032ac:	2110      	movs	r1, #16
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8fa 	bl	80034a8 <USB_FlushTxFifo>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f924 	bl	800350c <USB_FlushRxFifo>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032e0:	461a      	mov	r2, r3
 80032e2:	2300      	movs	r3, #0
 80032e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ec:	461a      	mov	r2, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e043      	b.n	8003380 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800330a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800330e:	d118      	bne.n	8003342 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003322:	461a      	mov	r2, r3
 8003324:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e013      	b.n	8003354 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003338:	461a      	mov	r2, r3
 800333a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e008      	b.n	8003354 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003360:	461a      	mov	r2, r3
 8003362:	2300      	movs	r3, #0
 8003364:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003372:	461a      	mov	r2, r3
 8003374:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003378:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003384:	461a      	mov	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4293      	cmp	r3, r2
 800338a:	d3b5      	bcc.n	80032f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e043      	b.n	800341a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033a8:	d118      	bne.n	80033dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e013      	b.n	80033ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e008      	b.n	80033ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003412:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3301      	adds	r3, #1
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800341e:	461a      	mov	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4293      	cmp	r3, r2
 8003424:	d3b5      	bcc.n	8003392 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003438:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003446:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f043 0210 	orr.w	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <USB_DevInit+0x2c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003468:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f043 0208 	orr.w	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800347c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr
 80034a4:	803c3800 	.word	0x803c3800

080034a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034c2:	d901      	bls.n	80034c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e01b      	b.n	8003500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	daf2      	bge.n	80034b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034ec:	d901      	bls.n	80034f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e006      	b.n	8003500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d0f0      	beq.n	80034e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003524:	d901      	bls.n	800352a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e018      	b.n	800355c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	daf2      	bge.n	8003518 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2210      	movs	r2, #16
 800353a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003548:	d901      	bls.n	800354e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e006      	b.n	800355c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b10      	cmp	r3, #16
 8003558:	d0f0      	beq.n	800353c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0306 	and.w	r3, r3, #6
 80035b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
 80035be:	e00a      	b.n	80035d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d002      	beq.n	80035cc <USB_GetDevSpeed+0x32>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d102      	bne.n	80035d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80035cc:	2302      	movs	r3, #2
 80035ce:	75fb      	strb	r3, [r7, #23]
 80035d0:	e001      	b.n	80035d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80035d2:	230f      	movs	r3, #15
 80035d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d13a      	bne.n	8003676 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800361e:	4313      	orrs	r3, r2
 8003620:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d155      	bne.n	80036e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	791b      	ldrb	r3, [r3, #4]
 8003652:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003654:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	059b      	lsls	r3, r3, #22
 800365a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800365c:	4313      	orrs	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800366e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e036      	b.n	80036e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	2101      	movs	r1, #1
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003694:	4313      	orrs	r3, r2
 8003696:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11a      	bne.n	80036e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	791b      	ldrb	r3, [r3, #4]
 80036c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80036ca:	430b      	orrs	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	0151      	lsls	r1, r2, #5
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	440a      	add	r2, r1
 80036d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d161      	bne.n	80037d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003726:	d11f      	bne.n	8003768 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	0151      	lsls	r1, r2, #5
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	440a      	add	r2, r1
 800373e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003746:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003788:	4013      	ands	r3, r2
 800378a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037ac:	4013      	ands	r3, r2
 80037ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0159      	lsls	r1, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	440b      	add	r3, r1
 80037c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ca:	4619      	mov	r1, r3
 80037cc:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <USB_DeactivateEndpoint+0x1b0>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
 80037d2:	e060      	b.n	8003896 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ea:	d11f      	bne.n	800382c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	440a      	add	r2, r1
 8003802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003806:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800380a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	440a      	add	r2, r1
 8003822:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800382a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	43db      	mvns	r3, r3
 8003846:	68f9      	ldr	r1, [r7, #12]
 8003848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800384c:	4013      	ands	r3, r2
 800384e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	43db      	mvns	r3, r3
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003870:	4013      	ands	r3, r2
 8003872:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	0159      	lsls	r1, r3, #5
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	440b      	add	r3, r1
 800388a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388e:	4619      	mov	r1, r3
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <USB_DeactivateEndpoint+0x1b4>)
 8003892:	4013      	ands	r3, r2
 8003894:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	ec337800 	.word	0xec337800
 80038a8:	eff37800 	.word	0xeff37800

080038ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	@ 0x28
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 817f 	bne.w	8003bcc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d132      	bne.n	800393c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80038f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80038f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	440a      	add	r2, r1
 8003910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003914:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003934:	0cdb      	lsrs	r3, r3, #19
 8003936:	04db      	lsls	r3, r3, #19
 8003938:	6113      	str	r3, [r2, #16]
 800393a:	e097      	b.n	8003a6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	0151      	lsls	r1, r2, #5
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	440a      	add	r2, r1
 8003952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003956:	0cdb      	lsrs	r3, r3, #19
 8003958:	04db      	lsls	r3, r3, #19
 800395a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	0151      	lsls	r1, r2, #5
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	440a      	add	r2, r1
 8003972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003976:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800397a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800397e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11a      	bne.n	80039bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d903      	bls.n	800399a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	0151      	lsls	r1, r2, #5
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	440a      	add	r2, r1
 80039b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039b8:	6113      	str	r3, [r2, #16]
 80039ba:	e044      	b.n	8003a46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	1e5a      	subs	r2, r3, #1
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	8afb      	ldrh	r3, [r7, #22]
 80039e2:	04d9      	lsls	r1, r3, #19
 80039e4:	4ba4      	ldr	r3, [pc, #656]	@ (8003c78 <USB_EPStartXfer+0x3cc>)
 80039e6:	400b      	ands	r3, r1
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	0148      	lsls	r0, r1, #5
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	4401      	add	r1, r0
 80039f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	791b      	ldrb	r3, [r3, #4]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d122      	bne.n	8003a46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	075b      	lsls	r3, r3, #29
 8003a32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	0148      	lsls	r0, r1, #5
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	4401      	add	r1, r0
 8003a3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a42:	4313      	orrs	r3, r2
 8003a44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	0148      	lsls	r0, r1, #5
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	4401      	add	r1, r0
 8003a64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d14b      	bne.n	8003b0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	791b      	ldrb	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d128      	bne.n	8003ae8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d110      	bne.n	8003ac8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	0151      	lsls	r1, r2, #5
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	440a      	add	r2, r1
 8003abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e00f      	b.n	8003ae8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e166      	b.n	8003dd8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	791b      	ldrb	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d015      	beq.n	8003b5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 814e 	beq.w	8003dd8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	69f9      	ldr	r1, [r7, #28]
 8003b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8003b5c:	e13c      	b.n	8003dd8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d110      	bne.n	8003b90 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	0151      	lsls	r1, r2, #5
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	440a      	add	r2, r1
 8003b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00f      	b.n	8003bb0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	68d9      	ldr	r1, [r3, #12]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	b298      	uxth	r0, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f9b9 	bl	8003f3c <USB_WritePacket>
 8003bca:	e105      	b.n	8003dd8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003be6:	0cdb      	lsrs	r3, r3, #19
 8003be8:	04db      	lsls	r3, r3, #19
 8003bea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003c0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003c0e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d132      	bne.n	8003c7c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	0148      	lsls	r0, r1, #5
 8003c48:	69f9      	ldr	r1, [r7, #28]
 8003c4a:	4401      	add	r1, r0
 8003c4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003c50:	4313      	orrs	r3, r2
 8003c52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c72:	6113      	str	r3, [r2, #16]
 8003c74:	e062      	b.n	8003d3c <USB_EPStartXfer+0x490>
 8003c76:	bf00      	nop
 8003c78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d123      	bne.n	8003ccc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	0148      	lsls	r0, r1, #5
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	4401      	add	r1, r0
 8003ca2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cc8:	6113      	str	r3, [r2, #16]
 8003cca:	e037      	b.n	8003d3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	8afa      	ldrh	r2, [r7, #22]
 8003ce8:	fb03 f202 	mul.w	r2, r3, r2
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	04d9      	lsls	r1, r3, #19
 8003d02:	4b38      	ldr	r3, [pc, #224]	@ (8003de4 <USB_EPStartXfer+0x538>)
 8003d04:	400b      	ands	r3, r1
 8003d06:	69b9      	ldr	r1, [r7, #24]
 8003d08:	0148      	lsls	r0, r1, #5
 8003d0a:	69f9      	ldr	r1, [r7, #28]
 8003d0c:	4401      	add	r1, r0
 8003d0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	0148      	lsls	r0, r1, #5
 8003d30:	69f9      	ldr	r1, [r7, #28]
 8003d32:	4401      	add	r1, r0
 8003d34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10d      	bne.n	8003d5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	68d9      	ldr	r1, [r3, #12]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	791b      	ldrb	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d128      	bne.n	8003db8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d110      	bne.n	8003d98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e00f      	b.n	8003db8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	1ff80000 	.word	0x1ff80000

08003de8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d14a      	bne.n	8003e9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1e:	f040 8086 	bne.w	8003f2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d902      	bls.n	8003e80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e7e:	e056      	b.n	8003f2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e98:	d0e7      	beq.n	8003e6a <USB_EPStopXfer+0x82>
 8003e9a:	e048      	b.n	8003f2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eb4:	d13b      	bne.n	8003f2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ed8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	0151      	lsls	r1, r2, #5
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003efc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d902      	bls.n	8003f14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
          break;
 8003f12:	e00c      	b.n	8003f2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f2c:	d0e7      	beq.n	8003efe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	71fb      	strb	r3, [r7, #7]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d123      	bne.n	8003faa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f62:	88bb      	ldrh	r3, [r7, #4]
 8003f64:	3303      	adds	r3, #3
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e018      	b.n	8003fa2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	031a      	lsls	r2, r3, #12
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	3301      	adds	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3e2      	bcc.n	8003f70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3724      	adds	r7, #36	@ 0x24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b08b      	sub	sp, #44	@ 0x2c
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	e014      	b.n	800400e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	3301      	adds	r3, #1
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	3301      	adds	r3, #1
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	3301      	adds	r3, #1
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3e6      	bcc.n	8003fe4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004016:	8bfb      	ldrh	r3, [r7, #30]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01e      	beq.n	800405a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004026:	461a      	mov	r2, r3
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	701a      	strb	r2, [r3, #0]
      i++;
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	3301      	adds	r3, #1
 8004046:	623b      	str	r3, [r7, #32]
      pDest++;
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	3301      	adds	r3, #1
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800404e:	8bfb      	ldrh	r3, [r7, #30]
 8004050:	3b01      	subs	r3, #1
 8004052:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004054:	8bfb      	ldrh	r3, [r7, #30]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1ea      	bne.n	8004030 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800405c:	4618      	mov	r0, r3
 800405e:	372c      	adds	r7, #44	@ 0x2c
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d12c      	bne.n	80040de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db12      	blt.n	80040bc <USB_EPSetStall+0x54>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e02b      	b.n	8004136 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db12      	blt.n	8004116 <USB_EPSetStall+0xae>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004110:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004114:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004130:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004134:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d128      	bne.n	80041b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800417a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800417e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	791b      	ldrb	r3, [r3, #4]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d003      	beq.n	8004190 <USB_EPClearStall+0x4c>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	791b      	ldrb	r3, [r3, #4]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d138      	bne.n	8004202 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	e027      	b.n	8004202 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	791b      	ldrb	r3, [r3, #4]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d003      	beq.n	80041e2 <USB_EPClearStall+0x9e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	791b      	ldrb	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d10f      	bne.n	8004202 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004200:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800422e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004232:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428a:	f023 0302 	bic.w	r3, r3, #2
 800428e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042b8:	f023 0303 	bic.w	r3, r3, #3
 80042bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042f8:	68fb      	ldr	r3, [r7, #12]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	0c1b      	lsrs	r3, r3, #16
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	b29b      	uxth	r3, r3
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800439c:	68bb      	ldr	r3, [r7, #8]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	01db      	lsls	r3, r3, #7
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043f8:	68bb      	ldr	r3, [r7, #8]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0301 	and.w	r3, r3, #1
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800443c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004440:	f023 0307 	bic.w	r3, r3, #7
 8004444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	460b      	mov	r3, r1
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	333c      	adds	r3, #60	@ 0x3c
 800447e:	3304      	adds	r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4a26      	ldr	r2, [pc, #152]	@ (8004520 <USB_EP0_OutStart+0xb8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d90a      	bls.n	80044a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800449c:	d101      	bne.n	80044a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e037      	b.n	8004512 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d0:	f043 0318 	orr.w	r3, r3, #24
 80044d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80044e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10f      	bne.n	8004510 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800450a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800450e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	4f54300a 	.word	0x4f54300a

08004524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800453c:	d901      	bls.n	8004542 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e01b      	b.n	800457a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	daf2      	bge.n	8004530 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004566:	d901      	bls.n	800456c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e006      	b.n	800457a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d0f0      	beq.n	800455a <USB_CoreReset+0x36>

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	4613      	mov	r3, r2
 8004592:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800459a:	2303      	movs	r3, #3
 800459c:	e01f      	b.n	80045de <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	79fa      	ldrb	r2, [r7, #7]
 80045d0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f010 fec0 	bl	8015358 <USBD_LL_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]

  return ret;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e025      	b.n	800464a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	32ae      	adds	r2, #174	@ 0xae
 8004610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00f      	beq.n	800463a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	32ae      	adds	r2, #174	@ 0xae
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	f107 020e 	add.w	r2, r7, #14
 800462e:	4610      	mov	r0, r2
 8004630:	4798      	blx	r3
 8004632:	4602      	mov	r2, r0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f010 fec8 	bl	80153f0 <USBD_LL_Start>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004672:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	4611      	mov	r1, r2
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	4798      	blx	r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f933 	bl	800596a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2b02      	cmp	r3, #2
 8004726:	d01a      	beq.n	800475e <USBD_LL_SetupStage+0x72>
 8004728:	2b02      	cmp	r3, #2
 800472a:	d822      	bhi.n	8004772 <USBD_LL_SetupStage+0x86>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <USBD_LL_SetupStage+0x4a>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00a      	beq.n	800474a <USBD_LL_SetupStage+0x5e>
 8004734:	e01d      	b.n	8004772 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fb64 	bl	8004e0c <USBD_StdDevReq>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
      break;
 8004748:	e020      	b.n	800478c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fbcc 	bl	8004ef0 <USBD_StdItfReq>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]
      break;
 800475c:	e016      	b.n	800478c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fc2e 	bl	8004fc8 <USBD_StdEPReq>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e00c      	b.n	800478c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004778:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f010 fe95 	bl	80154b0 <USBD_LL_StallEP>
 8004786:	4603      	mov	r3, r0
 8004788:	73fb      	strb	r3, [r7, #15]
      break;
 800478a:	bf00      	nop
  }

  return ret;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	460b      	mov	r3, r1
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d16e      	bne.n	800488c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80047b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80047bc:	2b03      	cmp	r3, #3
 80047be:	f040 8098 	bne.w	80048f2 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d913      	bls.n	80047f6 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf28      	it	cs
 80047e8:	4613      	movcs	r3, r2
 80047ea:	461a      	mov	r2, r3
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f001 f9bb 	bl	8005b6a <USBD_CtlContinueRx>
 80047f4:	e07d      	b.n	80048f2 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2b02      	cmp	r3, #2
 8004802:	d014      	beq.n	800482e <USBD_LL_DataOutStage+0x98>
 8004804:	2b02      	cmp	r3, #2
 8004806:	d81d      	bhi.n	8004844 <USBD_LL_DataOutStage+0xae>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <USBD_LL_DataOutStage+0x7c>
 800480c:	2b01      	cmp	r3, #1
 800480e:	d003      	beq.n	8004818 <USBD_LL_DataOutStage+0x82>
 8004810:	e018      	b.n	8004844 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	75bb      	strb	r3, [r7, #22]
            break;
 8004816:	e018      	b.n	800484a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800481e:	b2db      	uxtb	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa64 	bl	8004cf0 <USBD_CoreFindIF>
 8004828:	4603      	mov	r3, r0
 800482a:	75bb      	strb	r3, [r7, #22]
            break;
 800482c:	e00d      	b.n	800484a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004834:	b2db      	uxtb	r3, r3
 8004836:	4619      	mov	r1, r3
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fa66 	bl	8004d0a <USBD_CoreFindEP>
 800483e:	4603      	mov	r3, r0
 8004840:	75bb      	strb	r3, [r7, #22]
            break;
 8004842:	e002      	b.n	800484a <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	75bb      	strb	r3, [r7, #22]
            break;
 8004848:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800484a:	7dbb      	ldrb	r3, [r7, #22]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d119      	bne.n	8004884 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b03      	cmp	r3, #3
 800485a:	d113      	bne.n	8004884 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800485c:	7dba      	ldrb	r2, [r7, #22]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	32ae      	adds	r2, #174	@ 0xae
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800486c:	7dba      	ldrb	r2, [r7, #22]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004874:	7dba      	ldrb	r2, [r7, #22]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	32ae      	adds	r2, #174	@ 0xae
 800487a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f001 f981 	bl	8005b8c <USBD_CtlSendStatus>
 800488a:	e032      	b.n	80048f2 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800488c:	7afb      	ldrb	r3, [r7, #11]
 800488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fa37 	bl	8004d0a <USBD_CoreFindEP>
 800489c:	4603      	mov	r3, r0
 800489e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048a0:	7dbb      	ldrb	r3, [r7, #22]
 80048a2:	2bff      	cmp	r3, #255	@ 0xff
 80048a4:	d025      	beq.n	80048f2 <USBD_LL_DataOutStage+0x15c>
 80048a6:	7dbb      	ldrb	r3, [r7, #22]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d122      	bne.n	80048f2 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d117      	bne.n	80048e8 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80048b8:	7dba      	ldrb	r2, [r7, #22]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	32ae      	adds	r2, #174	@ 0xae
 80048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80048c8:	7dba      	ldrb	r2, [r7, #22]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80048d0:	7dba      	ldrb	r2, [r7, #22]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	32ae      	adds	r2, #174	@ 0xae
 80048d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	7afa      	ldrb	r2, [r7, #11]
 80048de:	4611      	mov	r1, r2
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	4798      	blx	r3
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	e000      	b.n	80048f4 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	460b      	mov	r3, r1
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d16f      	bne.n	80049f0 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3314      	adds	r3, #20
 8004914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800491c:	2b02      	cmp	r3, #2
 800491e:	d15a      	bne.n	80049d6 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d914      	bls.n	8004956 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	461a      	mov	r2, r3
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f001 f8e3 	bl	8005b0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004948:	2300      	movs	r3, #0
 800494a:	2200      	movs	r2, #0
 800494c:	2100      	movs	r1, #0
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f010 fe58 	bl	8015604 <USBD_LL_PrepareReceive>
 8004954:	e03f      	b.n	80049d6 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d11c      	bne.n	800499c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800496a:	429a      	cmp	r2, r3
 800496c:	d316      	bcc.n	800499c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004978:	429a      	cmp	r2, r3
 800497a:	d20f      	bcs.n	800499c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800497c:	2200      	movs	r2, #0
 800497e:	2100      	movs	r1, #0
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f8c4 	bl	8005b0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800498e:	2300      	movs	r3, #0
 8004990:	2200      	movs	r2, #0
 8004992:	2100      	movs	r1, #0
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f010 fe35 	bl	8015604 <USBD_LL_PrepareReceive>
 800499a:	e01c      	b.n	80049d6 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d10f      	bne.n	80049c8 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049c8:	2180      	movs	r1, #128	@ 0x80
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f010 fd70 	bl	80154b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f001 f8ee 	bl	8005bb2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d03a      	beq.n	8004a56 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fe42 	bl	800466a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80049ee:	e032      	b.n	8004a56 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80049f0:	7afb      	ldrb	r3, [r7, #11]
 80049f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	4619      	mov	r1, r3
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f985 	bl	8004d0a <USBD_CoreFindEP>
 8004a00:	4603      	mov	r3, r0
 8004a02:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	2bff      	cmp	r3, #255	@ 0xff
 8004a08:	d025      	beq.n	8004a56 <USBD_LL_DataInStage+0x15a>
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d122      	bne.n	8004a56 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d11c      	bne.n	8004a56 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004a1c:	7dfa      	ldrb	r2, [r7, #23]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	32ae      	adds	r2, #174	@ 0xae
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d014      	beq.n	8004a56 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004a2c:	7dfa      	ldrb	r2, [r7, #23]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004a34:	7dfa      	ldrb	r2, [r7, #23]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	32ae      	adds	r2, #174	@ 0xae
 8004a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	7afa      	ldrb	r2, [r7, #11]
 8004a42:	4611      	mov	r1, r2
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	4798      	blx	r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004a4c:	7dbb      	ldrb	r3, [r7, #22]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004a52:	7dbb      	ldrb	r3, [r7, #22]
 8004a54:	e000      	b.n	8004a58 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d014      	beq.n	8004ac6 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6852      	ldr	r2, [r2, #4]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ac6:	2340      	movs	r3, #64	@ 0x40
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f010 fcaa 	bl	8015426 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2240      	movs	r2, #64	@ 0x40
 8004ade:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ae2:	2340      	movs	r3, #64	@ 0x40
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	@ 0x80
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f010 fc9c 	bl	8015426 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	621a      	str	r2, [r3, #32]

  return ret;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d006      	beq.n	8004b46 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d106      	bne.n	8004b7e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d110      	bne.n	8004bc2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	32ae      	adds	r2, #174	@ 0xae
 8004be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e01c      	b.n	8004c28 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d115      	bne.n	8004c26 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	32ae      	adds	r2, #174	@ 0xae
 8004c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	32ae      	adds	r2, #174	@ 0xae
 8004c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	4611      	mov	r1, r2
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	32ae      	adds	r2, #174	@ 0xae
 8004c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e01c      	b.n	8004c8c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d115      	bne.n	8004c8a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	32ae      	adds	r2, #174	@ 0xae
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	32ae      	adds	r2, #174	@ 0xae
 8004c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	4611      	mov	r1, r2
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004cfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004d16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	885b      	ldrh	r3, [r3, #2]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d91f      	bls.n	8004d8a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004d50:	e013      	b.n	8004d7a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004d52:	f107 030a 	add.w	r3, r7, #10
 8004d56:	4619      	mov	r1, r3
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f000 f81b 	bl	8004d94 <USBD_GetNextDesc>
 8004d5e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b05      	cmp	r3, #5
 8004d66:	d108      	bne.n	8004d7a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	789b      	ldrb	r3, [r3, #2]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d008      	beq.n	8004d88 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	885b      	ldrh	r3, [r3, #2]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8e5      	bhi.n	8004d52 <USBD_GetEpDesc+0x2e>
 8004d86:	e000      	b.n	8004d8a <USBD_GetEpDesc+0x66>
          break;
 8004d88:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004d8a:	693b      	ldr	r3, [r7, #16]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	3301      	adds	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004dea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d005      	beq.n	8004e32 <USBD_StdDevReq+0x26>
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	d857      	bhi.n	8004eda <USBD_StdDevReq+0xce>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00f      	beq.n	8004e4e <USBD_StdDevReq+0x42>
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d153      	bne.n	8004eda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	32ae      	adds	r2, #174	@ 0xae
 8004e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e04a      	b.n	8004ee4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d83b      	bhi.n	8004ece <USBD_StdDevReq+0xc2>
 8004e56:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <USBD_StdDevReq+0x50>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004eb1 	.word	0x08004eb1
 8004e60:	08004ec5 	.word	0x08004ec5
 8004e64:	08004ecf 	.word	0x08004ecf
 8004e68:	08004ebb 	.word	0x08004ebb
 8004e6c:	08004ecf 	.word	0x08004ecf
 8004e70:	08004e8f 	.word	0x08004e8f
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004ecf 	.word	0x08004ecf
 8004e7c:	08004ea7 	.word	0x08004ea7
 8004e80:	08004e99 	.word	0x08004e99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa3c 	bl	8005304 <USBD_GetDescriptor>
          break;
 8004e8c:	e024      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fbc7 	bl	8005624 <USBD_SetAddress>
          break;
 8004e96:	e01f      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc06 	bl	80056ac <USBD_SetConfig>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8004ea4:	e018      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fca9 	bl	8005800 <USBD_GetConfig>
          break;
 8004eae:	e013      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fcda 	bl	800586c <USBD_GetStatus>
          break;
 8004eb8:	e00e      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fd09 	bl	80058d4 <USBD_SetFeature>
          break;
 8004ec2:	e009      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004ec4:	6839      	ldr	r1, [r7, #0]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fd2d 	bl	8005926 <USBD_ClrFeature>
          break;
 8004ecc:	e004      	b.n	8004ed8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fd84 	bl	80059de <USBD_CtlError>
          break;
 8004ed6:	bf00      	nop
      }
      break;
 8004ed8:	e004      	b.n	8004ee4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fd7e 	bl	80059de <USBD_CtlError>
      break;
 8004ee2:	bf00      	nop
  }

  return ret;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop

08004ef0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d005      	beq.n	8004f16 <USBD_StdItfReq+0x26>
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d852      	bhi.n	8004fb4 <USBD_StdItfReq+0xc4>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <USBD_StdItfReq+0x26>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d14e      	bne.n	8004fb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d840      	bhi.n	8004fa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	889b      	ldrh	r3, [r3, #4]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d836      	bhi.n	8004f9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	889b      	ldrh	r3, [r3, #4]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff feda 	bl	8004cf0 <USBD_CoreFindIF>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	2bff      	cmp	r3, #255	@ 0xff
 8004f44:	d01d      	beq.n	8004f82 <USBD_StdItfReq+0x92>
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11a      	bne.n	8004f82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8004f4c:	7bba      	ldrb	r2, [r7, #14]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	32ae      	adds	r2, #174	@ 0xae
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8004f5c:	7bba      	ldrb	r2, [r7, #14]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004f64:	7bba      	ldrb	r2, [r7, #14]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32ae      	adds	r2, #174	@ 0xae
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	6839      	ldr	r1, [r7, #0]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004f7a:	e004      	b.n	8004f86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004f80:	e001      	b.n	8004f86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d110      	bne.n	8004fb0 <USBD_StdItfReq+0xc0>
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10d      	bne.n	8004fb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fdf9 	bl	8005b8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004f9a:	e009      	b.n	8004fb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fd1d 	bl	80059de <USBD_CtlError>
          break;
 8004fa4:	e004      	b.n	8004fb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fd18 	bl	80059de <USBD_CtlError>
          break;
 8004fae:	e000      	b.n	8004fb2 <USBD_StdItfReq+0xc2>
          break;
 8004fb0:	bf00      	nop
      }
      break;
 8004fb2:	e004      	b.n	8004fbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fd11 	bl	80059de <USBD_CtlError>
      break;
 8004fbc:	bf00      	nop
  }

  return ret;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	889b      	ldrh	r3, [r3, #4]
 8004fda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d007      	beq.n	8004ff8 <USBD_StdEPReq+0x30>
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	f200 817f 	bhi.w	80052ec <USBD_StdEPReq+0x324>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02a      	beq.n	8005048 <USBD_StdEPReq+0x80>
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f040 817a 	bne.w	80052ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fe84 	bl	8004d0a <USBD_CoreFindEP>
 8005002:	4603      	mov	r3, r0
 8005004:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005006:	7b7b      	ldrb	r3, [r7, #13]
 8005008:	2bff      	cmp	r3, #255	@ 0xff
 800500a:	f000 8174 	beq.w	80052f6 <USBD_StdEPReq+0x32e>
 800500e:	7b7b      	ldrb	r3, [r7, #13]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 8170 	bne.w	80052f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005016:	7b7a      	ldrb	r2, [r7, #13]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800501e:	7b7a      	ldrb	r2, [r7, #13]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	32ae      	adds	r2, #174	@ 0xae
 8005024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8163 	beq.w	80052f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005030:	7b7a      	ldrb	r2, [r7, #13]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32ae      	adds	r2, #174	@ 0xae
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005046:	e156      	b.n	80052f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d008      	beq.n	8005062 <USBD_StdEPReq+0x9a>
 8005050:	2b03      	cmp	r3, #3
 8005052:	f300 8145 	bgt.w	80052e0 <USBD_StdEPReq+0x318>
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 809b 	beq.w	8005192 <USBD_StdEPReq+0x1ca>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d03c      	beq.n	80050da <USBD_StdEPReq+0x112>
 8005060:	e13e      	b.n	80052e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d002      	beq.n	8005074 <USBD_StdEPReq+0xac>
 800506e:	2b03      	cmp	r3, #3
 8005070:	d016      	beq.n	80050a0 <USBD_StdEPReq+0xd8>
 8005072:	e02c      	b.n	80050ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <USBD_StdEPReq+0xce>
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	2b80      	cmp	r3, #128	@ 0x80
 800507e:	d00a      	beq.n	8005096 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f010 fa13 	bl	80154b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800508a:	2180      	movs	r1, #128	@ 0x80
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f010 fa0f 	bl	80154b0 <USBD_LL_StallEP>
 8005092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005094:	e020      	b.n	80050d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fca0 	bl	80059de <USBD_CtlError>
              break;
 800509e:	e01b      	b.n	80050d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	885b      	ldrh	r3, [r3, #2]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10e      	bne.n	80050c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <USBD_StdEPReq+0xfe>
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	2b80      	cmp	r3, #128	@ 0x80
 80050b2:	d008      	beq.n	80050c6 <USBD_StdEPReq+0xfe>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	88db      	ldrh	r3, [r3, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f010 f9f5 	bl	80154b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fd60 	bl	8005b8c <USBD_CtlSendStatus>

              break;
 80050cc:	e004      	b.n	80050d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fc84 	bl	80059de <USBD_CtlError>
              break;
 80050d6:	bf00      	nop
          }
          break;
 80050d8:	e107      	b.n	80052ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d002      	beq.n	80050ec <USBD_StdEPReq+0x124>
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d016      	beq.n	8005118 <USBD_StdEPReq+0x150>
 80050ea:	e04b      	b.n	8005184 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <USBD_StdEPReq+0x146>
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	2b80      	cmp	r3, #128	@ 0x80
 80050f6:	d00a      	beq.n	800510e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80050f8:	7bbb      	ldrb	r3, [r7, #14]
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f010 f9d7 	bl	80154b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005102:	2180      	movs	r1, #128	@ 0x80
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f010 f9d3 	bl	80154b0 <USBD_LL_StallEP>
 800510a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800510c:	e040      	b.n	8005190 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fc64 	bl	80059de <USBD_CtlError>
              break;
 8005116:	e03b      	b.n	8005190 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	885b      	ldrh	r3, [r3, #2]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d136      	bne.n	800518e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f010 f9dd 	bl	80154ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fd29 	bl	8005b8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800513a:	7bbb      	ldrb	r3, [r7, #14]
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fde3 	bl	8004d0a <USBD_CoreFindEP>
 8005144:	4603      	mov	r3, r0
 8005146:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005148:	7b7b      	ldrb	r3, [r7, #13]
 800514a:	2bff      	cmp	r3, #255	@ 0xff
 800514c:	d01f      	beq.n	800518e <USBD_StdEPReq+0x1c6>
 800514e:	7b7b      	ldrb	r3, [r7, #13]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11c      	bne.n	800518e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005154:	7b7a      	ldrb	r2, [r7, #13]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800515c:	7b7a      	ldrb	r2, [r7, #13]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	32ae      	adds	r2, #174	@ 0xae
 8005162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d010      	beq.n	800518e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800516c:	7b7a      	ldrb	r2, [r7, #13]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	32ae      	adds	r2, #174	@ 0xae
 8005172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005182:	e004      	b.n	800518e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fc29 	bl	80059de <USBD_CtlError>
              break;
 800518c:	e000      	b.n	8005190 <USBD_StdEPReq+0x1c8>
              break;
 800518e:	bf00      	nop
          }
          break;
 8005190:	e0ab      	b.n	80052ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d002      	beq.n	80051a4 <USBD_StdEPReq+0x1dc>
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d032      	beq.n	8005208 <USBD_StdEPReq+0x240>
 80051a2:	e097      	b.n	80052d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051a4:	7bbb      	ldrb	r3, [r7, #14]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <USBD_StdEPReq+0x1f2>
 80051aa:	7bbb      	ldrb	r3, [r7, #14]
 80051ac:	2b80      	cmp	r3, #128	@ 0x80
 80051ae:	d004      	beq.n	80051ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fc13 	bl	80059de <USBD_CtlError>
                break;
 80051b8:	e091      	b.n	80052de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da0b      	bge.n	80051da <USBD_StdEPReq+0x212>
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	3310      	adds	r3, #16
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	3304      	adds	r3, #4
 80051d8:	e00b      	b.n	80051f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80051da:	7bbb      	ldrb	r3, [r7, #14]
 80051dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	3304      	adds	r3, #4
 80051f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2202      	movs	r2, #2
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fc69 	bl	8005ad8 <USBD_CtlSendData>
              break;
 8005206:	e06a      	b.n	80052de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da11      	bge.n	8005234 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3324      	adds	r3, #36	@ 0x24
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d117      	bne.n	800525a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800522a:	6839      	ldr	r1, [r7, #0]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fbd6 	bl	80059de <USBD_CtlError>
                  break;
 8005232:	e054      	b.n	80052de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fbc3 	bl	80059de <USBD_CtlError>
                  break;
 8005258:	e041      	b.n	80052de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800525a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800525e:	2b00      	cmp	r3, #0
 8005260:	da0b      	bge.n	800527a <USBD_StdEPReq+0x2b2>
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	3310      	adds	r3, #16
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	e00b      	b.n	8005292 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <USBD_StdEPReq+0x2d8>
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d103      	bne.n	80052a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e00e      	b.n	80052c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	4619      	mov	r1, r3
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f010 f93d 	bl	801552c <USBD_LL_IsStallEP>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e002      	b.n	80052c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2202      	movs	r2, #2
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc03 	bl	8005ad8 <USBD_CtlSendData>
              break;
 80052d2:	e004      	b.n	80052de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb81 	bl	80059de <USBD_CtlError>
              break;
 80052dc:	bf00      	nop
          }
          break;
 80052de:	e004      	b.n	80052ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fb7b 	bl	80059de <USBD_CtlError>
          break;
 80052e8:	bf00      	nop
      }
      break;
 80052ea:	e005      	b.n	80052f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fb75 	bl	80059de <USBD_CtlError>
      break;
 80052f4:	e000      	b.n	80052f8 <USBD_StdEPReq+0x330>
      break;
 80052f6:	bf00      	nop
  }

  return ret;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	885b      	ldrh	r3, [r3, #2]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	2b06      	cmp	r3, #6
 8005326:	f200 814f 	bhi.w	80055c8 <USBD_GetDescriptor+0x2c4>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <USBD_GetDescriptor+0x2c>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080055c9 	.word	0x080055c9
 8005340:	080055c9 	.word	0x080055c9
 8005344:	08005569 	.word	0x08005569
 8005348:	08005595 	.word	0x08005595
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	7c12      	ldrb	r2, [r2, #16]
 8005358:	f107 010a 	add.w	r1, r7, #10
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
 8005360:	6178      	str	r0, [r7, #20]
      break;
 8005362:	e139      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7c1b      	ldrb	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f107 020a 	add.w	r2, r7, #10
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
 800537c:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3301      	adds	r3, #1
 8005382:	2202      	movs	r2, #2
 8005384:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005386:	e127      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	f107 020a 	add.w	r2, r7, #10
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	2202      	movs	r2, #2
 80053a0:	701a      	strb	r2, [r3, #0]
      break;
 80053a2:	e119      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	885b      	ldrh	r3, [r3, #2]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	f200 80ac 	bhi.w	8005508 <USBD_GetDescriptor+0x204>
 80053b0:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <USBD_GetDescriptor+0xb4>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	08005405 	.word	0x08005405
 80053c0:	08005439 	.word	0x08005439
 80053c4:	0800546d 	.word	0x0800546d
 80053c8:	080054a1 	.word	0x080054a1
 80053cc:	080054d5 	.word	0x080054d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00b      	beq.n	80053f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	7c12      	ldrb	r2, [r2, #16]
 80053e8:	f107 010a 	add.w	r1, r7, #10
 80053ec:	4610      	mov	r0, r2
 80053ee:	4798      	blx	r3
 80053f0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053f2:	e0b8      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 faf1 	bl	80059de <USBD_CtlError>
            err++;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	3301      	adds	r3, #1
 8005400:	74fb      	strb	r3, [r7, #19]
          break;
 8005402:	e0b0      	b.n	8005566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	7c12      	ldrb	r2, [r2, #16]
 800541c:	f107 010a 	add.w	r1, r7, #10
 8005420:	4610      	mov	r0, r2
 8005422:	4798      	blx	r3
 8005424:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005426:	e09e      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fad7 	bl	80059de <USBD_CtlError>
            err++;
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	3301      	adds	r3, #1
 8005434:	74fb      	strb	r3, [r7, #19]
          break;
 8005436:	e096      	b.n	8005566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	7c12      	ldrb	r2, [r2, #16]
 8005450:	f107 010a 	add.w	r1, r7, #10
 8005454:	4610      	mov	r0, r2
 8005456:	4798      	blx	r3
 8005458:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800545a:	e084      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fabd 	bl	80059de <USBD_CtlError>
            err++;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	3301      	adds	r3, #1
 8005468:	74fb      	strb	r3, [r7, #19]
          break;
 800546a:	e07c      	b.n	8005566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	7c12      	ldrb	r2, [r2, #16]
 8005484:	f107 010a 	add.w	r1, r7, #10
 8005488:	4610      	mov	r0, r2
 800548a:	4798      	blx	r3
 800548c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800548e:	e06a      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 faa3 	bl	80059de <USBD_CtlError>
            err++;
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	3301      	adds	r3, #1
 800549c:	74fb      	strb	r3, [r7, #19]
          break;
 800549e:	e062      	b.n	8005566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	7c12      	ldrb	r2, [r2, #16]
 80054b8:	f107 010a 	add.w	r1, r7, #10
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
 80054c0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054c2:	e050      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa89 	bl	80059de <USBD_CtlError>
            err++;
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	3301      	adds	r3, #1
 80054d0:	74fb      	strb	r3, [r7, #19]
          break;
 80054d2:	e048      	b.n	8005566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	7c12      	ldrb	r2, [r2, #16]
 80054ec:	f107 010a 	add.w	r1, r7, #10
 80054f0:	4610      	mov	r0, r2
 80054f2:	4798      	blx	r3
 80054f4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054f6:	e036      	b.n	8005566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa6f 	bl	80059de <USBD_CtlError>
            err++;
 8005500:	7cfb      	ldrb	r3, [r7, #19]
 8005502:	3301      	adds	r3, #1
 8005504:	74fb      	strb	r3, [r7, #19]
          break;
 8005506:	e02e      	b.n	8005566 <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e020      	b.n	8005554 <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	32ae      	adds	r2, #174	@ 0xae
 8005518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	2b00      	cmp	r3, #0
 8005520:	d015      	beq.n	800554e <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	32ae      	adds	r2, #174	@ 0xae
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	8852      	ldrh	r2, [r2, #2]
 800553a:	b2d1      	uxtb	r1, r2
 800553c:	f107 020a 	add.w	r2, r7, #10
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <USBD_GetDescriptor+0x25e>
              {
                continue;
 800554c:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	429a      	cmp	r2, r3
 800555e:	d3d8      	bcc.n	8005512 <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005560:	e000      	b.n	8005564 <USBD_GetDescriptor+0x260>
                break;
 8005562:	bf00      	nop
          break;
 8005564:	bf00      	nop
      }
      break;
 8005566:	e037      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7c1b      	ldrb	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005578:	f107 020a 	add.w	r2, r7, #10
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005582:	e029      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa29 	bl	80059de <USBD_CtlError>
        err++;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	3301      	adds	r3, #1
 8005590:	74fb      	strb	r3, [r7, #19]
      break;
 8005592:	e021      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	7c1b      	ldrb	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10d      	bne.n	80055b8 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	f107 020a 	add.w	r2, r7, #10
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	3301      	adds	r3, #1
 80055b2:	2207      	movs	r2, #7
 80055b4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055b6:	e00f      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa0f 	bl	80059de <USBD_CtlError>
        err++;
 80055c0:	7cfb      	ldrb	r3, [r7, #19]
 80055c2:	3301      	adds	r3, #1
 80055c4:	74fb      	strb	r3, [r7, #19]
      break;
 80055c6:	e007      	b.n	80055d8 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa07 	bl	80059de <USBD_CtlError>
      err++;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	3301      	adds	r3, #1
 80055d4:	74fb      	strb	r3, [r7, #19]
      break;
 80055d6:	bf00      	nop
  }

  if (err != 0U)
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11e      	bne.n	800561c <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	88db      	ldrh	r3, [r3, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00e      	beq.n	800560a <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	88da      	ldrh	r2, [r3, #6]
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bf28      	it	cs
 80055f6:	4613      	movcs	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	461a      	mov	r2, r3
 8005600:	6979      	ldr	r1, [r7, #20]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa68 	bl	8005ad8 <USBD_CtlSendData>
 8005608:	e009      	b.n	800561e <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f9e6 	bl	80059de <USBD_CtlError>
 8005612:	e004      	b.n	800561e <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fab9 	bl	8005b8c <USBD_CtlSendStatus>
 800561a:	e000      	b.n	800561e <USBD_GetDescriptor+0x31a>
    return;
 800561c:	bf00      	nop
  }
}
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	889b      	ldrh	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d131      	bne.n	800569a <USBD_SetAddress+0x76>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	88db      	ldrh	r3, [r3, #6]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d12d      	bne.n	800569a <USBD_SetAddress+0x76>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	885b      	ldrh	r3, [r3, #2]
 8005642:	2b7f      	cmp	r3, #127	@ 0x7f
 8005644:	d829      	bhi.n	800569a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	885b      	ldrh	r3, [r3, #2]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b03      	cmp	r3, #3
 800565c:	d104      	bne.n	8005668 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f9bc 	bl	80059de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005666:	e01d      	b.n	80056a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f00f ff85 	bl	8015584 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa86 	bl	8005b8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800568e:	e009      	b.n	80056a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005698:	e004      	b.n	80056a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f99e 	bl	80059de <USBD_CtlError>
  }
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	885b      	ldrh	r3, [r3, #2]
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	4b4e      	ldr	r3, [pc, #312]	@ (80057fc <USBD_SetConfig+0x150>)
 80056c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80056c4:	4b4d      	ldr	r3, [pc, #308]	@ (80057fc <USBD_SetConfig+0x150>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d905      	bls.n	80056d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f985 	bl	80059de <USBD_CtlError>
    return USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e08c      	b.n	80057f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d002      	beq.n	80056ea <USBD_SetConfig+0x3e>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d029      	beq.n	800573c <USBD_SetConfig+0x90>
 80056e8:	e075      	b.n	80057d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80056ea:	4b44      	ldr	r3, [pc, #272]	@ (80057fc <USBD_SetConfig+0x150>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80056f2:	4b42      	ldr	r3, [pc, #264]	@ (80057fc <USBD_SetConfig+0x150>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056fc:	4b3f      	ldr	r3, [pc, #252]	@ (80057fc <USBD_SetConfig+0x150>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fe ffbc 	bl	8004680 <USBD_SetClassConfig>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f962 	bl	80059de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005722:	e065      	b.n	80057f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa31 	bl	8005b8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2203      	movs	r2, #3
 800572e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005732:	e05d      	b.n	80057f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fa29 	bl	8005b8c <USBD_CtlSendStatus>
      break;
 800573a:	e059      	b.n	80057f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800573c:	4b2f      	ldr	r3, [pc, #188]	@ (80057fc <USBD_SetConfig+0x150>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d112      	bne.n	800576a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800574c:	4b2b      	ldr	r3, [pc, #172]	@ (80057fc <USBD_SetConfig+0x150>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005756:	4b29      	ldr	r3, [pc, #164]	@ (80057fc <USBD_SetConfig+0x150>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fe ffab 	bl	80046b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa12 	bl	8005b8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005768:	e042      	b.n	80057f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <USBD_SetConfig+0x150>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d02a      	beq.n	80057ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fe ff99 	bl	80046b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005786:	4b1d      	ldr	r3, [pc, #116]	@ (80057fc <USBD_SetConfig+0x150>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005790:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <USBD_SetConfig+0x150>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe ff72 	bl	8004680 <USBD_SetClassConfig>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00f      	beq.n	80057c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f918 	bl	80059de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fe ff7e 	bl	80046b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80057c4:	e014      	b.n	80057f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f9e0 	bl	8005b8c <USBD_CtlSendStatus>
      break;
 80057cc:	e010      	b.n	80057f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9dc 	bl	8005b8c <USBD_CtlSendStatus>
      break;
 80057d4:	e00c      	b.n	80057f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f900 	bl	80059de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80057de:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <USBD_SetConfig+0x150>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fe ff67 	bl	80046b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80057ea:	2303      	movs	r3, #3
 80057ec:	73fb      	strb	r3, [r7, #15]
      break;
 80057ee:	bf00      	nop
  }

  return ret;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200001dc 	.word	0x200001dc

08005800 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	88db      	ldrh	r3, [r3, #6]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d004      	beq.n	800581c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8e2 	bl	80059de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800581a:	e023      	b.n	8005864 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	dc02      	bgt.n	800582e <USBD_GetConfig+0x2e>
 8005828:	2b00      	cmp	r3, #0
 800582a:	dc03      	bgt.n	8005834 <USBD_GetConfig+0x34>
 800582c:	e015      	b.n	800585a <USBD_GetConfig+0x5a>
 800582e:	2b03      	cmp	r3, #3
 8005830:	d00b      	beq.n	800584a <USBD_GetConfig+0x4a>
 8005832:	e012      	b.n	800585a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3308      	adds	r3, #8
 800583e:	2201      	movs	r2, #1
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f948 	bl	8005ad8 <USBD_CtlSendData>
        break;
 8005848:	e00c      	b.n	8005864 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	2201      	movs	r2, #1
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f940 	bl	8005ad8 <USBD_CtlSendData>
        break;
 8005858:	e004      	b.n	8005864 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f8be 	bl	80059de <USBD_CtlError>
        break;
 8005862:	bf00      	nop
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800587c:	b2db      	uxtb	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	2b02      	cmp	r3, #2
 8005882:	d81e      	bhi.n	80058c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d004      	beq.n	8005896 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f8a5 	bl	80059de <USBD_CtlError>
        break;
 8005894:	e01a      	b.n	80058cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	330c      	adds	r3, #12
 80058b6:	2202      	movs	r2, #2
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f90c 	bl	8005ad8 <USBD_CtlSendData>
      break;
 80058c0:	e004      	b.n	80058cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f88a 	bl	80059de <USBD_CtlError>
      break;
 80058ca:	bf00      	nop
  }
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	885b      	ldrh	r3, [r3, #2]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f94c 	bl	8005b8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80058f4:	e013      	b.n	800591e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	885b      	ldrh	r3, [r3, #2]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d10b      	bne.n	8005916 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	889b      	ldrh	r3, [r3, #4]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b29b      	uxth	r3, r3
 8005906:	b2da      	uxtb	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f93c 	bl	8005b8c <USBD_CtlSendStatus>
}
 8005914:	e003      	b.n	800591e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f860 	bl	80059de <USBD_CtlError>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005936:	b2db      	uxtb	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	2b02      	cmp	r3, #2
 800593c:	d80b      	bhi.n	8005956 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	885b      	ldrh	r3, [r3, #2]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10c      	bne.n	8005960 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f91c 	bl	8005b8c <USBD_CtlSendStatus>
      }
      break;
 8005954:	e004      	b.n	8005960 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f840 	bl	80059de <USBD_CtlError>
      break;
 800595e:	e000      	b.n	8005962 <USBD_ClrFeature+0x3c>
      break;
 8005960:	bf00      	nop
  }
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fa19 	bl	8004dcc <SWAPBYTE>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fa0c 	bl	8004dcc <SWAPBYTE>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff f9ff 	bl	8004dcc <SWAPBYTE>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	80da      	strh	r2, [r3, #6]
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80059e8:	2180      	movs	r1, #128	@ 0x80
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f00f fd60 	bl	80154b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80059f0:	2100      	movs	r1, #0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f00f fd5c 	bl	80154b0 <USBD_LL_StallEP>
}
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d042      	beq.n	8005a9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005a1a:	6938      	ldr	r0, [r7, #16]
 8005a1c:	f000 f842 	bl	8005aa4 <USBD_GetLen>
 8005a20:	4603      	mov	r3, r0
 8005a22:	3301      	adds	r3, #1
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a2a:	d808      	bhi.n	8005a3e <USBD_GetString+0x3e>
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f000 f839 	bl	8005aa4 <USBD_GetLen>
 8005a32:	4603      	mov	r3, r0
 8005a34:	3301      	adds	r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	e001      	b.n	8005a42 <USBD_GetString+0x42>
 8005a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	3301      	adds	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	2203      	movs	r2, #3
 8005a60:	701a      	strb	r2, [r3, #0]
  idx++;
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	3301      	adds	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005a68:	e013      	b.n	8005a92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	4413      	add	r3, r2
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
    idx++;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e7      	bne.n	8005a6a <USBD_GetString+0x6a>
 8005a9a:	e000      	b.n	8005a9e <USBD_GetString+0x9e>
    return;
 8005a9c:	bf00      	nop
  }
}
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005ab4:	e005      	b.n	8005ac2 <USBD_GetLen+0x1e>
  {
    len++;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f5      	bne.n	8005ab6 <USBD_GetLen+0x12>
  }

  return len;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	2100      	movs	r1, #0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f00f fd5f 	bl	80155c2 <USBD_LL_Transmit>

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	2100      	movs	r1, #0
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f00f fd4e 	bl	80155c2 <USBD_LL_Transmit>

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	2100      	movs	r1, #0
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f00f fd52 	bl	8015604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f00f fd41 	bl	8015604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f00f fd0d 	bl	80155c2 <USBD_LL_Transmit>

  return USBD_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f00f fd1b 	bl	8015604 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8005be0:	222c      	movs	r2, #44	@ 0x2c
 8005be2:	2100      	movs	r1, #0
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f00f ffa8 	bl	8015b3a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005bf8:	202c      	movs	r0, #44	@ 0x2c
 8005bfa:	f001 faf1 	bl	80071e0 <mem_malloc>
 8005bfe:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <http_state_alloc+0x1a>
    http_state_init(ret);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ffe6 	bl	8005bd8 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005c0c:	687b      	ldr	r3, [r7, #4]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fdcc 	bl	80067c8 <fs_close>
    hs->handle = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f002 f9d6 	bl	8007ff4 <pbuf_free>
    hs->req = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <http_state_free+0x1a>
    http_state_eof(hs);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ffd6 	bl	8005c16 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fae4 	bl	8007238 <mem_free>
  }
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <http_write+0x22>
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005d40 <http_write+0xc8>)
 8005c8e:	f240 2219 	movw	r2, #537	@ 0x219
 8005c92:	492c      	ldr	r1, [pc, #176]	@ (8005d44 <http_write+0xcc>)
 8005c94:	482c      	ldr	r0, [pc, #176]	@ (8005d48 <http_write+0xd0>)
 8005c96:	f00f feeb 	bl	8015a70 <iprintf>
  len = *length;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <http_write+0x32>
    return ERR_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e045      	b.n	8005d36 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005cb0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005cb2:	8aba      	ldrh	r2, [r7, #20]
 8005cb4:	8afb      	ldrh	r3, [r7, #22]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d201      	bcs.n	8005cbe <http_write+0x46>
    len = max_len;
 8005cba:	8abb      	ldrh	r3, [r7, #20]
 8005cbc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8005cc6:	8afa      	ldrh	r2, [r7, #22]
 8005cc8:	8abb      	ldrh	r3, [r7, #20]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d901      	bls.n	8005cd2 <http_write+0x5a>
    len = max_len;
 8005cce:	8abb      	ldrh	r3, [r7, #20]
 8005cd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	8afa      	ldrh	r2, [r7, #22]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f007 f955 	bl	800cf88 <tcp_write>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cea:	d10f      	bne.n	8005d0c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005cfc:	2b07      	cmp	r3, #7
 8005cfe:	d902      	bls.n	8005d06 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	82fb      	strh	r3, [r7, #22]
 8005d04:	e002      	b.n	8005d0c <http_write+0x94>
      } else {
        len /= 2;
 8005d06:	8afb      	ldrh	r3, [r7, #22]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005d0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d14:	d102      	bne.n	8005d1c <http_write+0xa4>
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d8da      	bhi.n	8005cd2 <http_write+0x5a>

  if (err == ERR_OK) {
 8005d1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	8afa      	ldrh	r2, [r7, #22]
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005d32:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	080167a8 	.word	0x080167a8
 8005d44:	080167e0 	.word	0x080167e0
 8005d48:	080167f0 	.word	0x080167f0

08005d4c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f004 f939 	bl	8009fd4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8005d62:	2100      	movs	r1, #0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f004 f947 	bl	8009ff8 <tcp_recv>
  altcp_err(pcb, NULL);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f004 f987 	bl	800a080 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8005d72:	2200      	movs	r2, #0
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f004 f9bc 	bl	800a0f4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f004 f95c 	bl	800a03c <tcp_sent>
  if (hs != NULL) {
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005d8a:	68b8      	ldr	r0, [r7, #8]
 8005d8c:	f7ff ff63 	bl	8005c56 <http_state_free>
  }

  if (abort_conn) {
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f003 f832 	bl	8008e00 <tcp_abort>
    return ERR_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e00f      	b.n	8005dc0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f002 ff43 	bl	8008c2c <tcp_close>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005db2:	2204      	movs	r2, #4
 8005db4:	4904      	ldr	r1, [pc, #16]	@ (8005dc8 <http_close_or_abort_conn+0x7c>)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f004 f99c 	bl	800a0f4 <tcp_poll>
  }
  return err;
 8005dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	0800648f 	.word	0x0800648f

08005dcc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ffb6 	bl	8005d4c <http_close_or_abort_conn>
 8005de0:	4603      	mov	r3, r0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ffe8 	bl	8005dcc <http_close_conn>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ffe6 	bl	8005dea <http_eof>
    return 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e016      	b.n	8005e50 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fcd8 	bl	80067dc <fs_bytes_left>
 8005e2c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	dc05      	bgt.n	8005e40 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ffd7 	bl	8005dea <http_eof>
    return 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e007      	b.n	8005e50 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005e40:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <http_check_eof+0x54>)
 8005e42:	f240 429d 	movw	r2, #1181	@ 0x49d
 8005e46:	4905      	ldr	r1, [pc, #20]	@ (8005e5c <http_check_eof+0x58>)
 8005e48:	4805      	ldr	r0, [pc, #20]	@ (8005e60 <http_check_eof+0x5c>)
 8005e4a:	f00f fe11 	bl	8015a70 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005e4e:	2301      	movs	r3, #1
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	080167a8 	.word	0x080167a8
 8005e5c:	08016818 	.word	0x08016818
 8005e60:	080167f0 	.word	0x080167f0

08005e64 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d803      	bhi.n	8005e86 <http_send_data_nonssi+0x22>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	e001      	b.n	8005e8a <http_send_data_nonssi+0x26>
 8005e86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e8a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6999      	ldr	r1, [r3, #24]
 8005e90:	f107 020c 	add.w	r2, r7, #12
 8005e94:	2300      	movs	r3, #0
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff feee 	bl	8005c78 <http_write>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10d      	bne.n	8005ec4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	89ba      	ldrh	r2, [r7, #12]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	89ba      	ldrh	r2, [r7, #12]
 8005ebe:	1a9a      	subs	r2, r3, r2
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <http_send+0x18>
    return 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e025      	b.n	8005f32 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ff87 	bl	8005e04 <http_check_eof>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <http_send+0x32>
      return 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e018      	b.n	8005f32 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ffae 	bl	8005e64 <http_send_data_nonssi>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <http_send+0x62>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fc5f 	bl	80067dc <fs_bytes_left>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc05      	bgt.n	8005f30 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ff5f 	bl	8005dea <http_eof>
    return 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4a1c      	ldr	r2, [pc, #112]	@ (8005fbc <http_get_404_file+0x80>)
 8005f4a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f000 fc01 	bl	800675c <fs_open>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d024      	beq.n	8005fb0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <http_get_404_file+0x84>)
 8005f6a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 fbf1 	bl	800675c <fs_open>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d014      	beq.n	8005fb0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc4 <http_get_404_file+0x88>)
 8005f8a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f000 fbe1 	bl	800675c <fs_open>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
        return NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005fb0:	687b      	ldr	r3, [r7, #4]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	08016850 	.word	0x08016850
 8005fc0:	0801685c 	.word	0x0801685c
 8005fc4:	08016868 	.word	0x08016868

08005fc8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	@ 0x38
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <http_parse_request+0x24>
 8005fde:	4b65      	ldr	r3, [pc, #404]	@ (8006174 <http_parse_request+0x1ac>)
 8005fe0:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8005fe4:	4964      	ldr	r1, [pc, #400]	@ (8006178 <http_parse_request+0x1b0>)
 8005fe6:	4865      	ldr	r0, [pc, #404]	@ (800617c <http_parse_request+0x1b4>)
 8005fe8:	f00f fd42 	bl	8015a70 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <http_parse_request+0x38>
 8005ff2:	4b60      	ldr	r3, [pc, #384]	@ (8006174 <http_parse_request+0x1ac>)
 8005ff4:	f240 72af 	movw	r2, #1967	@ 0x7af
 8005ff8:	4961      	ldr	r1, [pc, #388]	@ (8006180 <http_parse_request+0x1b8>)
 8005ffa:	4860      	ldr	r0, [pc, #384]	@ (800617c <http_parse_request+0x1b4>)
 8005ffc:	f00f fd38 	bl	8015a70 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <http_parse_request+0x48>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006010:	f06f 0307 	mvn.w	r3, #7
 8006014:	e0a9      	b.n	800616a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006022:	621a      	str	r2, [r3, #32]
 8006024:	e005      	b.n	8006032 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800602c:	4618      	mov	r0, r3
 800602e:	f002 f8af 	bl	8008190 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006032:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006034:	f002 f884 	bl	8008140 <pbuf_ref>

  if (hs->req->next != NULL) {
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d012      	beq.n	8006068 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	891b      	ldrh	r3, [r3, #8]
 8006048:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800604c:	4293      	cmp	r3, r2
 800604e:	bf28      	it	cs
 8006050:	4613      	movcs	r3, r2
 8006052:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6a18      	ldr	r0, [r3, #32]
 8006058:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800605a:	2300      	movs	r3, #0
 800605c:	4949      	ldr	r1, [pc, #292]	@ (8006184 <http_parse_request+0x1bc>)
 800605e:	f002 f9cf 	bl	8008400 <pbuf_copy_partial>
    data = httpd_req_buf;
 8006062:	4b48      	ldr	r3, [pc, #288]	@ (8006184 <http_parse_request+0x1bc>)
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
 8006066:	e005      	b.n	8006074 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006074:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006076:	2b06      	cmp	r3, #6
 8006078:	d962      	bls.n	8006140 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800607a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800607c:	461a      	mov	r2, r3
 800607e:	4942      	ldr	r1, [pc, #264]	@ (8006188 <http_parse_request+0x1c0>)
 8006080:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006082:	f000 fbe6 	bl	8006852 <lwip_strnstr>
 8006086:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d058      	beq.n	8006140 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006092:	2204      	movs	r2, #4
 8006094:	493d      	ldr	r1, [pc, #244]	@ (800618c <http_parse_request+0x1c4>)
 8006096:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006098:	f00f fd64 	bl	8015b64 <strncmp>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d116      	bne.n	80060d0 <http_parse_request+0x108>
        sp1 = data + 3;
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	3303      	adds	r3, #3
 80060a6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	8b7a      	ldrh	r2, [r7, #26]
 80060be:	4934      	ldr	r1, [pc, #208]	@ (8006190 <http_parse_request+0x1c8>)
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fbc6 	bl	8006852 <lwip_strnstr>
 80060c6:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d111      	bne.n	80060f2 <http_parse_request+0x12a>
 80060ce:	e006      	b.n	80060de <http_parse_request+0x116>
        data[4] = 0;
 80060d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d2:	3304      	adds	r3, #4
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80060d8:	f06f 030f 	mvn.w	r3, #15
 80060dc:	e045      	b.n	800616a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3301      	adds	r3, #1
 80060e2:	8b7a      	ldrh	r2, [r7, #26]
 80060e4:	4928      	ldr	r1, [pc, #160]	@ (8006188 <http_parse_request+0x1c0>)
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fbb3 	bl	8006852 <lwip_strnstr>
 80060ec:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	3301      	adds	r3, #1
 80060f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01e      	beq.n	8006140 <http_parse_request+0x178>
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	429a      	cmp	r2, r3
 8006108:	d91a      	bls.n	8006140 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800610a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800610c:	461a      	mov	r2, r3
 800610e:	4921      	ldr	r1, [pc, #132]	@ (8006194 <http_parse_request+0x1cc>)
 8006110:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006112:	f000 fb9e 	bl	8006852 <lwip_strnstr>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006128:	8b3b      	ldrh	r3, [r7, #24]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006134:	6979      	ldr	r1, [r7, #20]
 8006136:	68b8      	ldr	r0, [r7, #8]
 8006138:	f000 f82e 	bl	8006198 <http_find_file>
 800613c:	4603      	mov	r3, r0
 800613e:	e014      	b.n	800616a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	4618      	mov	r0, r3
 8006146:	f001 ffe3 	bl	8008110 <pbuf_clen>
 800614a:	4603      	mov	r3, r0
 800614c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	891b      	ldrh	r3, [r3, #8]
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006158:	d205      	bcs.n	8006166 <http_parse_request+0x19e>
 800615a:	8a7b      	ldrh	r3, [r7, #18]
 800615c:	2b05      	cmp	r3, #5
 800615e:	d802      	bhi.n	8006166 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006160:	f06f 0304 	mvn.w	r3, #4
 8006164:	e001      	b.n	800616a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006166:	f06f 030f 	mvn.w	r3, #15
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3738      	adds	r7, #56	@ 0x38
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	080167a8 	.word	0x080167a8
 8006178:	08016874 	.word	0x08016874
 800617c:	080167f0 	.word	0x080167f0
 8006180:	08016880 	.word	0x08016880
 8006184:	200001e0 	.word	0x200001e0
 8006188:	0801688c 	.word	0x0801688c
 800618c:	08016890 	.word	0x08016890
 8006190:	08016898 	.word	0x08016898
 8006194:	0801689c 	.word	0x0801689c

08006198 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b092      	sub	sp, #72	@ 0x48
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fa f815 	bl	80001e4 <strlen>
 80061ba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d06b      	beq.n	800629a <http_find_file+0x102>
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80061ce:	d164      	bne.n	800629a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80061d0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80061d2:	4a53      	ldr	r2, [pc, #332]	@ (8006320 <http_find_file+0x188>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d102      	bne.n	80061de <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d15d      	bne.n	800629a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	3b01      	subs	r3, #1
 80061e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80061e4:	bf28      	it	cs
 80061e6:	233f      	movcs	r3, #63	@ 0x3f
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f4:	4619      	mov	r1, r3
 80061f6:	484a      	ldr	r0, [pc, #296]	@ (8006320 <http_find_file+0x188>)
 80061f8:	f00f fd43 	bl	8015c82 <memcpy>
      http_uri_buf[copy_len] = 0;
 80061fc:	4a48      	ldr	r2, [pc, #288]	@ (8006320 <http_find_file+0x188>)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	4413      	add	r3, r2
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006206:	2300      	movs	r3, #0
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800620a:	e043      	b.n	8006294 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d028      	beq.n	8006264 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006218:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01e      	beq.n	800625e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006220:	4a40      	ldr	r2, [pc, #256]	@ (8006324 <http_find_file+0x18c>)
 8006222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006228:	4618      	mov	r0, r3
 800622a:	f7f9 ffdb 	bl	80001e4 <strlen>
 800622e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	4293      	cmp	r3, r2
 8006236:	bf28      	it	cs
 8006238:	4613      	movcs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	4a38      	ldr	r2, [pc, #224]	@ (8006320 <http_find_file+0x188>)
 8006240:	1898      	adds	r0, r3, r2
 8006242:	4a38      	ldr	r2, [pc, #224]	@ (8006324 <http_find_file+0x18c>)
 8006244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006246:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4619      	mov	r1, r3
 800624e:	f00f fd18 	bl	8015c82 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4413      	add	r3, r2
 8006258:	4a31      	ldr	r2, [pc, #196]	@ (8006320 <http_find_file+0x188>)
 800625a:	2100      	movs	r1, #0
 800625c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800625e:	4b30      	ldr	r3, [pc, #192]	@ (8006320 <http_find_file+0x188>)
 8006260:	633b      	str	r3, [r7, #48]	@ 0x30
 8006262:	e004      	b.n	800626e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006264:	4a2f      	ldr	r2, [pc, #188]	@ (8006324 <http_find_file+0x18c>)
 8006266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa72 	bl	800675c <fs_open>
 8006278:	4603      	mov	r3, r0
 800627a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800627c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <http_find_file+0xf6>
        uri = file_name;
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800628c:	e005      	b.n	800629a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800628e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006290:	3301      	adds	r3, #1
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006296:	2b04      	cmp	r3, #4
 8006298:	d9b8      	bls.n	800620c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	d124      	bne.n	80062ea <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	213f      	movs	r1, #63	@ 0x3f
 80062a4:	4618      	mov	r0, r3
 80062a6:	f00f fc50 	bl	8015b4a <strchr>
 80062aa:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80062b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
      params++;
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	3301      	adds	r3, #1
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4611      	mov	r1, r2
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fa49 	bl	800675c <fs_open>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80062ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <http_find_file+0x144>
      file = &hs->file_handle;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062da:	e006      	b.n	80062ea <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4619      	mov	r1, r3
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fe2a 	bl	8005f3c <http_get_404_file>
 80062e8:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80062f0:	f107 0308 	add.w	r3, r7, #8
 80062f4:	4619      	mov	r1, r3
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fe20 	bl	8005f3c <http_get_404_file>
 80062fc:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4613      	mov	r3, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f809 	bl	8006328 <http_init_file>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3740      	adds	r7, #64	@ 0x40
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200005e0 	.word	0x200005e0
 8006324:	08019750 	.word	0x08019750

08006328 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d05c      	beq.n	80063f6 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <http_init_file+0x2a>
 8006344:	4b35      	ldr	r3, [pc, #212]	@ (800641c <http_init_file+0xf4>)
 8006346:	f640 120b 	movw	r2, #2315	@ 0x90b
 800634a:	4935      	ldr	r1, [pc, #212]	@ (8006420 <http_init_file+0xf8>)
 800634c:	4835      	ldr	r0, [pc, #212]	@ (8006424 <http_init_file+0xfc>)
 800634e:	f00f fb8f 	bl	8015a70 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da06      	bge.n	8006376 <http_init_file+0x4e>
 8006368:	4b2c      	ldr	r3, [pc, #176]	@ (800641c <http_init_file+0xf4>)
 800636a:	f640 1234 	movw	r2, #2356	@ 0x934
 800636e:	492e      	ldr	r1, [pc, #184]	@ (8006428 <http_init_file+0x100>)
 8006370:	482c      	ldr	r0, [pc, #176]	@ (8006424 <http_init_file+0xfc>)
 8006372:	f00f fb7d 	bl	8015a70 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	461a      	mov	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	7c1b      	ldrb	r3, [r3, #16]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <http_init_file+0x7c>
 8006396:	4b21      	ldr	r3, [pc, #132]	@ (800641c <http_init_file+0xf4>)
 8006398:	f640 1243 	movw	r2, #2371	@ 0x943
 800639c:	4923      	ldr	r1, [pc, #140]	@ (800642c <http_init_file+0x104>)
 800639e:	4821      	ldr	r0, [pc, #132]	@ (8006424 <http_init_file+0xfc>)
 80063a0:	f00f fb66 	bl	8015a70 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d032      	beq.n	8006410 <http_init_file+0xe8>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	7c1b      	ldrb	r3, [r3, #16]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02b      	beq.n	8006410 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6998      	ldr	r0, [r3, #24]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	461a      	mov	r2, r3
 80063c2:	491b      	ldr	r1, [pc, #108]	@ (8006430 <http_init_file+0x108>)
 80063c4:	f000 fa45 	bl	8006852 <lwip_strnstr>
 80063c8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01f      	beq.n	8006410 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80063f4:	e00c      	b.n	8006410 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	080167a8 	.word	0x080167a8
 8006420:	080168a4 	.word	0x080168a4
 8006424:	080167f0 	.word	0x080167f0
 8006428:	080168b8 	.word	0x080168b8
 800642c:	080168d8 	.word	0x080168d8
 8006430:	0801689c 	.word	0x0801689c

08006434 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <http_err+0x1c>
    http_state_free(hs);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff fc03 	bl	8005c56 <http_state_free>
  }
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <http_sent+0x1c>
    return ERR_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e008      	b.n	8006486 <http_sent+0x2e>
  }

  hs->retries = 0;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800647c:	6979      	ldr	r1, [r7, #20]
 800647e:	68b8      	ldr	r0, [r7, #8]
 8006480:	f7ff fd25 	bl	8005ece <http_send>

  return ERR_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d107      	bne.n	80064b2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80064a2:	2100      	movs	r1, #0
 80064a4:	6838      	ldr	r0, [r7, #0]
 80064a6:	f7ff fc91 	bl	8005dcc <http_close_conn>
 80064aa:	4603      	mov	r3, r0
 80064ac:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e021      	b.n	80064f6 <http_poll+0x68>
  } else {
    hs->retries++;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064b8:	3301      	adds	r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d105      	bne.n	80064d8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80064cc:	68f9      	ldr	r1, [r7, #12]
 80064ce:	6838      	ldr	r0, [r7, #0]
 80064d0:	f7ff fc7c 	bl	8005dcc <http_close_conn>
      return ERR_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e00e      	b.n	80064f6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f7ff fcf3 	bl	8005ece <http_send>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80064ee:	6838      	ldr	r0, [r7, #0]
 80064f0:	f007 fb5a 	bl	800dba8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <http_recv+0x26>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <http_recv+0x26>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d111      	bne.n	800654a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	891b      	ldrh	r3, [r3, #8]
 8006530:	4619      	mov	r1, r3
 8006532:	68b8      	ldr	r0, [r7, #8]
 8006534:	f002 fe3e 	bl	80091b4 <tcp_recved>
      pbuf_free(p);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fd5b 	bl	8007ff4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800653e:	6979      	ldr	r1, [r7, #20]
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f7ff fc43 	bl	8005dcc <http_close_conn>
    return ERR_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e055      	b.n	80065f6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	891b      	ldrh	r3, [r3, #8]
 800654e:	4619      	mov	r1, r3
 8006550:	68b8      	ldr	r0, [r7, #8]
 8006552:	f002 fe2f 	bl	80091b4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d147      	bne.n	80065ee <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fd30 	bl	8005fc8 <http_parse_request>
 8006568:	4603      	mov	r3, r0
 800656a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800656c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <http_recv+0xa0>
 8006574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006578:	f113 0f05 	cmn.w	r3, #5
 800657c:	d010      	beq.n	80065a0 <http_recv+0xa0>
 800657e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006582:	f113 0f10 	cmn.w	r3, #16
 8006586:	d00b      	beq.n	80065a0 <http_recv+0xa0>
 8006588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800658c:	f113 0f08 	cmn.w	r3, #8
 8006590:	d006      	beq.n	80065a0 <http_recv+0xa0>
 8006592:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <http_recv+0x100>)
 8006594:	f640 2204 	movw	r2, #2564	@ 0xa04
 8006598:	491a      	ldr	r1, [pc, #104]	@ (8006604 <http_recv+0x104>)
 800659a:	481b      	ldr	r0, [pc, #108]	@ (8006608 <http_recv+0x108>)
 800659c:	f00f fa68 	bl	8015a70 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80065a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065a4:	f113 0f05 	cmn.w	r3, #5
 80065a8:	d00b      	beq.n	80065c2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 fd1c 	bl	8007ff4 <pbuf_free>
          hs->req = NULL;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fd16 	bl	8007ff4 <pbuf_free>
      if (parsed == ERR_OK) {
 80065c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80065d0:	6979      	ldr	r1, [r7, #20]
 80065d2:	68b8      	ldr	r0, [r7, #8]
 80065d4:	f7ff fc7b 	bl	8005ece <http_send>
 80065d8:	e00c      	b.n	80065f4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80065da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065de:	f113 0f10 	cmn.w	r3, #16
 80065e2:	d107      	bne.n	80065f4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f7ff fbf0 	bl	8005dcc <http_close_conn>
 80065ec:	e002      	b.n	80065f4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fd00 	bl	8007ff4 <pbuf_free>
    }
  }
  return ERR_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	080167a8 	.word	0x080167a8
 8006604:	08016904 	.word	0x08016904
 8006608:	080167f0 	.word	0x080167f0

0800660c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800661a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <http_accept+0x1c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <http_accept+0x22>
    return ERR_VAL;
 8006628:	f06f 0305 	mvn.w	r3, #5
 800662c:	e025      	b.n	800667a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800662e:	2101      	movs	r1, #1
 8006630:	68b8      	ldr	r0, [r7, #8]
 8006632:	f003 faa5 	bl	8009b80 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006636:	f7ff fadc 	bl	8005bf2 <http_state_alloc>
 800663a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d102      	bne.n	8006648 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006646:	e018      	b.n	800667a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800664e:	6979      	ldr	r1, [r7, #20]
 8006650:	68b8      	ldr	r0, [r7, #8]
 8006652:	f003 fcbf 	bl	8009fd4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006656:	490b      	ldr	r1, [pc, #44]	@ (8006684 <http_accept+0x78>)
 8006658:	68b8      	ldr	r0, [r7, #8]
 800665a:	f003 fccd 	bl	8009ff8 <tcp_recv>
  altcp_err(pcb, http_err);
 800665e:	490a      	ldr	r1, [pc, #40]	@ (8006688 <http_accept+0x7c>)
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f003 fd0d 	bl	800a080 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006666:	2204      	movs	r2, #4
 8006668:	4908      	ldr	r1, [pc, #32]	@ (800668c <http_accept+0x80>)
 800666a:	68b8      	ldr	r0, [r7, #8]
 800666c:	f003 fd42 	bl	800a0f4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006670:	4907      	ldr	r1, [pc, #28]	@ (8006690 <http_accept+0x84>)
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	f003 fce2 	bl	800a03c <tcp_sent>

  return ERR_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	08006501 	.word	0x08006501
 8006688:	08006435 	.word	0x08006435
 800668c:	0800648f 	.word	0x0800648f
 8006690:	08006459 	.word	0x08006459

08006694 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d029      	beq.n	80066fa <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80066a6:	2101      	movs	r1, #1
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f003 fa69 	bl	8009b80 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80066ae:	887b      	ldrh	r3, [r7, #2]
 80066b0:	461a      	mov	r2, r3
 80066b2:	4914      	ldr	r1, [pc, #80]	@ (8006704 <httpd_init_pcb+0x70>)
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 fbaf 	bl	8008e18 <tcp_bind>
 80066ba:	4603      	mov	r3, r0
 80066bc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80066be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d006      	beq.n	80066d4 <httpd_init_pcb+0x40>
 80066c6:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <httpd_init_pcb+0x74>)
 80066c8:	f640 2257 	movw	r2, #2647	@ 0xa57
 80066cc:	490f      	ldr	r1, [pc, #60]	@ (800670c <httpd_init_pcb+0x78>)
 80066ce:	4810      	ldr	r0, [pc, #64]	@ (8006710 <httpd_init_pcb+0x7c>)
 80066d0:	f00f f9ce 	bl	8015a70 <iprintf>
    pcb = altcp_listen(pcb);
 80066d4:	21ff      	movs	r1, #255	@ 0xff
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f002 fc56 	bl	8008f88 <tcp_listen_with_backlog>
 80066dc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <httpd_init_pcb+0x5e>
 80066e4:	4b08      	ldr	r3, [pc, #32]	@ (8006708 <httpd_init_pcb+0x74>)
 80066e6:	f640 2259 	movw	r2, #2649	@ 0xa59
 80066ea:	490a      	ldr	r1, [pc, #40]	@ (8006714 <httpd_init_pcb+0x80>)
 80066ec:	4808      	ldr	r0, [pc, #32]	@ (8006710 <httpd_init_pcb+0x7c>)
 80066ee:	f00f f9bf 	bl	8015a70 <iprintf>
    altcp_accept(pcb, http_accept);
 80066f2:	4909      	ldr	r1, [pc, #36]	@ (8006718 <httpd_init_pcb+0x84>)
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f003 fce5 	bl	800a0c4 <tcp_accept>
  }
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08019884 	.word	0x08019884
 8006708:	080167a8 	.word	0x080167a8
 800670c:	08016930 	.word	0x08016930
 8006710:	080167f0 	.word	0x080167f0
 8006714:	0801694c 	.word	0x0801694c
 8006718:	0800660d 	.word	0x0800660d

0800671c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006722:	202e      	movs	r0, #46	@ 0x2e
 8006724:	f003 fc48 	bl	8009fb8 <tcp_new_ip_type>
 8006728:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <httpd_init+0x22>
 8006730:	4b07      	ldr	r3, [pc, #28]	@ (8006750 <httpd_init+0x34>)
 8006732:	f640 2272 	movw	r2, #2674	@ 0xa72
 8006736:	4907      	ldr	r1, [pc, #28]	@ (8006754 <httpd_init+0x38>)
 8006738:	4807      	ldr	r0, [pc, #28]	@ (8006758 <httpd_init+0x3c>)
 800673a:	f00f f999 	bl	8015a70 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800673e:	2150      	movs	r1, #80	@ 0x50
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff ffa7 	bl	8006694 <httpd_init_pcb>
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	080167a8 	.word	0x080167a8
 8006754:	0801696c 	.word	0x0801696c
 8006758:	080167f0 	.word	0x080167f0

0800675c <fs_open>:

extern const struct fsdata_file file__index_html;
#define FS_ROOT &file__index_html

err_t fs_open(struct fs_file *file, const char *name)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
    const struct fsdata_file *f;

    for (f = FS_ROOT; f != NULL; f = f->next)
 8006766:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <fs_open+0x68>)
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e021      	b.n	80067b0 <fs_open+0x54>
    {
        if (!strcmp(name, (const char *)f->name))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4619      	mov	r1, r3
 8006772:	6838      	ldr	r0, [r7, #0]
 8006774:	f7f9 fd2c 	bl	80001d0 <strcmp>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d115      	bne.n	80067aa <fs_open+0x4e>
        {
            file->data = (const char *)f->data;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
            file->len = f->len;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	605a      	str	r2, [r3, #4]
            file->index = f->data;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	609a      	str	r2, [r3, #8]
            file->pextension = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]
            file->flags = f->flags;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	7c1a      	ldrb	r2, [r3, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	741a      	strb	r2, [r3, #16]
            return ERR_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e007      	b.n	80067ba <fs_open+0x5e>
    for (f = FS_ROOT; f != NULL; f = f->next)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1da      	bne.n	800676c <fs_open+0x10>
        }
    }
    return ERR_ARG;
 80067b6:	f06f 030f 	mvn.w	r3, #15
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	0801973c 	.word	0x0801973c

080067c8 <fs_close>:

void fs_close(struct fs_file *file)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
    LWIP_UNUSED_ARG(file);
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <fs_bytes_left>:

int fs_bytes_left(struct fs_file *file)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
    return file->len;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80067fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	b21a      	sxth	r2, r3
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	b29b      	uxth	r3, r3
 800680c:	b21b      	sxth	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b21b      	sxth	r3, r3
 8006812:	b29b      	uxth	r3, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	061a      	lsls	r2, r3, #24
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	0e1b      	lsrs	r3, r3, #24
 8006844:	4313      	orrs	r3, r2
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af00      	add	r7, sp, #0
 8006858:	60f8      	str	r0, [r7, #12]
 800685a:	60b9      	str	r1, [r7, #8]
 800685c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800685e:	68b8      	ldr	r0, [r7, #8]
 8006860:	f7f9 fcc0 	bl	80001e4 <strlen>
 8006864:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	e022      	b.n	80068b6 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e012      	b.n	800689c <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d109      	bne.n	8006896 <lwip_strnstr+0x44>
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f00f f96c 	bl	8015b64 <strncmp>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	e00f      	b.n	80068b6 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	3301      	adds	r3, #1
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <lwip_strnstr+0x62>
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	441a      	add	r2, r3
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	440b      	add	r3, r1
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d9e0      	bls.n	8006876 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80068be:	b480      	push	{r7}
 80068c0:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d80f      	bhi.n	80068fe <dns_setserver+0x32>
    if (dnsserver != NULL) {
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4909      	ldr	r1, [pc, #36]	@ (800690c <dns_setserver+0x40>)
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 80068f0:	e005      	b.n	80068fe <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	4905      	ldr	r1, [pc, #20]	@ (800690c <dns_setserver+0x40>)
 80068f6:	4a06      	ldr	r2, [pc, #24]	@ (8006910 <dns_setserver+0x44>)
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000aa0 	.word	0x20000aa0
 8006910:	08019884 	.word	0x08019884

08006914 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8006918:	f000 faa8 	bl	8006e6c <dns_check_entries>
}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}

08006920 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b090      	sub	sp, #64	@ 0x40
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800692a:	79fa      	ldrb	r2, [r7, #7]
 800692c:	4613      	mov	r3, r2
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	4413      	add	r3, r2
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	4a6c      	ldr	r2, [pc, #432]	@ (8006ae8 <dns_send+0x1c8>)
 8006936:	4413      	add	r3, r2
 8006938:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	7adb      	ldrb	r3, [r3, #11]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d906      	bls.n	8006950 <dns_send+0x30>
 8006942:	4b6a      	ldr	r3, [pc, #424]	@ (8006aec <dns_send+0x1cc>)
 8006944:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8006948:	4969      	ldr	r1, [pc, #420]	@ (8006af0 <dns_send+0x1d0>)
 800694a:	486a      	ldr	r0, [pc, #424]	@ (8006af4 <dns_send+0x1d4>)
 800694c:	f00f f890 	bl	8015a70 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	7adb      	ldrb	r3, [r3, #11]
 8006954:	461a      	mov	r2, r3
 8006956:	4b68      	ldr	r3, [pc, #416]	@ (8006af8 <dns_send+0x1d8>)
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f8cb 	bl	8006b00 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	2200      	movs	r2, #0
 800696e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e0b4      	b.n	8006ade <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	3310      	adds	r3, #16
 8006978:	4618      	mov	r0, r3
 800697a:	f7f9 fc33 	bl	80001e4 <strlen>
 800697e:	4603      	mov	r3, r0
 8006980:	b29b      	uxth	r3, r3
 8006982:	3312      	adds	r3, #18
 8006984:	b29b      	uxth	r3, r3
 8006986:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800698a:	4619      	mov	r1, r3
 800698c:	2036      	movs	r0, #54	@ 0x36
 800698e:	f001 f84f 	bl	8007a30 <pbuf_alloc>
 8006992:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8006994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8095 	beq.w	8006ac6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	220c      	movs	r2, #12
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f00f f8c8 	bl	8015b3a <memset>
    hdr.id = lwip_htons(entry->txid);
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	891b      	ldrh	r3, [r3, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff ff20 	bl	80067f4 <lwip_htons>
 80069b4:	4603      	mov	r3, r0
 80069b6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80069b8:	2301      	movs	r3, #1
 80069ba:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80069bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069c0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80069c2:	f107 0310 	add.w	r3, r7, #16
 80069c6:	220c      	movs	r2, #12
 80069c8:	4619      	mov	r1, r3
 80069ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069cc:	f001 fdc6 	bl	800855c <pbuf_take>
    hostname = entry->name;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	3310      	adds	r3, #16
 80069d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	3b01      	subs	r3, #1
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 80069dc:	230c      	movs	r3, #12
 80069de:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	3301      	adds	r3, #1
 80069e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80069ea:	2300      	movs	r3, #0
 80069ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80069f0:	e007      	b.n	8006a02 <dns_send+0xe2>
        ++n;
 80069f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069f6:	3301      	adds	r3, #1
 80069f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	3301      	adds	r3, #1
 8006a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a08:	d003      	beq.n	8006a12 <dns_send+0xf2>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ef      	bne.n	80069f2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8006a12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8006a1a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a20:	4413      	add	r3, r2
 8006a22:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a26:	4293      	cmp	r3, r2
 8006a28:	dc53      	bgt.n	8006ad2 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8006a2a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006a2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a30:	4619      	mov	r1, r3
 8006a32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a34:	f001 fec0 	bl	80087b8 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006a38:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006a40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a44:	f001 fe1c 	bl	8008680 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a50:	4413      	add	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3301      	adds	r3, #1
 8006a56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 8006a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1bf      	bne.n	80069e0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8006a60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a62:	2200      	movs	r2, #0
 8006a64:	4619      	mov	r1, r3
 8006a66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a68:	f001 fea6 	bl	80087b8 <pbuf_put_at>
    query_idx++;
 8006a6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a6e:	3301      	adds	r3, #1
 8006a70:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a76:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a7c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006a7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a80:	f107 010c 	add.w	r1, r7, #12
 8006a84:	2204      	movs	r2, #4
 8006a86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006a88:	f001 fdfa 	bl	8008680 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	7bdb      	ldrb	r3, [r3, #15]
 8006a90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8006a94:	2335      	movs	r3, #53	@ 0x35
 8006a96:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	7adb      	ldrb	r3, [r3, #11]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4a16      	ldr	r2, [pc, #88]	@ (8006af8 <dns_send+0x1d8>)
 8006aa0:	4413      	add	r3, r2
 8006aa2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006aa4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aa8:	4a14      	ldr	r2, [pc, #80]	@ (8006afc <dns_send+0x1dc>)
 8006aaa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab4:	f008 fb54 	bl	800f160 <udp_sendto>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 8006abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ac0:	f001 fa98 	bl	8007ff4 <pbuf_free>
 8006ac4:	e002      	b.n	8006acc <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8006ac6:	23ff      	movs	r3, #255	@ 0xff
 8006ac8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8006acc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ad0:	e005      	b.n	8006ade <dns_send+0x1be>
        goto overflow_return;
 8006ad2:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8006ad4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ad6:	f001 fa8d 	bl	8007ff4 <pbuf_free>
  return ERR_VAL;
 8006ada:	f06f 0305 	mvn.w	r3, #5
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3740      	adds	r7, #64	@ 0x40
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000630 	.word	0x20000630
 8006aec:	08016988 	.word	0x08016988
 8006af0:	080169b8 	.word	0x080169b8
 8006af4:	080169d0 	.word	0x080169d0
 8006af8:	20000aa0 	.word	0x20000aa0
 8006afc:	20000620 	.word	0x20000620

08006b00 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e03d      	b.n	8006b8e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8006b12:	7bfa      	ldrb	r2, [r7, #15]
 8006b14:	4957      	ldr	r1, [pc, #348]	@ (8006c74 <dns_call_found+0x174>)
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d030      	beq.n	8006b88 <dns_call_found+0x88>
 8006b26:	7bfa      	ldrb	r2, [r7, #15]
 8006b28:	4952      	ldr	r1, [pc, #328]	@ (8006c74 <dns_call_found+0x174>)
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	3308      	adds	r3, #8
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	79fa      	ldrb	r2, [r7, #7]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d124      	bne.n	8006b88 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006b3e:	7bfa      	ldrb	r2, [r7, #15]
 8006b40:	494c      	ldr	r1, [pc, #304]	@ (8006c74 <dns_call_found+0x174>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681c      	ldr	r4, [r3, #0]
 8006b4e:	79fa      	ldrb	r2, [r7, #7]
 8006b50:	4613      	mov	r3, r2
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4413      	add	r3, r2
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	3310      	adds	r3, #16
 8006b5a:	4a47      	ldr	r2, [pc, #284]	@ (8006c78 <dns_call_found+0x178>)
 8006b5c:	1898      	adds	r0, r3, r2
 8006b5e:	7bfa      	ldrb	r2, [r7, #15]
 8006b60:	4944      	ldr	r1, [pc, #272]	@ (8006c74 <dns_call_found+0x174>)
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006b76:	7bfa      	ldrb	r2, [r7, #15]
 8006b78:	493e      	ldr	r1, [pc, #248]	@ (8006c74 <dns_call_found+0x174>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d9be      	bls.n	8006b12 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]
 8006b98:	e031      	b.n	8006bfe <dns_call_found+0xfe>
    if (i == idx) {
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d029      	beq.n	8006bf6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006ba2:	7bfa      	ldrb	r2, [r7, #15]
 8006ba4:	4934      	ldr	r1, [pc, #208]	@ (8006c78 <dns_call_found+0x178>)
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	440b      	add	r3, r1
 8006bb0:	330a      	adds	r3, #10
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d11f      	bne.n	8006bf8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006bb8:	7bfa      	ldrb	r2, [r7, #15]
 8006bba:	492f      	ldr	r1, [pc, #188]	@ (8006c78 <dns_call_found+0x178>)
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	4413      	add	r3, r2
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	440b      	add	r3, r1
 8006bc6:	330f      	adds	r3, #15
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	79fa      	ldrb	r2, [r7, #7]
 8006bcc:	482a      	ldr	r0, [pc, #168]	@ (8006c78 <dns_call_found+0x178>)
 8006bce:	4613      	mov	r3, r2
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	4413      	add	r3, r2
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	4403      	add	r3, r0
 8006bd8:	330f      	adds	r3, #15
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d10b      	bne.n	8006bf8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	4925      	ldr	r1, [pc, #148]	@ (8006c78 <dns_call_found+0x178>)
 8006be4:	4613      	mov	r3, r2
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	4413      	add	r3, r2
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	440b      	add	r3, r1
 8006bee:	330f      	adds	r3, #15
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	701a      	strb	r2, [r3, #0]
        break;
 8006bf4:	e006      	b.n	8006c04 <dns_call_found+0x104>
      continue; /* only check other requests */
 8006bf6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d9ca      	bls.n	8006b9a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8006c04:	79fa      	ldrb	r2, [r7, #7]
 8006c06:	491c      	ldr	r1, [pc, #112]	@ (8006c78 <dns_call_found+0x178>)
 8006c08:	4613      	mov	r3, r2
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4413      	add	r3, r2
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	440b      	add	r3, r1
 8006c12:	330f      	adds	r3, #15
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d827      	bhi.n	8006c6a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006c1a:	79fa      	ldrb	r2, [r7, #7]
 8006c1c:	4916      	ldr	r1, [pc, #88]	@ (8006c78 <dns_call_found+0x178>)
 8006c1e:	4613      	mov	r3, r2
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	4413      	add	r3, r2
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	440b      	add	r3, r1
 8006c28:	330f      	adds	r3, #15
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b13      	ldr	r3, [pc, #76]	@ (8006c7c <dns_call_found+0x17c>)
 8006c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f008 fd8d 	bl	800f754 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8006c3a:	79fa      	ldrb	r2, [r7, #7]
 8006c3c:	490e      	ldr	r1, [pc, #56]	@ (8006c78 <dns_call_found+0x178>)
 8006c3e:	4613      	mov	r3, r2
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	440b      	add	r3, r1
 8006c48:	330f      	adds	r3, #15
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <dns_call_found+0x17c>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006c56:	79fa      	ldrb	r2, [r7, #7]
 8006c58:	4907      	ldr	r1, [pc, #28]	@ (8006c78 <dns_call_found+0x178>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	4413      	add	r3, r2
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	440b      	add	r3, r1
 8006c64:	330f      	adds	r3, #15
 8006c66:	2204      	movs	r2, #4
 8006c68:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000a70 	.word	0x20000a70
 8006c78:	20000630 	.word	0x20000630
 8006c7c:	20000620 	.word	0x20000620

08006c80 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8006c86:	f00e fdf3 	bl	8015870 <rand>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006c8e:	2300      	movs	r3, #0
 8006c90:	71fb      	strb	r3, [r7, #7]
 8006c92:	e01a      	b.n	8006cca <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006c94:	79fa      	ldrb	r2, [r7, #7]
 8006c96:	4911      	ldr	r1, [pc, #68]	@ (8006cdc <dns_create_txid+0x5c>)
 8006c98:	4613      	mov	r3, r2
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	440b      	add	r3, r1
 8006ca2:	330a      	adds	r3, #10
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d10c      	bne.n	8006cc4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8006caa:	79fa      	ldrb	r2, [r7, #7]
 8006cac:	490b      	ldr	r1, [pc, #44]	@ (8006cdc <dns_create_txid+0x5c>)
 8006cae:	4613      	mov	r3, r2
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3308      	adds	r3, #8
 8006cba:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006cbc:	88ba      	ldrh	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d100      	bne.n	8006cc4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8006cc2:	e7e0      	b.n	8006c86 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	71fb      	strb	r3, [r7, #7]
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d9e1      	bls.n	8006c94 <dns_create_txid+0x14>
    }
  }

  return txid;
 8006cd0:	88bb      	ldrh	r3, [r7, #4]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000630 	.word	0x20000630

08006ce0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7adb      	ldrb	r3, [r3, #11]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <dns_backupserver_available+0x2e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7adb      	ldrb	r3, [r3, #11]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	4a06      	ldr	r2, [pc, #24]	@ (8006d1c <dns_backupserver_available+0x3c>)
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <dns_backupserver_available+0x2e>
      ret = 1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	20000aa0 	.word	0x20000aa0

08006d20 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8006d2a:	79fa      	ldrb	r2, [r7, #7]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	4413      	add	r3, r2
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	4a48      	ldr	r2, [pc, #288]	@ (8006e58 <dns_check_entry+0x138>)
 8006d36:	4413      	add	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d906      	bls.n	8006d4e <dns_check_entry+0x2e>
 8006d40:	4b46      	ldr	r3, [pc, #280]	@ (8006e5c <dns_check_entry+0x13c>)
 8006d42:	f240 421c 	movw	r2, #1052	@ 0x41c
 8006d46:	4946      	ldr	r1, [pc, #280]	@ (8006e60 <dns_check_entry+0x140>)
 8006d48:	4846      	ldr	r0, [pc, #280]	@ (8006e64 <dns_check_entry+0x144>)
 8006d4a:	f00e fe91 	bl	8015a70 <iprintf>

  switch (entry->state) {
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	7a9b      	ldrb	r3, [r3, #10]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d86f      	bhi.n	8006e36 <dns_check_entry+0x116>
 8006d56:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <dns_check_entry+0x3c>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006e47 	.word	0x08006e47
 8006d60:	08006d6d 	.word	0x08006d6d
 8006d64:	08006d9f 	.word	0x08006d9f
 8006d68:	08006e15 	.word	0x08006e15
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006d6c:	f7ff ff88 	bl	8006c80 <dns_create_txid>
 8006d70:	4603      	mov	r3, r0
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fdc4 	bl	8006920 <dns_send>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8006d9c:	e058      	b.n	8006e50 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	7b1b      	ldrb	r3, [r3, #12]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	731a      	strb	r2, [r3, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	7b1b      	ldrb	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d14b      	bne.n	8006e4a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7b5b      	ldrb	r3, [r3, #13]
 8006db6:	3301      	adds	r3, #1
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	735a      	strb	r2, [r3, #13]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	7b5b      	ldrb	r3, [r3, #13]
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d11b      	bne.n	8006dfe <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ff8a 	bl	8006ce0 <dns_backupserver_available>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	7adb      	ldrb	r3, [r3, #11]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	735a      	strb	r2, [r3, #13]
 8006dea:	e00c      	b.n	8006e06 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fe85 	bl	8006b00 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	729a      	strb	r2, [r3, #10]
            break;
 8006dfc:	e028      	b.n	8006e50 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	7b5a      	ldrb	r2, [r3, #13]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fd89 	bl	8006920 <dns_send>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8006e12:	e01a      	b.n	8006e4a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <dns_check_entry+0x10e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	729a      	strb	r2, [r3, #10]
      }
      break;
 8006e34:	e00b      	b.n	8006e4e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8006e36:	4b09      	ldr	r3, [pc, #36]	@ (8006e5c <dns_check_entry+0x13c>)
 8006e38:	f240 425b 	movw	r2, #1115	@ 0x45b
 8006e3c:	490a      	ldr	r1, [pc, #40]	@ (8006e68 <dns_check_entry+0x148>)
 8006e3e:	4809      	ldr	r0, [pc, #36]	@ (8006e64 <dns_check_entry+0x144>)
 8006e40:	f00e fe16 	bl	8015a70 <iprintf>
      break;
 8006e44:	e004      	b.n	8006e50 <dns_check_entry+0x130>
      break;
 8006e46:	bf00      	nop
 8006e48:	e002      	b.n	8006e50 <dns_check_entry+0x130>
      break;
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <dns_check_entry+0x130>
      break;
 8006e4e:	bf00      	nop
  }
}
 8006e50:	bf00      	nop
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20000630 	.word	0x20000630
 8006e5c:	08016988 	.word	0x08016988
 8006e60:	080169f8 	.word	0x080169f8
 8006e64:	080169d0 	.word	0x080169d0
 8006e68:	08016a14 	.word	0x08016a14

08006e6c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006e72:	2300      	movs	r3, #0
 8006e74:	71fb      	strb	r3, [r7, #7]
 8006e76:	e006      	b.n	8006e86 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8006e78:	79fb      	ldrb	r3, [r7, #7]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff ff50 	bl	8006d20 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	3301      	adds	r3, #1
 8006e84:	71fb      	strb	r3, [r7, #7]
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d9f5      	bls.n	8006e78 <dns_check_entries+0xc>
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b089      	sub	sp, #36	@ 0x24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <lwip_standard_chksum+0x40>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd0a      	ble.n	8006ed6 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	1c53      	adds	r3, r2, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	f107 030e 	add.w	r3, r7, #14
 8006eca:	3301      	adds	r3, #1
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	701a      	strb	r2, [r3, #0]
    len--;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006eda:	e00a      	b.n	8006ef2 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	1c9a      	adds	r2, r3, #2
 8006ee0:	61ba      	str	r2, [r7, #24]
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	4413      	add	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	3b02      	subs	r3, #2
 8006ef0:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	dcf1      	bgt.n	8006edc <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dd04      	ble.n	8006f08 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006efe:	f107 030e 	add.w	r3, r7, #14
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006f08:	89fb      	ldrh	r3, [r7, #14]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	0c1a      	lsrs	r2, r3, #16
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	0c1a      	lsrs	r2, r3, #16
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	b29b      	uxth	r3, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3724      	adds	r7, #36	@ 0x24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	72fb      	strb	r3, [r7, #11]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e02b      	b.n	8006fc4 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	895b      	ldrh	r3, [r3, #10]
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7ff ff8d 	bl	8006e96 <lwip_standard_chksum>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4413      	add	r3, r2
 8006f84:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	0c1a      	lsrs	r2, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	895b      	ldrh	r3, [r3, #10]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2301      	moveq	r3, #1
 8006fa8:	2300      	movne	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1d0      	bne.n	8006f6c <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fc05 	bl	80067f4 <lwip_htons>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8006ff4:	893b      	ldrh	r3, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fbfc 	bl	80067f4 <lwip_htons>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	0c1a      	lsrs	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4413      	add	r3, r2
 8007010:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0c1a      	lsrs	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	b29b      	uxth	r3, r3
 800701a:	4413      	add	r3, r2
 800701c:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	b29b      	uxth	r3, r3
 8007022:	43db      	mvns	r3, r3
 8007024:	b29b      	uxth	r3, r3
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	607b      	str	r3, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	72fb      	strb	r3, [r7, #11]
 800703c:	4613      	mov	r3, r2
 800703e:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	b29b      	uxth	r3, r3
 800704a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	0c1b      	lsrs	r3, r3, #16
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	b29b      	uxth	r3, r3
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4413      	add	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4413      	add	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	0c1a      	lsrs	r2, r3, #16
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	b29b      	uxth	r3, r3
 8007078:	4413      	add	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	0c1a      	lsrs	r2, r3, #16
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	b29b      	uxth	r3, r3
 8007084:	4413      	add	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8007088:	893a      	ldrh	r2, [r7, #8]
 800708a:	7af9      	ldrb	r1, [r7, #11]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff ff5e 	bl	8006f50 <inet_cksum_pseudo_base>
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	607b      	str	r3, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	72fb      	strb	r3, [r7, #11]
 80070ac:	4613      	mov	r3, r2
 80070ae:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80070b0:	893a      	ldrh	r2, [r7, #8]
 80070b2:	7af9      	ldrb	r1, [r7, #11]
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff ffb7 	bl	800702e <inet_chksum_pseudo>
 80070c0:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fedb 	bl	8006e96 <lwip_standard_chksum>
 80070e0:	4603      	mov	r3, r0
 80070e2:	43db      	mvns	r3, r3
 80070e4:	b29b      	uxth	r3, r3
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	e02b      	b.n	800715c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	895b      	ldrh	r3, [r3, #10]
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7ff fec1 	bl	8006e96 <lwip_standard_chksum>
 8007114:	4603      	mov	r3, r0
 8007116:	461a      	mov	r2, r3
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	0c1a      	lsrs	r2, r3, #16
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	b29b      	uxth	r3, r3
 8007126:	4413      	add	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	895b      	ldrh	r3, [r3, #10]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	bf0c      	ite	eq
 800713e:	2301      	moveq	r3, #1
 8007140:	2300      	movne	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	b29a      	uxth	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	0a1b      	lsrs	r3, r3, #8
 8007150:	b2db      	uxtb	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1d0      	bne.n	8007104 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	b29a      	uxth	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	b2db      	uxtb	r3, r3
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	b29b      	uxth	r3, r3
 800717c:	43db      	mvns	r3, r3
 800717e:	b29b      	uxth	r3, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8007192:	f001 fb33 	bl	80087fc <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007196:	f000 f810 	bl	80071ba <mem_init>
  memp_init();
 800719a:	f000 f8ab 	bl	80072f4 <memp_init>
  pbuf_init();
  netif_init();
 800719e:	f000 f99d 	bl	80074dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80071a2:	f007 fdb5 	bl	800ed10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80071a6:	f001 fb31 	bl	800880c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80071aa:	f7ff fb88 	bl	80068be <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80071ae:	f007 fd67 	bl	800ec80 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <mem_init>:
/** mem_init is not used when using pools instead of a heap or using
 * C library malloc().
 */
void
mem_init(void)
{
 80071ba:	b480      	push	{r7}
 80071bc:	af00      	add	r7, sp, #0
}
 80071be:	bf00      	nop
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <mem_trim>:
 * C library malloc(): we can't free part of a pool element and the stack
 * support mem_trim() to return a different pointer
 */
void *
mem_trim(void *mem, mem_size_t size)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  LWIP_UNUSED_ARG(size);
  return mem;
 80071d2:	687b      	ldr	r3, [r7, #4]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  void *ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f00e fa83 	bl	80156f4 <malloc>
 80071ee:	4603      	mov	r3, r0
 80071f0:	60fb      	str	r3, [r7, #12]
  if (ret == NULL) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <mem_malloc+0x26>
    MEM_STATS_INC_LOCKED(err);
 80071f8:	f00c fead 	bl	8013f56 <sys_arch_protect>
 80071fc:	60b8      	str	r0, [r7, #8]
 80071fe:	68b8      	ldr	r0, [r7, #8]
 8007200:	f00c feb1 	bl	8013f66 <sys_arch_unprotect>
 8007204:	e00d      	b.n	8007222 <mem_malloc+0x42>
  } else {
    LWIP_ASSERT("malloc() must return aligned memory", LWIP_MEM_ALIGN(ret) == ret);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3303      	adds	r3, #3
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4293      	cmp	r3, r2
 8007214:	d005      	beq.n	8007222 <mem_malloc+0x42>
 8007216:	4b05      	ldr	r3, [pc, #20]	@ (800722c <mem_malloc+0x4c>)
 8007218:	22d5      	movs	r2, #213	@ 0xd5
 800721a:	4905      	ldr	r1, [pc, #20]	@ (8007230 <mem_malloc+0x50>)
 800721c:	4805      	ldr	r0, [pc, #20]	@ (8007234 <mem_malloc+0x54>)
 800721e:	f00e fc27 	bl	8015a70 <iprintf>
    *(mem_size_t *)ret = size;
    ret = (u8_t *)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED_LOCKED(used, size);
#endif
  }
  return ret;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	08016a34 	.word	0x08016a34
 8007230:	08016a64 	.word	0x08016a64
 8007234:	08016a88 	.word	0x08016a88

08007238 <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("rmem != NULL", (rmem != NULL));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d105      	bne.n	8007252 <mem_free+0x1a>
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <mem_free+0x44>)
 8007248:	22e6      	movs	r2, #230	@ 0xe6
 800724a:	490d      	ldr	r1, [pc, #52]	@ (8007280 <mem_free+0x48>)
 800724c:	480d      	ldr	r0, [pc, #52]	@ (8007284 <mem_free+0x4c>)
 800724e:	f00e fc0f 	bl	8015a70 <iprintf>
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3303      	adds	r3, #3
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4293      	cmp	r3, r2
 8007260:	d005      	beq.n	800726e <mem_free+0x36>
 8007262:	4b06      	ldr	r3, [pc, #24]	@ (800727c <mem_free+0x44>)
 8007264:	22e7      	movs	r2, #231	@ 0xe7
 8007266:	4908      	ldr	r1, [pc, #32]	@ (8007288 <mem_free+0x50>)
 8007268:	4806      	ldr	r0, [pc, #24]	@ (8007284 <mem_free+0x4c>)
 800726a:	f00e fc01 	bl	8015a70 <iprintf>
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t *)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED_LOCKED(used, *(mem_size_t *)rmem);
#endif
  mem_clib_free(rmem);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f00e fa48 	bl	8015704 <free>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	08016a34 	.word	0x08016a34
 8007280:	08016ab0 	.word	0x08016ab0
 8007284:	08016a88 	.word	0x08016a88
 8007288:	08016ac0 	.word	0x08016ac0

0800728c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	3303      	adds	r3, #3
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e011      	b.n	80072d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	889b      	ldrh	r3, [r3, #4]
 80072c4:	461a      	mov	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4413      	add	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4293      	cmp	r3, r2
 80072dc:	dbe7      	blt.n	80072ae <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	88da      	ldrh	r2, [r3, #6]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	605a      	str	r2, [r3, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80072fa:	2300      	movs	r3, #0
 80072fc:	80fb      	strh	r3, [r7, #6]
 80072fe:	e013      	b.n	8007328 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	4a0d      	ldr	r2, [pc, #52]	@ (8007338 <memp_init+0x44>)
 8007304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff ffbf 	bl	800728c <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	4a09      	ldr	r2, [pc, #36]	@ (8007338 <memp_init+0x44>)
 8007312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	4908      	ldr	r1, [pc, #32]	@ (800733c <memp_init+0x48>)
 800731c:	332a      	adds	r3, #42	@ 0x2a
 800731e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	3301      	adds	r3, #1
 8007326:	80fb      	strh	r3, [r7, #6]
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b08      	cmp	r3, #8
 800732c:	d9e8      	bls.n	8007300 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08019808 	.word	0x08019808
 800733c:	20003a9c 	.word	0x20003a9c

08007340 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007348:	f00c fe05 	bl	8013f56 <sys_arch_protect>
 800734c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d028      	beq.n	80073ae <do_memp_malloc_pool+0x6e>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d006      	beq.n	800737e <do_memp_malloc_pool+0x3e>
 8007370:	4b16      	ldr	r3, [pc, #88]	@ (80073cc <do_memp_malloc_pool+0x8c>)
 8007372:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007376:	4916      	ldr	r1, [pc, #88]	@ (80073d0 <do_memp_malloc_pool+0x90>)
 8007378:	4816      	ldr	r0, [pc, #88]	@ (80073d4 <do_memp_malloc_pool+0x94>)
 800737a:	f00e fb79 	bl	8015a70 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	3201      	adds	r2, #1
 8007386:	609a      	str	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	429a      	cmp	r2, r3
 8007396:	d905      	bls.n	80073a4 <do_memp_malloc_pool+0x64>
      desc->stats->max = desc->stats->used;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	60da      	str	r2, [r3, #12]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f00c fdde 	bl	8013f66 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	e009      	b.n	80073c2 <do_memp_malloc_pool+0x82>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	881a      	ldrh	r2, [r3, #0]
 80073b4:	3201      	adds	r2, #1
 80073b6:	b292      	uxth	r2, r2
 80073b8:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f00c fdd3 	bl	8013f66 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	08016ad8 	.word	0x08016ad8
 80073d0:	08016b08 	.word	0x08016b08
 80073d4:	08016b2c 	.word	0x08016b2c

080073d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d908      	bls.n	80073fa <memp_malloc+0x22>
 80073e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007414 <memp_malloc+0x3c>)
 80073ea:	f240 1257 	movw	r2, #343	@ 0x157
 80073ee:	490a      	ldr	r1, [pc, #40]	@ (8007418 <memp_malloc+0x40>)
 80073f0:	480a      	ldr	r0, [pc, #40]	@ (800741c <memp_malloc+0x44>)
 80073f2:	f00e fb3d 	bl	8015a70 <iprintf>
 80073f6:	2300      	movs	r3, #0
 80073f8:	e008      	b.n	800740c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <memp_malloc+0x48>)
 80073fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff ff9c 	bl	8007340 <do_memp_malloc_pool>
 8007408:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08016ad8 	.word	0x08016ad8
 8007418:	08016b68 	.word	0x08016b68
 800741c:	08016b2c 	.word	0x08016b2c
 8007420:	08019808 	.word	0x08019808

08007424 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <do_memp_free_pool+0x22>
 8007438:	4b10      	ldr	r3, [pc, #64]	@ (800747c <do_memp_free_pool+0x58>)
 800743a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800743e:	4910      	ldr	r1, [pc, #64]	@ (8007480 <do_memp_free_pool+0x5c>)
 8007440:	4810      	ldr	r0, [pc, #64]	@ (8007484 <do_memp_free_pool+0x60>)
 8007442:	f00e fb15 	bl	8015a70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800744a:	f00c fd84 	bl	8013f56 <sys_arch_protect>
 800744e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	3a01      	subs	r2, #1
 8007458:	609a      	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800746c:	68b8      	ldr	r0, [r7, #8]
 800746e:	f00c fd7a 	bl	8013f66 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	08016ad8 	.word	0x08016ad8
 8007480:	08016b88 	.word	0x08016b88
 8007484:	08016b2c 	.word	0x08016b2c

08007488 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b08      	cmp	r3, #8
 8007498:	d907      	bls.n	80074aa <memp_free+0x22>
 800749a:	4b0c      	ldr	r3, [pc, #48]	@ (80074cc <memp_free+0x44>)
 800749c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80074a0:	490b      	ldr	r1, [pc, #44]	@ (80074d0 <memp_free+0x48>)
 80074a2:	480c      	ldr	r0, [pc, #48]	@ (80074d4 <memp_free+0x4c>)
 80074a4:	f00e fae4 	bl	8015a70 <iprintf>
 80074a8:	e00c      	b.n	80074c4 <memp_free+0x3c>

  if (mem == NULL) {
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	4a09      	ldr	r2, [pc, #36]	@ (80074d8 <memp_free+0x50>)
 80074b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff ffb2 	bl	8007424 <do_memp_free_pool>
 80074c0:	e000      	b.n	80074c4 <memp_free+0x3c>
    return;
 80074c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	08016ad8 	.word	0x08016ad8
 80074d0:	08016ba8 	.word	0x08016ba8
 80074d4:	08016b2c 	.word	0x08016b2c
 80074d8:	08019808 	.word	0x08019808

080074dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80074e0:	bf00      	nop
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <netif_add+0x26>
 8007500:	4b59      	ldr	r3, [pc, #356]	@ (8007668 <netif_add+0x17c>)
 8007502:	f240 1227 	movw	r2, #295	@ 0x127
 8007506:	4959      	ldr	r1, [pc, #356]	@ (800766c <netif_add+0x180>)
 8007508:	4859      	ldr	r0, [pc, #356]	@ (8007670 <netif_add+0x184>)
 800750a:	f00e fab1 	bl	8015a70 <iprintf>
 800750e:	2300      	movs	r3, #0
 8007510:	e0a6      	b.n	8007660 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <netif_add+0x3e>
 8007518:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <netif_add+0x17c>)
 800751a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800751e:	4955      	ldr	r1, [pc, #340]	@ (8007674 <netif_add+0x188>)
 8007520:	4853      	ldr	r0, [pc, #332]	@ (8007670 <netif_add+0x184>)
 8007522:	f00e faa5 	bl	8015a70 <iprintf>
 8007526:	2300      	movs	r3, #0
 8007528:	e09a      	b.n	8007660 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007530:	4b51      	ldr	r3, [pc, #324]	@ (8007678 <netif_add+0x18c>)
 8007532:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800753a:	4b4f      	ldr	r3, [pc, #316]	@ (8007678 <netif_add+0x18c>)
 800753c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007544:	4b4c      	ldr	r3, [pc, #304]	@ (8007678 <netif_add+0x18c>)
 8007546:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a47      	ldr	r2, [pc, #284]	@ (800767c <netif_add+0x190>)
 800755e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3320      	adds	r3, #32
 8007572:	2204      	movs	r2, #4
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f00e fadf 	bl	8015b3a <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a3a      	ldr	r2, [r7, #32]
 8007580:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8007582:	4b3f      	ldr	r3, [pc, #252]	@ (8007680 <netif_add+0x194>)
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007590:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f913 	bl	80077c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	4798      	blx	r3
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <netif_add+0xc2>
    return NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e058      	b.n	8007660 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075b4:	2bff      	cmp	r3, #255	@ 0xff
 80075b6:	d103      	bne.n	80075c0 <netif_add+0xd4>
        netif->num = 0;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80075c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007684 <netif_add+0x198>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e02b      	b.n	8007624 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d106      	bne.n	80075e2 <netif_add+0xf6>
 80075d4:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <netif_add+0x17c>)
 80075d6:	f240 128b 	movw	r2, #395	@ 0x18b
 80075da:	492b      	ldr	r1, [pc, #172]	@ (8007688 <netif_add+0x19c>)
 80075dc:	4824      	ldr	r0, [pc, #144]	@ (8007670 <netif_add+0x184>)
 80075de:	f00e fa47 	bl	8015a70 <iprintf>
        num_netifs++;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	3301      	adds	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2bff      	cmp	r3, #255	@ 0xff
 80075ec:	dd06      	ble.n	80075fc <netif_add+0x110>
 80075ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007668 <netif_add+0x17c>)
 80075f0:	f240 128d 	movw	r2, #397	@ 0x18d
 80075f4:	4925      	ldr	r1, [pc, #148]	@ (800768c <netif_add+0x1a0>)
 80075f6:	481e      	ldr	r0, [pc, #120]	@ (8007670 <netif_add+0x184>)
 80075f8:	f00e fa3a 	bl	8015a70 <iprintf>
        if (netif2->num == netif->num) {
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007608:	429a      	cmp	r2, r3
 800760a:	d108      	bne.n	800761e <netif_add+0x132>
          netif->num++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007612:	3301      	adds	r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800761c:	e005      	b.n	800762a <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1d0      	bne.n	80075cc <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1be      	bne.n	80075ae <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007636:	2bfe      	cmp	r3, #254	@ 0xfe
 8007638:	d103      	bne.n	8007642 <netif_add+0x156>
    netif_num = 0;
 800763a:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <netif_add+0x194>)
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e006      	b.n	8007650 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007648:	3301      	adds	r3, #1
 800764a:	b2da      	uxtb	r2, r3
 800764c:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <netif_add+0x194>)
 800764e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007650:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <netif_add+0x198>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007658:	4a0a      	ldr	r2, [pc, #40]	@ (8007684 <netif_add+0x198>)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	08016bc4 	.word	0x08016bc4
 800766c:	08016c58 	.word	0x08016c58
 8007670:	08016c14 	.word	0x08016c14
 8007674:	08016c74 	.word	0x08016c74
 8007678:	08019884 	.word	0x08019884
 800767c:	08007951 	.word	0x08007951
 8007680:	20003a98 	.word	0x20003a98
 8007684:	20003a90 	.word	0x20003a90
 8007688:	08016c98 	.word	0x08016c98
 800768c:	08016cac 	.word	0x08016cac

08007690 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f002 fecf 	bl	800a440 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f008 f8af 	bl	800f808 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <netif_do_set_ipaddr+0x20>
 80076c6:	4b1d      	ldr	r3, [pc, #116]	@ (800773c <netif_do_set_ipaddr+0x88>)
 80076c8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80076cc:	491c      	ldr	r1, [pc, #112]	@ (8007740 <netif_do_set_ipaddr+0x8c>)
 80076ce:	481d      	ldr	r0, [pc, #116]	@ (8007744 <netif_do_set_ipaddr+0x90>)
 80076d0:	f00e f9ce 	bl	8015a70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <netif_do_set_ipaddr+0x34>
 80076da:	4b18      	ldr	r3, [pc, #96]	@ (800773c <netif_do_set_ipaddr+0x88>)
 80076dc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80076e0:	4917      	ldr	r1, [pc, #92]	@ (8007740 <netif_do_set_ipaddr+0x8c>)
 80076e2:	4818      	ldr	r0, [pc, #96]	@ (8007744 <netif_do_set_ipaddr+0x90>)
 80076e4:	f00e f9c4 	bl	8015a70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3304      	adds	r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d01c      	beq.n	8007730 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007706:	f107 0314 	add.w	r3, r7, #20
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ffbf 	bl	8007690 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <netif_do_set_ipaddr+0x6a>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	e000      	b.n	8007720 <netif_do_set_ipaddr+0x6c>
 800771e:	2300      	movs	r3, #0
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007724:	2101      	movs	r1, #1
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f8d2 	bl	80078d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	08016bc4 	.word	0x08016bc4
 8007740:	08016cdc 	.word	0x08016cdc
 8007744:	08016c14 	.word	0x08016c14

08007748 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3308      	adds	r3, #8
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d00a      	beq.n	8007778 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <netif_do_set_netmask+0x26>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	e000      	b.n	8007770 <netif_do_set_netmask+0x28>
 800776e:	2300      	movs	r3, #0
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	330c      	adds	r3, #12
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d00a      	beq.n	80077b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <netif_do_set_gw+0x26>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	e000      	b.n	80077ae <netif_do_set_gw+0x28>
 80077ac:	2300      	movs	r3, #0
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80077e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007854 <netif_set_addr+0x90>)
 80077e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80077ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007854 <netif_set_addr+0x90>)
 80077ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80077f4:	4b17      	ldr	r3, [pc, #92]	@ (8007854 <netif_set_addr+0x90>)
 80077f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <netif_set_addr+0x42>
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <netif_set_addr+0x46>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <netif_set_addr+0x48>
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d006      	beq.n	8007822 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007814:	f107 0310 	add.w	r3, r7, #16
 8007818:	461a      	mov	r2, r3
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f7ff ff49 	bl	80076b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff ff8e 	bl	8007748 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff ffa8 	bl	8007786 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800783c:	f107 0310 	add.w	r3, r7, #16
 8007840:	461a      	mov	r2, r3
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff ff35 	bl	80076b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800784a:	bf00      	nop
 800784c:	3720      	adds	r7, #32
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	08019884 	.word	0x08019884

08007858 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007860:	4a04      	ldr	r2, [pc, #16]	@ (8007874 <netif_set_default+0x1c>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20003a94 	.word	0x20003a94

08007878 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <netif_set_up+0x1e>
 8007886:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <netif_set_up+0x4c>)
 8007888:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800788c:	490e      	ldr	r1, [pc, #56]	@ (80078c8 <netif_set_up+0x50>)
 800788e:	480f      	ldr	r0, [pc, #60]	@ (80078cc <netif_set_up+0x54>)
 8007890:	f00e f8ee 	bl	8015a70 <iprintf>
 8007894:	e013      	b.n	80078be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80078b6:	2103      	movs	r1, #3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f809 	bl	80078d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08016bc4 	.word	0x08016bc4
 80078c8:	08016d4c 	.word	0x08016d4c
 80078cc:	08016c14 	.word	0x08016c14

080078d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <netif_issue_reports+0x20>
 80078e2:	4b18      	ldr	r3, [pc, #96]	@ (8007944 <netif_issue_reports+0x74>)
 80078e4:	f240 326d 	movw	r2, #877	@ 0x36d
 80078e8:	4917      	ldr	r1, [pc, #92]	@ (8007948 <netif_issue_reports+0x78>)
 80078ea:	4818      	ldr	r0, [pc, #96]	@ (800794c <netif_issue_reports+0x7c>)
 80078ec:	f00e f8c0 	bl	8015a70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01e      	beq.n	800793c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007904:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007908:	2b00      	cmp	r3, #0
 800790a:	d017      	beq.n	800793c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d013      	beq.n	800793e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00e      	beq.n	800793e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f00a fd87 	bl	8012448 <etharp_request>
 800793a:	e000      	b.n	800793e <netif_issue_reports+0x6e>
    return;
 800793c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08016bc4 	.word	0x08016bc4
 8007948:	08016d68 	.word	0x08016d68
 800794c:	08016c14 	.word	0x08016c14

08007950 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800795c:	f06f 030b 	mvn.w	r3, #11
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d013      	beq.n	80079a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800797c:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <netif_get_by_index+0x48>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e00c      	b.n	800799e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800798a:	3301      	adds	r3, #1
 800798c:	b2db      	uxtb	r3, r3
 800798e:	79fa      	ldrb	r2, [r7, #7]
 8007990:	429a      	cmp	r2, r3
 8007992:	d101      	bne.n	8007998 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	e006      	b.n	80079a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1ef      	bne.n	8007984 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20003a90 	.word	0x20003a90

080079b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80079be:	f00c faca 	bl	8013f56 <sys_arch_protect>
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <pbuf_pool_is_empty+0x20>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f00c facb 	bl	8013f66 <sys_arch_unprotect>
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20003a99 	.word	0x20003a99

080079dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4611      	mov	r1, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	460b      	mov	r3, r1
 80079ec:	80fb      	strh	r3, [r7, #6]
 80079ee:	4613      	mov	r3, r2
 80079f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88ba      	ldrh	r2, [r7, #4]
 8007a08:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007a0a:	8b3b      	ldrh	r3, [r7, #24]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	7f3a      	ldrb	r2, [r7, #28]
 8007a16:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	73da      	strb	r2, [r3, #15]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08c      	sub	sp, #48	@ 0x30
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	80bb      	strh	r3, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007a46:	887b      	ldrh	r3, [r7, #2]
 8007a48:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007a4c:	d07f      	beq.n	8007b4e <pbuf_alloc+0x11e>
 8007a4e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007a52:	f300 80c7 	bgt.w	8007be4 <pbuf_alloc+0x1b4>
 8007a56:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007a5a:	d010      	beq.n	8007a7e <pbuf_alloc+0x4e>
 8007a5c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007a60:	f300 80c0 	bgt.w	8007be4 <pbuf_alloc+0x1b4>
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d002      	beq.n	8007a6e <pbuf_alloc+0x3e>
 8007a68:	2b41      	cmp	r3, #65	@ 0x41
 8007a6a:	f040 80bb 	bne.w	8007be4 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007a6e:	887a      	ldrh	r2, [r7, #2]
 8007a70:	88bb      	ldrh	r3, [r7, #4]
 8007a72:	4619      	mov	r1, r3
 8007a74:	2000      	movs	r0, #0
 8007a76:	f000 f8d1 	bl	8007c1c <pbuf_alloc_reference>
 8007a7a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007a7c:	e0bc      	b.n	8007bf8 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007a86:	88bb      	ldrh	r3, [r7, #4]
 8007a88:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a8a:	2008      	movs	r0, #8
 8007a8c:	f7ff fca4 	bl	80073d8 <memp_malloc>
 8007a90:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007a98:	f7ff ff8e 	bl	80079b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007aa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007aa4:	f000 faa6 	bl	8007ff4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e0a6      	b.n	8007bfa <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007aac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007aae:	3303      	adds	r3, #3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8b7a      	ldrh	r2, [r7, #26]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	bf28      	it	cs
 8007ac4:	4613      	movcs	r3, r2
 8007ac6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007ac8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007aca:	3310      	adds	r3, #16
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4413      	add	r3, r2
 8007ad0:	3303      	adds	r3, #3
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	89f9      	ldrh	r1, [r7, #14]
 8007ada:	8b7a      	ldrh	r2, [r7, #26]
 8007adc:	2300      	movs	r3, #0
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	887b      	ldrh	r3, [r7, #2]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	6938      	ldr	r0, [r7, #16]
 8007aea:	f7ff ff77 	bl	80079dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d006      	beq.n	8007b08 <pbuf_alloc+0xd8>
 8007afa:	4b42      	ldr	r3, [pc, #264]	@ (8007c04 <pbuf_alloc+0x1d4>)
 8007afc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b00:	4941      	ldr	r1, [pc, #260]	@ (8007c08 <pbuf_alloc+0x1d8>)
 8007b02:	4842      	ldr	r0, [pc, #264]	@ (8007c0c <pbuf_alloc+0x1dc>)
 8007b04:	f00d ffb4 	bl	8015a70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007b08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b0a:	3303      	adds	r3, #3
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007b14:	d106      	bne.n	8007b24 <pbuf_alloc+0xf4>
 8007b16:	4b3b      	ldr	r3, [pc, #236]	@ (8007c04 <pbuf_alloc+0x1d4>)
 8007b18:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007b1c:	493c      	ldr	r1, [pc, #240]	@ (8007c10 <pbuf_alloc+0x1e0>)
 8007b1e:	483b      	ldr	r0, [pc, #236]	@ (8007c0c <pbuf_alloc+0x1dc>)
 8007b20:	f00d ffa6 	bl	8015a70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b2e:	e002      	b.n	8007b36 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007b3a:	8b7a      	ldrh	r2, [r7, #26]
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007b46:	8b7b      	ldrh	r3, [r7, #26]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d19e      	bne.n	8007a8a <pbuf_alloc+0x5a>
      break;
 8007b4c:	e054      	b.n	8007bf8 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007b4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b50:	3303      	adds	r3, #3
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	88bb      	ldrh	r3, [r7, #4]
 8007b5c:	3303      	adds	r3, #3
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4413      	add	r3, r2
 8007b68:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007b6a:	8b3b      	ldrh	r3, [r7, #24]
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b70:	8b3a      	ldrh	r2, [r7, #24]
 8007b72:	88bb      	ldrh	r3, [r7, #4]
 8007b74:	3303      	adds	r3, #3
 8007b76:	f023 0303 	bic.w	r3, r3, #3
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d306      	bcc.n	8007b8c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007b7e:	88bb      	ldrh	r3, [r7, #4]
 8007b80:	3303      	adds	r3, #3
 8007b82:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d201      	bcs.n	8007b90 <pbuf_alloc+0x160>
        return NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e034      	b.n	8007bfa <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007b90:	6978      	ldr	r0, [r7, #20]
 8007b92:	f7ff fb25 	bl	80071e0 <mem_malloc>
 8007b96:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <pbuf_alloc+0x172>
        return NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e02b      	b.n	8007bfa <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007ba2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ba4:	3310      	adds	r3, #16
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba8:	4413      	add	r3, r2
 8007baa:	3303      	adds	r3, #3
 8007bac:	f023 0303 	bic.w	r3, r3, #3
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	88b9      	ldrh	r1, [r7, #4]
 8007bb4:	88ba      	ldrh	r2, [r7, #4]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	887b      	ldrh	r3, [r7, #2]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bc4:	f7ff ff0a 	bl	80079dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f003 0303 	and.w	r3, r3, #3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d010      	beq.n	8007bf6 <pbuf_alloc+0x1c6>
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8007c04 <pbuf_alloc+0x1d4>)
 8007bd6:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007bda:	490e      	ldr	r1, [pc, #56]	@ (8007c14 <pbuf_alloc+0x1e4>)
 8007bdc:	480b      	ldr	r0, [pc, #44]	@ (8007c0c <pbuf_alloc+0x1dc>)
 8007bde:	f00d ff47 	bl	8015a70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007be2:	e008      	b.n	8007bf6 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007be4:	4b07      	ldr	r3, [pc, #28]	@ (8007c04 <pbuf_alloc+0x1d4>)
 8007be6:	f240 1227 	movw	r2, #295	@ 0x127
 8007bea:	490b      	ldr	r1, [pc, #44]	@ (8007c18 <pbuf_alloc+0x1e8>)
 8007bec:	4807      	ldr	r0, [pc, #28]	@ (8007c0c <pbuf_alloc+0x1dc>)
 8007bee:	f00d ff3f 	bl	8015a70 <iprintf>
      return NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e001      	b.n	8007bfa <pbuf_alloc+0x1ca>
      break;
 8007bf6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	@ 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	08016df4 	.word	0x08016df4
 8007c08:	08016e24 	.word	0x08016e24
 8007c0c:	08016e54 	.word	0x08016e54
 8007c10:	08016e7c 	.word	0x08016e7c
 8007c14:	08016eb0 	.word	0x08016eb0
 8007c18:	08016edc 	.word	0x08016edc

08007c1c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007c2c:	883b      	ldrh	r3, [r7, #0]
 8007c2e:	2b41      	cmp	r3, #65	@ 0x41
 8007c30:	d009      	beq.n	8007c46 <pbuf_alloc_reference+0x2a>
 8007c32:	883b      	ldrh	r3, [r7, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d006      	beq.n	8007c46 <pbuf_alloc_reference+0x2a>
 8007c38:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <pbuf_alloc_reference+0x5c>)
 8007c3a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007c3e:	490f      	ldr	r1, [pc, #60]	@ (8007c7c <pbuf_alloc_reference+0x60>)
 8007c40:	480f      	ldr	r0, [pc, #60]	@ (8007c80 <pbuf_alloc_reference+0x64>)
 8007c42:	f00d ff15 	bl	8015a70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007c46:	2007      	movs	r0, #7
 8007c48:	f7ff fbc6 	bl	80073d8 <memp_malloc>
 8007c4c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e00b      	b.n	8007c70 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007c58:	8879      	ldrh	r1, [r7, #2]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	883b      	ldrh	r3, [r7, #0]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	460b      	mov	r3, r1
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff feb7 	bl	80079dc <pbuf_init_alloced_pbuf>
  return p;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	08016df4 	.word	0x08016df4
 8007c7c:	08016ef8 	.word	0x08016ef8
 8007c80:	08016e54 	.word	0x08016e54

08007c84 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	460b      	mov	r3, r1
 8007c92:	81bb      	strh	r3, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007c9c:	8a7b      	ldrh	r3, [r7, #18]
 8007c9e:	3303      	adds	r3, #3
 8007ca0:	f023 0203 	bic.w	r2, r3, #3
 8007ca4:	89bb      	ldrh	r3, [r7, #12]
 8007ca6:	441a      	add	r2, r3
 8007ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d901      	bls.n	8007cb2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e018      	b.n	8007ce4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007cb8:	8a7b      	ldrh	r3, [r7, #18]
 8007cba:	3303      	adds	r3, #3
 8007cbc:	f023 0303 	bic.w	r3, r3, #3
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e001      	b.n	8007ccc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	89b9      	ldrh	r1, [r7, #12]
 8007cd0:	89ba      	ldrh	r2, [r7, #12]
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	897b      	ldrh	r3, [r7, #10]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	6979      	ldr	r1, [r7, #20]
 8007cde:	f7ff fe7d 	bl	80079dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007ce2:	687b      	ldr	r3, [r7, #4]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d106      	bne.n	8007d0c <pbuf_realloc+0x20>
 8007cfe:	4b39      	ldr	r3, [pc, #228]	@ (8007de4 <pbuf_realloc+0xf8>)
 8007d00:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007d04:	4938      	ldr	r1, [pc, #224]	@ (8007de8 <pbuf_realloc+0xfc>)
 8007d06:	4839      	ldr	r0, [pc, #228]	@ (8007dec <pbuf_realloc+0x100>)
 8007d08:	f00d feb2 	bl	8015a70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	891b      	ldrh	r3, [r3, #8]
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d261      	bcs.n	8007dda <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	891a      	ldrh	r2, [r3, #8]
 8007d1a:	887b      	ldrh	r3, [r7, #2]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	817b      	strh	r3, [r7, #10]
  q = p;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007d28:	e018      	b.n	8007d5c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	895b      	ldrh	r3, [r3, #10]
 8007d2e:	897a      	ldrh	r2, [r7, #10]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	891a      	ldrh	r2, [r3, #8]
 8007d38:	893b      	ldrh	r3, [r7, #8]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <pbuf_realloc+0x70>
 8007d4e:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <pbuf_realloc+0xf8>)
 8007d50:	f240 12af 	movw	r2, #431	@ 0x1af
 8007d54:	4926      	ldr	r1, [pc, #152]	@ (8007df0 <pbuf_realloc+0x104>)
 8007d56:	4825      	ldr	r0, [pc, #148]	@ (8007dec <pbuf_realloc+0x100>)
 8007d58:	f00d fe8a 	bl	8015a70 <iprintf>
  while (rem_len > q->len) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	895b      	ldrh	r3, [r3, #10]
 8007d60:	897a      	ldrh	r2, [r7, #10]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d8e1      	bhi.n	8007d2a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	7b1b      	ldrb	r3, [r3, #12]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d11f      	bne.n	8007db2 <pbuf_realloc+0xc6>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	895b      	ldrh	r3, [r3, #10]
 8007d76:	897a      	ldrh	r2, [r7, #10]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d01a      	beq.n	8007db2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	7b5b      	ldrb	r3, [r3, #13]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d114      	bne.n	8007db2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1ad2      	subs	r2, r2, r3
 8007d90:	897b      	ldrh	r3, [r7, #10]
 8007d92:	4413      	add	r3, r2
 8007d94:	4619      	mov	r1, r3
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fa16 	bl	80071c8 <mem_trim>
 8007d9c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <pbuf_realloc+0xc6>
 8007da4:	4b0f      	ldr	r3, [pc, #60]	@ (8007de4 <pbuf_realloc+0xf8>)
 8007da6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007daa:	4912      	ldr	r1, [pc, #72]	@ (8007df4 <pbuf_realloc+0x108>)
 8007dac:	480f      	ldr	r0, [pc, #60]	@ (8007dec <pbuf_realloc+0x100>)
 8007dae:	f00d fe5f 	bl	8015a70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	897a      	ldrh	r2, [r7, #10]
 8007db6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	895a      	ldrh	r2, [r3, #10]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f911 	bl	8007ff4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e000      	b.n	8007ddc <pbuf_realloc+0xf0>
    return;
 8007dda:	bf00      	nop

}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	08016df4 	.word	0x08016df4
 8007de8:	08016f0c 	.word	0x08016f0c
 8007dec:	08016e54 	.word	0x08016e54
 8007df0:	08016f24 	.word	0x08016f24
 8007df4:	08016f3c 	.word	0x08016f3c

08007df8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <pbuf_add_header_impl+0x22>
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007ebc <pbuf_add_header_impl+0xc4>)
 8007e0e:	f240 12df 	movw	r2, #479	@ 0x1df
 8007e12:	492b      	ldr	r1, [pc, #172]	@ (8007ec0 <pbuf_add_header_impl+0xc8>)
 8007e14:	482b      	ldr	r0, [pc, #172]	@ (8007ec4 <pbuf_add_header_impl+0xcc>)
 8007e16:	f00d fe2b 	bl	8015a70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <pbuf_add_header_impl+0x30>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e26:	d301      	bcc.n	8007e2c <pbuf_add_header_impl+0x34>
    return 1;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e043      	b.n	8007eb4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <pbuf_add_header_impl+0x3e>
    return 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e03e      	b.n	8007eb4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	891a      	ldrh	r2, [r3, #8]
 8007e3e:	8a7b      	ldrh	r3, [r7, #18]
 8007e40:	4413      	add	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8a7a      	ldrh	r2, [r7, #18]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d901      	bls.n	8007e4e <pbuf_add_header_impl+0x56>
    return 1;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e032      	b.n	8007eb4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	7b1b      	ldrb	r3, [r3, #12]
 8007e52:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007e54:	8a3b      	ldrh	r3, [r7, #16]
 8007e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	425b      	negs	r3, r3
 8007e66:	4413      	add	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3310      	adds	r3, #16
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d20d      	bcs.n	8007e90 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e01d      	b.n	8007eb4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d006      	beq.n	8007e8c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	425b      	negs	r3, r3
 8007e86:	4413      	add	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	e001      	b.n	8007e90 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e011      	b.n	8007eb4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	895a      	ldrh	r2, [r3, #10]
 8007e9a:	8a7b      	ldrh	r3, [r7, #18]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	891a      	ldrh	r2, [r3, #8]
 8007ea8:	8a7b      	ldrh	r3, [r7, #18]
 8007eaa:	4413      	add	r3, r2
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	811a      	strh	r2, [r3, #8]


  return 0;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	08016df4 	.word	0x08016df4
 8007ec0:	08016f58 	.word	0x08016f58
 8007ec4:	08016e54 	.word	0x08016e54

08007ec8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff ff8e 	bl	8007df8 <pbuf_add_header_impl>
 8007edc:	4603      	mov	r3, r0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <pbuf_remove_header+0x1e>
 8007ef8:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <pbuf_remove_header+0x94>)
 8007efa:	f240 224b 	movw	r2, #587	@ 0x24b
 8007efe:	4920      	ldr	r1, [pc, #128]	@ (8007f80 <pbuf_remove_header+0x98>)
 8007f00:	4820      	ldr	r0, [pc, #128]	@ (8007f84 <pbuf_remove_header+0x9c>)
 8007f02:	f00d fdb5 	bl	8015a70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <pbuf_remove_header+0x2c>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f12:	d301      	bcc.n	8007f18 <pbuf_remove_header+0x30>
    return 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02c      	b.n	8007f72 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <pbuf_remove_header+0x3a>
    return 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e027      	b.n	8007f72 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	895b      	ldrh	r3, [r3, #10]
 8007f2a:	89fa      	ldrh	r2, [r7, #14]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d908      	bls.n	8007f42 <pbuf_remove_header+0x5a>
 8007f30:	4b12      	ldr	r3, [pc, #72]	@ (8007f7c <pbuf_remove_header+0x94>)
 8007f32:	f240 2255 	movw	r2, #597	@ 0x255
 8007f36:	4914      	ldr	r1, [pc, #80]	@ (8007f88 <pbuf_remove_header+0xa0>)
 8007f38:	4812      	ldr	r0, [pc, #72]	@ (8007f84 <pbuf_remove_header+0x9c>)
 8007f3a:	f00d fd99 	bl	8015a70 <iprintf>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e017      	b.n	8007f72 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	441a      	add	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	895a      	ldrh	r2, [r3, #10]
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	891a      	ldrh	r2, [r3, #8]
 8007f66:	89fb      	ldrh	r3, [r7, #14]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08016df4 	.word	0x08016df4
 8007f80:	08016f58 	.word	0x08016f58
 8007f84:	08016e54 	.word	0x08016e54
 8007f88:	08016f64 	.word	0x08016f64

08007f8c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007f9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	da08      	bge.n	8007fb6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007fa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fa8:	425b      	negs	r3, r3
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff9b 	bl	8007ee8 <pbuf_remove_header>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	e007      	b.n	8007fc6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fba:	787a      	ldrb	r2, [r7, #1]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff ff1a 	bl	8007df8 <pbuf_add_header_impl>
 8007fc4:	4603      	mov	r3, r0
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007fda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff ffd2 	bl	8007f8c <pbuf_header_impl>
 8007fe8:	4603      	mov	r3, r0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <pbuf_free+0x22>
 8008008:	4b3b      	ldr	r3, [pc, #236]	@ (80080f8 <pbuf_free+0x104>)
 800800a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800800e:	493b      	ldr	r1, [pc, #236]	@ (80080fc <pbuf_free+0x108>)
 8008010:	483b      	ldr	r0, [pc, #236]	@ (8008100 <pbuf_free+0x10c>)
 8008012:	f00d fd2d 	bl	8015a70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008016:	2300      	movs	r3, #0
 8008018:	e069      	b.n	80080ee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800801e:	e062      	b.n	80080e6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008020:	f00b ff99 	bl	8013f56 <sys_arch_protect>
 8008024:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7b9b      	ldrb	r3, [r3, #14]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <pbuf_free+0x48>
 800802e:	4b32      	ldr	r3, [pc, #200]	@ (80080f8 <pbuf_free+0x104>)
 8008030:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008034:	4933      	ldr	r1, [pc, #204]	@ (8008104 <pbuf_free+0x110>)
 8008036:	4832      	ldr	r0, [pc, #200]	@ (8008100 <pbuf_free+0x10c>)
 8008038:	f00d fd1a 	bl	8015a70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7b9b      	ldrb	r3, [r3, #14]
 8008040:	3b01      	subs	r3, #1
 8008042:	b2da      	uxtb	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	739a      	strb	r2, [r3, #14]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7b9b      	ldrb	r3, [r3, #14]
 800804c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800804e:	69b8      	ldr	r0, [r7, #24]
 8008050:	f00b ff89 	bl	8013f66 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d143      	bne.n	80080e2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7b1b      	ldrb	r3, [r3, #12]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7b5b      	ldrb	r3, [r3, #13]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d011      	beq.n	800809a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <pbuf_free+0x9c>
 8008082:	4b1d      	ldr	r3, [pc, #116]	@ (80080f8 <pbuf_free+0x104>)
 8008084:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008088:	491f      	ldr	r1, [pc, #124]	@ (8008108 <pbuf_free+0x114>)
 800808a:	481d      	ldr	r0, [pc, #116]	@ (8008100 <pbuf_free+0x10c>)
 800808c:	f00d fcf0 	bl	8015a70 <iprintf>
        pc->custom_free_function(p);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
 8008098:	e01d      	b.n	80080d6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d104      	bne.n	80080aa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	2008      	movs	r0, #8
 80080a4:	f7ff f9f0 	bl	8007488 <memp_free>
 80080a8:	e015      	b.n	80080d6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d104      	bne.n	80080ba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	2007      	movs	r0, #7
 80080b4:	f7ff f9e8 	bl	8007488 <memp_free>
 80080b8:	e00d      	b.n	80080d6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <pbuf_free+0xd4>
          mem_free(p);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff f8b9 	bl	8007238 <mem_free>
 80080c6:	e006      	b.n	80080d6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80080c8:	4b0b      	ldr	r3, [pc, #44]	@ (80080f8 <pbuf_free+0x104>)
 80080ca:	f240 320f 	movw	r2, #783	@ 0x30f
 80080ce:	490f      	ldr	r1, [pc, #60]	@ (800810c <pbuf_free+0x118>)
 80080d0:	480b      	ldr	r0, [pc, #44]	@ (8008100 <pbuf_free+0x10c>)
 80080d2:	f00d fccd 	bl	8015a70 <iprintf>
        }
      }
      count++;
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
 80080d8:	3301      	adds	r3, #1
 80080da:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	e001      	b.n	80080e6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d199      	bne.n	8008020 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80080ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3720      	adds	r7, #32
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08016df4 	.word	0x08016df4
 80080fc:	08016f58 	.word	0x08016f58
 8008100:	08016e54 	.word	0x08016e54
 8008104:	08016f84 	.word	0x08016f84
 8008108:	08016f9c 	.word	0x08016f9c
 800810c:	08016fc0 	.word	0x08016fc0

08008110 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800811c:	e005      	b.n	800812a <pbuf_clen+0x1a>
    ++len;
 800811e:	89fb      	ldrh	r3, [r7, #14]
 8008120:	3301      	adds	r3, #1
 8008122:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f6      	bne.n	800811e <pbuf_clen+0xe>
  }
  return len;
 8008130:	89fb      	ldrh	r3, [r7, #14]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
	...

08008140 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d016      	beq.n	800817c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800814e:	f00b ff02 	bl	8013f56 <sys_arch_protect>
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7b9b      	ldrb	r3, [r3, #14]
 8008158:	3301      	adds	r3, #1
 800815a:	b2da      	uxtb	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	739a      	strb	r2, [r3, #14]
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f00b ff00 	bl	8013f66 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7b9b      	ldrb	r3, [r3, #14]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <pbuf_ref+0x3c>
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <pbuf_ref+0x44>)
 8008170:	f240 3242 	movw	r2, #834	@ 0x342
 8008174:	4904      	ldr	r1, [pc, #16]	@ (8008188 <pbuf_ref+0x48>)
 8008176:	4805      	ldr	r0, [pc, #20]	@ (800818c <pbuf_ref+0x4c>)
 8008178:	f00d fc7a 	bl	8015a70 <iprintf>
  }
}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	08016df4 	.word	0x08016df4
 8008188:	08016fd4 	.word	0x08016fd4
 800818c:	08016e54 	.word	0x08016e54

08008190 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <pbuf_cat+0x16>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d107      	bne.n	80081b6 <pbuf_cat+0x26>
 80081a6:	4b20      	ldr	r3, [pc, #128]	@ (8008228 <pbuf_cat+0x98>)
 80081a8:	f240 3259 	movw	r2, #857	@ 0x359
 80081ac:	491f      	ldr	r1, [pc, #124]	@ (800822c <pbuf_cat+0x9c>)
 80081ae:	4820      	ldr	r0, [pc, #128]	@ (8008230 <pbuf_cat+0xa0>)
 80081b0:	f00d fc5e 	bl	8015a70 <iprintf>
 80081b4:	e034      	b.n	8008220 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e00a      	b.n	80081d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	891a      	ldrh	r2, [r3, #8]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	891b      	ldrh	r3, [r3, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f0      	bne.n	80081bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	891a      	ldrh	r2, [r3, #8]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	895b      	ldrh	r3, [r3, #10]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d006      	beq.n	80081f4 <pbuf_cat+0x64>
 80081e6:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <pbuf_cat+0x98>)
 80081e8:	f240 3262 	movw	r2, #866	@ 0x362
 80081ec:	4911      	ldr	r1, [pc, #68]	@ (8008234 <pbuf_cat+0xa4>)
 80081ee:	4810      	ldr	r0, [pc, #64]	@ (8008230 <pbuf_cat+0xa0>)
 80081f0:	f00d fc3e 	bl	8015a70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <pbuf_cat+0x7a>
 80081fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <pbuf_cat+0x98>)
 80081fe:	f240 3263 	movw	r2, #867	@ 0x363
 8008202:	490d      	ldr	r1, [pc, #52]	@ (8008238 <pbuf_cat+0xa8>)
 8008204:	480a      	ldr	r0, [pc, #40]	@ (8008230 <pbuf_cat+0xa0>)
 8008206:	f00d fc33 	bl	8015a70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	891a      	ldrh	r2, [r3, #8]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	891b      	ldrh	r3, [r3, #8]
 8008212:	4413      	add	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	08016df4 	.word	0x08016df4
 800822c:	08016fe8 	.word	0x08016fe8
 8008230:	08016e54 	.word	0x08016e54
 8008234:	08017020 	.word	0x08017020
 8008238:	08017050 	.word	0x08017050

0800823c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ffa1 	bl	8008190 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800824e:	6838      	ldr	r0, [r7, #0]
 8008250:	f7ff ff76 	bl	8008140 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <pbuf_copy+0x2a>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <pbuf_copy+0x2a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	891a      	ldrh	r2, [r3, #8]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	891b      	ldrh	r3, [r3, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	d209      	bcs.n	800829a <pbuf_copy+0x3e>
 8008286:	4b57      	ldr	r3, [pc, #348]	@ (80083e4 <pbuf_copy+0x188>)
 8008288:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800828c:	4956      	ldr	r1, [pc, #344]	@ (80083e8 <pbuf_copy+0x18c>)
 800828e:	4857      	ldr	r0, [pc, #348]	@ (80083ec <pbuf_copy+0x190>)
 8008290:	f00d fbee 	bl	8015a70 <iprintf>
 8008294:	f06f 030f 	mvn.w	r3, #15
 8008298:	e09f      	b.n	80083da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	895b      	ldrh	r3, [r3, #10]
 800829e:	461a      	mov	r2, r3
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	895b      	ldrh	r3, [r3, #10]
 80082a8:	4619      	mov	r1, r3
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1acb      	subs	r3, r1, r3
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d306      	bcc.n	80082c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	895b      	ldrh	r3, [r3, #10]
 80082b6:	461a      	mov	r2, r3
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e005      	b.n	80082cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	895b      	ldrh	r3, [r3, #10]
 80082c4:	461a      	mov	r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	18d0      	adds	r0, r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4413      	add	r3, r2
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4619      	mov	r1, r3
 80082e0:	f00d fccf 	bl	8015c82 <memcpy>
    offset_to += len;
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4413      	add	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	895b      	ldrh	r3, [r3, #10]
 80082f8:	461a      	mov	r2, r3
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d906      	bls.n	800830e <pbuf_copy+0xb2>
 8008300:	4b38      	ldr	r3, [pc, #224]	@ (80083e4 <pbuf_copy+0x188>)
 8008302:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008306:	493a      	ldr	r1, [pc, #232]	@ (80083f0 <pbuf_copy+0x194>)
 8008308:	4838      	ldr	r0, [pc, #224]	@ (80083ec <pbuf_copy+0x190>)
 800830a:	f00d fbb1 	bl	8015a70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	895b      	ldrh	r3, [r3, #10]
 8008312:	461a      	mov	r2, r3
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4293      	cmp	r3, r2
 8008318:	d906      	bls.n	8008328 <pbuf_copy+0xcc>
 800831a:	4b32      	ldr	r3, [pc, #200]	@ (80083e4 <pbuf_copy+0x188>)
 800831c:	f240 32da 	movw	r2, #986	@ 0x3da
 8008320:	4934      	ldr	r1, [pc, #208]	@ (80083f4 <pbuf_copy+0x198>)
 8008322:	4832      	ldr	r0, [pc, #200]	@ (80083ec <pbuf_copy+0x190>)
 8008324:	f00d fba4 	bl	8015a70 <iprintf>
    if (offset_from >= p_from->len) {
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	895b      	ldrh	r3, [r3, #10]
 800832c:	461a      	mov	r2, r3
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	4293      	cmp	r3, r2
 8008332:	d304      	bcc.n	800833e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	895b      	ldrh	r3, [r3, #10]
 8008342:	461a      	mov	r2, r3
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	4293      	cmp	r3, r2
 8008348:	d114      	bne.n	8008374 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10c      	bne.n	8008374 <pbuf_copy+0x118>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d009      	beq.n	8008374 <pbuf_copy+0x118>
 8008360:	4b20      	ldr	r3, [pc, #128]	@ (80083e4 <pbuf_copy+0x188>)
 8008362:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008366:	4924      	ldr	r1, [pc, #144]	@ (80083f8 <pbuf_copy+0x19c>)
 8008368:	4820      	ldr	r0, [pc, #128]	@ (80083ec <pbuf_copy+0x190>)
 800836a:	f00d fb81 	bl	8015a70 <iprintf>
 800836e:	f06f 030f 	mvn.w	r3, #15
 8008372:	e032      	b.n	80083da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d013      	beq.n	80083a2 <pbuf_copy+0x146>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	895a      	ldrh	r2, [r3, #10]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	891b      	ldrh	r3, [r3, #8]
 8008382:	429a      	cmp	r2, r3
 8008384:	d10d      	bne.n	80083a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <pbuf_copy+0x146>
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <pbuf_copy+0x188>)
 8008390:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008394:	4919      	ldr	r1, [pc, #100]	@ (80083fc <pbuf_copy+0x1a0>)
 8008396:	4815      	ldr	r0, [pc, #84]	@ (80083ec <pbuf_copy+0x190>)
 8008398:	f00d fb6a 	bl	8015a70 <iprintf>
 800839c:	f06f 0305 	mvn.w	r3, #5
 80083a0:	e01b      	b.n	80083da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d013      	beq.n	80083d0 <pbuf_copy+0x174>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	895a      	ldrh	r2, [r3, #10]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	891b      	ldrh	r3, [r3, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d10d      	bne.n	80083d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d009      	beq.n	80083d0 <pbuf_copy+0x174>
 80083bc:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <pbuf_copy+0x188>)
 80083be:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80083c2:	490e      	ldr	r1, [pc, #56]	@ (80083fc <pbuf_copy+0x1a0>)
 80083c4:	4809      	ldr	r0, [pc, #36]	@ (80083ec <pbuf_copy+0x190>)
 80083c6:	f00d fb53 	bl	8015a70 <iprintf>
 80083ca:	f06f 0305 	mvn.w	r3, #5
 80083ce:	e004      	b.n	80083da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f47f af61 	bne.w	800829a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08016df4 	.word	0x08016df4
 80083e8:	0801709c 	.word	0x0801709c
 80083ec:	08016e54 	.word	0x08016e54
 80083f0:	080170cc 	.word	0x080170cc
 80083f4:	080170e4 	.word	0x080170e4
 80083f8:	08017100 	.word	0x08017100
 80083fc:	08017110 	.word	0x08017110

08008400 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	460b      	mov	r3, r1
 8008410:	80fb      	strh	r3, [r7, #6]
 8008412:	4613      	mov	r3, r2
 8008414:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d108      	bne.n	8008436 <pbuf_copy_partial+0x36>
 8008424:	4b2b      	ldr	r3, [pc, #172]	@ (80084d4 <pbuf_copy_partial+0xd4>)
 8008426:	f240 420a 	movw	r2, #1034	@ 0x40a
 800842a:	492b      	ldr	r1, [pc, #172]	@ (80084d8 <pbuf_copy_partial+0xd8>)
 800842c:	482b      	ldr	r0, [pc, #172]	@ (80084dc <pbuf_copy_partial+0xdc>)
 800842e:	f00d fb1f 	bl	8015a70 <iprintf>
 8008432:	2300      	movs	r3, #0
 8008434:	e04a      	b.n	80084cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d108      	bne.n	800844e <pbuf_copy_partial+0x4e>
 800843c:	4b25      	ldr	r3, [pc, #148]	@ (80084d4 <pbuf_copy_partial+0xd4>)
 800843e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008442:	4927      	ldr	r1, [pc, #156]	@ (80084e0 <pbuf_copy_partial+0xe0>)
 8008444:	4825      	ldr	r0, [pc, #148]	@ (80084dc <pbuf_copy_partial+0xdc>)
 8008446:	f00d fb13 	bl	8015a70 <iprintf>
 800844a:	2300      	movs	r3, #0
 800844c:	e03e      	b.n	80084cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	61fb      	str	r3, [r7, #28]
 8008452:	e034      	b.n	80084be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008454:	88bb      	ldrh	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <pbuf_copy_partial+0x70>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	895b      	ldrh	r3, [r3, #10]
 800845e:	88ba      	ldrh	r2, [r7, #4]
 8008460:	429a      	cmp	r2, r3
 8008462:	d305      	bcc.n	8008470 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	895b      	ldrh	r3, [r3, #10]
 8008468:	88ba      	ldrh	r2, [r7, #4]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	80bb      	strh	r3, [r7, #4]
 800846e:	e023      	b.n	80084b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	895a      	ldrh	r2, [r3, #10]
 8008474:	88bb      	ldrh	r3, [r7, #4]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800847a:	8b3a      	ldrh	r2, [r7, #24]
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	429a      	cmp	r2, r3
 8008480:	d901      	bls.n	8008486 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008486:	8b7b      	ldrh	r3, [r7, #26]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	18d0      	adds	r0, r2, r3
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	88bb      	ldrh	r3, [r7, #4]
 8008492:	4413      	add	r3, r2
 8008494:	8b3a      	ldrh	r2, [r7, #24]
 8008496:	4619      	mov	r1, r3
 8008498:	f00d fbf3 	bl	8015c82 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800849c:	8afa      	ldrh	r2, [r7, #22]
 800849e:	8b3b      	ldrh	r3, [r7, #24]
 80084a0:	4413      	add	r3, r2
 80084a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80084a4:	8b7a      	ldrh	r2, [r7, #26]
 80084a6:	8b3b      	ldrh	r3, [r7, #24]
 80084a8:	4413      	add	r3, r2
 80084aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80084ac:	88fa      	ldrh	r2, [r7, #6]
 80084ae:	8b3b      	ldrh	r3, [r7, #24]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <pbuf_copy_partial+0xca>
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1c4      	bne.n	8008454 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80084ca:	8afb      	ldrh	r3, [r7, #22]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3720      	adds	r7, #32
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	08016df4 	.word	0x08016df4
 80084d8:	0801713c 	.word	0x0801713c
 80084dc:	08016e54 	.word	0x08016e54
 80084e0:	0801715c 	.word	0x0801715c

080084e4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	460b      	mov	r3, r1
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80084fa:	e007      	b.n	800850c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	895b      	ldrh	r3, [r3, #10]
 8008500:	8afa      	ldrh	r2, [r7, #22]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d004      	beq.n	800851c <pbuf_skip_const+0x38>
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	895b      	ldrh	r3, [r3, #10]
 8008516:	8afa      	ldrh	r2, [r7, #22]
 8008518:	429a      	cmp	r2, r3
 800851a:	d2ef      	bcs.n	80084fc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8afa      	ldrh	r2, [r7, #22]
 8008526:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8008528:	693b      	ldr	r3, [r7, #16]
}
 800852a:	4618      	mov	r0, r3
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	460b      	mov	r3, r1
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008544:	897b      	ldrh	r3, [r7, #10]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff ffca 	bl	80084e4 <pbuf_skip_const>
 8008550:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8008552:	697b      	ldr	r3, [r7, #20]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d109      	bne.n	800858c <pbuf_take+0x30>
 8008578:	4b3a      	ldr	r3, [pc, #232]	@ (8008664 <pbuf_take+0x108>)
 800857a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800857e:	493a      	ldr	r1, [pc, #232]	@ (8008668 <pbuf_take+0x10c>)
 8008580:	483a      	ldr	r0, [pc, #232]	@ (800866c <pbuf_take+0x110>)
 8008582:	f00d fa75 	bl	8015a70 <iprintf>
 8008586:	f06f 030f 	mvn.w	r3, #15
 800858a:	e067      	b.n	800865c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <pbuf_take+0x4a>
 8008592:	4b34      	ldr	r3, [pc, #208]	@ (8008664 <pbuf_take+0x108>)
 8008594:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8008598:	4935      	ldr	r1, [pc, #212]	@ (8008670 <pbuf_take+0x114>)
 800859a:	4834      	ldr	r0, [pc, #208]	@ (800866c <pbuf_take+0x110>)
 800859c:	f00d fa68 	bl	8015a70 <iprintf>
 80085a0:	f06f 030f 	mvn.w	r3, #15
 80085a4:	e05a      	b.n	800865c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	891b      	ldrh	r3, [r3, #8]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d909      	bls.n	80085c4 <pbuf_take+0x68>
 80085b0:	4b2c      	ldr	r3, [pc, #176]	@ (8008664 <pbuf_take+0x108>)
 80085b2:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80085b6:	492f      	ldr	r1, [pc, #188]	@ (8008674 <pbuf_take+0x118>)
 80085b8:	482c      	ldr	r0, [pc, #176]	@ (800866c <pbuf_take+0x110>)
 80085ba:	f00d fa59 	bl	8015a70 <iprintf>
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085c2:	e04b      	b.n	800865c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <pbuf_take+0x7e>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <pbuf_take+0x7e>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d902      	bls.n	80085e0 <pbuf_take+0x84>
    return ERR_ARG;
 80085da:	f06f 030f 	mvn.w	r3, #15
 80085de:	e03d      	b.n	800865c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e028      	b.n	8008638 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <pbuf_take+0x9e>
 80085ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008664 <pbuf_take+0x108>)
 80085ee:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80085f2:	4921      	ldr	r1, [pc, #132]	@ (8008678 <pbuf_take+0x11c>)
 80085f4:	481d      	ldr	r0, [pc, #116]	@ (800866c <pbuf_take+0x110>)
 80085f6:	f00d fa3b 	bl	8015a70 <iprintf>
    buf_copy_len = total_copy_len;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	895b      	ldrh	r3, [r3, #10]
 8008602:	461a      	mov	r2, r3
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	4293      	cmp	r3, r2
 8008608:	d902      	bls.n	8008610 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	895b      	ldrh	r3, [r3, #10]
 800860e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	6858      	ldr	r0, [r3, #4]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4413      	add	r3, r2
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	4619      	mov	r1, r3
 800861e:	f00d fb30 	bl	8015c82 <memcpy>
    total_copy_len -= buf_copy_len;
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	4413      	add	r3, r2
 8008630:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1d3      	bne.n	80085e6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <pbuf_take+0xf0>
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	429a      	cmp	r2, r3
 800864a:	d006      	beq.n	800865a <pbuf_take+0xfe>
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <pbuf_take+0x108>)
 800864e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8008652:	490a      	ldr	r1, [pc, #40]	@ (800867c <pbuf_take+0x120>)
 8008654:	4805      	ldr	r0, [pc, #20]	@ (800866c <pbuf_take+0x110>)
 8008656:	f00d fa0b 	bl	8015a70 <iprintf>
  return ERR_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	08016df4 	.word	0x08016df4
 8008668:	080171cc 	.word	0x080171cc
 800866c:	08016e54 	.word	0x08016e54
 8008670:	080171e4 	.word	0x080171e4
 8008674:	08017200 	.word	0x08017200
 8008678:	08017220 	.word	0x08017220
 800867c:	08017238 	.word	0x08017238

08008680 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	80fb      	strh	r3, [r7, #6]
 8008692:	4613      	mov	r3, r2
 8008694:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008696:	f107 0210 	add.w	r2, r7, #16
 800869a:	88bb      	ldrh	r3, [r7, #4]
 800869c:	4619      	mov	r1, r3
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff ff49 	bl	8008536 <pbuf_skip>
 80086a4:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d047      	beq.n	800873c <pbuf_take_at+0xbc>
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	891b      	ldrh	r3, [r3, #8]
 80086b0:	461a      	mov	r2, r3
 80086b2:	8a3b      	ldrh	r3, [r7, #16]
 80086b4:	4619      	mov	r1, r3
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	440b      	add	r3, r1
 80086ba:	429a      	cmp	r2, r3
 80086bc:	db3e      	blt.n	800873c <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	895a      	ldrh	r2, [r3, #10]
 80086ca:	8a3b      	ldrh	r3, [r7, #16]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d806      	bhi.n	80086de <pbuf_take_at+0x5e>
 80086d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008748 <pbuf_take_at+0xc8>)
 80086d2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80086d6:	491d      	ldr	r1, [pc, #116]	@ (800874c <pbuf_take_at+0xcc>)
 80086d8:	481d      	ldr	r0, [pc, #116]	@ (8008750 <pbuf_take_at+0xd0>)
 80086da:	f00d f9c9 	bl	8015a70 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	895b      	ldrh	r3, [r3, #10]
 80086e2:	461a      	mov	r2, r3
 80086e4:	8a3b      	ldrh	r3, [r7, #16]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	da05      	bge.n	80086fa <pbuf_take_at+0x7a>
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	895a      	ldrh	r2, [r3, #10]
 80086f2:	8a3b      	ldrh	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	e000      	b.n	80086fc <pbuf_take_at+0x7c>
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	8a3a      	ldrh	r2, [r7, #16]
 8008704:	4413      	add	r3, r2
 8008706:	8a7a      	ldrh	r2, [r7, #18]
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	4618      	mov	r0, r3
 800870c:	f00d fab9 	bl	8015c82 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008710:	8b7a      	ldrh	r2, [r7, #26]
 8008712:	8a7b      	ldrh	r3, [r7, #18]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8008718:	8a7b      	ldrh	r3, [r7, #18]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	4413      	add	r3, r2
 800871e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8008720:	8b7b      	ldrh	r3, [r7, #26]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	8b7a      	ldrh	r2, [r7, #26]
 800872c:	6979      	ldr	r1, [r7, #20]
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff ff14 	bl	800855c <pbuf_take>
 8008734:	4603      	mov	r3, r0
 8008736:	e003      	b.n	8008740 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	e001      	b.n	8008740 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008740:	4618      	mov	r0, r3
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	08016df4 	.word	0x08016df4
 800874c:	08017250 	.word	0x08017250
 8008750:	08016e54 	.word	0x08016e54

08008754 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	603a      	str	r2, [r7, #0]
 800875e:	71fb      	strb	r3, [r7, #7]
 8008760:	460b      	mov	r3, r1
 8008762:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	8919      	ldrh	r1, [r3, #8]
 8008768:	88ba      	ldrh	r2, [r7, #4]
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff f95f 	bl	8007a30 <pbuf_alloc>
 8008772:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <pbuf_clone+0x2a>
    return NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	e011      	b.n	80087a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fd6b 	bl	800825c <pbuf_copy>
 8008786:	4603      	mov	r3, r0
 8008788:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800878a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <pbuf_clone+0x4c>
 8008792:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <pbuf_clone+0x58>)
 8008794:	f240 5224 	movw	r2, #1316	@ 0x524
 8008798:	4905      	ldr	r1, [pc, #20]	@ (80087b0 <pbuf_clone+0x5c>)
 800879a:	4806      	ldr	r0, [pc, #24]	@ (80087b4 <pbuf_clone+0x60>)
 800879c:	f00d f968 	bl	8015a70 <iprintf>
  return q;
 80087a0:	68fb      	ldr	r3, [r7, #12]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	08016df4 	.word	0x08016df4
 80087b0:	08017268 	.word	0x08017268
 80087b4:	08016e54 	.word	0x08016e54

080087b8 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
 80087c4:	4613      	mov	r3, r2
 80087c6:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80087c8:	f107 020a 	add.w	r2, r7, #10
 80087cc:	887b      	ldrh	r3, [r7, #2]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff feb0 	bl	8008536 <pbuf_skip>
 80087d6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <pbuf_put_at+0x3c>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	895a      	ldrh	r2, [r3, #10]
 80087e2:	897b      	ldrh	r3, [r7, #10]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d905      	bls.n	80087f4 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	897a      	ldrh	r2, [r7, #10]
 80087ee:	4413      	add	r3, r2
 80087f0:	787a      	ldrb	r2, [r7, #1]
 80087f2:	701a      	strb	r2, [r3, #0]
  }
}
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8008800:	bf00      	nop
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008810:	f00d f82e 	bl	8015870 <rand>
 8008814:	4603      	mov	r3, r0
 8008816:	b29b      	uxth	r3, r3
 8008818:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800881c:	b29b      	uxth	r3, r3
 800881e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008822:	b29a      	uxth	r2, r3
 8008824:	4b01      	ldr	r3, [pc, #4]	@ (800882c <tcp_init+0x20>)
 8008826:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008828:	bf00      	nop
 800882a:	bd80      	pop	{r7, pc}
 800882c:	2000000a 	.word	0x2000000a

08008830 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7d1b      	ldrb	r3, [r3, #20]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d105      	bne.n	800884c <tcp_free+0x1c>
 8008840:	4b06      	ldr	r3, [pc, #24]	@ (800885c <tcp_free+0x2c>)
 8008842:	22d4      	movs	r2, #212	@ 0xd4
 8008844:	4906      	ldr	r1, [pc, #24]	@ (8008860 <tcp_free+0x30>)
 8008846:	4807      	ldr	r0, [pc, #28]	@ (8008864 <tcp_free+0x34>)
 8008848:	f00d f912 	bl	8015a70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	2001      	movs	r0, #1
 8008850:	f7fe fe1a 	bl	8007488 <memp_free>
}
 8008854:	bf00      	nop
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	080172f4 	.word	0x080172f4
 8008860:	08017324 	.word	0x08017324
 8008864:	08017338 	.word	0x08017338

08008868 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7d1b      	ldrb	r3, [r3, #20]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d105      	bne.n	8008884 <tcp_free_listen+0x1c>
 8008878:	4b06      	ldr	r3, [pc, #24]	@ (8008894 <tcp_free_listen+0x2c>)
 800887a:	22df      	movs	r2, #223	@ 0xdf
 800887c:	4906      	ldr	r1, [pc, #24]	@ (8008898 <tcp_free_listen+0x30>)
 800887e:	4807      	ldr	r0, [pc, #28]	@ (800889c <tcp_free_listen+0x34>)
 8008880:	f00d f8f6 	bl	8015a70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	2002      	movs	r0, #2
 8008888:	f7fe fdfe 	bl	8007488 <memp_free>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	080172f4 	.word	0x080172f4
 8008898:	08017360 	.word	0x08017360
 800889c:	08017338 	.word	0x08017338

080088a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80088a4:	f001 f85e 	bl	8009964 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80088a8:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <tcp_tmr+0x28>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	4b05      	ldr	r3, [pc, #20]	@ (80088c8 <tcp_tmr+0x28>)
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <tcp_tmr+0x28>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80088c0:	f000 fd0e 	bl	80092e0 <tcp_slowtmr>
  }
}
 80088c4:	bf00      	nop
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20003b7d 	.word	0x20003b7d

080088cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <tcp_remove_listener+0x1c>
 80088dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <tcp_remove_listener+0x48>)
 80088de:	22ff      	movs	r2, #255	@ 0xff
 80088e0:	490d      	ldr	r1, [pc, #52]	@ (8008918 <tcp_remove_listener+0x4c>)
 80088e2:	480e      	ldr	r0, [pc, #56]	@ (800891c <tcp_remove_listener+0x50>)
 80088e4:	f00d f8c4 	bl	8015a70 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e00a      	b.n	8008904 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d102      	bne.n	80088fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1f1      	bne.n	80088ee <tcp_remove_listener+0x22>
    }
  }
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	080172f4 	.word	0x080172f4
 8008918:	0801737c 	.word	0x0801737c
 800891c:	08017338 	.word	0x08017338

08008920 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <tcp_listen_closed+0x1c>
 800892e:	4b14      	ldr	r3, [pc, #80]	@ (8008980 <tcp_listen_closed+0x60>)
 8008930:	f240 1211 	movw	r2, #273	@ 0x111
 8008934:	4913      	ldr	r1, [pc, #76]	@ (8008984 <tcp_listen_closed+0x64>)
 8008936:	4814      	ldr	r0, [pc, #80]	@ (8008988 <tcp_listen_closed+0x68>)
 8008938:	f00d f89a 	bl	8015a70 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7d1b      	ldrb	r3, [r3, #20]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d006      	beq.n	8008952 <tcp_listen_closed+0x32>
 8008944:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <tcp_listen_closed+0x60>)
 8008946:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800894a:	4910      	ldr	r1, [pc, #64]	@ (800898c <tcp_listen_closed+0x6c>)
 800894c:	480e      	ldr	r0, [pc, #56]	@ (8008988 <tcp_listen_closed+0x68>)
 800894e:	f00d f88f 	bl	8015a70 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008952:	2301      	movs	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e00b      	b.n	8008970 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008958:	4a0d      	ldr	r2, [pc, #52]	@ (8008990 <tcp_listen_closed+0x70>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ffb1 	bl	80088cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3301      	adds	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b03      	cmp	r3, #3
 8008974:	d9f0      	bls.n	8008958 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008976:	bf00      	nop
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	080172f4 	.word	0x080172f4
 8008984:	080173a4 	.word	0x080173a4
 8008988:	08017338 	.word	0x08017338
 800898c:	080173b0 	.word	0x080173b0
 8008990:	08019844 	.word	0x08019844

08008994 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008994:	b5b0      	push	{r4, r5, r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af04      	add	r7, sp, #16
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <tcp_close_shutdown+0x20>
 80089a6:	4b63      	ldr	r3, [pc, #396]	@ (8008b34 <tcp_close_shutdown+0x1a0>)
 80089a8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80089ac:	4962      	ldr	r1, [pc, #392]	@ (8008b38 <tcp_close_shutdown+0x1a4>)
 80089ae:	4863      	ldr	r0, [pc, #396]	@ (8008b3c <tcp_close_shutdown+0x1a8>)
 80089b0:	f00d f85e 	bl	8015a70 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d066      	beq.n	8008a88 <tcp_close_shutdown+0xf4>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7d1b      	ldrb	r3, [r3, #20]
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d003      	beq.n	80089ca <tcp_close_shutdown+0x36>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	2b07      	cmp	r3, #7
 80089c8:	d15e      	bne.n	8008a88 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <tcp_close_shutdown+0x48>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80089da:	d055      	beq.n	8008a88 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	8b5b      	ldrh	r3, [r3, #26]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <tcp_close_shutdown+0x62>
 80089e8:	4b52      	ldr	r3, [pc, #328]	@ (8008b34 <tcp_close_shutdown+0x1a0>)
 80089ea:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80089ee:	4954      	ldr	r1, [pc, #336]	@ (8008b40 <tcp_close_shutdown+0x1ac>)
 80089f0:	4852      	ldr	r0, [pc, #328]	@ (8008b3c <tcp_close_shutdown+0x1a8>)
 80089f2:	f00d f83d 	bl	8015a70 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80089fe:	687d      	ldr	r5, [r7, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3304      	adds	r3, #4
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	8ad2      	ldrh	r2, [r2, #22]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	8b09      	ldrh	r1, [r1, #24]
 8008a0c:	9102      	str	r1, [sp, #8]
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	462b      	mov	r3, r5
 8008a14:	4622      	mov	r2, r4
 8008a16:	4601      	mov	r1, r0
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f005 feaf 	bl	800e77c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 fb98 	bl	800a154 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008a24:	4b47      	ldr	r3, [pc, #284]	@ (8008b44 <tcp_close_shutdown+0x1b0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d105      	bne.n	8008a3a <tcp_close_shutdown+0xa6>
 8008a2e:	4b45      	ldr	r3, [pc, #276]	@ (8008b44 <tcp_close_shutdown+0x1b0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	4a43      	ldr	r2, [pc, #268]	@ (8008b44 <tcp_close_shutdown+0x1b0>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	e013      	b.n	8008a62 <tcp_close_shutdown+0xce>
 8008a3a:	4b42      	ldr	r3, [pc, #264]	@ (8008b44 <tcp_close_shutdown+0x1b0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	e00c      	b.n	8008a5c <tcp_close_shutdown+0xc8>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d104      	bne.n	8008a56 <tcp_close_shutdown+0xc2>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	60da      	str	r2, [r3, #12]
 8008a54:	e005      	b.n	8008a62 <tcp_close_shutdown+0xce>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ef      	bne.n	8008a42 <tcp_close_shutdown+0xae>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	60da      	str	r2, [r3, #12]
 8008a68:	4b37      	ldr	r3, [pc, #220]	@ (8008b48 <tcp_close_shutdown+0x1b4>)
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008a6e:	4b37      	ldr	r3, [pc, #220]	@ (8008b4c <tcp_close_shutdown+0x1b8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d102      	bne.n	8008a7e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008a78:	f004 f8b6 	bl	800cbe8 <tcp_trigger_input_pcb_close>
 8008a7c:	e002      	b.n	8008a84 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fed6 	bl	8008830 <tcp_free>
      }
      return ERR_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e050      	b.n	8008b2a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7d1b      	ldrb	r3, [r3, #20]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d03b      	beq.n	8008b08 <tcp_close_shutdown+0x174>
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	dc44      	bgt.n	8008b1e <tcp_close_shutdown+0x18a>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <tcp_close_shutdown+0x10a>
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d02a      	beq.n	8008af2 <tcp_close_shutdown+0x15e>
 8008a9c:	e03f      	b.n	8008b1e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	8adb      	ldrh	r3, [r3, #22]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d021      	beq.n	8008aea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8008b50 <tcp_close_shutdown+0x1bc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d105      	bne.n	8008abc <tcp_close_shutdown+0x128>
 8008ab0:	4b27      	ldr	r3, [pc, #156]	@ (8008b50 <tcp_close_shutdown+0x1bc>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	4a26      	ldr	r2, [pc, #152]	@ (8008b50 <tcp_close_shutdown+0x1bc>)
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e013      	b.n	8008ae4 <tcp_close_shutdown+0x150>
 8008abc:	4b24      	ldr	r3, [pc, #144]	@ (8008b50 <tcp_close_shutdown+0x1bc>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	e00c      	b.n	8008ade <tcp_close_shutdown+0x14a>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d104      	bne.n	8008ad8 <tcp_close_shutdown+0x144>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	e005      	b.n	8008ae4 <tcp_close_shutdown+0x150>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1ef      	bne.n	8008ac4 <tcp_close_shutdown+0x130>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fea0 	bl	8008830 <tcp_free>
      break;
 8008af0:	e01a      	b.n	8008b28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff ff14 	bl	8008920 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4816      	ldr	r0, [pc, #88]	@ (8008b54 <tcp_close_shutdown+0x1c0>)
 8008afc:	f001 fb7a 	bl	800a1f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff feb1 	bl	8008868 <tcp_free_listen>
      break;
 8008b06:	e00f      	b.n	8008b28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	480e      	ldr	r0, [pc, #56]	@ (8008b44 <tcp_close_shutdown+0x1b0>)
 8008b0c:	f001 fb72 	bl	800a1f4 <tcp_pcb_remove>
 8008b10:	4b0d      	ldr	r3, [pc, #52]	@ (8008b48 <tcp_close_shutdown+0x1b4>)
 8008b12:	2201      	movs	r2, #1
 8008b14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff fe8a 	bl	8008830 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008b1c:	e004      	b.n	8008b28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f81a 	bl	8008b58 <tcp_close_shutdown_fin>
 8008b24:	4603      	mov	r3, r0
 8008b26:	e000      	b.n	8008b2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bdb0      	pop	{r4, r5, r7, pc}
 8008b32:	bf00      	nop
 8008b34:	080172f4 	.word	0x080172f4
 8008b38:	080173c8 	.word	0x080173c8
 8008b3c:	08017338 	.word	0x08017338
 8008b40:	080173e8 	.word	0x080173e8
 8008b44:	20003b74 	.word	0x20003b74
 8008b48:	20003b7c 	.word	0x20003b7c
 8008b4c:	20003bb4 	.word	0x20003bb4
 8008b50:	20003b6c 	.word	0x20003b6c
 8008b54:	20003b70 	.word	0x20003b70

08008b58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <tcp_close_shutdown_fin+0x1c>
 8008b66:	4b2e      	ldr	r3, [pc, #184]	@ (8008c20 <tcp_close_shutdown_fin+0xc8>)
 8008b68:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008b6c:	492d      	ldr	r1, [pc, #180]	@ (8008c24 <tcp_close_shutdown_fin+0xcc>)
 8008b6e:	482e      	ldr	r0, [pc, #184]	@ (8008c28 <tcp_close_shutdown_fin+0xd0>)
 8008b70:	f00c ff7e 	bl	8015a70 <iprintf>

  switch (pcb->state) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7d1b      	ldrb	r3, [r3, #20]
 8008b78:	2b07      	cmp	r3, #7
 8008b7a:	d020      	beq.n	8008bbe <tcp_close_shutdown_fin+0x66>
 8008b7c:	2b07      	cmp	r3, #7
 8008b7e:	dc2b      	bgt.n	8008bd8 <tcp_close_shutdown_fin+0x80>
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d002      	beq.n	8008b8a <tcp_close_shutdown_fin+0x32>
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d00d      	beq.n	8008ba4 <tcp_close_shutdown_fin+0x4c>
 8008b88:	e026      	b.n	8008bd8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f004 febc 	bl	800d908 <tcp_send_fin>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11f      	bne.n	8008bdc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2205      	movs	r2, #5
 8008ba0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ba2:	e01b      	b.n	8008bdc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f004 feaf 	bl	800d908 <tcp_send_fin>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d114      	bne.n	8008be0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2205      	movs	r2, #5
 8008bba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008bbc:	e010      	b.n	8008be0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f004 fea2 	bl	800d908 <tcp_send_fin>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2209      	movs	r2, #9
 8008bd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008bd6:	e005      	b.n	8008be4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	e01c      	b.n	8008c16 <tcp_close_shutdown_fin+0xbe>
      break;
 8008bdc:	bf00      	nop
 8008bde:	e002      	b.n	8008be6 <tcp_close_shutdown_fin+0x8e>
      break;
 8008be0:	bf00      	nop
 8008be2:	e000      	b.n	8008be6 <tcp_close_shutdown_fin+0x8e>
      break;
 8008be4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d103      	bne.n	8008bf6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f004 ffda 	bl	800dba8 <tcp_output>
 8008bf4:	e00d      	b.n	8008c12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bfe:	d108      	bne.n	8008c12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8b5b      	ldrh	r3, [r3, #26]
 8008c04:	f043 0308 	orr.w	r3, r3, #8
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e001      	b.n	8008c16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	080172f4 	.word	0x080172f4
 8008c24:	080173a4 	.word	0x080173a4
 8008c28:	08017338 	.word	0x08017338

08008c2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <tcp_close+0x22>
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <tcp_close+0x4c>)
 8008c3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008c40:	490e      	ldr	r1, [pc, #56]	@ (8008c7c <tcp_close+0x50>)
 8008c42:	480f      	ldr	r0, [pc, #60]	@ (8008c80 <tcp_close+0x54>)
 8008c44:	f00c ff14 	bl	8015a70 <iprintf>
 8008c48:	f06f 030f 	mvn.w	r3, #15
 8008c4c:	e00f      	b.n	8008c6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	7d1b      	ldrb	r3, [r3, #20]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d006      	beq.n	8008c64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8b5b      	ldrh	r3, [r3, #26]
 8008c5a:	f043 0310 	orr.w	r3, r3, #16
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008c64:	2101      	movs	r1, #1
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fe94 	bl	8008994 <tcp_close_shutdown>
 8008c6c:	4603      	mov	r3, r0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	080172f4 	.word	0x080172f4
 8008c7c:	08017404 	.word	0x08017404
 8008c80:	08017338 	.word	0x08017338

08008c84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08e      	sub	sp, #56	@ 0x38
 8008c88:	af04      	add	r7, sp, #16
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d107      	bne.n	8008ca4 <tcp_abandon+0x20>
 8008c94:	4b52      	ldr	r3, [pc, #328]	@ (8008de0 <tcp_abandon+0x15c>)
 8008c96:	f240 223d 	movw	r2, #573	@ 0x23d
 8008c9a:	4952      	ldr	r1, [pc, #328]	@ (8008de4 <tcp_abandon+0x160>)
 8008c9c:	4852      	ldr	r0, [pc, #328]	@ (8008de8 <tcp_abandon+0x164>)
 8008c9e:	f00c fee7 	bl	8015a70 <iprintf>
 8008ca2:	e099      	b.n	8008dd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7d1b      	ldrb	r3, [r3, #20]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d106      	bne.n	8008cba <tcp_abandon+0x36>
 8008cac:	4b4c      	ldr	r3, [pc, #304]	@ (8008de0 <tcp_abandon+0x15c>)
 8008cae:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008cb2:	494e      	ldr	r1, [pc, #312]	@ (8008dec <tcp_abandon+0x168>)
 8008cb4:	484c      	ldr	r0, [pc, #304]	@ (8008de8 <tcp_abandon+0x164>)
 8008cb6:	f00c fedb 	bl	8015a70 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7d1b      	ldrb	r3, [r3, #20]
 8008cbe:	2b0a      	cmp	r3, #10
 8008cc0:	d107      	bne.n	8008cd2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	484a      	ldr	r0, [pc, #296]	@ (8008df0 <tcp_abandon+0x16c>)
 8008cc6:	f001 fa95 	bl	800a1f4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fdb0 	bl	8008830 <tcp_free>
 8008cd0:	e082      	b.n	8008dd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cde:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d126      	bne.n	8008d4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8adb      	ldrh	r3, [r3, #22]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02e      	beq.n	8008d62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d04:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <tcp_abandon+0x170>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d105      	bne.n	8008d1a <tcp_abandon+0x96>
 8008d0e:	4b39      	ldr	r3, [pc, #228]	@ (8008df4 <tcp_abandon+0x170>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4a37      	ldr	r2, [pc, #220]	@ (8008df4 <tcp_abandon+0x170>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	e013      	b.n	8008d42 <tcp_abandon+0xbe>
 8008d1a:	4b36      	ldr	r3, [pc, #216]	@ (8008df4 <tcp_abandon+0x170>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	e00c      	b.n	8008d3c <tcp_abandon+0xb8>
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d104      	bne.n	8008d36 <tcp_abandon+0xb2>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	60da      	str	r2, [r3, #12]
 8008d34:	e005      	b.n	8008d42 <tcp_abandon+0xbe>
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1ef      	bne.n	8008d22 <tcp_abandon+0x9e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	60da      	str	r2, [r3, #12]
 8008d48:	e00b      	b.n	8008d62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8adb      	ldrh	r3, [r3, #22]
 8008d52:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	4828      	ldr	r0, [pc, #160]	@ (8008df8 <tcp_abandon+0x174>)
 8008d58:	f001 fa4c 	bl	800a1f4 <tcp_pcb_remove>
 8008d5c:	4b27      	ldr	r3, [pc, #156]	@ (8008dfc <tcp_abandon+0x178>)
 8008d5e:	2201      	movs	r2, #1
 8008d60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d004      	beq.n	8008d74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fed8 	bl	8009b24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fecf 	bl	8009b24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fec6 	bl	8009b24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	8b12      	ldrh	r2, [r2, #24]
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008dac:	9201      	str	r2, [sp, #4]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	460b      	mov	r3, r1
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	69b9      	ldr	r1, [r7, #24]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f005 fce0 	bl	800e77c <tcp_rst>
    }
    last_state = pcb->state;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fd34 	bl	8008830 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <tcp_abandon+0x154>
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f06f 010c 	mvn.w	r1, #12
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	4798      	blx	r3
  }
}
 8008dd8:	3728      	adds	r7, #40	@ 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	080172f4 	.word	0x080172f4
 8008de4:	08017438 	.word	0x08017438
 8008de8:	08017338 	.word	0x08017338
 8008dec:	08017454 	.word	0x08017454
 8008df0:	20003b78 	.word	0x20003b78
 8008df4:	20003b6c 	.word	0x20003b6c
 8008df8:	20003b74 	.word	0x20003b74
 8008dfc:	20003b7c 	.word	0x20003b7c

08008e00 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008e08:	2101      	movs	r1, #1
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff ff3a 	bl	8008c84 <tcp_abandon>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008e26:	2304      	movs	r3, #4
 8008e28:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008e30:	4b3e      	ldr	r3, [pc, #248]	@ (8008f2c <tcp_bind+0x114>)
 8008e32:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <tcp_bind+0x36>
 8008e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8008f30 <tcp_bind+0x118>)
 8008e3c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008e40:	493c      	ldr	r1, [pc, #240]	@ (8008f34 <tcp_bind+0x11c>)
 8008e42:	483d      	ldr	r0, [pc, #244]	@ (8008f38 <tcp_bind+0x120>)
 8008e44:	f00c fe14 	bl	8015a70 <iprintf>
 8008e48:	f06f 030f 	mvn.w	r3, #15
 8008e4c:	e06a      	b.n	8008f24 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	7d1b      	ldrb	r3, [r3, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d009      	beq.n	8008e6a <tcp_bind+0x52>
 8008e56:	4b36      	ldr	r3, [pc, #216]	@ (8008f30 <tcp_bind+0x118>)
 8008e58:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8008e5c:	4937      	ldr	r1, [pc, #220]	@ (8008f3c <tcp_bind+0x124>)
 8008e5e:	4836      	ldr	r0, [pc, #216]	@ (8008f38 <tcp_bind+0x120>)
 8008e60:	f00c fe06 	bl	8015a70 <iprintf>
 8008e64:	f06f 0305 	mvn.w	r3, #5
 8008e68:	e05c      	b.n	8008f24 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008e6a:	88fb      	ldrh	r3, [r7, #6]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008e70:	f000 f9f0 	bl	8009254 <tcp_new_port>
 8008e74:	4603      	mov	r3, r0
 8008e76:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d135      	bne.n	8008eea <tcp_bind+0xd2>
      return ERR_BUF;
 8008e7e:	f06f 0301 	mvn.w	r3, #1
 8008e82:	e04f      	b.n	8008f24 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008e84:	2300      	movs	r3, #0
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e02b      	b.n	8008ee2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8008f40 <tcp_bind+0x128>)
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	e01e      	b.n	8008ed6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	8adb      	ldrh	r3, [r3, #22]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d116      	bne.n	8008ed0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008ea2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d010      	beq.n	8008eca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00c      	beq.n	8008eca <tcp_bind+0xb2>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d009      	beq.n	8008eca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d102      	bne.n	8008ed0 <tcp_bind+0xb8>
              return ERR_USE;
 8008eca:	f06f 0307 	mvn.w	r3, #7
 8008ece:	e029      	b.n	8008f24 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	61bb      	str	r3, [r7, #24]
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1dd      	bne.n	8008e98 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	dbcf      	blt.n	8008e8a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00c      	beq.n	8008f0a <tcp_bind+0xf2>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <tcp_bind+0xec>
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	e000      	b.n	8008f06 <tcp_bind+0xee>
 8008f04:	2300      	movs	r3, #0
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008f10:	4b0c      	ldr	r3, [pc, #48]	@ (8008f44 <tcp_bind+0x12c>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	60da      	str	r2, [r3, #12]
 8008f18:	4a0a      	ldr	r2, [pc, #40]	@ (8008f44 <tcp_bind+0x12c>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	f005 fdef 	bl	800eb00 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	08019884 	.word	0x08019884
 8008f30:	080172f4 	.word	0x080172f4
 8008f34:	08017488 	.word	0x08017488
 8008f38:	08017338 	.word	0x08017338
 8008f3c:	080174a0 	.word	0x080174a0
 8008f40:	08019844 	.word	0x08019844
 8008f44:	20003b6c 	.word	0x20003b6c

08008f48 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <tcp_accept_null+0x22>
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <tcp_accept_null+0x34>)
 8008f5e:	f240 320f 	movw	r2, #783	@ 0x30f
 8008f62:	4907      	ldr	r1, [pc, #28]	@ (8008f80 <tcp_accept_null+0x38>)
 8008f64:	4807      	ldr	r0, [pc, #28]	@ (8008f84 <tcp_accept_null+0x3c>)
 8008f66:	f00c fd83 	bl	8015a70 <iprintf>

  tcp_abort(pcb);
 8008f6a:	68b8      	ldr	r0, [r7, #8]
 8008f6c:	f7ff ff48 	bl	8008e00 <tcp_abort>

  return ERR_ABRT;
 8008f70:	f06f 030c 	mvn.w	r3, #12
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	080172f4 	.word	0x080172f4
 8008f80:	080174c8 	.word	0x080174c8
 8008f84:	08017338 	.word	0x08017338

08008f88 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	2200      	movs	r2, #0
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f806 	bl	8008fac <tcp_listen_with_backlog_and_err>
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <tcp_listen_with_backlog_and_err+0x2c>
 8008fc4:	4b47      	ldr	r3, [pc, #284]	@ (80090e4 <tcp_listen_with_backlog_and_err+0x138>)
 8008fc6:	f240 3259 	movw	r2, #857	@ 0x359
 8008fca:	4947      	ldr	r1, [pc, #284]	@ (80090e8 <tcp_listen_with_backlog_and_err+0x13c>)
 8008fcc:	4847      	ldr	r0, [pc, #284]	@ (80090ec <tcp_listen_with_backlog_and_err+0x140>)
 8008fce:	f00c fd4f 	bl	8015a70 <iprintf>
 8008fd2:	23f0      	movs	r3, #240	@ 0xf0
 8008fd4:	76fb      	strb	r3, [r7, #27]
 8008fd6:	e079      	b.n	80090cc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	7d1b      	ldrb	r3, [r3, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <tcp_listen_with_backlog_and_err+0x48>
 8008fe0:	4b40      	ldr	r3, [pc, #256]	@ (80090e4 <tcp_listen_with_backlog_and_err+0x138>)
 8008fe2:	f240 325a 	movw	r2, #858	@ 0x35a
 8008fe6:	4942      	ldr	r1, [pc, #264]	@ (80090f0 <tcp_listen_with_backlog_and_err+0x144>)
 8008fe8:	4840      	ldr	r0, [pc, #256]	@ (80090ec <tcp_listen_with_backlog_and_err+0x140>)
 8008fea:	f00c fd41 	bl	8015a70 <iprintf>
 8008fee:	23f1      	movs	r3, #241	@ 0xf1
 8008ff0:	76fb      	strb	r3, [r7, #27]
 8008ff2:	e06b      	b.n	80090cc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	7d1b      	ldrb	r3, [r3, #20]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d104      	bne.n	8009006 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009000:	23f7      	movs	r3, #247	@ 0xf7
 8009002:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009004:	e062      	b.n	80090cc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009006:	2002      	movs	r0, #2
 8009008:	f7fe f9e6 	bl	80073d8 <memp_malloc>
 800900c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009014:	23ff      	movs	r3, #255	@ 0xff
 8009016:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009018:	e058      	b.n	80090cc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	691a      	ldr	r2, [r3, #16]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8ada      	ldrh	r2, [r3, #22]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2201      	movs	r2, #1
 800902e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	7d5a      	ldrb	r2, [r3, #21]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	7a5a      	ldrb	r2, [r3, #9]
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	2200      	movs	r2, #0
 8009044:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	7ada      	ldrb	r2, [r3, #11]
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	7a9a      	ldrb	r2, [r3, #10]
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8adb      	ldrh	r3, [r3, #22]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d021      	beq.n	80090aa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009066:	4b23      	ldr	r3, [pc, #140]	@ (80090f4 <tcp_listen_with_backlog_and_err+0x148>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	429a      	cmp	r2, r3
 800906e:	d105      	bne.n	800907c <tcp_listen_with_backlog_and_err+0xd0>
 8009070:	4b20      	ldr	r3, [pc, #128]	@ (80090f4 <tcp_listen_with_backlog_and_err+0x148>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	4a1f      	ldr	r2, [pc, #124]	@ (80090f4 <tcp_listen_with_backlog_and_err+0x148>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e013      	b.n	80090a4 <tcp_listen_with_backlog_and_err+0xf8>
 800907c:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <tcp_listen_with_backlog_and_err+0x148>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e00c      	b.n	800909e <tcp_listen_with_backlog_and_err+0xf2>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	429a      	cmp	r2, r3
 800908c:	d104      	bne.n	8009098 <tcp_listen_with_backlog_and_err+0xec>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	60da      	str	r2, [r3, #12]
 8009096:	e005      	b.n	80090a4 <tcp_listen_with_backlog_and_err+0xf8>
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1ef      	bne.n	8009084 <tcp_listen_with_backlog_and_err+0xd8>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff fbc0 	bl	8008830 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	4a11      	ldr	r2, [pc, #68]	@ (80090f8 <tcp_listen_with_backlog_and_err+0x14c>)
 80090b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80090b6:	4b11      	ldr	r3, [pc, #68]	@ (80090fc <tcp_listen_with_backlog_and_err+0x150>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	60da      	str	r2, [r3, #12]
 80090be:	4a0f      	ldr	r2, [pc, #60]	@ (80090fc <tcp_listen_with_backlog_and_err+0x150>)
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	f005 fd1c 	bl	800eb00 <tcp_timer_needed>
  res = ERR_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7efa      	ldrb	r2, [r7, #27]
 80090d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80090d8:	69fb      	ldr	r3, [r7, #28]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	080172f4 	.word	0x080172f4
 80090e8:	080174e8 	.word	0x080174e8
 80090ec:	08017338 	.word	0x08017338
 80090f0:	08017518 	.word	0x08017518
 80090f4:	20003b6c 	.word	0x20003b6c
 80090f8:	08008f49 	.word	0x08008f49
 80090fc:	20003b70 	.word	0x20003b70

08009100 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <tcp_update_rcv_ann_wnd+0x1c>
 800910e:	4b25      	ldr	r3, [pc, #148]	@ (80091a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009110:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009114:	4924      	ldr	r1, [pc, #144]	@ (80091a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009116:	4825      	ldr	r0, [pc, #148]	@ (80091ac <tcp_update_rcv_ann_wnd+0xac>)
 8009118:	f00c fcaa 	bl	8015a70 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009124:	4413      	add	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009130:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009134:	bf28      	it	cs
 8009136:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800913a:	b292      	uxth	r2, r2
 800913c:	4413      	add	r3, r2
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	db08      	blt.n	8009158 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	e020      	b.n	800919a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd03      	ble.n	800916e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800916c:	e014      	b.n	8009198 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009180:	d306      	bcc.n	8009190 <tcp_update_rcv_ann_wnd+0x90>
 8009182:	4b08      	ldr	r3, [pc, #32]	@ (80091a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009184:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009188:	4909      	ldr	r1, [pc, #36]	@ (80091b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800918a:	4808      	ldr	r0, [pc, #32]	@ (80091ac <tcp_update_rcv_ann_wnd+0xac>)
 800918c:	f00c fc70 	bl	8015a70 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	b29a      	uxth	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009198:	2300      	movs	r3, #0
  }
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	080172f4 	.word	0x080172f4
 80091a8:	08017550 	.word	0x08017550
 80091ac:	08017338 	.word	0x08017338
 80091b0:	08017574 	.word	0x08017574

080091b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d107      	bne.n	80091d6 <tcp_recved+0x22>
 80091c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009244 <tcp_recved+0x90>)
 80091c8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80091cc:	491e      	ldr	r1, [pc, #120]	@ (8009248 <tcp_recved+0x94>)
 80091ce:	481f      	ldr	r0, [pc, #124]	@ (800924c <tcp_recved+0x98>)
 80091d0:	f00c fc4e 	bl	8015a70 <iprintf>
 80091d4:	e032      	b.n	800923c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	7d1b      	ldrb	r3, [r3, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d106      	bne.n	80091ec <tcp_recved+0x38>
 80091de:	4b19      	ldr	r3, [pc, #100]	@ (8009244 <tcp_recved+0x90>)
 80091e0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80091e4:	491a      	ldr	r1, [pc, #104]	@ (8009250 <tcp_recved+0x9c>)
 80091e6:	4819      	ldr	r0, [pc, #100]	@ (800924c <tcp_recved+0x98>)
 80091e8:	f00c fc42 	bl	8015a70 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80091f0:	887b      	ldrh	r3, [r7, #2]
 80091f2:	4413      	add	r3, r2
 80091f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80091f6:	89fb      	ldrh	r3, [r7, #14]
 80091f8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80091fc:	d804      	bhi.n	8009208 <tcp_recved+0x54>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009202:	89fa      	ldrh	r2, [r7, #14]
 8009204:	429a      	cmp	r2, r3
 8009206:	d204      	bcs.n	8009212 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800920e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009210:	e002      	b.n	8009218 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	89fa      	ldrh	r2, [r7, #14]
 8009216:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff ff71 	bl	8009100 <tcp_update_rcv_ann_wnd>
 800921e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009226:	d309      	bcc.n	800923c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8b5b      	ldrh	r3, [r3, #26]
 800922c:	f043 0302 	orr.w	r3, r3, #2
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f004 fcb6 	bl	800dba8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	080172f4 	.word	0x080172f4
 8009248:	08017590 	.word	0x08017590
 800924c:	08017338 	.word	0x08017338
 8009250:	080175a8 	.word	0x080175a8

08009254 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800925e:	4b1e      	ldr	r3, [pc, #120]	@ (80092d8 <tcp_new_port+0x84>)
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	4b1c      	ldr	r3, [pc, #112]	@ (80092d8 <tcp_new_port+0x84>)
 8009268:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800926a:	4b1b      	ldr	r3, [pc, #108]	@ (80092d8 <tcp_new_port+0x84>)
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009272:	4293      	cmp	r3, r2
 8009274:	d103      	bne.n	800927e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009276:	4b18      	ldr	r3, [pc, #96]	@ (80092d8 <tcp_new_port+0x84>)
 8009278:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800927c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800927e:	2300      	movs	r3, #0
 8009280:	71fb      	strb	r3, [r7, #7]
 8009282:	e01e      	b.n	80092c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	4a15      	ldr	r2, [pc, #84]	@ (80092dc <tcp_new_port+0x88>)
 8009288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	e011      	b.n	80092b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	8ada      	ldrh	r2, [r3, #22]
 8009296:	4b10      	ldr	r3, [pc, #64]	@ (80092d8 <tcp_new_port+0x84>)
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d108      	bne.n	80092b0 <tcp_new_port+0x5c>
        n++;
 800929e:	88bb      	ldrh	r3, [r7, #4]
 80092a0:	3301      	adds	r3, #1
 80092a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80092a4:	88bb      	ldrh	r3, [r7, #4]
 80092a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092aa:	d3d8      	bcc.n	800925e <tcp_new_port+0xa>
          return 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	e00d      	b.n	80092cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1ea      	bne.n	8009292 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	3301      	adds	r3, #1
 80092c0:	71fb      	strb	r3, [r7, #7]
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d9dd      	bls.n	8009284 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80092c8:	4b03      	ldr	r3, [pc, #12]	@ (80092d8 <tcp_new_port+0x84>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	2000000a 	.word	0x2000000a
 80092dc:	08019844 	.word	0x08019844

080092e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b090      	sub	sp, #64	@ 0x40
 80092e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80092ec:	4b95      	ldr	r3, [pc, #596]	@ (8009544 <tcp_slowtmr+0x264>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	4a94      	ldr	r2, [pc, #592]	@ (8009544 <tcp_slowtmr+0x264>)
 80092f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092f6:	4b94      	ldr	r3, [pc, #592]	@ (8009548 <tcp_slowtmr+0x268>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4b92      	ldr	r3, [pc, #584]	@ (8009548 <tcp_slowtmr+0x268>)
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	e000      	b.n	8009306 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009304:	bf00      	nop
  prev = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800930a:	4b90      	ldr	r3, [pc, #576]	@ (800954c <tcp_slowtmr+0x26c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009310:	e29f      	b.n	8009852 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	7d1b      	ldrb	r3, [r3, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <tcp_slowtmr+0x48>
 800931a:	4b8d      	ldr	r3, [pc, #564]	@ (8009550 <tcp_slowtmr+0x270>)
 800931c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009320:	498c      	ldr	r1, [pc, #560]	@ (8009554 <tcp_slowtmr+0x274>)
 8009322:	488d      	ldr	r0, [pc, #564]	@ (8009558 <tcp_slowtmr+0x278>)
 8009324:	f00c fba4 	bl	8015a70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	7d1b      	ldrb	r3, [r3, #20]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d106      	bne.n	800933e <tcp_slowtmr+0x5e>
 8009330:	4b87      	ldr	r3, [pc, #540]	@ (8009550 <tcp_slowtmr+0x270>)
 8009332:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009336:	4989      	ldr	r1, [pc, #548]	@ (800955c <tcp_slowtmr+0x27c>)
 8009338:	4887      	ldr	r0, [pc, #540]	@ (8009558 <tcp_slowtmr+0x278>)
 800933a:	f00c fb99 	bl	8015a70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009340:	7d1b      	ldrb	r3, [r3, #20]
 8009342:	2b0a      	cmp	r3, #10
 8009344:	d106      	bne.n	8009354 <tcp_slowtmr+0x74>
 8009346:	4b82      	ldr	r3, [pc, #520]	@ (8009550 <tcp_slowtmr+0x270>)
 8009348:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800934c:	4984      	ldr	r1, [pc, #528]	@ (8009560 <tcp_slowtmr+0x280>)
 800934e:	4882      	ldr	r0, [pc, #520]	@ (8009558 <tcp_slowtmr+0x278>)
 8009350:	f00c fb8e 	bl	8015a70 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009356:	7f9a      	ldrb	r2, [r3, #30]
 8009358:	4b7b      	ldr	r3, [pc, #492]	@ (8009548 <tcp_slowtmr+0x268>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d105      	bne.n	800936c <tcp_slowtmr+0x8c>
      prev = pcb;
 8009360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009362:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800936a:	e272      	b.n	8009852 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800936c:	4b76      	ldr	r3, [pc, #472]	@ (8009548 <tcp_slowtmr+0x268>)
 800936e:	781a      	ldrb	r2, [r3, #0]
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	7d1b      	ldrb	r3, [r3, #20]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d10a      	bne.n	800939e <tcp_slowtmr+0xbe>
 8009388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800938e:	2b05      	cmp	r3, #5
 8009390:	d905      	bls.n	800939e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009396:	3301      	adds	r3, #1
 8009398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800939c:	e11e      	b.n	80095dc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093a4:	2b0b      	cmp	r3, #11
 80093a6:	d905      	bls.n	80093b4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80093a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093ac:	3301      	adds	r3, #1
 80093ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093b2:	e113      	b.n	80095dc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d075      	beq.n	80094aa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d006      	beq.n	80093d4 <tcp_slowtmr+0xf4>
 80093c6:	4b62      	ldr	r3, [pc, #392]	@ (8009550 <tcp_slowtmr+0x270>)
 80093c8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80093cc:	4965      	ldr	r1, [pc, #404]	@ (8009564 <tcp_slowtmr+0x284>)
 80093ce:	4862      	ldr	r0, [pc, #392]	@ (8009558 <tcp_slowtmr+0x278>)
 80093d0:	f00c fb4e 	bl	8015a70 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80093d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d106      	bne.n	80093ea <tcp_slowtmr+0x10a>
 80093dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009550 <tcp_slowtmr+0x270>)
 80093de:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80093e2:	4961      	ldr	r1, [pc, #388]	@ (8009568 <tcp_slowtmr+0x288>)
 80093e4:	485c      	ldr	r0, [pc, #368]	@ (8009558 <tcp_slowtmr+0x278>)
 80093e6:	f00c fb43 	bl	8015a70 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80093f0:	2b0b      	cmp	r3, #11
 80093f2:	d905      	bls.n	8009400 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093f8:	3301      	adds	r3, #1
 80093fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80093fe:	e0ed      	b.n	80095dc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009406:	3b01      	subs	r3, #1
 8009408:	4a58      	ldr	r2, [pc, #352]	@ (800956c <tcp_slowtmr+0x28c>)
 800940a:	5cd3      	ldrb	r3, [r2, r3]
 800940c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800940e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009410:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009414:	7c7a      	ldrb	r2, [r7, #17]
 8009416:	429a      	cmp	r2, r3
 8009418:	d907      	bls.n	800942a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800941a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009420:	3301      	adds	r3, #1
 8009422:	b2da      	uxtb	r2, r3
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009430:	7c7a      	ldrb	r2, [r7, #17]
 8009432:	429a      	cmp	r2, r3
 8009434:	f200 80d2 	bhi.w	80095dc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009438:	2301      	movs	r3, #1
 800943a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800943c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009442:	2b00      	cmp	r3, #0
 8009444:	d108      	bne.n	8009458 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009446:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009448:	f005 fa8c 	bl	800e964 <tcp_zero_window_probe>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d014      	beq.n	800947c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009452:	2300      	movs	r3, #0
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	e011      	b.n	800947c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800945e:	4619      	mov	r1, r3
 8009460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009462:	f004 f8ff 	bl	800d664 <tcp_split_unsent_seg>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d107      	bne.n	800947c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800946c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800946e:	f004 fb9b 	bl	800dba8 <tcp_output>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 80ac 	beq.w	80095dc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009492:	2b06      	cmp	r3, #6
 8009494:	f200 80a2 	bhi.w	80095dc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800949e:	3301      	adds	r3, #1
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80094a8:	e098      	b.n	80095dc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db0f      	blt.n	80094d4 <tcp_slowtmr+0x1f4>
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80094ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80094be:	4293      	cmp	r3, r2
 80094c0:	d008      	beq.n	80094d4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3301      	adds	r3, #1
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	b21a      	sxth	r2, r3
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80094da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80094e0:	429a      	cmp	r2, r3
 80094e2:	db7b      	blt.n	80095dc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80094e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094e6:	f004 fe6f 	bl	800e1c8 <tcp_rexmit_rto_prepare>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d007      	beq.n	8009500 <tcp_slowtmr+0x220>
 80094f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d171      	bne.n	80095dc <tcp_slowtmr+0x2fc>
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d06d      	beq.n	80095dc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009502:	7d1b      	ldrb	r3, [r3, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d03a      	beq.n	800957e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800950e:	2b0c      	cmp	r3, #12
 8009510:	bf28      	it	cs
 8009512:	230c      	movcs	r3, #12
 8009514:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800951c:	10db      	asrs	r3, r3, #3
 800951e:	b21b      	sxth	r3, r3
 8009520:	461a      	mov	r2, r3
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009528:	4413      	add	r3, r2
 800952a:	7efa      	ldrb	r2, [r7, #27]
 800952c:	4910      	ldr	r1, [pc, #64]	@ (8009570 <tcp_slowtmr+0x290>)
 800952e:	5c8a      	ldrb	r2, [r1, r2]
 8009530:	4093      	lsls	r3, r2
 8009532:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800953a:	4293      	cmp	r3, r2
 800953c:	dc1a      	bgt.n	8009574 <tcp_slowtmr+0x294>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	b21a      	sxth	r2, r3
 8009542:	e019      	b.n	8009578 <tcp_slowtmr+0x298>
 8009544:	20003b68 	.word	0x20003b68
 8009548:	20003b7e 	.word	0x20003b7e
 800954c:	20003b74 	.word	0x20003b74
 8009550:	080172f4 	.word	0x080172f4
 8009554:	08017638 	.word	0x08017638
 8009558:	08017338 	.word	0x08017338
 800955c:	08017664 	.word	0x08017664
 8009560:	08017690 	.word	0x08017690
 8009564:	080176c0 	.word	0x080176c0
 8009568:	080176f4 	.word	0x080176f4
 800956c:	0801983c 	.word	0x0801983c
 8009570:	0801982c 	.word	0x0801982c
 8009574:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800957e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009580:	2200      	movs	r2, #0
 8009582:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009590:	4293      	cmp	r3, r2
 8009592:	bf28      	it	cs
 8009594:	4613      	movcs	r3, r2
 8009596:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009598:	8a7b      	ldrh	r3, [r7, #18]
 800959a:	085b      	lsrs	r3, r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80095a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80095aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d206      	bcs.n	80095c4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80095c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80095c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80095ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80095d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80095d8:	f004 fe66 	bl	800e2a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80095dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095de:	7d1b      	ldrb	r3, [r3, #20]
 80095e0:	2b06      	cmp	r3, #6
 80095e2:	d111      	bne.n	8009608 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80095e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e6:	8b5b      	ldrh	r3, [r3, #26]
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80095f0:	4b9d      	ldr	r3, [pc, #628]	@ (8009868 <tcp_slowtmr+0x588>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b28      	cmp	r3, #40	@ 0x28
 80095fc:	d904      	bls.n	8009608 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80095fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009602:	3301      	adds	r3, #1
 8009604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960a:	7a5b      	ldrb	r3, [r3, #9]
 800960c:	f003 0308 	and.w	r3, r3, #8
 8009610:	2b00      	cmp	r3, #0
 8009612:	d04c      	beq.n	80096ae <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8009614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009616:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009618:	2b04      	cmp	r3, #4
 800961a:	d003      	beq.n	8009624 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800961c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009620:	2b07      	cmp	r3, #7
 8009622:	d144      	bne.n	80096ae <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009624:	4b90      	ldr	r3, [pc, #576]	@ (8009868 <tcp_slowtmr+0x588>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800962e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009634:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8009638:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800963c:	498b      	ldr	r1, [pc, #556]	@ (800986c <tcp_slowtmr+0x58c>)
 800963e:	fba1 1303 	umull	r1, r3, r1, r3
 8009642:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009644:	429a      	cmp	r2, r3
 8009646:	d90a      	bls.n	800965e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800964c:	3301      	adds	r3, #1
 800964e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009652:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009656:	3301      	adds	r3, #1
 8009658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800965c:	e027      	b.n	80096ae <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800965e:	4b82      	ldr	r3, [pc, #520]	@ (8009868 <tcp_slowtmr+0x588>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800966e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009670:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009674:	4618      	mov	r0, r3
 8009676:	4b7e      	ldr	r3, [pc, #504]	@ (8009870 <tcp_slowtmr+0x590>)
 8009678:	fb00 f303 	mul.w	r3, r0, r3
 800967c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800967e:	497b      	ldr	r1, [pc, #492]	@ (800986c <tcp_slowtmr+0x58c>)
 8009680:	fba1 1303 	umull	r1, r3, r1, r3
 8009684:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009686:	429a      	cmp	r2, r3
 8009688:	d911      	bls.n	80096ae <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800968a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800968c:	f005 f92a 	bl	800e8e4 <tcp_keepalive>
 8009690:	4603      	mov	r3, r0
 8009692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009696:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800969a:	2b00      	cmp	r3, #0
 800969c:	d107      	bne.n	80096ae <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80096a4:	3301      	adds	r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096aa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80096ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d011      	beq.n	80096da <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80096b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009868 <tcp_slowtmr+0x588>)
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	1ad2      	subs	r2, r2, r3
 80096c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80096c6:	4619      	mov	r1, r3
 80096c8:	460b      	mov	r3, r1
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	440b      	add	r3, r1
 80096ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80096d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096d6:	f000 fef1 	bl	800a4bc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	7d1b      	ldrb	r3, [r3, #20]
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d10b      	bne.n	80096fa <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80096e2:	4b61      	ldr	r3, [pc, #388]	@ (8009868 <tcp_slowtmr+0x588>)
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	2b28      	cmp	r3, #40	@ 0x28
 80096ee:	d904      	bls.n	80096fa <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80096f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096f4:	3301      	adds	r3, #1
 80096f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80096fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fc:	7d1b      	ldrb	r3, [r3, #20]
 80096fe:	2b09      	cmp	r3, #9
 8009700:	d10b      	bne.n	800971a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009702:	4b59      	ldr	r3, [pc, #356]	@ (8009868 <tcp_slowtmr+0x588>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2bf0      	cmp	r3, #240	@ 0xf0
 800970e:	d904      	bls.n	800971a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8009710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009714:	3301      	adds	r3, #1
 8009716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800971a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800971e:	2b00      	cmp	r3, #0
 8009720:	d060      	beq.n	80097e4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009728:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800972a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800972c:	f000 fd12 	bl	800a154 <tcp_pcb_purge>
      if (prev != NULL) {
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d010      	beq.n	8009758 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009736:	4b4f      	ldr	r3, [pc, #316]	@ (8009874 <tcp_slowtmr+0x594>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800973c:	429a      	cmp	r2, r3
 800973e:	d106      	bne.n	800974e <tcp_slowtmr+0x46e>
 8009740:	4b4d      	ldr	r3, [pc, #308]	@ (8009878 <tcp_slowtmr+0x598>)
 8009742:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009746:	494d      	ldr	r1, [pc, #308]	@ (800987c <tcp_slowtmr+0x59c>)
 8009748:	484d      	ldr	r0, [pc, #308]	@ (8009880 <tcp_slowtmr+0x5a0>)
 800974a:	f00c f991 	bl	8015a70 <iprintf>
        prev->next = pcb->next;
 800974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009750:	68da      	ldr	r2, [r3, #12]
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	e00f      	b.n	8009778 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009758:	4b46      	ldr	r3, [pc, #280]	@ (8009874 <tcp_slowtmr+0x594>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800975e:	429a      	cmp	r2, r3
 8009760:	d006      	beq.n	8009770 <tcp_slowtmr+0x490>
 8009762:	4b45      	ldr	r3, [pc, #276]	@ (8009878 <tcp_slowtmr+0x598>)
 8009764:	f240 5271 	movw	r2, #1393	@ 0x571
 8009768:	4946      	ldr	r1, [pc, #280]	@ (8009884 <tcp_slowtmr+0x5a4>)
 800976a:	4845      	ldr	r0, [pc, #276]	@ (8009880 <tcp_slowtmr+0x5a0>)
 800976c:	f00c f980 	bl	8015a70 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	4a3f      	ldr	r2, [pc, #252]	@ (8009874 <tcp_slowtmr+0x594>)
 8009776:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800977c:	2b00      	cmp	r3, #0
 800977e:	d013      	beq.n	80097a8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009788:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800978a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978c:	3304      	adds	r3, #4
 800978e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009790:	8ad2      	ldrh	r2, [r2, #22]
 8009792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009794:	8b09      	ldrh	r1, [r1, #24]
 8009796:	9102      	str	r1, [sp, #8]
 8009798:	9201      	str	r2, [sp, #4]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	462b      	mov	r3, r5
 800979e:	4622      	mov	r2, r4
 80097a0:	4601      	mov	r1, r0
 80097a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097a4:	f004 ffea 	bl	800e77c <tcp_rst>
      err_arg = pcb->callback_arg;
 80097a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80097ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b0:	7d1b      	ldrb	r3, [r3, #20]
 80097b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80097b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80097be:	6838      	ldr	r0, [r7, #0]
 80097c0:	f7ff f836 	bl	8008830 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80097c4:	4b30      	ldr	r3, [pc, #192]	@ (8009888 <tcp_slowtmr+0x5a8>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d004      	beq.n	80097da <tcp_slowtmr+0x4fa>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f06f 010c 	mvn.w	r1, #12
 80097d6:	68b8      	ldr	r0, [r7, #8]
 80097d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80097da:	4b2b      	ldr	r3, [pc, #172]	@ (8009888 <tcp_slowtmr+0x5a8>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d037      	beq.n	8009852 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80097e2:	e590      	b.n	8009306 <tcp_slowtmr+0x26>
      prev = pcb;
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	7f1b      	ldrb	r3, [r3, #28]
 80097f2:	3301      	adds	r3, #1
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	7f1a      	ldrb	r2, [r3, #28]
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	7f5b      	ldrb	r3, [r3, #29]
 8009802:	429a      	cmp	r2, r3
 8009804:	d325      	bcc.n	8009852 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8009806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009808:	2200      	movs	r2, #0
 800980a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800980c:	4b1e      	ldr	r3, [pc, #120]	@ (8009888 <tcp_slowtmr+0x5a8>)
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <tcp_slowtmr+0x554>
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009824:	6912      	ldr	r2, [r2, #16]
 8009826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009828:	4610      	mov	r0, r2
 800982a:	4798      	blx	r3
 800982c:	4603      	mov	r3, r0
 800982e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009832:	e002      	b.n	800983a <tcp_slowtmr+0x55a>
 8009834:	2300      	movs	r3, #0
 8009836:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800983a:	4b13      	ldr	r3, [pc, #76]	@ (8009888 <tcp_slowtmr+0x5a8>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f47f ad60 	bne.w	8009304 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009844:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800984c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800984e:	f004 f9ab 	bl	800dba8 <tcp_output>
  while (pcb != NULL) {
 8009852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f ad5c 	bne.w	8009312 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800985e:	4b0b      	ldr	r3, [pc, #44]	@ (800988c <tcp_slowtmr+0x5ac>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009864:	e067      	b.n	8009936 <tcp_slowtmr+0x656>
 8009866:	bf00      	nop
 8009868:	20003b68 	.word	0x20003b68
 800986c:	10624dd3 	.word	0x10624dd3
 8009870:	000124f8 	.word	0x000124f8
 8009874:	20003b74 	.word	0x20003b74
 8009878:	080172f4 	.word	0x080172f4
 800987c:	0801772c 	.word	0x0801772c
 8009880:	08017338 	.word	0x08017338
 8009884:	08017758 	.word	0x08017758
 8009888:	20003b7c 	.word	0x20003b7c
 800988c:	20003b78 	.word	0x20003b78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	7d1b      	ldrb	r3, [r3, #20]
 8009894:	2b0a      	cmp	r3, #10
 8009896:	d006      	beq.n	80098a6 <tcp_slowtmr+0x5c6>
 8009898:	4b2b      	ldr	r3, [pc, #172]	@ (8009948 <tcp_slowtmr+0x668>)
 800989a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800989e:	492b      	ldr	r1, [pc, #172]	@ (800994c <tcp_slowtmr+0x66c>)
 80098a0:	482b      	ldr	r0, [pc, #172]	@ (8009950 <tcp_slowtmr+0x670>)
 80098a2:	f00c f8e5 	bl	8015a70 <iprintf>
    pcb_remove = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80098ac:	4b29      	ldr	r3, [pc, #164]	@ (8009954 <tcp_slowtmr+0x674>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80098b8:	d904      	bls.n	80098c4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80098ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098be:	3301      	adds	r3, #1
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02f      	beq.n	800992c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80098cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098ce:	f000 fc41 	bl	800a154 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80098d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d010      	beq.n	80098fa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80098d8:	4b1f      	ldr	r3, [pc, #124]	@ (8009958 <tcp_slowtmr+0x678>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d106      	bne.n	80098f0 <tcp_slowtmr+0x610>
 80098e2:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <tcp_slowtmr+0x668>)
 80098e4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80098e8:	491c      	ldr	r1, [pc, #112]	@ (800995c <tcp_slowtmr+0x67c>)
 80098ea:	4819      	ldr	r0, [pc, #100]	@ (8009950 <tcp_slowtmr+0x670>)
 80098ec:	f00c f8c0 	bl	8015a70 <iprintf>
        prev->next = pcb->next;
 80098f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f2:	68da      	ldr	r2, [r3, #12]
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	60da      	str	r2, [r3, #12]
 80098f8:	e00f      	b.n	800991a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80098fa:	4b17      	ldr	r3, [pc, #92]	@ (8009958 <tcp_slowtmr+0x678>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009900:	429a      	cmp	r2, r3
 8009902:	d006      	beq.n	8009912 <tcp_slowtmr+0x632>
 8009904:	4b10      	ldr	r3, [pc, #64]	@ (8009948 <tcp_slowtmr+0x668>)
 8009906:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800990a:	4915      	ldr	r1, [pc, #84]	@ (8009960 <tcp_slowtmr+0x680>)
 800990c:	4810      	ldr	r0, [pc, #64]	@ (8009950 <tcp_slowtmr+0x670>)
 800990e:	f00c f8af 	bl	8015a70 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	4a10      	ldr	r2, [pc, #64]	@ (8009958 <tcp_slowtmr+0x678>)
 8009918:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009924:	69f8      	ldr	r0, [r7, #28]
 8009926:	f7fe ff83 	bl	8008830 <tcp_free>
 800992a:	e004      	b.n	8009936 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1a9      	bne.n	8009890 <tcp_slowtmr+0x5b0>
    }
  }
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	3730      	adds	r7, #48	@ 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bdb0      	pop	{r4, r5, r7, pc}
 8009946:	bf00      	nop
 8009948:	080172f4 	.word	0x080172f4
 800994c:	08017784 	.word	0x08017784
 8009950:	08017338 	.word	0x08017338
 8009954:	20003b68 	.word	0x20003b68
 8009958:	20003b78 	.word	0x20003b78
 800995c:	080177b4 	.word	0x080177b4
 8009960:	080177dc 	.word	0x080177dc

08009964 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800996a:	4b2d      	ldr	r3, [pc, #180]	@ (8009a20 <tcp_fasttmr+0xbc>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	3301      	adds	r3, #1
 8009970:	b2da      	uxtb	r2, r3
 8009972:	4b2b      	ldr	r3, [pc, #172]	@ (8009a20 <tcp_fasttmr+0xbc>)
 8009974:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009976:	4b2b      	ldr	r3, [pc, #172]	@ (8009a24 <tcp_fasttmr+0xc0>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800997c:	e048      	b.n	8009a10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7f9a      	ldrb	r2, [r3, #30]
 8009982:	4b27      	ldr	r3, [pc, #156]	@ (8009a20 <tcp_fasttmr+0xbc>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d03f      	beq.n	8009a0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800998a:	4b25      	ldr	r3, [pc, #148]	@ (8009a20 <tcp_fasttmr+0xbc>)
 800998c:	781a      	ldrb	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8b5b      	ldrh	r3, [r3, #26]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	d010      	beq.n	80099c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8b5b      	ldrh	r3, [r3, #26]
 80099a2:	f043 0302 	orr.w	r3, r3, #2
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f004 f8fb 	bl	800dba8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8b5b      	ldrh	r3, [r3, #26]
 80099b6:	f023 0303 	bic.w	r3, r3, #3
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	8b5b      	ldrh	r3, [r3, #26]
 80099c4:	f003 0308 	and.w	r3, r3, #8
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	8b5b      	ldrh	r3, [r3, #26]
 80099d0:	f023 0308 	bic.w	r3, r3, #8
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff f8bc 	bl	8008b58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80099ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009a28 <tcp_fasttmr+0xc4>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f819 	bl	8009a2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80099fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009a28 <tcp_fasttmr+0xc4>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d000      	beq.n	8009a04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009a02:	e7b8      	b.n	8009976 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	e002      	b.n	8009a10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1b3      	bne.n	800997e <tcp_fasttmr+0x1a>
    }
  }
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20003b7e 	.word	0x20003b7e
 8009a24:	20003b74 	.word	0x20003b74
 8009a28:	20003b7c 	.word	0x20003b7c

08009a2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009a2c:	b590      	push	{r4, r7, lr}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <tcp_process_refused_data+0x22>
 8009a3a:	4b37      	ldr	r3, [pc, #220]	@ (8009b18 <tcp_process_refused_data+0xec>)
 8009a3c:	f240 6209 	movw	r2, #1545	@ 0x609
 8009a40:	4936      	ldr	r1, [pc, #216]	@ (8009b1c <tcp_process_refused_data+0xf0>)
 8009a42:	4837      	ldr	r0, [pc, #220]	@ (8009b20 <tcp_process_refused_data+0xf4>)
 8009a44:	f00c f814 	bl	8015a70 <iprintf>
 8009a48:	f06f 030f 	mvn.w	r3, #15
 8009a4c:	e060      	b.n	8009b10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a52:	7b5b      	ldrb	r3, [r3, #13]
 8009a54:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a5a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00b      	beq.n	8009a84 <tcp_process_refused_data+0x58>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6918      	ldr	r0, [r3, #16]
 8009a76:	2300      	movs	r3, #0
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	47a0      	blx	r4
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
 8009a82:	e007      	b.n	8009a94 <tcp_process_refused_data+0x68>
 8009a84:	2300      	movs	r3, #0
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f000 f8c2 	bl	8009c14 <tcp_recv_null>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d12a      	bne.n	8009af2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	f003 0320 	and.w	r3, r3, #32
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d033      	beq.n	8009b0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aaa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009aae:	d005      	beq.n	8009abc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00b      	beq.n	8009ade <tcp_process_refused_data+0xb2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6918      	ldr	r0, [r3, #16]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	47a0      	blx	r4
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]
 8009adc:	e001      	b.n	8009ae2 <tcp_process_refused_data+0xb6>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ae6:	f113 0f0d 	cmn.w	r3, #13
 8009aea:	d110      	bne.n	8009b0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009aec:	f06f 030c 	mvn.w	r3, #12
 8009af0:	e00e      	b.n	8009b10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009af6:	f113 0f0d 	cmn.w	r3, #13
 8009afa:	d102      	bne.n	8009b02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009afc:	f06f 030c 	mvn.w	r3, #12
 8009b00:	e006      	b.n	8009b10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009b08:	f06f 0304 	mvn.w	r3, #4
 8009b0c:	e000      	b.n	8009b10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd90      	pop	{r4, r7, pc}
 8009b18:	080172f4 	.word	0x080172f4
 8009b1c:	08017804 	.word	0x08017804
 8009b20:	08017338 	.word	0x08017338

08009b24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009b2c:	e007      	b.n	8009b3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f80a 	bl	8009b4e <tcp_seg_free>
    seg = next;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1f4      	bne.n	8009b2e <tcp_segs_free+0xa>
  }
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00c      	beq.n	8009b76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe fa43 	bl	8007ff4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009b6e:	6879      	ldr	r1, [r7, #4]
 8009b70:	2003      	movs	r0, #3
 8009b72:	f7fd fc89 	bl	8007488 <memp_free>
  }
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d107      	bne.n	8009ba2 <tcp_setprio+0x22>
 8009b92:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <tcp_setprio+0x30>)
 8009b94:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009b98:	4906      	ldr	r1, [pc, #24]	@ (8009bb4 <tcp_setprio+0x34>)
 8009b9a:	4807      	ldr	r0, [pc, #28]	@ (8009bb8 <tcp_setprio+0x38>)
 8009b9c:	f00b ff68 	bl	8015a70 <iprintf>
 8009ba0:	e002      	b.n	8009ba8 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	78fa      	ldrb	r2, [r7, #3]
 8009ba6:	755a      	strb	r2, [r3, #21]
}
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	080172f4 	.word	0x080172f4
 8009bb4:	0801782c 	.word	0x0801782c
 8009bb8:	08017338 	.word	0x08017338

08009bbc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <tcp_seg_copy+0x1c>
 8009bca:	4b0f      	ldr	r3, [pc, #60]	@ (8009c08 <tcp_seg_copy+0x4c>)
 8009bcc:	f240 6282 	movw	r2, #1666	@ 0x682
 8009bd0:	490e      	ldr	r1, [pc, #56]	@ (8009c0c <tcp_seg_copy+0x50>)
 8009bd2:	480f      	ldr	r0, [pc, #60]	@ (8009c10 <tcp_seg_copy+0x54>)
 8009bd4:	f00b ff4c 	bl	8015a70 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009bd8:	2003      	movs	r0, #3
 8009bda:	f7fd fbfd 	bl	80073d8 <memp_malloc>
 8009bde:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <tcp_seg_copy+0x2e>
    return NULL;
 8009be6:	2300      	movs	r3, #0
 8009be8:	e00a      	b.n	8009c00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009bea:	2210      	movs	r2, #16
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f00c f847 	bl	8015c82 <memcpy>
  pbuf_ref(cseg->p);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe faa1 	bl	8008140 <pbuf_ref>
  return cseg;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	080172f4 	.word	0x080172f4
 8009c0c:	08017848 	.word	0x08017848
 8009c10:	08017338 	.word	0x08017338

08009c14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d109      	bne.n	8009c3c <tcp_recv_null+0x28>
 8009c28:	4b12      	ldr	r3, [pc, #72]	@ (8009c74 <tcp_recv_null+0x60>)
 8009c2a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009c2e:	4912      	ldr	r1, [pc, #72]	@ (8009c78 <tcp_recv_null+0x64>)
 8009c30:	4812      	ldr	r0, [pc, #72]	@ (8009c7c <tcp_recv_null+0x68>)
 8009c32:	f00b ff1d 	bl	8015a70 <iprintf>
 8009c36:	f06f 030f 	mvn.w	r3, #15
 8009c3a:	e016      	b.n	8009c6a <tcp_recv_null+0x56>

  if (p != NULL) {
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	891b      	ldrh	r3, [r3, #8]
 8009c46:	4619      	mov	r1, r3
 8009c48:	68b8      	ldr	r0, [r7, #8]
 8009c4a:	f7ff fab3 	bl	80091b4 <tcp_recved>
    pbuf_free(p);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7fe f9d0 	bl	8007ff4 <pbuf_free>
 8009c54:	e008      	b.n	8009c68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009c5e:	68b8      	ldr	r0, [r7, #8]
 8009c60:	f7fe ffe4 	bl	8008c2c <tcp_close>
 8009c64:	4603      	mov	r3, r0
 8009c66:	e000      	b.n	8009c6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	080172f4 	.word	0x080172f4
 8009c78:	08017864 	.word	0x08017864
 8009c7c:	08017338 	.word	0x08017338

08009c80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	db01      	blt.n	8009c96 <tcp_kill_prio+0x16>
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	e000      	b.n	8009c98 <tcp_kill_prio+0x18>
 8009c96:	237f      	movs	r3, #127	@ 0x7f
 8009c98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d034      	beq.n	8009d0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cae:	4b19      	ldr	r3, [pc, #100]	@ (8009d14 <tcp_kill_prio+0x94>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	e01f      	b.n	8009cf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	7d5b      	ldrb	r3, [r3, #21]
 8009cba:	7afa      	ldrb	r2, [r7, #11]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d80c      	bhi.n	8009cda <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009cc4:	7afa      	ldrb	r2, [r7, #11]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d112      	bne.n	8009cf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009cca:	4b13      	ldr	r3, [pc, #76]	@ (8009d18 <tcp_kill_prio+0x98>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d80a      	bhi.n	8009cf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009cda:	4b0f      	ldr	r3, [pc, #60]	@ (8009d18 <tcp_kill_prio+0x98>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	7d5b      	ldrb	r3, [r3, #21]
 8009cee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	617b      	str	r3, [r7, #20]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1dc      	bne.n	8009cb6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f7ff f87c 	bl	8008e00 <tcp_abort>
 8009d08:	e000      	b.n	8009d0c <tcp_kill_prio+0x8c>
    return;
 8009d0a:	bf00      	nop
  }
}
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20003b74 	.word	0x20003b74
 8009d18:	20003b68 	.word	0x20003b68

08009d1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d009      	beq.n	8009d40 <tcp_kill_state+0x24>
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d006      	beq.n	8009d40 <tcp_kill_state+0x24>
 8009d32:	4b1a      	ldr	r3, [pc, #104]	@ (8009d9c <tcp_kill_state+0x80>)
 8009d34:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009d38:	4919      	ldr	r1, [pc, #100]	@ (8009da0 <tcp_kill_state+0x84>)
 8009d3a:	481a      	ldr	r0, [pc, #104]	@ (8009da4 <tcp_kill_state+0x88>)
 8009d3c:	f00b fe98 	bl	8015a70 <iprintf>

  inactivity = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d48:	4b17      	ldr	r3, [pc, #92]	@ (8009da8 <tcp_kill_state+0x8c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	e017      	b.n	8009d80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	7d1b      	ldrb	r3, [r3, #20]
 8009d54:	79fa      	ldrb	r2, [r7, #7]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d10f      	bne.n	8009d7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009d5a:	4b14      	ldr	r3, [pc, #80]	@ (8009dac <tcp_kill_state+0x90>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d807      	bhi.n	8009d7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009d6a:	4b10      	ldr	r3, [pc, #64]	@ (8009dac <tcp_kill_state+0x90>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e4      	bne.n	8009d50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	6938      	ldr	r0, [r7, #16]
 8009d90:	f7fe ff78 	bl	8008c84 <tcp_abandon>
  }
}
 8009d94:	bf00      	nop
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	080172f4 	.word	0x080172f4
 8009da0:	08017880 	.word	0x08017880
 8009da4:	08017338 	.word	0x08017338
 8009da8:	20003b74 	.word	0x20003b74
 8009dac:	20003b68 	.word	0x20003b68

08009db0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dbe:	4b12      	ldr	r3, [pc, #72]	@ (8009e08 <tcp_kill_timewait+0x58>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e012      	b.n	8009dec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009dc6:	4b11      	ldr	r3, [pc, #68]	@ (8009e0c <tcp_kill_timewait+0x5c>)
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d807      	bhi.n	8009de6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <tcp_kill_timewait+0x5c>)
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e9      	bne.n	8009dc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	f7ff f801 	bl	8008e00 <tcp_abort>
  }
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20003b78 	.word	0x20003b78
 8009e0c:	20003b68 	.word	0x20003b68

08009e10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009e16:	4b10      	ldr	r3, [pc, #64]	@ (8009e58 <tcp_handle_closepend+0x48>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009e1c:	e014      	b.n	8009e48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	8b5b      	ldrh	r3, [r3, #26]
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	8b5b      	ldrh	r3, [r3, #26]
 8009e34:	f023 0308 	bic.w	r3, r3, #8
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fe fe8a 	bl	8008b58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e7      	bne.n	8009e1e <tcp_handle_closepend+0xe>
  }
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20003b74 	.word	0x20003b74

08009e5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e66:	2001      	movs	r0, #1
 8009e68:	f7fd fab6 	bl	80073d8 <memp_malloc>
 8009e6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d14e      	bne.n	8009f12 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009e74:	f7ff ffcc 	bl	8009e10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009e78:	f7ff ff9a 	bl	8009db0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	f7fd faab 	bl	80073d8 <memp_malloc>
 8009e82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d139      	bne.n	8009efe <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009e8a:	2009      	movs	r0, #9
 8009e8c:	f7ff ff46 	bl	8009d1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009e90:	2001      	movs	r0, #1
 8009e92:	f7fd faa1 	bl	80073d8 <memp_malloc>
 8009e96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d125      	bne.n	8009eea <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009e9e:	2008      	movs	r0, #8
 8009ea0:	f7ff ff3c 	bl	8009d1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f7fd fa97 	bl	80073d8 <memp_malloc>
 8009eaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d111      	bne.n	8009ed6 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fee3 	bl	8009c80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f7fd fa8c 	bl	80073d8 <memp_malloc>
 8009ec0:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d006      	beq.n	8009ed6 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009ec8:	4b36      	ldr	r3, [pc, #216]	@ (8009fa4 <tcp_alloc+0x148>)
 8009eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ece:	881a      	ldrh	r2, [r3, #0]
 8009ed0:	3a01      	subs	r2, #1
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d006      	beq.n	8009eea <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009edc:	4b31      	ldr	r3, [pc, #196]	@ (8009fa4 <tcp_alloc+0x148>)
 8009ede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ee2:	881a      	ldrh	r2, [r3, #0]
 8009ee4:	3a01      	subs	r2, #1
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d006      	beq.n	8009efe <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa4 <tcp_alloc+0x148>)
 8009ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ef6:	881a      	ldrh	r2, [r3, #0]
 8009ef8:	3a01      	subs	r2, #1
 8009efa:	b292      	uxth	r2, r2
 8009efc:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009f04:	4b27      	ldr	r3, [pc, #156]	@ (8009fa4 <tcp_alloc+0x148>)
 8009f06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f0a:	881a      	ldrh	r2, [r3, #0]
 8009f0c:	3a01      	subs	r2, #1
 8009f0e:	b292      	uxth	r2, r2
 8009f10:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d03f      	beq.n	8009f98 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009f18:	229c      	movs	r2, #156	@ 0x9c
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f00b fe0c 	bl	8015b3a <memset>
    pcb->prio = prio;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	79fa      	ldrb	r2, [r7, #7]
 8009f26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009f2e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	22ff      	movs	r2, #255	@ 0xff
 8009f46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009f4e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2206      	movs	r2, #6
 8009f54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2206      	movs	r2, #6
 8009f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f64:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa8 <tcp_alloc+0x14c>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009f76:	4b0d      	ldr	r3, [pc, #52]	@ (8009fac <tcp_alloc+0x150>)
 8009f78:	781a      	ldrb	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009f84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4a09      	ldr	r2, [pc, #36]	@ (8009fb0 <tcp_alloc+0x154>)
 8009f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a08      	ldr	r2, [pc, #32]	@ (8009fb4 <tcp_alloc+0x158>)
 8009f94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009f98:	68fb      	ldr	r3, [r7, #12]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20003a9c 	.word	0x20003a9c
 8009fa8:	20003b68 	.word	0x20003b68
 8009fac:	20003b7e 	.word	0x20003b7e
 8009fb0:	08009c15 	.word	0x08009c15
 8009fb4:	006ddd00 	.word	0x006ddd00

08009fb8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009fc2:	2040      	movs	r0, #64	@ 0x40
 8009fc4:	f7ff ff4a 	bl	8009e5c <tcp_alloc>
 8009fc8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009fca:	68fb      	ldr	r3, [r7, #12]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	611a      	str	r2, [r3, #16]
  }
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
	...

08009ff8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7d1b      	ldrb	r3, [r3, #20]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d106      	bne.n	800a01e <tcp_recv+0x26>
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <tcp_recv+0x38>)
 800a012:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a016:	4907      	ldr	r1, [pc, #28]	@ (800a034 <tcp_recv+0x3c>)
 800a018:	4807      	ldr	r0, [pc, #28]	@ (800a038 <tcp_recv+0x40>)
 800a01a:	f00b fd29 	bl	8015a70 <iprintf>
    pcb->recv = recv;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	080172f4 	.word	0x080172f4
 800a034:	08017890 	.word	0x08017890
 800a038:	08017338 	.word	0x08017338

0800a03c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d106      	bne.n	800a062 <tcp_sent+0x26>
 800a054:	4b07      	ldr	r3, [pc, #28]	@ (800a074 <tcp_sent+0x38>)
 800a056:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a05a:	4907      	ldr	r1, [pc, #28]	@ (800a078 <tcp_sent+0x3c>)
 800a05c:	4807      	ldr	r0, [pc, #28]	@ (800a07c <tcp_sent+0x40>)
 800a05e:	f00b fd07 	bl	8015a70 <iprintf>
    pcb->sent = sent;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	683a      	ldr	r2, [r7, #0]
 800a066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	080172f4 	.word	0x080172f4
 800a078:	080178b8 	.word	0x080178b8
 800a07c:	08017338 	.word	0x08017338

0800a080 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00e      	beq.n	800a0ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	7d1b      	ldrb	r3, [r3, #20]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d106      	bne.n	800a0a6 <tcp_err+0x26>
 800a098:	4b07      	ldr	r3, [pc, #28]	@ (800a0b8 <tcp_err+0x38>)
 800a09a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a09e:	4907      	ldr	r1, [pc, #28]	@ (800a0bc <tcp_err+0x3c>)
 800a0a0:	4807      	ldr	r0, [pc, #28]	@ (800a0c0 <tcp_err+0x40>)
 800a0a2:	f00b fce5 	bl	8015a70 <iprintf>
    pcb->errf = err;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a0ae:	bf00      	nop
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	080172f4 	.word	0x080172f4
 800a0bc:	080178e0 	.word	0x080178e0
 800a0c0:	08017338 	.word	0x08017338

0800a0c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <tcp_accept+0x22>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7d1b      	ldrb	r3, [r3, #20]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d104      	bne.n	800a0e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	619a      	str	r2, [r3, #24]
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	4613      	mov	r3, r2
 800a100:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d107      	bne.n	800a118 <tcp_poll+0x24>
 800a108:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <tcp_poll+0x50>)
 800a10a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800a10e:	490e      	ldr	r1, [pc, #56]	@ (800a148 <tcp_poll+0x54>)
 800a110:	480e      	ldr	r0, [pc, #56]	@ (800a14c <tcp_poll+0x58>)
 800a112:	f00b fcad 	bl	8015a70 <iprintf>
 800a116:	e011      	b.n	800a13c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	7d1b      	ldrb	r3, [r3, #20]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d106      	bne.n	800a12e <tcp_poll+0x3a>
 800a120:	4b08      	ldr	r3, [pc, #32]	@ (800a144 <tcp_poll+0x50>)
 800a122:	f640 023e 	movw	r2, #2110	@ 0x83e
 800a126:	490a      	ldr	r1, [pc, #40]	@ (800a150 <tcp_poll+0x5c>)
 800a128:	4808      	ldr	r0, [pc, #32]	@ (800a14c <tcp_poll+0x58>)
 800a12a:	f00b fca1 	bl	8015a70 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	79fa      	ldrb	r2, [r7, #7]
 800a13a:	775a      	strb	r2, [r3, #29]
}
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	080172f4 	.word	0x080172f4
 800a148:	08017908 	.word	0x08017908
 800a14c:	08017338 	.word	0x08017338
 800a150:	08017920 	.word	0x08017920

0800a154 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d107      	bne.n	800a172 <tcp_pcb_purge+0x1e>
 800a162:	4b21      	ldr	r3, [pc, #132]	@ (800a1e8 <tcp_pcb_purge+0x94>)
 800a164:	f640 0251 	movw	r2, #2129	@ 0x851
 800a168:	4920      	ldr	r1, [pc, #128]	@ (800a1ec <tcp_pcb_purge+0x98>)
 800a16a:	4821      	ldr	r0, [pc, #132]	@ (800a1f0 <tcp_pcb_purge+0x9c>)
 800a16c:	f00b fc80 	bl	8015a70 <iprintf>
 800a170:	e037      	b.n	800a1e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7d1b      	ldrb	r3, [r3, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d033      	beq.n	800a1e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a17e:	2b0a      	cmp	r3, #10
 800a180:	d02f      	beq.n	800a1e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a186:	2b01      	cmp	r3, #1
 800a188:	d02b      	beq.n	800a1e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d007      	beq.n	800a1a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a196:	4618      	mov	r0, r3
 800a198:	f7fd ff2c 	bl	8007ff4 <pbuf_free>
      pcb->refused_data = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f986 	bl	800a4bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1b6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff fcb1 	bl	8009b24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fcac 	bl	8009b24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	080172f4 	.word	0x080172f4
 800a1ec:	08017940 	.word	0x08017940
 800a1f0:	08017338 	.word	0x08017338

0800a1f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d106      	bne.n	800a212 <tcp_pcb_remove+0x1e>
 800a204:	4b3e      	ldr	r3, [pc, #248]	@ (800a300 <tcp_pcb_remove+0x10c>)
 800a206:	f640 0283 	movw	r2, #2179	@ 0x883
 800a20a:	493e      	ldr	r1, [pc, #248]	@ (800a304 <tcp_pcb_remove+0x110>)
 800a20c:	483e      	ldr	r0, [pc, #248]	@ (800a308 <tcp_pcb_remove+0x114>)
 800a20e:	f00b fc2f 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <tcp_pcb_remove+0x32>
 800a218:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <tcp_pcb_remove+0x10c>)
 800a21a:	f640 0284 	movw	r2, #2180	@ 0x884
 800a21e:	493b      	ldr	r1, [pc, #236]	@ (800a30c <tcp_pcb_remove+0x118>)
 800a220:	4839      	ldr	r0, [pc, #228]	@ (800a308 <tcp_pcb_remove+0x114>)
 800a222:	f00b fc25 	bl	8015a70 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d105      	bne.n	800a23c <tcp_pcb_remove+0x48>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e013      	b.n	800a264 <tcp_pcb_remove+0x70>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	e00c      	b.n	800a25e <tcp_pcb_remove+0x6a>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d104      	bne.n	800a258 <tcp_pcb_remove+0x64>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	60da      	str	r2, [r3, #12]
 800a256:	e005      	b.n	800a264 <tcp_pcb_remove+0x70>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1ef      	bne.n	800a244 <tcp_pcb_remove+0x50>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a26a:	6838      	ldr	r0, [r7, #0]
 800a26c:	f7ff ff72 	bl	800a154 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	7d1b      	ldrb	r3, [r3, #20]
 800a274:	2b0a      	cmp	r3, #10
 800a276:	d013      	beq.n	800a2a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d00f      	beq.n	800a2a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	8b5b      	ldrh	r3, [r3, #26]
 800a284:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d009      	beq.n	800a2a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	8b5b      	ldrh	r3, [r3, #26]
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	b29a      	uxth	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a29a:	6838      	ldr	r0, [r7, #0]
 800a29c:	f003 fc84 	bl	800dba8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	7d1b      	ldrb	r3, [r3, #20]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d020      	beq.n	800a2ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <tcp_pcb_remove+0xca>
 800a2b0:	4b13      	ldr	r3, [pc, #76]	@ (800a300 <tcp_pcb_remove+0x10c>)
 800a2b2:	f640 0293 	movw	r2, #2195	@ 0x893
 800a2b6:	4916      	ldr	r1, [pc, #88]	@ (800a310 <tcp_pcb_remove+0x11c>)
 800a2b8:	4813      	ldr	r0, [pc, #76]	@ (800a308 <tcp_pcb_remove+0x114>)
 800a2ba:	f00b fbd9 	bl	8015a70 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d006      	beq.n	800a2d4 <tcp_pcb_remove+0xe0>
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a300 <tcp_pcb_remove+0x10c>)
 800a2c8:	f640 0294 	movw	r2, #2196	@ 0x894
 800a2cc:	4911      	ldr	r1, [pc, #68]	@ (800a314 <tcp_pcb_remove+0x120>)
 800a2ce:	480e      	ldr	r0, [pc, #56]	@ (800a308 <tcp_pcb_remove+0x114>)
 800a2d0:	f00b fbce 	bl	8015a70 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d006      	beq.n	800a2ea <tcp_pcb_remove+0xf6>
 800a2dc:	4b08      	ldr	r3, [pc, #32]	@ (800a300 <tcp_pcb_remove+0x10c>)
 800a2de:	f640 0296 	movw	r2, #2198	@ 0x896
 800a2e2:	490d      	ldr	r1, [pc, #52]	@ (800a318 <tcp_pcb_remove+0x124>)
 800a2e4:	4808      	ldr	r0, [pc, #32]	@ (800a308 <tcp_pcb_remove+0x114>)
 800a2e6:	f00b fbc3 	bl	8015a70 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	080172f4 	.word	0x080172f4
 800a304:	0801795c 	.word	0x0801795c
 800a308:	08017338 	.word	0x08017338
 800a30c:	08017978 	.word	0x08017978
 800a310:	08017998 	.word	0x08017998
 800a314:	080179b0 	.word	0x080179b0
 800a318:	080179cc 	.word	0x080179cc

0800a31c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <tcp_next_iss+0x1c>
 800a32a:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <tcp_next_iss+0x38>)
 800a32c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a330:	4909      	ldr	r1, [pc, #36]	@ (800a358 <tcp_next_iss+0x3c>)
 800a332:	480a      	ldr	r0, [pc, #40]	@ (800a35c <tcp_next_iss+0x40>)
 800a334:	f00b fb9c 	bl	8015a70 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a338:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <tcp_next_iss+0x44>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <tcp_next_iss+0x48>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4413      	add	r3, r2
 800a342:	4a07      	ldr	r2, [pc, #28]	@ (800a360 <tcp_next_iss+0x44>)
 800a344:	6013      	str	r3, [r2, #0]
  return iss;
 800a346:	4b06      	ldr	r3, [pc, #24]	@ (800a360 <tcp_next_iss+0x44>)
 800a348:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	080172f4 	.word	0x080172f4
 800a358:	080179e4 	.word	0x080179e4
 800a35c:	08017338 	.word	0x08017338
 800a360:	2000000c 	.word	0x2000000c
 800a364:	20003b68 	.word	0x20003b68

0800a368 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <tcp_eff_send_mss_netif+0x22>
 800a37c:	4b14      	ldr	r3, [pc, #80]	@ (800a3d0 <tcp_eff_send_mss_netif+0x68>)
 800a37e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a382:	4914      	ldr	r1, [pc, #80]	@ (800a3d4 <tcp_eff_send_mss_netif+0x6c>)
 800a384:	4814      	ldr	r0, [pc, #80]	@ (800a3d8 <tcp_eff_send_mss_netif+0x70>)
 800a386:	f00b fb73 	bl	8015a70 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a390:	89fb      	ldrh	r3, [r7, #14]
 800a392:	e019      	b.n	800a3c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a398:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a39a:	8afb      	ldrh	r3, [r7, #22]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d012      	beq.n	800a3c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a3a0:	2328      	movs	r3, #40	@ 0x28
 800a3a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a3a4:	8afa      	ldrh	r2, [r7, #22]
 800a3a6:	8abb      	ldrh	r3, [r7, #20]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d904      	bls.n	800a3b6 <tcp_eff_send_mss_netif+0x4e>
 800a3ac:	8afa      	ldrh	r2, [r7, #22]
 800a3ae:	8abb      	ldrh	r3, [r7, #20]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	e000      	b.n	800a3b8 <tcp_eff_send_mss_netif+0x50>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a3ba:	8a7a      	ldrh	r2, [r7, #18]
 800a3bc:	89fb      	ldrh	r3, [r7, #14]
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bf28      	it	cs
 800a3c2:	4613      	movcs	r3, r2
 800a3c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a3c6:	89fb      	ldrh	r3, [r7, #14]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3718      	adds	r7, #24
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	080172f4 	.word	0x080172f4
 800a3d4:	08017a00 	.word	0x08017a00
 800a3d8:	08017338 	.word	0x08017338

0800a3dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d119      	bne.n	800a424 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a3f0:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a3f2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a3f6:	4910      	ldr	r1, [pc, #64]	@ (800a438 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a3f8:	4810      	ldr	r0, [pc, #64]	@ (800a43c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a3fa:	f00b fb39 	bl	8015a70 <iprintf>

  while (pcb != NULL) {
 800a3fe:	e011      	b.n	800a424 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d108      	bne.n	800a41e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f7fe fcf4 	bl	8008e00 <tcp_abort>
      pcb = next;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e002      	b.n	800a424 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1ea      	bne.n	800a400 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	080172f4 	.word	0x080172f4
 800a438:	08017a28 	.word	0x08017a28
 800a43c:	08017338 	.word	0x08017338

0800a440 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d02a      	beq.n	800a4a6 <tcp_netif_ip_addr_changed+0x66>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d026      	beq.n	800a4a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a458:	4b15      	ldr	r3, [pc, #84]	@ (800a4b0 <tcp_netif_ip_addr_changed+0x70>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff ffbc 	bl	800a3dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a464:	4b13      	ldr	r3, [pc, #76]	@ (800a4b4 <tcp_netif_ip_addr_changed+0x74>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff ffb6 	bl	800a3dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d017      	beq.n	800a4a6 <tcp_netif_ip_addr_changed+0x66>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d013      	beq.n	800a4a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a47e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b8 <tcp_netif_ip_addr_changed+0x78>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e00c      	b.n	800a4a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d103      	bne.n	800a49a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1ef      	bne.n	800a486 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20003b74 	.word	0x20003b74
 800a4b4:	20003b6c 	.word	0x20003b6c
 800a4b8:	20003b70 	.word	0x20003b70

0800a4bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d007      	beq.n	800a4dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fb27 	bl	8009b24 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b08d      	sub	sp, #52	@ 0x34
 800a4e8:	af04      	add	r7, sp, #16
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <tcp_input+0x1c>
 800a4f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a664 <tcp_input+0x180>)
 800a4f6:	2283      	movs	r2, #131	@ 0x83
 800a4f8:	495b      	ldr	r1, [pc, #364]	@ (800a668 <tcp_input+0x184>)
 800a4fa:	485c      	ldr	r0, [pc, #368]	@ (800a66c <tcp_input+0x188>)
 800a4fc:	f00b fab8 	bl	8015a70 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 800a500:	4b5b      	ldr	r3, [pc, #364]	@ (800a670 <tcp_input+0x18c>)
 800a502:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 800a506:	3301      	adds	r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	4b59      	ldr	r3, [pc, #356]	@ (800a670 <tcp_input+0x18c>)
 800a50c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	4a57      	ldr	r2, [pc, #348]	@ (800a674 <tcp_input+0x190>)
 800a516:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	895b      	ldrh	r3, [r3, #10]
 800a51c:	2b13      	cmp	r3, #19
 800a51e:	d809      	bhi.n	800a534 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 800a520:	4b53      	ldr	r3, [pc, #332]	@ (800a670 <tcp_input+0x18c>)
 800a522:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a526:	3301      	adds	r3, #1
 800a528:	b29a      	uxth	r2, r3
 800a52a:	4b51      	ldr	r3, [pc, #324]	@ (800a670 <tcp_input+0x18c>)
 800a52c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 800a530:	f000 bc36 	b.w	800ada0 <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a534:	4b50      	ldr	r3, [pc, #320]	@ (800a678 <tcp_input+0x194>)
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	4a4f      	ldr	r2, [pc, #316]	@ (800a678 <tcp_input+0x194>)
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f008 fd42 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d105      	bne.n	800a556 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a54a:	4b4b      	ldr	r3, [pc, #300]	@ (800a678 <tcp_input+0x194>)
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a552:	2be0      	cmp	r3, #224	@ 0xe0
 800a554:	d109      	bne.n	800a56a <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 800a556:	4b46      	ldr	r3, [pc, #280]	@ (800a670 <tcp_input+0x18c>)
 800a558:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800a55c:	3301      	adds	r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	4b43      	ldr	r3, [pc, #268]	@ (800a670 <tcp_input+0x18c>)
 800a562:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 800a566:	f000 bc1b 	b.w	800ada0 <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	891a      	ldrh	r2, [r3, #8]
 800a56e:	4b43      	ldr	r3, [pc, #268]	@ (800a67c <tcp_input+0x198>)
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4b43      	ldr	r3, [pc, #268]	@ (800a680 <tcp_input+0x19c>)
 800a574:	2106      	movs	r1, #6
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7fc fd91 	bl	800709e <ip_chksum_pseudo>
 800a57c:	4603      	mov	r3, r0
 800a57e:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800a580:	8a3b      	ldrh	r3, [r7, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d009      	beq.n	800a59a <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 800a586:	4b3a      	ldr	r3, [pc, #232]	@ (800a670 <tcp_input+0x18c>)
 800a588:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800a58c:	3301      	adds	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	4b37      	ldr	r3, [pc, #220]	@ (800a670 <tcp_input+0x18c>)
 800a592:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      goto dropped;
 800a596:	f000 bc03 	b.w	800ada0 <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a59a:	4b36      	ldr	r3, [pc, #216]	@ (800a674 <tcp_input+0x190>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	899b      	ldrh	r3, [r3, #12]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fc f926 	bl	80067f4 <lwip_htons>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	0b1b      	lsrs	r3, r3, #12
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b13      	cmp	r3, #19
 800a5b8:	d905      	bls.n	800a5c6 <tcp_input+0xe2>
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d908      	bls.n	800a5d8 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 800a5c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a670 <tcp_input+0x18c>)
 800a5c8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <tcp_input+0x18c>)
 800a5d2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 800a5d6:	e3e3      	b.n	800ada0 <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	3b14      	subs	r3, #20
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	4b28      	ldr	r3, [pc, #160]	@ (800a684 <tcp_input+0x1a0>)
 800a5e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a5e4:	4b28      	ldr	r3, [pc, #160]	@ (800a688 <tcp_input+0x1a4>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	895a      	ldrh	r2, [r3, #10]
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d309      	bcc.n	800a60a <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a5f6:	4b23      	ldr	r3, [pc, #140]	@ (800a684 <tcp_input+0x1a0>)
 800a5f8:	881a      	ldrh	r2, [r3, #0]
 800a5fa:	4b24      	ldr	r3, [pc, #144]	@ (800a68c <tcp_input+0x1a8>)
 800a5fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fd fc70 	bl	8007ee8 <pbuf_remove_header>
 800a608:	e06e      	b.n	800a6e8 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d105      	bne.n	800a61e <tcp_input+0x13a>
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <tcp_input+0x180>)
 800a614:	22c2      	movs	r2, #194	@ 0xc2
 800a616:	491e      	ldr	r1, [pc, #120]	@ (800a690 <tcp_input+0x1ac>)
 800a618:	4814      	ldr	r0, [pc, #80]	@ (800a66c <tcp_input+0x188>)
 800a61a:	f00b fa29 	bl	8015a70 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a61e:	2114      	movs	r1, #20
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7fd fc61 	bl	8007ee8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	895a      	ldrh	r2, [r3, #10]
 800a62a:	4b18      	ldr	r3, [pc, #96]	@ (800a68c <tcp_input+0x1a8>)
 800a62c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a62e:	4b15      	ldr	r3, [pc, #84]	@ (800a684 <tcp_input+0x1a0>)
 800a630:	881a      	ldrh	r2, [r3, #0]
 800a632:	4b16      	ldr	r3, [pc, #88]	@ (800a68c <tcp_input+0x1a8>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a63a:	4b14      	ldr	r3, [pc, #80]	@ (800a68c <tcp_input+0x1a8>)
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7fd fc51 	bl	8007ee8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	895b      	ldrh	r3, [r3, #10]
 800a64c:	89ba      	ldrh	r2, [r7, #12]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d920      	bls.n	800a694 <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 800a652:	4b07      	ldr	r3, [pc, #28]	@ (800a670 <tcp_input+0x18c>)
 800a654:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a658:	3301      	adds	r3, #1
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	4b04      	ldr	r3, [pc, #16]	@ (800a670 <tcp_input+0x18c>)
 800a65e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 800a662:	e39d      	b.n	800ada0 <tcp_input+0x8bc>
 800a664:	08017a5c 	.word	0x08017a5c
 800a668:	08017a90 	.word	0x08017a90
 800a66c:	08017aa8 	.word	0x08017aa8
 800a670:	20003a9c 	.word	0x20003a9c
 800a674:	20003b90 	.word	0x20003b90
 800a678:	20000aa8 	.word	0x20000aa8
 800a67c:	20000abc 	.word	0x20000abc
 800a680:	20000ab8 	.word	0x20000ab8
 800a684:	20003b94 	.word	0x20003b94
 800a688:	20003b98 	.word	0x20003b98
 800a68c:	20003b96 	.word	0x20003b96
 800a690:	08017ad0 	.word	0x08017ad0
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	4a91      	ldr	r2, [pc, #580]	@ (800a8e0 <tcp_input+0x3fc>)
 800a69c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	89ba      	ldrh	r2, [r7, #12]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd fc1e 	bl	8007ee8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	891a      	ldrh	r2, [r3, #8]
 800a6b0:	89bb      	ldrh	r3, [r7, #12]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	895b      	ldrh	r3, [r3, #10]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <tcp_input+0x1ea>
 800a6c2:	4b88      	ldr	r3, [pc, #544]	@ (800a8e4 <tcp_input+0x400>)
 800a6c4:	22df      	movs	r2, #223	@ 0xdf
 800a6c6:	4988      	ldr	r1, [pc, #544]	@ (800a8e8 <tcp_input+0x404>)
 800a6c8:	4888      	ldr	r0, [pc, #544]	@ (800a8ec <tcp_input+0x408>)
 800a6ca:	f00b f9d1 	bl	8015a70 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	891a      	ldrh	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	891b      	ldrh	r3, [r3, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d005      	beq.n	800a6e8 <tcp_input+0x204>
 800a6dc:	4b81      	ldr	r3, [pc, #516]	@ (800a8e4 <tcp_input+0x400>)
 800a6de:	22e0      	movs	r2, #224	@ 0xe0
 800a6e0:	4983      	ldr	r1, [pc, #524]	@ (800a8f0 <tcp_input+0x40c>)
 800a6e2:	4882      	ldr	r0, [pc, #520]	@ (800a8ec <tcp_input+0x408>)
 800a6e4:	f00b f9c4 	bl	8015a70 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a6e8:	4b82      	ldr	r3, [pc, #520]	@ (800a8f4 <tcp_input+0x410>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	4a80      	ldr	r2, [pc, #512]	@ (800a8f4 <tcp_input+0x410>)
 800a6f2:	6814      	ldr	r4, [r2, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fc f87d 	bl	80067f4 <lwip_htons>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a6fe:	4b7d      	ldr	r3, [pc, #500]	@ (800a8f4 <tcp_input+0x410>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	885b      	ldrh	r3, [r3, #2]
 800a704:	b29b      	uxth	r3, r3
 800a706:	4a7b      	ldr	r2, [pc, #492]	@ (800a8f4 <tcp_input+0x410>)
 800a708:	6814      	ldr	r4, [r2, #0]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fc f872 	bl	80067f4 <lwip_htons>
 800a710:	4603      	mov	r3, r0
 800a712:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a714:	4b77      	ldr	r3, [pc, #476]	@ (800a8f4 <tcp_input+0x410>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4a76      	ldr	r2, [pc, #472]	@ (800a8f4 <tcp_input+0x410>)
 800a71c:	6814      	ldr	r4, [r2, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fc f87e 	bl	8006820 <lwip_htonl>
 800a724:	4603      	mov	r3, r0
 800a726:	6063      	str	r3, [r4, #4]
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	4a73      	ldr	r2, [pc, #460]	@ (800a8f8 <tcp_input+0x414>)
 800a72c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a72e:	4b71      	ldr	r3, [pc, #452]	@ (800a8f4 <tcp_input+0x410>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	4a6f      	ldr	r2, [pc, #444]	@ (800a8f4 <tcp_input+0x410>)
 800a736:	6814      	ldr	r4, [r2, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fc f871 	bl	8006820 <lwip_htonl>
 800a73e:	4603      	mov	r3, r0
 800a740:	60a3      	str	r3, [r4, #8]
 800a742:	68a3      	ldr	r3, [r4, #8]
 800a744:	4a6d      	ldr	r2, [pc, #436]	@ (800a8fc <tcp_input+0x418>)
 800a746:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a748:	4b6a      	ldr	r3, [pc, #424]	@ (800a8f4 <tcp_input+0x410>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	89db      	ldrh	r3, [r3, #14]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4a68      	ldr	r2, [pc, #416]	@ (800a8f4 <tcp_input+0x410>)
 800a752:	6814      	ldr	r4, [r2, #0]
 800a754:	4618      	mov	r0, r3
 800a756:	f7fc f84d 	bl	80067f4 <lwip_htons>
 800a75a:	4603      	mov	r3, r0
 800a75c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a75e:	4b65      	ldr	r3, [pc, #404]	@ (800a8f4 <tcp_input+0x410>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	899b      	ldrh	r3, [r3, #12]
 800a764:	b29b      	uxth	r3, r3
 800a766:	4618      	mov	r0, r3
 800a768:	f7fc f844 	bl	80067f4 <lwip_htons>
 800a76c:	4603      	mov	r3, r0
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a774:	b2da      	uxtb	r2, r3
 800a776:	4b62      	ldr	r3, [pc, #392]	@ (800a900 <tcp_input+0x41c>)
 800a778:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	891a      	ldrh	r2, [r3, #8]
 800a77e:	4b61      	ldr	r3, [pc, #388]	@ (800a904 <tcp_input+0x420>)
 800a780:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a782:	4b5f      	ldr	r3, [pc, #380]	@ (800a900 <tcp_input+0x41c>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d014      	beq.n	800a7b8 <tcp_input+0x2d4>
    tcplen++;
 800a78e:	4b5d      	ldr	r3, [pc, #372]	@ (800a904 <tcp_input+0x420>)
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	b29a      	uxth	r2, r3
 800a796:	4b5b      	ldr	r3, [pc, #364]	@ (800a904 <tcp_input+0x420>)
 800a798:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	891a      	ldrh	r2, [r3, #8]
 800a79e:	4b59      	ldr	r3, [pc, #356]	@ (800a904 <tcp_input+0x420>)
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d908      	bls.n	800a7b8 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 800a7a6:	4b58      	ldr	r3, [pc, #352]	@ (800a908 <tcp_input+0x424>)
 800a7a8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	4b55      	ldr	r3, [pc, #340]	@ (800a908 <tcp_input+0x424>)
 800a7b2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 800a7b6:	e2f3      	b.n	800ada0 <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7bc:	4b53      	ldr	r3, [pc, #332]	@ (800a90c <tcp_input+0x428>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	61fb      	str	r3, [r7, #28]
 800a7c2:	e07f      	b.n	800a8c4 <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	7d1b      	ldrb	r3, [r3, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <tcp_input+0x2f4>
 800a7cc:	4b45      	ldr	r3, [pc, #276]	@ (800a8e4 <tcp_input+0x400>)
 800a7ce:	22fb      	movs	r2, #251	@ 0xfb
 800a7d0:	494f      	ldr	r1, [pc, #316]	@ (800a910 <tcp_input+0x42c>)
 800a7d2:	4846      	ldr	r0, [pc, #280]	@ (800a8ec <tcp_input+0x408>)
 800a7d4:	f00b f94c 	bl	8015a70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	7d1b      	ldrb	r3, [r3, #20]
 800a7dc:	2b0a      	cmp	r3, #10
 800a7de:	d105      	bne.n	800a7ec <tcp_input+0x308>
 800a7e0:	4b40      	ldr	r3, [pc, #256]	@ (800a8e4 <tcp_input+0x400>)
 800a7e2:	22fc      	movs	r2, #252	@ 0xfc
 800a7e4:	494b      	ldr	r1, [pc, #300]	@ (800a914 <tcp_input+0x430>)
 800a7e6:	4841      	ldr	r0, [pc, #260]	@ (800a8ec <tcp_input+0x408>)
 800a7e8:	f00b f942 	bl	8015a70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	7d1b      	ldrb	r3, [r3, #20]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d105      	bne.n	800a800 <tcp_input+0x31c>
 800a7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e4 <tcp_input+0x400>)
 800a7f6:	22fd      	movs	r2, #253	@ 0xfd
 800a7f8:	4947      	ldr	r1, [pc, #284]	@ (800a918 <tcp_input+0x434>)
 800a7fa:	483c      	ldr	r0, [pc, #240]	@ (800a8ec <tcp_input+0x408>)
 800a7fc:	f00b f938 	bl	8015a70 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	7a1b      	ldrb	r3, [r3, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	7a1a      	ldrb	r2, [r3, #8]
 800a80c:	4b43      	ldr	r3, [pc, #268]	@ (800a91c <tcp_input+0x438>)
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a814:	3301      	adds	r3, #1
 800a816:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a818:	429a      	cmp	r2, r3
 800a81a:	d002      	beq.n	800a822 <tcp_input+0x33e>
      prev = pcb;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	61bb      	str	r3, [r7, #24]
      continue;
 800a820:	e04d      	b.n	800a8be <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	8b1a      	ldrh	r2, [r3, #24]
 800a826:	4b33      	ldr	r3, [pc, #204]	@ (800a8f4 <tcp_input+0x410>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	429a      	cmp	r2, r3
 800a830:	d143      	bne.n	800a8ba <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	8ada      	ldrh	r2, [r3, #22]
 800a836:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f4 <tcp_input+0x410>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	885b      	ldrh	r3, [r3, #2]
 800a83c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a83e:	429a      	cmp	r2, r3
 800a840:	d13b      	bne.n	800a8ba <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	4b35      	ldr	r3, [pc, #212]	@ (800a91c <tcp_input+0x438>)
 800a848:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d135      	bne.n	800a8ba <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b32      	ldr	r3, [pc, #200]	@ (800a91c <tcp_input+0x438>)
 800a854:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a856:	429a      	cmp	r2, r3
 800a858:	d12f      	bne.n	800a8ba <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	429a      	cmp	r2, r3
 800a862:	d106      	bne.n	800a872 <tcp_input+0x38e>
 800a864:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e4 <tcp_input+0x400>)
 800a866:	f240 120d 	movw	r2, #269	@ 0x10d
 800a86a:	492d      	ldr	r1, [pc, #180]	@ (800a920 <tcp_input+0x43c>)
 800a86c:	481f      	ldr	r0, [pc, #124]	@ (800a8ec <tcp_input+0x408>)
 800a86e:	f00b f8ff 	bl	8015a70 <iprintf>
      if (prev != NULL) {
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00b      	beq.n	800a890 <tcp_input+0x3ac>
        prev->next = pcb->next;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	68da      	ldr	r2, [r3, #12]
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a880:	4b22      	ldr	r3, [pc, #136]	@ (800a90c <tcp_input+0x428>)
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a888:	4a20      	ldr	r2, [pc, #128]	@ (800a90c <tcp_input+0x428>)
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	e007      	b.n	800a8a0 <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800a890:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <tcp_input+0x424>)
 800a892:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800a896:	3301      	adds	r3, #1
 800a898:	b29a      	uxth	r2, r3
 800a89a:	4b1b      	ldr	r3, [pc, #108]	@ (800a908 <tcp_input+0x424>)
 800a89c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d111      	bne.n	800a8ce <tcp_input+0x3ea>
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <tcp_input+0x400>)
 800a8ac:	f240 1215 	movw	r2, #277	@ 0x115
 800a8b0:	491c      	ldr	r1, [pc, #112]	@ (800a924 <tcp_input+0x440>)
 800a8b2:	480e      	ldr	r0, [pc, #56]	@ (800a8ec <tcp_input+0x408>)
 800a8b4:	f00b f8dc 	bl	8015a70 <iprintf>
      break;
 800a8b8:	e009      	b.n	800a8ce <tcp_input+0x3ea>
    }
    prev = pcb;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f47f af7c 	bne.w	800a7c4 <tcp_input+0x2e0>
 800a8cc:	e000      	b.n	800a8d0 <tcp_input+0x3ec>
      break;
 800a8ce:	bf00      	nop
  }

  if (pcb == NULL) {
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f040 80c4 	bne.w	800aa60 <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8d8:	4b13      	ldr	r3, [pc, #76]	@ (800a928 <tcp_input+0x444>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	e065      	b.n	800a9ac <tcp_input+0x4c8>
 800a8e0:	20003b98 	.word	0x20003b98
 800a8e4:	08017a5c 	.word	0x08017a5c
 800a8e8:	08017ae0 	.word	0x08017ae0
 800a8ec:	08017aa8 	.word	0x08017aa8
 800a8f0:	08017aec 	.word	0x08017aec
 800a8f4:	20003b90 	.word	0x20003b90
 800a8f8:	20003ba0 	.word	0x20003ba0
 800a8fc:	20003ba4 	.word	0x20003ba4
 800a900:	20003bac 	.word	0x20003bac
 800a904:	20003baa 	.word	0x20003baa
 800a908:	20003a9c 	.word	0x20003a9c
 800a90c:	20003b74 	.word	0x20003b74
 800a910:	08017b0c 	.word	0x08017b0c
 800a914:	08017b34 	.word	0x08017b34
 800a918:	08017b60 	.word	0x08017b60
 800a91c:	20000aa8 	.word	0x20000aa8
 800a920:	08017b88 	.word	0x08017b88
 800a924:	08017bb4 	.word	0x08017bb4
 800a928:	20003b78 	.word	0x20003b78
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	7d1b      	ldrb	r3, [r3, #20]
 800a930:	2b0a      	cmp	r3, #10
 800a932:	d006      	beq.n	800a942 <tcp_input+0x45e>
 800a934:	4b91      	ldr	r3, [pc, #580]	@ (800ab7c <tcp_input+0x698>)
 800a936:	f240 121f 	movw	r2, #287	@ 0x11f
 800a93a:	4991      	ldr	r1, [pc, #580]	@ (800ab80 <tcp_input+0x69c>)
 800a93c:	4891      	ldr	r0, [pc, #580]	@ (800ab84 <tcp_input+0x6a0>)
 800a93e:	f00b f897 	bl	8015a70 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	7a1b      	ldrb	r3, [r3, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	7a1a      	ldrb	r2, [r3, #8]
 800a94e:	4b8e      	ldr	r3, [pc, #568]	@ (800ab88 <tcp_input+0x6a4>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a956:	3301      	adds	r3, #1
 800a958:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d122      	bne.n	800a9a4 <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	8b1a      	ldrh	r2, [r3, #24]
 800a962:	4b8a      	ldr	r3, [pc, #552]	@ (800ab8c <tcp_input+0x6a8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d11b      	bne.n	800a9a6 <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	8ada      	ldrh	r2, [r3, #22]
 800a972:	4b86      	ldr	r3, [pc, #536]	@ (800ab8c <tcp_input+0x6a8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	885b      	ldrh	r3, [r3, #2]
 800a978:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d113      	bne.n	800a9a6 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	4b81      	ldr	r3, [pc, #516]	@ (800ab88 <tcp_input+0x6a4>)
 800a984:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a986:	429a      	cmp	r2, r3
 800a988:	d10d      	bne.n	800a9a6 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b7e      	ldr	r3, [pc, #504]	@ (800ab88 <tcp_input+0x6a4>)
 800a990:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a992:	429a      	cmp	r2, r3
 800a994:	d107      	bne.n	800a9a6 <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a996:	69f8      	ldr	r0, [r7, #28]
 800a998:	f000 fb78 	bl	800b08c <tcp_timewait_input>
        }
        pbuf_free(p);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7fd fb29 	bl	8007ff4 <pbuf_free>
        return;
 800a9a2:	e20a      	b.n	800adba <tcp_input+0x8d6>
        continue;
 800a9a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1bc      	bne.n	800a92c <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a9b6:	4b76      	ldr	r3, [pc, #472]	@ (800ab90 <tcp_input+0x6ac>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	e02a      	b.n	800aa14 <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	7a1b      	ldrb	r3, [r3, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00c      	beq.n	800a9e0 <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	7a1a      	ldrb	r2, [r3, #8]
 800a9ca:	4b6f      	ldr	r3, [pc, #444]	@ (800ab88 <tcp_input+0x6a4>)
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d002      	beq.n	800a9e0 <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	61bb      	str	r3, [r7, #24]
        continue;
 800a9de:	e016      	b.n	800aa0e <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	8ada      	ldrh	r2, [r3, #22]
 800a9e4:	4b69      	ldr	r3, [pc, #420]	@ (800ab8c <tcp_input+0x6a8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d10c      	bne.n	800aa0a <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	4b64      	ldr	r3, [pc, #400]	@ (800ab88 <tcp_input+0x6a4>)
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d00f      	beq.n	800aa1c <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <tcp_input+0x53a>
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d009      	beq.n	800aa1e <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1d1      	bne.n	800a9be <tcp_input+0x4da>
 800aa1a:	e000      	b.n	800aa1e <tcp_input+0x53a>
            break;
 800aa1c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01d      	beq.n	800aa60 <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00b      	beq.n	800aa42 <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa32:	4b57      	ldr	r3, [pc, #348]	@ (800ab90 <tcp_input+0x6ac>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa3a:	4a55      	ldr	r2, [pc, #340]	@ (800ab90 <tcp_input+0x6ac>)
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e007      	b.n	800aa52 <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800aa42:	4b54      	ldr	r3, [pc, #336]	@ (800ab94 <tcp_input+0x6b0>)
 800aa44:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 800aa48:	3301      	adds	r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	4b51      	ldr	r3, [pc, #324]	@ (800ab94 <tcp_input+0x6b0>)
 800aa4e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	f000 fa12 	bl	800ae7c <tcp_listen_input>
      }
      pbuf_free(p);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7fd facb 	bl	8007ff4 <pbuf_free>
      return;
 800aa5e:	e1ac      	b.n	800adba <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 8162 	beq.w	800ad2c <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aa68:	4b4b      	ldr	r3, [pc, #300]	@ (800ab98 <tcp_input+0x6b4>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	891a      	ldrh	r2, [r3, #8]
 800aa72:	4b49      	ldr	r3, [pc, #292]	@ (800ab98 <tcp_input+0x6b4>)
 800aa74:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aa76:	4a48      	ldr	r2, [pc, #288]	@ (800ab98 <tcp_input+0x6b4>)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aa7c:	4b43      	ldr	r3, [pc, #268]	@ (800ab8c <tcp_input+0x6a8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a45      	ldr	r2, [pc, #276]	@ (800ab98 <tcp_input+0x6b4>)
 800aa82:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aa84:	4b45      	ldr	r3, [pc, #276]	@ (800ab9c <tcp_input+0x6b8>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aa8a:	4b45      	ldr	r3, [pc, #276]	@ (800aba0 <tcp_input+0x6bc>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aa90:	4b44      	ldr	r3, [pc, #272]	@ (800aba4 <tcp_input+0x6c0>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aa96:	4b44      	ldr	r3, [pc, #272]	@ (800aba8 <tcp_input+0x6c4>)
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	f003 0308 	and.w	r3, r3, #8
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d006      	beq.n	800aab0 <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	7b5b      	ldrb	r3, [r3, #13]
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01e      	beq.n	800aaf6 <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aab8:	69f8      	ldr	r0, [r7, #28]
 800aaba:	f7fe ffb7 	bl	8009a2c <tcp_process_refused_data>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f113 0f0d 	cmn.w	r3, #13
 800aac4:	d007      	beq.n	800aad6 <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d013      	beq.n	800aaf6 <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aace:	4b37      	ldr	r3, [pc, #220]	@ (800abac <tcp_input+0x6c8>)
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00f      	beq.n	800aaf6 <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aade:	69f8      	ldr	r0, [r7, #28]
 800aae0:	f003 fe9e 	bl	800e820 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800aae4:	4b2b      	ldr	r3, [pc, #172]	@ (800ab94 <tcp_input+0x6b0>)
 800aae6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800aaea:	3301      	adds	r3, #1
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	4b29      	ldr	r3, [pc, #164]	@ (800ab94 <tcp_input+0x6b0>)
 800aaf0:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aaf4:	e107      	b.n	800ad06 <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 800aaf6:	4a2e      	ldr	r2, [pc, #184]	@ (800abb0 <tcp_input+0x6cc>)
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aafc:	69f8      	ldr	r0, [r7, #28]
 800aafe:	f000 fb3f 	bl	800b180 <tcp_process>
 800ab02:	4603      	mov	r3, r0
 800ab04:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ab06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab0a:	f113 0f0d 	cmn.w	r3, #13
 800ab0e:	f000 80ef 	beq.w	800acf0 <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 800ab12:	4b23      	ldr	r3, [pc, #140]	@ (800aba0 <tcp_input+0x6bc>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d015      	beq.n	800ab4a <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d008      	beq.n	800ab3a <tcp_input+0x656>
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	6912      	ldr	r2, [r2, #16]
 800ab32:	f06f 010d 	mvn.w	r1, #13
 800ab36:	4610      	mov	r0, r2
 800ab38:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ab3a:	69f9      	ldr	r1, [r7, #28]
 800ab3c:	481d      	ldr	r0, [pc, #116]	@ (800abb4 <tcp_input+0x6d0>)
 800ab3e:	f7ff fb59 	bl	800a1f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800ab42:	69f8      	ldr	r0, [r7, #28]
 800ab44:	f7fd fe74 	bl	8008830 <tcp_free>
 800ab48:	e0dd      	b.n	800ad06 <tcp_input+0x822>
      } else {
        err = ERR_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ab4e:	4b15      	ldr	r3, [pc, #84]	@ (800aba4 <tcp_input+0x6c0>)
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d03b      	beq.n	800abce <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ab56:	4b13      	ldr	r3, [pc, #76]	@ (800aba4 <tcp_input+0x6c0>)
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d028      	beq.n	800abb8 <tcp_input+0x6d4>
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	6910      	ldr	r0, [r2, #16]
 800ab70:	897a      	ldrh	r2, [r7, #10]
 800ab72:	69f9      	ldr	r1, [r7, #28]
 800ab74:	4798      	blx	r3
 800ab76:	4603      	mov	r3, r0
 800ab78:	74fb      	strb	r3, [r7, #19]
 800ab7a:	e01f      	b.n	800abbc <tcp_input+0x6d8>
 800ab7c:	08017a5c 	.word	0x08017a5c
 800ab80:	08017be0 	.word	0x08017be0
 800ab84:	08017aa8 	.word	0x08017aa8
 800ab88:	20000aa8 	.word	0x20000aa8
 800ab8c:	20003b90 	.word	0x20003b90
 800ab90:	20003b70 	.word	0x20003b70
 800ab94:	20003a9c 	.word	0x20003a9c
 800ab98:	20003b80 	.word	0x20003b80
 800ab9c:	20003bb0 	.word	0x20003bb0
 800aba0:	20003bad 	.word	0x20003bad
 800aba4:	20003ba8 	.word	0x20003ba8
 800aba8:	20003bac 	.word	0x20003bac
 800abac:	20003baa 	.word	0x20003baa
 800abb0:	20003bb4 	.word	0x20003bb4
 800abb4:	20003b74 	.word	0x20003b74
 800abb8:	2300      	movs	r3, #0
 800abba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800abbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc0:	f113 0f0d 	cmn.w	r3, #13
 800abc4:	f000 8096 	beq.w	800acf4 <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 800abc8:	4b7d      	ldr	r3, [pc, #500]	@ (800adc0 <tcp_input+0x8dc>)
 800abca:	2200      	movs	r2, #0
 800abcc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800abce:	69f8      	ldr	r0, [r7, #28]
 800abd0:	f000 f914 	bl	800adfc <tcp_input_delayed_close>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f040 808e 	bne.w	800acf8 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800abdc:	4b79      	ldr	r3, [pc, #484]	@ (800adc4 <tcp_input+0x8e0>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d041      	beq.n	800ac68 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <tcp_input+0x716>
 800abec:	4b76      	ldr	r3, [pc, #472]	@ (800adc8 <tcp_input+0x8e4>)
 800abee:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800abf2:	4976      	ldr	r1, [pc, #472]	@ (800adcc <tcp_input+0x8e8>)
 800abf4:	4876      	ldr	r0, [pc, #472]	@ (800add0 <tcp_input+0x8ec>)
 800abf6:	f00a ff3b 	bl	8015a70 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	8b5b      	ldrh	r3, [r3, #26]
 800abfe:	f003 0310 	and.w	r3, r3, #16
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d008      	beq.n	800ac18 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ac06:	4b6f      	ldr	r3, [pc, #444]	@ (800adc4 <tcp_input+0x8e0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fd f9f2 	bl	8007ff4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ac10:	69f8      	ldr	r0, [r7, #28]
 800ac12:	f7fe f8f5 	bl	8008e00 <tcp_abort>
            goto aborted;
 800ac16:	e076      	b.n	800ad06 <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00c      	beq.n	800ac3c <tcp_input+0x758>
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	6918      	ldr	r0, [r3, #16]
 800ac2c:	4b65      	ldr	r3, [pc, #404]	@ (800adc4 <tcp_input+0x8e0>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	69f9      	ldr	r1, [r7, #28]
 800ac34:	47a0      	blx	r4
 800ac36:	4603      	mov	r3, r0
 800ac38:	74fb      	strb	r3, [r7, #19]
 800ac3a:	e008      	b.n	800ac4e <tcp_input+0x76a>
 800ac3c:	4b61      	ldr	r3, [pc, #388]	@ (800adc4 <tcp_input+0x8e0>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	2300      	movs	r3, #0
 800ac42:	69f9      	ldr	r1, [r7, #28]
 800ac44:	2000      	movs	r0, #0
 800ac46:	f7fe ffe5 	bl	8009c14 <tcp_recv_null>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ac4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac52:	f113 0f0d 	cmn.w	r3, #13
 800ac56:	d051      	beq.n	800acfc <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ac58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ac60:	4b58      	ldr	r3, [pc, #352]	@ (800adc4 <tcp_input+0x8e0>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ac68:	4b5a      	ldr	r3, [pc, #360]	@ (800add4 <tcp_input+0x8f0>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d030      	beq.n	800acd6 <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac80:	7b5a      	ldrb	r2, [r3, #13]
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac86:	f042 0220 	orr.w	r2, r2, #32
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	735a      	strb	r2, [r3, #13]
 800ac8e:	e022      	b.n	800acd6 <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac94:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ac98:	d005      	beq.n	800aca6 <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac9e:	3301      	adds	r3, #1
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <tcp_input+0x7e4>
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	6918      	ldr	r0, [r3, #16]
 800acba:	2300      	movs	r3, #0
 800acbc:	2200      	movs	r2, #0
 800acbe:	69f9      	ldr	r1, [r7, #28]
 800acc0:	47a0      	blx	r4
 800acc2:	4603      	mov	r3, r0
 800acc4:	74fb      	strb	r3, [r7, #19]
 800acc6:	e001      	b.n	800accc <tcp_input+0x7e8>
 800acc8:	2300      	movs	r3, #0
 800acca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800accc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acd0:	f113 0f0d 	cmn.w	r3, #13
 800acd4:	d014      	beq.n	800ad00 <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800acd6:	4b40      	ldr	r3, [pc, #256]	@ (800add8 <tcp_input+0x8f4>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800acdc:	69f8      	ldr	r0, [r7, #28]
 800acde:	f000 f88d 	bl	800adfc <tcp_input_delayed_close>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10d      	bne.n	800ad04 <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ace8:	69f8      	ldr	r0, [r7, #28]
 800acea:	f002 ff5d 	bl	800dba8 <tcp_output>
 800acee:	e00a      	b.n	800ad06 <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800acf0:	bf00      	nop
 800acf2:	e008      	b.n	800ad06 <tcp_input+0x822>
              goto aborted;
 800acf4:	bf00      	nop
 800acf6:	e006      	b.n	800ad06 <tcp_input+0x822>
          goto aborted;
 800acf8:	bf00      	nop
 800acfa:	e004      	b.n	800ad06 <tcp_input+0x822>
            goto aborted;
 800acfc:	bf00      	nop
 800acfe:	e002      	b.n	800ad06 <tcp_input+0x822>
              goto aborted;
 800ad00:	bf00      	nop
 800ad02:	e000      	b.n	800ad06 <tcp_input+0x822>
          goto aborted;
 800ad04:	bf00      	nop
    tcp_input_pcb = NULL;
 800ad06:	4b34      	ldr	r3, [pc, #208]	@ (800add8 <tcp_input+0x8f4>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ad0c:	4b2d      	ldr	r3, [pc, #180]	@ (800adc4 <tcp_input+0x8e0>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ad12:	4b32      	ldr	r3, [pc, #200]	@ (800addc <tcp_input+0x8f8>)
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d04e      	beq.n	800adb8 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 800ad1a:	4b30      	ldr	r3, [pc, #192]	@ (800addc <tcp_input+0x8f8>)
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fd f968 	bl	8007ff4 <pbuf_free>
      inseg.p = NULL;
 800ad24:	4b2d      	ldr	r3, [pc, #180]	@ (800addc <tcp_input+0x8f8>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ad2a:	e045      	b.n	800adb8 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ad2c:	4b2c      	ldr	r3, [pc, #176]	@ (800ade0 <tcp_input+0x8fc>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fb fd5d 	bl	80067f4 <lwip_htons>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d128      	bne.n	800ad98 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 800ad46:	4b27      	ldr	r3, [pc, #156]	@ (800ade4 <tcp_input+0x900>)
 800ad48:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	4b24      	ldr	r3, [pc, #144]	@ (800ade4 <tcp_input+0x900>)
 800ad52:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 800ad56:	4b23      	ldr	r3, [pc, #140]	@ (800ade4 <tcp_input+0x900>)
 800ad58:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	4b20      	ldr	r3, [pc, #128]	@ (800ade4 <tcp_input+0x900>)
 800ad62:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad66:	4b20      	ldr	r3, [pc, #128]	@ (800ade8 <tcp_input+0x904>)
 800ad68:	6819      	ldr	r1, [r3, #0]
 800ad6a:	4b20      	ldr	r3, [pc, #128]	@ (800adec <tcp_input+0x908>)
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4b1f      	ldr	r3, [pc, #124]	@ (800adf0 <tcp_input+0x90c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad76:	4b1a      	ldr	r3, [pc, #104]	@ (800ade0 <tcp_input+0x8fc>)
 800ad78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7a:	885b      	ldrh	r3, [r3, #2]
 800ad7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad7e:	4a18      	ldr	r2, [pc, #96]	@ (800ade0 <tcp_input+0x8fc>)
 800ad80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad82:	8812      	ldrh	r2, [r2, #0]
 800ad84:	b292      	uxth	r2, r2
 800ad86:	9202      	str	r2, [sp, #8]
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	@ (800adf4 <tcp_input+0x910>)
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	4b1a      	ldr	r3, [pc, #104]	@ (800adf8 <tcp_input+0x914>)
 800ad90:	4602      	mov	r2, r0
 800ad92:	2000      	movs	r0, #0
 800ad94:	f003 fcf2 	bl	800e77c <tcp_rst>
    pbuf_free(p);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7fd f92b 	bl	8007ff4 <pbuf_free>
  return;
 800ad9e:	e00b      	b.n	800adb8 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800ada0:	4b10      	ldr	r3, [pc, #64]	@ (800ade4 <tcp_input+0x900>)
 800ada2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800ada6:	3301      	adds	r3, #1
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ade4 <tcp_input+0x900>)
 800adac:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7fd f91f 	bl	8007ff4 <pbuf_free>
 800adb6:	e000      	b.n	800adba <tcp_input+0x8d6>
  return;
 800adb8:	bf00      	nop
}
 800adba:	3724      	adds	r7, #36	@ 0x24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd90      	pop	{r4, r7, pc}
 800adc0:	20003ba8 	.word	0x20003ba8
 800adc4:	20003bb0 	.word	0x20003bb0
 800adc8:	08017a5c 	.word	0x08017a5c
 800adcc:	08017c10 	.word	0x08017c10
 800add0:	08017aa8 	.word	0x08017aa8
 800add4:	20003bad 	.word	0x20003bad
 800add8:	20003bb4 	.word	0x20003bb4
 800addc:	20003b80 	.word	0x20003b80
 800ade0:	20003b90 	.word	0x20003b90
 800ade4:	20003a9c 	.word	0x20003a9c
 800ade8:	20003ba4 	.word	0x20003ba4
 800adec:	20003baa 	.word	0x20003baa
 800adf0:	20003ba0 	.word	0x20003ba0
 800adf4:	20000ab8 	.word	0x20000ab8
 800adf8:	20000abc 	.word	0x20000abc

0800adfc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <tcp_input_delayed_close+0x1c>
 800ae0a:	4b17      	ldr	r3, [pc, #92]	@ (800ae68 <tcp_input_delayed_close+0x6c>)
 800ae0c:	f240 225a 	movw	r2, #602	@ 0x25a
 800ae10:	4916      	ldr	r1, [pc, #88]	@ (800ae6c <tcp_input_delayed_close+0x70>)
 800ae12:	4817      	ldr	r0, [pc, #92]	@ (800ae70 <tcp_input_delayed_close+0x74>)
 800ae14:	f00a fe2c 	bl	8015a70 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ae18:	4b16      	ldr	r3, [pc, #88]	@ (800ae74 <tcp_input_delayed_close+0x78>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01c      	beq.n	800ae5e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	8b5b      	ldrh	r3, [r3, #26]
 800ae28:	f003 0310 	and.w	r3, r3, #16
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10d      	bne.n	800ae4c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d008      	beq.n	800ae4c <tcp_input_delayed_close+0x50>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	6912      	ldr	r2, [r2, #16]
 800ae44:	f06f 010e 	mvn.w	r1, #14
 800ae48:	4610      	mov	r0, r2
 800ae4a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	480a      	ldr	r0, [pc, #40]	@ (800ae78 <tcp_input_delayed_close+0x7c>)
 800ae50:	f7ff f9d0 	bl	800a1f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7fd fceb 	bl	8008830 <tcp_free>
    return 1;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e000      	b.n	800ae60 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	08017a5c 	.word	0x08017a5c
 800ae6c:	08017c2c 	.word	0x08017c2c
 800ae70:	08017aa8 	.word	0x08017aa8
 800ae74:	20003bad 	.word	0x20003bad
 800ae78:	20003b74 	.word	0x20003b74

0800ae7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b08b      	sub	sp, #44	@ 0x2c
 800ae80:	af04      	add	r7, sp, #16
 800ae82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ae84:	4b73      	ldr	r3, [pc, #460]	@ (800b054 <tcp_listen_input+0x1d8>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 80da 	bne.w	800b046 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d106      	bne.n	800aea6 <tcp_listen_input+0x2a>
 800ae98:	4b6f      	ldr	r3, [pc, #444]	@ (800b058 <tcp_listen_input+0x1dc>)
 800ae9a:	f240 2281 	movw	r2, #641	@ 0x281
 800ae9e:	496f      	ldr	r1, [pc, #444]	@ (800b05c <tcp_listen_input+0x1e0>)
 800aea0:	486f      	ldr	r0, [pc, #444]	@ (800b060 <tcp_listen_input+0x1e4>)
 800aea2:	f00a fde5 	bl	8015a70 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aea6:	4b6b      	ldr	r3, [pc, #428]	@ (800b054 <tcp_listen_input+0x1d8>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	f003 0310 	and.w	r3, r3, #16
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d019      	beq.n	800aee6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aeb2:	4b6c      	ldr	r3, [pc, #432]	@ (800b064 <tcp_listen_input+0x1e8>)
 800aeb4:	6819      	ldr	r1, [r3, #0]
 800aeb6:	4b6c      	ldr	r3, [pc, #432]	@ (800b068 <tcp_listen_input+0x1ec>)
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b6b      	ldr	r3, [pc, #428]	@ (800b06c <tcp_listen_input+0x1f0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aec2:	4b6b      	ldr	r3, [pc, #428]	@ (800b070 <tcp_listen_input+0x1f4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aec6:	885b      	ldrh	r3, [r3, #2]
 800aec8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aeca:	4a69      	ldr	r2, [pc, #420]	@ (800b070 <tcp_listen_input+0x1f4>)
 800aecc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aece:	8812      	ldrh	r2, [r2, #0]
 800aed0:	b292      	uxth	r2, r2
 800aed2:	9202      	str	r2, [sp, #8]
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	4b67      	ldr	r3, [pc, #412]	@ (800b074 <tcp_listen_input+0x1f8>)
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	4b67      	ldr	r3, [pc, #412]	@ (800b078 <tcp_listen_input+0x1fc>)
 800aedc:	4602      	mov	r2, r0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f003 fc4c 	bl	800e77c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800aee4:	e0b1      	b.n	800b04a <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 800aee6:	4b5b      	ldr	r3, [pc, #364]	@ (800b054 <tcp_listen_input+0x1d8>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 80ab 	beq.w	800b04a <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7d5b      	ldrb	r3, [r3, #21]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fe ffaf 	bl	8009e5c <tcp_alloc>
 800aefe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d119      	bne.n	800af3a <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 800af06:	4b5d      	ldr	r3, [pc, #372]	@ (800b07c <tcp_listen_input+0x200>)
 800af08:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800af0c:	3301      	adds	r3, #1
 800af0e:	b29a      	uxth	r2, r3
 800af10:	4b5a      	ldr	r3, [pc, #360]	@ (800b07c <tcp_listen_input+0x200>)
 800af12:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00a      	beq.n	800af34 <tcp_listen_input+0xb8>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	6910      	ldr	r0, [r2, #16]
 800af26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af2a:	2100      	movs	r1, #0
 800af2c:	4798      	blx	r3
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]
      return;
 800af32:	e08b      	b.n	800b04c <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af34:	23f0      	movs	r3, #240	@ 0xf0
 800af36:	73bb      	strb	r3, [r7, #14]
      return;
 800af38:	e088      	b.n	800b04c <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800af3a:	4b51      	ldr	r3, [pc, #324]	@ (800b080 <tcp_listen_input+0x204>)
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800af42:	4b4f      	ldr	r3, [pc, #316]	@ (800b080 <tcp_listen_input+0x204>)
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8ada      	ldrh	r2, [r3, #22]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800af52:	4b47      	ldr	r3, [pc, #284]	@ (800b070 <tcp_listen_input+0x1f4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29a      	uxth	r2, r3
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2203      	movs	r2, #3
 800af62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800af64:	4b41      	ldr	r3, [pc, #260]	@ (800b06c <tcp_listen_input+0x1f0>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800af76:	6978      	ldr	r0, [r7, #20]
 800af78:	f7ff f9d0 	bl	800a31c <tcp_next_iss>
 800af7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800af96:	4b35      	ldr	r3, [pc, #212]	@ (800b06c <tcp_listen_input+0x1f0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	1e5a      	subs	r2, r3, #1
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	7a5b      	ldrb	r3, [r3, #9]
 800afb2:	f003 030c 	and.w	r3, r3, #12
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	7a1a      	ldrb	r2, [r3, #8]
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800afc4:	4b2f      	ldr	r3, [pc, #188]	@ (800b084 <tcp_listen_input+0x208>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	60da      	str	r2, [r3, #12]
 800afcc:	4a2d      	ldr	r2, [pc, #180]	@ (800b084 <tcp_listen_input+0x208>)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	f003 fd95 	bl	800eb00 <tcp_timer_needed>
 800afd6:	4b2c      	ldr	r3, [pc, #176]	@ (800b088 <tcp_listen_input+0x20c>)
 800afd8:	2201      	movs	r2, #1
 800afda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800afdc:	6978      	ldr	r0, [r7, #20]
 800afde:	f001 fd8d 	bl	800cafc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800afe2:	4b23      	ldr	r3, [pc, #140]	@ (800b070 <tcp_listen_input+0x1f4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	89db      	ldrh	r3, [r3, #14]
 800afe8:	b29a      	uxth	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3304      	adds	r3, #4
 800b004:	4618      	mov	r0, r3
 800b006:	f007 fc33 	bl	8012870 <ip4_route>
 800b00a:	4601      	mov	r1, r0
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	3304      	adds	r3, #4
 800b010:	461a      	mov	r2, r3
 800b012:	4620      	mov	r0, r4
 800b014:	f7ff f9a8 	bl	800a368 <tcp_eff_send_mss_netif>
 800b018:	4603      	mov	r3, r0
 800b01a:	461a      	mov	r2, r3
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b020:	2112      	movs	r1, #18
 800b022:	6978      	ldr	r0, [r7, #20]
 800b024:	f002 fcc0 	bl	800d9a8 <tcp_enqueue_flags>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 800b034:	2100      	movs	r1, #0
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f7fd fe24 	bl	8008c84 <tcp_abandon>
      return;
 800b03c:	e006      	b.n	800b04c <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f002 fdb2 	bl	800dba8 <tcp_output>
  return;
 800b044:	e001      	b.n	800b04a <tcp_listen_input+0x1ce>
    return;
 800b046:	bf00      	nop
 800b048:	e000      	b.n	800b04c <tcp_listen_input+0x1d0>
  return;
 800b04a:	bf00      	nop
}
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd90      	pop	{r4, r7, pc}
 800b052:	bf00      	nop
 800b054:	20003bac 	.word	0x20003bac
 800b058:	08017a5c 	.word	0x08017a5c
 800b05c:	08017c54 	.word	0x08017c54
 800b060:	08017aa8 	.word	0x08017aa8
 800b064:	20003ba4 	.word	0x20003ba4
 800b068:	20003baa 	.word	0x20003baa
 800b06c:	20003ba0 	.word	0x20003ba0
 800b070:	20003b90 	.word	0x20003b90
 800b074:	20000ab8 	.word	0x20000ab8
 800b078:	20000abc 	.word	0x20000abc
 800b07c:	20003a9c 	.word	0x20003a9c
 800b080:	20000aa8 	.word	0x20000aa8
 800b084:	20003b74 	.word	0x20003b74
 800b088:	20003b7c 	.word	0x20003b7c

0800b08c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af04      	add	r7, sp, #16
 800b092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b094:	4b2f      	ldr	r3, [pc, #188]	@ (800b154 <tcp_timewait_input+0xc8>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d153      	bne.n	800b148 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <tcp_timewait_input+0x28>
 800b0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800b158 <tcp_timewait_input+0xcc>)
 800b0a8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b0ac:	492b      	ldr	r1, [pc, #172]	@ (800b15c <tcp_timewait_input+0xd0>)
 800b0ae:	482c      	ldr	r0, [pc, #176]	@ (800b160 <tcp_timewait_input+0xd4>)
 800b0b0:	f00a fcde 	bl	8015a70 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b0b4:	4b27      	ldr	r3, [pc, #156]	@ (800b154 <tcp_timewait_input+0xc8>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d02a      	beq.n	800b116 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b0c0:	4b28      	ldr	r3, [pc, #160]	@ (800b164 <tcp_timewait_input+0xd8>)
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	db2d      	blt.n	800b12a <tcp_timewait_input+0x9e>
 800b0ce:	4b25      	ldr	r3, [pc, #148]	@ (800b164 <tcp_timewait_input+0xd8>)
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b0da:	440b      	add	r3, r1
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dc23      	bgt.n	800b12a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0e2:	4b21      	ldr	r3, [pc, #132]	@ (800b168 <tcp_timewait_input+0xdc>)
 800b0e4:	6819      	ldr	r1, [r3, #0]
 800b0e6:	4b21      	ldr	r3, [pc, #132]	@ (800b16c <tcp_timewait_input+0xe0>)
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b164 <tcp_timewait_input+0xd8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b170 <tcp_timewait_input+0xe4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f6:	885b      	ldrh	r3, [r3, #2]
 800b0f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b170 <tcp_timewait_input+0xe4>)
 800b0fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0fe:	8812      	ldrh	r2, [r2, #0]
 800b100:	b292      	uxth	r2, r2
 800b102:	9202      	str	r2, [sp, #8]
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	4b1b      	ldr	r3, [pc, #108]	@ (800b174 <tcp_timewait_input+0xe8>)
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4b1b      	ldr	r3, [pc, #108]	@ (800b178 <tcp_timewait_input+0xec>)
 800b10c:	4602      	mov	r2, r0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f003 fb34 	bl	800e77c <tcp_rst>
      return;
 800b114:	e01b      	b.n	800b14e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b116:	4b0f      	ldr	r3, [pc, #60]	@ (800b154 <tcp_timewait_input+0xc8>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b122:	4b16      	ldr	r3, [pc, #88]	@ (800b17c <tcp_timewait_input+0xf0>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b12a:	4b10      	ldr	r3, [pc, #64]	@ (800b16c <tcp_timewait_input+0xe0>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00c      	beq.n	800b14c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	8b5b      	ldrh	r3, [r3, #26]
 800b136:	f043 0302 	orr.w	r3, r3, #2
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f002 fd31 	bl	800dba8 <tcp_output>
  }
  return;
 800b146:	e001      	b.n	800b14c <tcp_timewait_input+0xc0>
    return;
 800b148:	bf00      	nop
 800b14a:	e000      	b.n	800b14e <tcp_timewait_input+0xc2>
  return;
 800b14c:	bf00      	nop
}
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	20003bac 	.word	0x20003bac
 800b158:	08017a5c 	.word	0x08017a5c
 800b15c:	08017c74 	.word	0x08017c74
 800b160:	08017aa8 	.word	0x08017aa8
 800b164:	20003ba0 	.word	0x20003ba0
 800b168:	20003ba4 	.word	0x20003ba4
 800b16c:	20003baa 	.word	0x20003baa
 800b170:	20003b90 	.word	0x20003b90
 800b174:	20000ab8 	.word	0x20000ab8
 800b178:	20000abc 	.word	0x20000abc
 800b17c:	20003b68 	.word	0x20003b68

0800b180 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b08d      	sub	sp, #52	@ 0x34
 800b184:	af04      	add	r7, sp, #16
 800b186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <tcp_process+0x24>
 800b196:	4b9d      	ldr	r3, [pc, #628]	@ (800b40c <tcp_process+0x28c>)
 800b198:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b19c:	499c      	ldr	r1, [pc, #624]	@ (800b410 <tcp_process+0x290>)
 800b19e:	489d      	ldr	r0, [pc, #628]	@ (800b414 <tcp_process+0x294>)
 800b1a0:	f00a fc66 	bl	8015a70 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b1a4:	4b9c      	ldr	r3, [pc, #624]	@ (800b418 <tcp_process+0x298>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d04e      	beq.n	800b24e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	7d1b      	ldrb	r3, [r3, #20]
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d108      	bne.n	800b1ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1bc:	4b97      	ldr	r3, [pc, #604]	@ (800b41c <tcp_process+0x29c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d123      	bne.n	800b20c <tcp_process+0x8c>
        acceptable = 1;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	76fb      	strb	r3, [r7, #27]
 800b1c8:	e020      	b.n	800b20c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1ce:	4b94      	ldr	r3, [pc, #592]	@ (800b420 <tcp_process+0x2a0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d102      	bne.n	800b1dc <tcp_process+0x5c>
        acceptable = 1;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	76fb      	strb	r3, [r7, #27]
 800b1da:	e017      	b.n	800b20c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b1dc:	4b90      	ldr	r3, [pc, #576]	@ (800b420 <tcp_process+0x2a0>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	db10      	blt.n	800b20c <tcp_process+0x8c>
 800b1ea:	4b8d      	ldr	r3, [pc, #564]	@ (800b420 <tcp_process+0x2a0>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b1f6:	440b      	add	r3, r1
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dc06      	bgt.n	800b20c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8b5b      	ldrh	r3, [r3, #26]
 800b202:	f043 0302 	orr.w	r3, r3, #2
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b20c:	7efb      	ldrb	r3, [r7, #27]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01b      	beq.n	800b24a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <tcp_process+0xa8>
 800b21a:	4b7c      	ldr	r3, [pc, #496]	@ (800b40c <tcp_process+0x28c>)
 800b21c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b220:	4980      	ldr	r1, [pc, #512]	@ (800b424 <tcp_process+0x2a4>)
 800b222:	487c      	ldr	r0, [pc, #496]	@ (800b414 <tcp_process+0x294>)
 800b224:	f00a fc24 	bl	8015a70 <iprintf>
      recv_flags |= TF_RESET;
 800b228:	4b7f      	ldr	r3, [pc, #508]	@ (800b428 <tcp_process+0x2a8>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	f043 0308 	orr.w	r3, r3, #8
 800b230:	b2da      	uxtb	r2, r3
 800b232:	4b7d      	ldr	r3, [pc, #500]	@ (800b428 <tcp_process+0x2a8>)
 800b234:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	8b5b      	ldrh	r3, [r3, #26]
 800b23a:	f023 0301 	bic.w	r3, r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b244:	f06f 030d 	mvn.w	r3, #13
 800b248:	e37a      	b.n	800b940 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e378      	b.n	800b940 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b24e:	4b72      	ldr	r3, [pc, #456]	@ (800b418 <tcp_process+0x298>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d010      	beq.n	800b27c <tcp_process+0xfc>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	7d1b      	ldrb	r3, [r3, #20]
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d00c      	beq.n	800b27c <tcp_process+0xfc>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	7d1b      	ldrb	r3, [r3, #20]
 800b266:	2b03      	cmp	r3, #3
 800b268:	d008      	beq.n	800b27c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	8b5b      	ldrh	r3, [r3, #26]
 800b26e:	f043 0302 	orr.w	r3, r3, #2
 800b272:	b29a      	uxth	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	e361      	b.n	800b940 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8b5b      	ldrh	r3, [r3, #26]
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b00      	cmp	r3, #0
 800b286:	d103      	bne.n	800b290 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b288:	4b68      	ldr	r3, [pc, #416]	@ (800b42c <tcp_process+0x2ac>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fc2b 	bl	800cafc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7d1b      	ldrb	r3, [r3, #20]
 800b2aa:	3b02      	subs	r3, #2
 800b2ac:	2b07      	cmp	r3, #7
 800b2ae:	f200 8337 	bhi.w	800b920 <tcp_process+0x7a0>
 800b2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <tcp_process+0x138>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b2d9 	.word	0x0800b2d9
 800b2bc:	0800b509 	.word	0x0800b509
 800b2c0:	0800b681 	.word	0x0800b681
 800b2c4:	0800b6ab 	.word	0x0800b6ab
 800b2c8:	0800b7cf 	.word	0x0800b7cf
 800b2cc:	0800b681 	.word	0x0800b681
 800b2d0:	0800b85b 	.word	0x0800b85b
 800b2d4:	0800b8eb 	.word	0x0800b8eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b2d8:	4b4f      	ldr	r3, [pc, #316]	@ (800b418 <tcp_process+0x298>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	f003 0310 	and.w	r3, r3, #16
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 80e4 	beq.w	800b4ae <tcp_process+0x32e>
 800b2e6:	4b4c      	ldr	r3, [pc, #304]	@ (800b418 <tcp_process+0x298>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80dd 	beq.w	800b4ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	4b48      	ldr	r3, [pc, #288]	@ (800b41c <tcp_process+0x29c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	f040 80d5 	bne.w	800b4ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b304:	4b46      	ldr	r3, [pc, #280]	@ (800b420 <tcp_process+0x2a0>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b316:	4b41      	ldr	r3, [pc, #260]	@ (800b41c <tcp_process+0x29c>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b31e:	4b44      	ldr	r3, [pc, #272]	@ (800b430 <tcp_process+0x2b0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	89db      	ldrh	r3, [r3, #14]
 800b324:	b29a      	uxth	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b338:	4b39      	ldr	r3, [pc, #228]	@ (800b420 <tcp_process+0x2a0>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	1e5a      	subs	r2, r3, #1
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2204      	movs	r2, #4
 800b346:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3304      	adds	r3, #4
 800b350:	4618      	mov	r0, r3
 800b352:	f007 fa8d 	bl	8012870 <ip4_route>
 800b356:	4601      	mov	r1, r0
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	461a      	mov	r2, r3
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff f802 	bl	800a368 <tcp_eff_send_mss_netif>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b370:	009a      	lsls	r2, r3, #2
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b37c:	428b      	cmp	r3, r1
 800b37e:	bf38      	it	cc
 800b380:	460b      	movcc	r3, r1
 800b382:	429a      	cmp	r2, r3
 800b384:	d204      	bcs.n	800b390 <tcp_process+0x210>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	e00d      	b.n	800b3ac <tcp_process+0x22c>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d904      	bls.n	800b3a8 <tcp_process+0x228>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	e001      	b.n	800b3ac <tcp_process+0x22c>
 800b3a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <tcp_process+0x24a>
 800b3bc:	4b13      	ldr	r3, [pc, #76]	@ (800b40c <tcp_process+0x28c>)
 800b3be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b3c2:	491c      	ldr	r1, [pc, #112]	@ (800b434 <tcp_process+0x2b4>)
 800b3c4:	4813      	ldr	r0, [pc, #76]	@ (800b414 <tcp_process+0x294>)
 800b3c6:	f00a fb53 	bl	8015a70 <iprintf>
        --pcb->snd_queuelen;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d12a      	bne.n	800b43c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <tcp_process+0x280>
 800b3f2:	4b06      	ldr	r3, [pc, #24]	@ (800b40c <tcp_process+0x28c>)
 800b3f4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b3f8:	490f      	ldr	r1, [pc, #60]	@ (800b438 <tcp_process+0x2b8>)
 800b3fa:	4806      	ldr	r0, [pc, #24]	@ (800b414 <tcp_process+0x294>)
 800b3fc:	f00a fb38 	bl	8015a70 <iprintf>
          pcb->unsent = rseg->next;
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b408:	e01c      	b.n	800b444 <tcp_process+0x2c4>
 800b40a:	bf00      	nop
 800b40c:	08017a5c 	.word	0x08017a5c
 800b410:	08017c94 	.word	0x08017c94
 800b414:	08017aa8 	.word	0x08017aa8
 800b418:	20003bac 	.word	0x20003bac
 800b41c:	20003ba4 	.word	0x20003ba4
 800b420:	20003ba0 	.word	0x20003ba0
 800b424:	08017cb0 	.word	0x08017cb0
 800b428:	20003bad 	.word	0x20003bad
 800b42c:	20003b68 	.word	0x20003b68
 800b430:	20003b90 	.word	0x20003b90
 800b434:	08017cd0 	.word	0x08017cd0
 800b438:	08017ce8 	.word	0x08017ce8
        } else {
          pcb->unacked = rseg->next;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b444:	69f8      	ldr	r0, [r7, #28]
 800b446:	f7fe fb82 	bl	8009b4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d104      	bne.n	800b45c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b458:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b45a:	e006      	b.n	800b46a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00a      	beq.n	800b48a <tcp_process+0x30a>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6910      	ldr	r0, [r2, #16]
 800b47e:	2200      	movs	r2, #0
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	4798      	blx	r3
 800b484:	4603      	mov	r3, r0
 800b486:	76bb      	strb	r3, [r7, #26]
 800b488:	e001      	b.n	800b48e <tcp_process+0x30e>
 800b48a:	2300      	movs	r3, #0
 800b48c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b48e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b492:	f113 0f0d 	cmn.w	r3, #13
 800b496:	d102      	bne.n	800b49e <tcp_process+0x31e>
          return ERR_ABRT;
 800b498:	f06f 030c 	mvn.w	r3, #12
 800b49c:	e250      	b.n	800b940 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	8b5b      	ldrh	r3, [r3, #26]
 800b4a2:	f043 0302 	orr.w	r3, r3, #2
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b4ac:	e23a      	b.n	800b924 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b4ae:	4b98      	ldr	r3, [pc, #608]	@ (800b710 <tcp_process+0x590>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	f003 0310 	and.w	r3, r3, #16
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8234 	beq.w	800b924 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4bc:	4b95      	ldr	r3, [pc, #596]	@ (800b714 <tcp_process+0x594>)
 800b4be:	6819      	ldr	r1, [r3, #0]
 800b4c0:	4b95      	ldr	r3, [pc, #596]	@ (800b718 <tcp_process+0x598>)
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4b95      	ldr	r3, [pc, #596]	@ (800b71c <tcp_process+0x59c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4cc:	4b94      	ldr	r3, [pc, #592]	@ (800b720 <tcp_process+0x5a0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4d0:	885b      	ldrh	r3, [r3, #2]
 800b4d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b4d4:	4a92      	ldr	r2, [pc, #584]	@ (800b720 <tcp_process+0x5a0>)
 800b4d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b4d8:	8812      	ldrh	r2, [r2, #0]
 800b4da:	b292      	uxth	r2, r2
 800b4dc:	9202      	str	r2, [sp, #8]
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	4b90      	ldr	r3, [pc, #576]	@ (800b724 <tcp_process+0x5a4>)
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4b90      	ldr	r3, [pc, #576]	@ (800b728 <tcp_process+0x5a8>)
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f003 f947 	bl	800e77c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4f4:	2b05      	cmp	r3, #5
 800b4f6:	f200 8215 	bhi.w	800b924 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f002 fef9 	bl	800e2f8 <tcp_rexmit_rto>
      break;
 800b506:	e20d      	b.n	800b924 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b508:	4b81      	ldr	r3, [pc, #516]	@ (800b710 <tcp_process+0x590>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 80a1 	beq.w	800b658 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b516:	4b7f      	ldr	r3, [pc, #508]	@ (800b714 <tcp_process+0x594>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	3b01      	subs	r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	db7e      	blt.n	800b624 <tcp_process+0x4a4>
 800b526:	4b7b      	ldr	r3, [pc, #492]	@ (800b714 <tcp_process+0x594>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b00      	cmp	r3, #0
 800b532:	dc77      	bgt.n	800b624 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2204      	movs	r2, #4
 800b538:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d102      	bne.n	800b548 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b542:	23fa      	movs	r3, #250	@ 0xfa
 800b544:	76bb      	strb	r3, [r7, #26]
 800b546:	e01d      	b.n	800b584 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <tcp_process+0x3e0>
 800b552:	4b76      	ldr	r3, [pc, #472]	@ (800b72c <tcp_process+0x5ac>)
 800b554:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b558:	4975      	ldr	r1, [pc, #468]	@ (800b730 <tcp_process+0x5b0>)
 800b55a:	4876      	ldr	r0, [pc, #472]	@ (800b734 <tcp_process+0x5b4>)
 800b55c:	f00a fa88 	bl	8015a70 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b564:	699b      	ldr	r3, [r3, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <tcp_process+0x400>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6910      	ldr	r0, [r2, #16]
 800b574:	2200      	movs	r2, #0
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4798      	blx	r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	76bb      	strb	r3, [r7, #26]
 800b57e:	e001      	b.n	800b584 <tcp_process+0x404>
 800b580:	23f0      	movs	r3, #240	@ 0xf0
 800b582:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b584:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00a      	beq.n	800b5a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b58c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b590:	f113 0f0d 	cmn.w	r3, #13
 800b594:	d002      	beq.n	800b59c <tcp_process+0x41c>
              tcp_abort(pcb);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7fd fc32 	bl	8008e00 <tcp_abort>
            }
            return ERR_ABRT;
 800b59c:	f06f 030c 	mvn.w	r3, #12
 800b5a0:	e1ce      	b.n	800b940 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fae0 	bl	800bb68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b5a8:	4b63      	ldr	r3, [pc, #396]	@ (800b738 <tcp_process+0x5b8>)
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d005      	beq.n	800b5bc <tcp_process+0x43c>
            recv_acked--;
 800b5b0:	4b61      	ldr	r3, [pc, #388]	@ (800b738 <tcp_process+0x5b8>)
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	4b5f      	ldr	r3, [pc, #380]	@ (800b738 <tcp_process+0x5b8>)
 800b5ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5c0:	009a      	lsls	r2, r3, #2
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf38      	it	cc
 800b5d0:	460b      	movcc	r3, r1
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d204      	bcs.n	800b5e0 <tcp_process+0x460>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	e00d      	b.n	800b5fc <tcp_process+0x47c>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d904      	bls.n	800b5f8 <tcp_process+0x478>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	e001      	b.n	800b5fc <tcp_process+0x47c>
 800b5f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b602:	4b4e      	ldr	r3, [pc, #312]	@ (800b73c <tcp_process+0x5bc>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d037      	beq.n	800b67e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	8b5b      	ldrh	r3, [r3, #26]
 800b612:	f043 0302 	orr.w	r3, r3, #2
 800b616:	b29a      	uxth	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2207      	movs	r2, #7
 800b620:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b622:	e02c      	b.n	800b67e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b624:	4b3b      	ldr	r3, [pc, #236]	@ (800b714 <tcp_process+0x594>)
 800b626:	6819      	ldr	r1, [r3, #0]
 800b628:	4b3b      	ldr	r3, [pc, #236]	@ (800b718 <tcp_process+0x598>)
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b3b      	ldr	r3, [pc, #236]	@ (800b71c <tcp_process+0x59c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b634:	4b3a      	ldr	r3, [pc, #232]	@ (800b720 <tcp_process+0x5a0>)
 800b636:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b638:	885b      	ldrh	r3, [r3, #2]
 800b63a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b63c:	4a38      	ldr	r2, [pc, #224]	@ (800b720 <tcp_process+0x5a0>)
 800b63e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b640:	8812      	ldrh	r2, [r2, #0]
 800b642:	b292      	uxth	r2, r2
 800b644:	9202      	str	r2, [sp, #8]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	4b36      	ldr	r3, [pc, #216]	@ (800b724 <tcp_process+0x5a4>)
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	4b36      	ldr	r3, [pc, #216]	@ (800b728 <tcp_process+0x5a8>)
 800b64e:	4602      	mov	r2, r0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f003 f893 	bl	800e77c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b656:	e167      	b.n	800b928 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b658:	4b2d      	ldr	r3, [pc, #180]	@ (800b710 <tcp_process+0x590>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8161 	beq.w	800b928 <tcp_process+0x7a8>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	1e5a      	subs	r2, r3, #1
 800b66c:	4b2b      	ldr	r3, [pc, #172]	@ (800b71c <tcp_process+0x59c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	f040 8159 	bne.w	800b928 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f002 fe60 	bl	800e33c <tcp_rexmit>
      break;
 800b67c:	e154      	b.n	800b928 <tcp_process+0x7a8>
 800b67e:	e153      	b.n	800b928 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa71 	bl	800bb68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b686:	4b2d      	ldr	r3, [pc, #180]	@ (800b73c <tcp_process+0x5bc>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 814c 	beq.w	800b92c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	8b5b      	ldrh	r3, [r3, #26]
 800b698:	f043 0302 	orr.w	r3, r3, #2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b6a8:	e140      	b.n	800b92c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa5c 	bl	800bb68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b6b0:	4b22      	ldr	r3, [pc, #136]	@ (800b73c <tcp_process+0x5bc>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d071      	beq.n	800b7a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6bc:	4b14      	ldr	r3, [pc, #80]	@ (800b710 <tcp_process+0x590>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	f003 0310 	and.w	r3, r3, #16
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d060      	beq.n	800b78a <tcp_process+0x60a>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6cc:	4b11      	ldr	r3, [pc, #68]	@ (800b714 <tcp_process+0x594>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d15a      	bne.n	800b78a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d156      	bne.n	800b78a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8b5b      	ldrh	r3, [r3, #26]
 800b6e0:	f043 0302 	orr.w	r3, r3, #2
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7fe fd32 	bl	800a154 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b6f0:	4b13      	ldr	r3, [pc, #76]	@ (800b740 <tcp_process+0x5c0>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d105      	bne.n	800b706 <tcp_process+0x586>
 800b6fa:	4b11      	ldr	r3, [pc, #68]	@ (800b740 <tcp_process+0x5c0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	4a0f      	ldr	r2, [pc, #60]	@ (800b740 <tcp_process+0x5c0>)
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	e02e      	b.n	800b764 <tcp_process+0x5e4>
 800b706:	4b0e      	ldr	r3, [pc, #56]	@ (800b740 <tcp_process+0x5c0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	e027      	b.n	800b75e <tcp_process+0x5de>
 800b70e:	bf00      	nop
 800b710:	20003bac 	.word	0x20003bac
 800b714:	20003ba4 	.word	0x20003ba4
 800b718:	20003baa 	.word	0x20003baa
 800b71c:	20003ba0 	.word	0x20003ba0
 800b720:	20003b90 	.word	0x20003b90
 800b724:	20000ab8 	.word	0x20000ab8
 800b728:	20000abc 	.word	0x20000abc
 800b72c:	08017a5c 	.word	0x08017a5c
 800b730:	08017cfc 	.word	0x08017cfc
 800b734:	08017aa8 	.word	0x08017aa8
 800b738:	20003ba8 	.word	0x20003ba8
 800b73c:	20003bad 	.word	0x20003bad
 800b740:	20003b74 	.word	0x20003b74
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d104      	bne.n	800b758 <tcp_process+0x5d8>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	60da      	str	r2, [r3, #12]
 800b756:	e005      	b.n	800b764 <tcp_process+0x5e4>
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1ef      	bne.n	800b744 <tcp_process+0x5c4>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	4b77      	ldr	r3, [pc, #476]	@ (800b948 <tcp_process+0x7c8>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	220a      	movs	r2, #10
 800b774:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b776:	4b75      	ldr	r3, [pc, #468]	@ (800b94c <tcp_process+0x7cc>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	4a73      	ldr	r2, [pc, #460]	@ (800b94c <tcp_process+0x7cc>)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	f003 f9bc 	bl	800eb00 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b788:	e0d2      	b.n	800b930 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8b5b      	ldrh	r3, [r3, #26]
 800b78e:	f043 0302 	orr.w	r3, r3, #2
 800b792:	b29a      	uxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2208      	movs	r2, #8
 800b79c:	751a      	strb	r2, [r3, #20]
      break;
 800b79e:	e0c7      	b.n	800b930 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7a0:	4b6b      	ldr	r3, [pc, #428]	@ (800b950 <tcp_process+0x7d0>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 80c1 	beq.w	800b930 <tcp_process+0x7b0>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7b2:	4b68      	ldr	r3, [pc, #416]	@ (800b954 <tcp_process+0x7d4>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	f040 80ba 	bne.w	800b930 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f040 80b5 	bne.w	800b930 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2206      	movs	r2, #6
 800b7ca:	751a      	strb	r2, [r3, #20]
      break;
 800b7cc:	e0b0      	b.n	800b930 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f9ca 	bl	800bb68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b7d4:	4b60      	ldr	r3, [pc, #384]	@ (800b958 <tcp_process+0x7d8>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f003 0320 	and.w	r3, r3, #32
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80a9 	beq.w	800b934 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	8b5b      	ldrh	r3, [r3, #26]
 800b7e6:	f043 0302 	orr.w	r3, r3, #2
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7fe fcaf 	bl	800a154 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b7f6:	4b59      	ldr	r3, [pc, #356]	@ (800b95c <tcp_process+0x7dc>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d105      	bne.n	800b80c <tcp_process+0x68c>
 800b800:	4b56      	ldr	r3, [pc, #344]	@ (800b95c <tcp_process+0x7dc>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	4a55      	ldr	r2, [pc, #340]	@ (800b95c <tcp_process+0x7dc>)
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	e013      	b.n	800b834 <tcp_process+0x6b4>
 800b80c:	4b53      	ldr	r3, [pc, #332]	@ (800b95c <tcp_process+0x7dc>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	e00c      	b.n	800b82e <tcp_process+0x6ae>
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d104      	bne.n	800b828 <tcp_process+0x6a8>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	60da      	str	r2, [r3, #12]
 800b826:	e005      	b.n	800b834 <tcp_process+0x6b4>
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1ef      	bne.n	800b814 <tcp_process+0x694>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	60da      	str	r2, [r3, #12]
 800b83a:	4b43      	ldr	r3, [pc, #268]	@ (800b948 <tcp_process+0x7c8>)
 800b83c:	2201      	movs	r2, #1
 800b83e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	220a      	movs	r2, #10
 800b844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b846:	4b41      	ldr	r3, [pc, #260]	@ (800b94c <tcp_process+0x7cc>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60da      	str	r2, [r3, #12]
 800b84e:	4a3f      	ldr	r2, [pc, #252]	@ (800b94c <tcp_process+0x7cc>)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6013      	str	r3, [r2, #0]
 800b854:	f003 f954 	bl	800eb00 <tcp_timer_needed>
      }
      break;
 800b858:	e06c      	b.n	800b934 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f984 	bl	800bb68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b860:	4b3b      	ldr	r3, [pc, #236]	@ (800b950 <tcp_process+0x7d0>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	f003 0310 	and.w	r3, r3, #16
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d065      	beq.n	800b938 <tcp_process+0x7b8>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b870:	4b38      	ldr	r3, [pc, #224]	@ (800b954 <tcp_process+0x7d4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d15f      	bne.n	800b938 <tcp_process+0x7b8>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d15b      	bne.n	800b938 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7fe fc67 	bl	800a154 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b886:	4b35      	ldr	r3, [pc, #212]	@ (800b95c <tcp_process+0x7dc>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d105      	bne.n	800b89c <tcp_process+0x71c>
 800b890:	4b32      	ldr	r3, [pc, #200]	@ (800b95c <tcp_process+0x7dc>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	4a31      	ldr	r2, [pc, #196]	@ (800b95c <tcp_process+0x7dc>)
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e013      	b.n	800b8c4 <tcp_process+0x744>
 800b89c:	4b2f      	ldr	r3, [pc, #188]	@ (800b95c <tcp_process+0x7dc>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	e00c      	b.n	800b8be <tcp_process+0x73e>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d104      	bne.n	800b8b8 <tcp_process+0x738>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	60da      	str	r2, [r3, #12]
 800b8b6:	e005      	b.n	800b8c4 <tcp_process+0x744>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	60fb      	str	r3, [r7, #12]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1ef      	bne.n	800b8a4 <tcp_process+0x724>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b948 <tcp_process+0x7c8>)
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b8d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b94c <tcp_process+0x7cc>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60da      	str	r2, [r3, #12]
 800b8de:	4a1b      	ldr	r2, [pc, #108]	@ (800b94c <tcp_process+0x7cc>)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f003 f90c 	bl	800eb00 <tcp_timer_needed>
      }
      break;
 800b8e8:	e026      	b.n	800b938 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f93c 	bl	800bb68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b8f0:	4b17      	ldr	r3, [pc, #92]	@ (800b950 <tcp_process+0x7d0>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	f003 0310 	and.w	r3, r3, #16
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01f      	beq.n	800b93c <tcp_process+0x7bc>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b900:	4b14      	ldr	r3, [pc, #80]	@ (800b954 <tcp_process+0x7d4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d119      	bne.n	800b93c <tcp_process+0x7bc>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d115      	bne.n	800b93c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b910:	4b11      	ldr	r3, [pc, #68]	@ (800b958 <tcp_process+0x7d8>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f043 0310 	orr.w	r3, r3, #16
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	4b0f      	ldr	r3, [pc, #60]	@ (800b958 <tcp_process+0x7d8>)
 800b91c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b91e:	e00d      	b.n	800b93c <tcp_process+0x7bc>
    default:
      break;
 800b920:	bf00      	nop
 800b922:	e00c      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b924:	bf00      	nop
 800b926:	e00a      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b928:	bf00      	nop
 800b92a:	e008      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b92c:	bf00      	nop
 800b92e:	e006      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b930:	bf00      	nop
 800b932:	e004      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b934:	bf00      	nop
 800b936:	e002      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b938:	bf00      	nop
 800b93a:	e000      	b.n	800b93e <tcp_process+0x7be>
      break;
 800b93c:	bf00      	nop
  }
  return ERR_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3724      	adds	r7, #36	@ 0x24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd90      	pop	{r4, r7, pc}
 800b948:	20003b7c 	.word	0x20003b7c
 800b94c:	20003b78 	.word	0x20003b78
 800b950:	20003bac 	.word	0x20003bac
 800b954:	20003ba4 	.word	0x20003ba4
 800b958:	20003bad 	.word	0x20003bad
 800b95c:	20003b74 	.word	0x20003b74

0800b960 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b960:	b590      	push	{r4, r7, lr}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <tcp_oos_insert_segment+0x1e>
 800b970:	4b3b      	ldr	r3, [pc, #236]	@ (800ba60 <tcp_oos_insert_segment+0x100>)
 800b972:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b976:	493b      	ldr	r1, [pc, #236]	@ (800ba64 <tcp_oos_insert_segment+0x104>)
 800b978:	483b      	ldr	r0, [pc, #236]	@ (800ba68 <tcp_oos_insert_segment+0x108>)
 800b97a:	f00a f879 	bl	8015a70 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	899b      	ldrh	r3, [r3, #12]
 800b984:	b29b      	uxth	r3, r3
 800b986:	4618      	mov	r0, r3
 800b988:	f7fa ff34 	bl	80067f4 <lwip_htons>
 800b98c:	4603      	mov	r3, r0
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	d028      	beq.n	800b9ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b998:	6838      	ldr	r0, [r7, #0]
 800b99a:	f7fe f8c3 	bl	8009b24 <tcp_segs_free>
    next = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	603b      	str	r3, [r7, #0]
 800b9a2:	e056      	b.n	800ba52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	899b      	ldrh	r3, [r3, #12]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fa ff21 	bl	80067f4 <lwip_htons>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00d      	beq.n	800b9da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	899b      	ldrh	r3, [r3, #12]
 800b9c4:	b29c      	uxth	r4, r3
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	f7fa ff14 	bl	80067f4 <lwip_htons>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	4322      	orrs	r2, r4
 800b9d6:	b292      	uxth	r2, r2
 800b9d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7fe f8b2 	bl	8009b4e <tcp_seg_free>
    while (next &&
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	891b      	ldrh	r3, [r3, #8]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba6c <tcp_oos_insert_segment+0x10c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	441a      	add	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	8909      	ldrh	r1, [r1, #8]
 800ba06:	440b      	add	r3, r1
 800ba08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	daca      	bge.n	800b9a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d01e      	beq.n	800ba52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	891b      	ldrh	r3, [r3, #8]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b14      	ldr	r3, [pc, #80]	@ (800ba6c <tcp_oos_insert_segment+0x10c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	441a      	add	r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dd12      	ble.n	800ba52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <tcp_oos_insert_segment+0x10c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	891b      	ldrh	r3, [r3, #8]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fc f94d 	bl	8007cec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	601a      	str	r2, [r3, #0]
}
 800ba58:	bf00      	nop
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd90      	pop	{r4, r7, pc}
 800ba60:	08017a5c 	.word	0x08017a5c
 800ba64:	08017d1c 	.word	0x08017d1c
 800ba68:	08017aa8 	.word	0x08017aa8
 800ba6c:	20003ba0 	.word	0x20003ba0

0800ba70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ba70:	b5b0      	push	{r4, r5, r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
 800ba7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ba7e:	e03e      	b.n	800bafe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fc fb3e 	bl	8008110 <pbuf_clen>
 800ba94:	4603      	mov	r3, r0
 800ba96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ba9e:	8a7a      	ldrh	r2, [r7, #18]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d906      	bls.n	800bab2 <tcp_free_acked_segments+0x42>
 800baa4:	4b2a      	ldr	r3, [pc, #168]	@ (800bb50 <tcp_free_acked_segments+0xe0>)
 800baa6:	f240 4257 	movw	r2, #1111	@ 0x457
 800baaa:	492a      	ldr	r1, [pc, #168]	@ (800bb54 <tcp_free_acked_segments+0xe4>)
 800baac:	482a      	ldr	r0, [pc, #168]	@ (800bb58 <tcp_free_acked_segments+0xe8>)
 800baae:	f009 ffdf 	bl	8015a70 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bab8:	8a7b      	ldrh	r3, [r7, #18]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	b29a      	uxth	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	891a      	ldrh	r2, [r3, #8]
 800bac8:	4b24      	ldr	r3, [pc, #144]	@ (800bb5c <tcp_free_acked_segments+0xec>)
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	4413      	add	r3, r2
 800bace:	b29a      	uxth	r2, r3
 800bad0:	4b22      	ldr	r3, [pc, #136]	@ (800bb5c <tcp_free_acked_segments+0xec>)
 800bad2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bad4:	6978      	ldr	r0, [r7, #20]
 800bad6:	f7fe f83a 	bl	8009b4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00c      	beq.n	800bafe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <tcp_free_acked_segments+0x8e>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d106      	bne.n	800bafe <tcp_free_acked_segments+0x8e>
 800baf0:	4b17      	ldr	r3, [pc, #92]	@ (800bb50 <tcp_free_acked_segments+0xe0>)
 800baf2:	f240 4261 	movw	r2, #1121	@ 0x461
 800baf6:	491a      	ldr	r1, [pc, #104]	@ (800bb60 <tcp_free_acked_segments+0xf0>)
 800baf8:	4817      	ldr	r0, [pc, #92]	@ (800bb58 <tcp_free_acked_segments+0xe8>)
 800bafa:	f009 ffb9 	bl	8015a70 <iprintf>
  while (seg_list != NULL &&
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d020      	beq.n	800bb46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fa fe88 	bl	8006820 <lwip_htonl>
 800bb10:	4604      	mov	r4, r0
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	891b      	ldrh	r3, [r3, #8]
 800bb16:	461d      	mov	r5, r3
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	899b      	ldrh	r3, [r3, #12]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fa fe67 	bl	80067f4 <lwip_htons>
 800bb26:	4603      	mov	r3, r0
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	f003 0303 	and.w	r3, r3, #3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <tcp_free_acked_segments+0xc6>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <tcp_free_acked_segments+0xc8>
 800bb36:	2300      	movs	r3, #0
 800bb38:	442b      	add	r3, r5
 800bb3a:	18e2      	adds	r2, r4, r3
 800bb3c:	4b09      	ldr	r3, [pc, #36]	@ (800bb64 <tcp_free_acked_segments+0xf4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	dd9c      	ble.n	800ba80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bb46:	68bb      	ldr	r3, [r7, #8]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb50:	08017a5c 	.word	0x08017a5c
 800bb54:	08017d44 	.word	0x08017d44
 800bb58:	08017aa8 	.word	0x08017aa8
 800bb5c:	20003ba8 	.word	0x20003ba8
 800bb60:	08017d6c 	.word	0x08017d6c
 800bb64:	20003ba4 	.word	0x20003ba4

0800bb68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bb68:	b5b0      	push	{r4, r5, r7, lr}
 800bb6a:	b094      	sub	sp, #80	@ 0x50
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <tcp_receive+0x20>
 800bb7a:	4b91      	ldr	r3, [pc, #580]	@ (800bdc0 <tcp_receive+0x258>)
 800bb7c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800bb80:	4990      	ldr	r1, [pc, #576]	@ (800bdc4 <tcp_receive+0x25c>)
 800bb82:	4891      	ldr	r0, [pc, #580]	@ (800bdc8 <tcp_receive+0x260>)
 800bb84:	f009 ff74 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7d1b      	ldrb	r3, [r3, #20]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d806      	bhi.n	800bb9e <tcp_receive+0x36>
 800bb90:	4b8b      	ldr	r3, [pc, #556]	@ (800bdc0 <tcp_receive+0x258>)
 800bb92:	f240 427c 	movw	r2, #1148	@ 0x47c
 800bb96:	498d      	ldr	r1, [pc, #564]	@ (800bdcc <tcp_receive+0x264>)
 800bb98:	488b      	ldr	r0, [pc, #556]	@ (800bdc8 <tcp_receive+0x260>)
 800bb9a:	f009 ff69 	bl	8015a70 <iprintf>

  if (flags & TCP_ACK) {
 800bb9e:	4b8c      	ldr	r3, [pc, #560]	@ (800bdd0 <tcp_receive+0x268>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 8264 	beq.w	800c074 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbb8:	4413      	add	r3, r2
 800bbba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbc0:	4b84      	ldr	r3, [pc, #528]	@ (800bdd4 <tcp_receive+0x26c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	db1b      	blt.n	800bc02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbce:	4b81      	ldr	r3, [pc, #516]	@ (800bdd4 <tcp_receive+0x26c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d106      	bne.n	800bbe4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bbda:	4b7f      	ldr	r3, [pc, #508]	@ (800bdd8 <tcp_receive+0x270>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	db0e      	blt.n	800bc02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bbe8:	4b7b      	ldr	r3, [pc, #492]	@ (800bdd8 <tcp_receive+0x270>)
 800bbea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d125      	bne.n	800bc3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bbf0:	4b7a      	ldr	r3, [pc, #488]	@ (800bddc <tcp_receive+0x274>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	89db      	ldrh	r3, [r3, #14]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d91c      	bls.n	800bc3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bc02:	4b76      	ldr	r3, [pc, #472]	@ (800bddc <tcp_receive+0x274>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	89db      	ldrh	r3, [r3, #14]
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d205      	bcs.n	800bc2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bc2c:	4b69      	ldr	r3, [pc, #420]	@ (800bdd4 <tcp_receive+0x26c>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bc34:	4b68      	ldr	r3, [pc, #416]	@ (800bdd8 <tcp_receive+0x270>)
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bc3c:	4b66      	ldr	r3, [pc, #408]	@ (800bdd8 <tcp_receive+0x270>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dc58      	bgt.n	800bcfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bc4a:	4b65      	ldr	r3, [pc, #404]	@ (800bde0 <tcp_receive+0x278>)
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d14b      	bne.n	800bcea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bc5c:	4413      	add	r3, r2
 800bc5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d142      	bne.n	800bcea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	db3d      	blt.n	800bcea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc72:	4b59      	ldr	r3, [pc, #356]	@ (800bdd8 <tcp_receive+0x270>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d137      	bne.n	800bcea <tcp_receive+0x182>
              found_dupack = 1;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc84:	2bff      	cmp	r3, #255	@ 0xff
 800bc86:	d007      	beq.n	800bc98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc8e:	3301      	adds	r3, #1
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d91b      	bls.n	800bcda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcac:	4413      	add	r3, r2
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d30a      	bcc.n	800bcd0 <tcp_receive+0x168>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcc4:	4413      	add	r3, r2
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bcce:	e004      	b.n	800bcda <tcp_receive+0x172>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bcd6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d902      	bls.n	800bcea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f002 fb95 	bl	800e414 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bcea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f040 8161 	bne.w	800bfb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bcfa:	e15b      	b.n	800bfb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bcfc:	4b36      	ldr	r3, [pc, #216]	@ (800bdd8 <tcp_receive+0x270>)
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd04:	1ad3      	subs	r3, r2, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f2c0 814e 	blt.w	800bfaa <tcp_receive+0x442>
 800bd0e:	4b32      	ldr	r3, [pc, #200]	@ (800bdd8 <tcp_receive+0x270>)
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f300 8146 	bgt.w	800bfaa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	8b5b      	ldrh	r3, [r3, #26]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d010      	beq.n	800bd4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	8b5b      	ldrh	r3, [r3, #26]
 800bd2e:	f023 0304 	bic.w	r3, r3, #4
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bd5a:	10db      	asrs	r3, r3, #3
 800bd5c:	b21b      	sxth	r3, r3
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	4413      	add	r3, r2
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	b21a      	sxth	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bd74:	4b18      	ldr	r3, [pc, #96]	@ (800bdd8 <tcp_receive+0x270>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800bd8c:	4b12      	ldr	r3, [pc, #72]	@ (800bdd8 <tcp_receive+0x270>)
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	f240 8097 	bls.w	800becc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d245      	bcs.n	800be3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8b5b      	ldrh	r3, [r3, #26]
 800bdb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d014      	beq.n	800bde4 <tcp_receive+0x27c>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e013      	b.n	800bde6 <tcp_receive+0x27e>
 800bdbe:	bf00      	nop
 800bdc0:	08017a5c 	.word	0x08017a5c
 800bdc4:	08017d8c 	.word	0x08017d8c
 800bdc8:	08017aa8 	.word	0x08017aa8
 800bdcc:	08017da8 	.word	0x08017da8
 800bdd0:	20003bac 	.word	0x20003bac
 800bdd4:	20003ba0 	.word	0x20003ba0
 800bdd8:	20003ba4 	.word	0x20003ba4
 800bddc:	20003b90 	.word	0x20003b90
 800bde0:	20003baa 	.word	0x20003baa
 800bde4:	2302      	movs	r3, #2
 800bde6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bdea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdf4:	fb12 f303 	smulbb	r3, r2, r3
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	bf28      	it	cs
 800be00:	4613      	movcs	r3, r2
 800be02:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be0c:	4413      	add	r3, r2
 800be0e:	b29a      	uxth	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be16:	429a      	cmp	r2, r3
 800be18:	d309      	bcc.n	800be2e <tcp_receive+0x2c6>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be22:	4413      	add	r3, r2
 800be24:	b29a      	uxth	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be2c:	e04e      	b.n	800becc <tcp_receive+0x364>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800be38:	e048      	b.n	800becc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be42:	4413      	add	r3, r2
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d309      	bcc.n	800be64 <tcp_receive+0x2fc>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be58:	4413      	add	r3, r2
 800be5a:	b29a      	uxth	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be62:	e004      	b.n	800be6e <tcp_receive+0x306>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d326      	bcc.n	800becc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800be9e:	4413      	add	r3, r2
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d30a      	bcc.n	800bec2 <tcp_receive+0x35a>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800beb6:	4413      	add	r3, r2
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bec0:	e004      	b.n	800becc <tcp_receive+0x364>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bec8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bed4:	4a98      	ldr	r2, [pc, #608]	@ (800c138 <tcp_receive+0x5d0>)
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff fdca 	bl	800ba70 <tcp_free_acked_segments>
 800bedc:	4602      	mov	r2, r0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beea:	4a94      	ldr	r2, [pc, #592]	@ (800c13c <tcp_receive+0x5d4>)
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff fdbf 	bl	800ba70 <tcp_free_acked_segments>
 800bef2:	4602      	mov	r2, r0
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800befc:	2b00      	cmp	r3, #0
 800befe:	d104      	bne.n	800bf0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf06:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bf08:	e002      	b.n	800bf10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d103      	bne.n	800bf26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bf2c:	4b84      	ldr	r3, [pc, #528]	@ (800c140 <tcp_receive+0x5d8>)
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	4413      	add	r3, r2
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8b5b      	ldrh	r3, [r3, #26]
 800bf3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d035      	beq.n	800bfb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d118      	bne.n	800bf80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fa fc5c 	bl	8006820 <lwip_htonl>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dc20      	bgt.n	800bfb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8b5b      	ldrh	r3, [r3, #26]
 800bf74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf7e:	e018      	b.n	800bfb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fa fc47 	bl	8006820 <lwip_htonl>
 800bf92:	4603      	mov	r3, r0
 800bf94:	1ae3      	subs	r3, r4, r3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dc0b      	bgt.n	800bfb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	8b5b      	ldrh	r3, [r3, #26]
 800bf9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfa8:	e003      	b.n	800bfb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f002 fc38 	bl	800e820 <tcp_send_empty_ack>
 800bfb0:	e000      	b.n	800bfb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d05b      	beq.n	800c074 <tcp_receive+0x50c>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfc0:	4b60      	ldr	r3, [pc, #384]	@ (800c144 <tcp_receive+0x5dc>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	da54      	bge.n	800c074 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bfca:	4b5f      	ldr	r3, [pc, #380]	@ (800c148 <tcp_receive+0x5e0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bfde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bfe8:	10db      	asrs	r3, r3, #3
 800bfea:	b21b      	sxth	r3, r3
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c002:	4413      	add	r3, r2
 800c004:	b29b      	uxth	r3, r3
 800c006:	b21a      	sxth	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c00c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c010:	2b00      	cmp	r3, #0
 800c012:	da05      	bge.n	800c020 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c014:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c018:	425b      	negs	r3, r3
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c020:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c02a:	109b      	asrs	r3, r3, #2
 800c02c:	b21b      	sxth	r3, r3
 800c02e:	b29b      	uxth	r3, r3
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	b29b      	uxth	r3, r3
 800c034:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c044:	4413      	add	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	b21a      	sxth	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c054:	10db      	asrs	r3, r3, #3
 800c056:	b21b      	sxth	r3, r3
 800c058:	b29a      	uxth	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c060:	b29b      	uxth	r3, r3
 800c062:	4413      	add	r3, r2
 800c064:	b29b      	uxth	r3, r3
 800c066:	b21a      	sxth	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c074:	4b35      	ldr	r3, [pc, #212]	@ (800c14c <tcp_receive+0x5e4>)
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 84df 	beq.w	800ca3c <tcp_receive+0xed4>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7d1b      	ldrb	r3, [r3, #20]
 800c082:	2b06      	cmp	r3, #6
 800c084:	f200 84da 	bhi.w	800ca3c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c08c:	4b30      	ldr	r3, [pc, #192]	@ (800c150 <tcp_receive+0x5e8>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	3b01      	subs	r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	f2c0 808f 	blt.w	800c1b8 <tcp_receive+0x650>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c09e:	4b2b      	ldr	r3, [pc, #172]	@ (800c14c <tcp_receive+0x5e4>)
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4b2a      	ldr	r3, [pc, #168]	@ (800c150 <tcp_receive+0x5e8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	440b      	add	r3, r1
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f300 8082 	bgt.w	800c1b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c0b4:	4b27      	ldr	r3, [pc, #156]	@ (800c154 <tcp_receive+0x5ec>)
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0be:	4b24      	ldr	r3, [pc, #144]	@ (800c150 <tcp_receive+0x5e8>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c0c6:	4b23      	ldr	r3, [pc, #140]	@ (800c154 <tcp_receive+0x5ec>)
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <tcp_receive+0x574>
 800c0ce:	4b22      	ldr	r3, [pc, #136]	@ (800c158 <tcp_receive+0x5f0>)
 800c0d0:	f240 5294 	movw	r2, #1428	@ 0x594
 800c0d4:	4921      	ldr	r1, [pc, #132]	@ (800c15c <tcp_receive+0x5f4>)
 800c0d6:	4822      	ldr	r0, [pc, #136]	@ (800c160 <tcp_receive+0x5f8>)
 800c0d8:	f009 fcca 	bl	8015a70 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d906      	bls.n	800c0f4 <tcp_receive+0x58c>
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c158 <tcp_receive+0x5f0>)
 800c0e8:	f240 5295 	movw	r2, #1429	@ 0x595
 800c0ec:	491d      	ldr	r1, [pc, #116]	@ (800c164 <tcp_receive+0x5fc>)
 800c0ee:	481c      	ldr	r0, [pc, #112]	@ (800c160 <tcp_receive+0x5f8>)
 800c0f0:	f009 fcbe 	bl	8015a70 <iprintf>
      off = (u16_t)off32;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c0fa:	4b16      	ldr	r3, [pc, #88]	@ (800c154 <tcp_receive+0x5ec>)
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	891b      	ldrh	r3, [r3, #8]
 800c100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c104:	429a      	cmp	r2, r3
 800c106:	d906      	bls.n	800c116 <tcp_receive+0x5ae>
 800c108:	4b13      	ldr	r3, [pc, #76]	@ (800c158 <tcp_receive+0x5f0>)
 800c10a:	f240 5297 	movw	r2, #1431	@ 0x597
 800c10e:	4916      	ldr	r1, [pc, #88]	@ (800c168 <tcp_receive+0x600>)
 800c110:	4813      	ldr	r0, [pc, #76]	@ (800c160 <tcp_receive+0x5f8>)
 800c112:	f009 fcad 	bl	8015a70 <iprintf>
      inseg.len -= off;
 800c116:	4b0f      	ldr	r3, [pc, #60]	@ (800c154 <tcp_receive+0x5ec>)
 800c118:	891a      	ldrh	r2, [r3, #8]
 800c11a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	b29a      	uxth	r2, r3
 800c122:	4b0c      	ldr	r3, [pc, #48]	@ (800c154 <tcp_receive+0x5ec>)
 800c124:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c126:	4b0b      	ldr	r3, [pc, #44]	@ (800c154 <tcp_receive+0x5ec>)
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	891a      	ldrh	r2, [r3, #8]
 800c12c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c134:	e02a      	b.n	800c18c <tcp_receive+0x624>
 800c136:	bf00      	nop
 800c138:	08017dc4 	.word	0x08017dc4
 800c13c:	08017dcc 	.word	0x08017dcc
 800c140:	20003ba8 	.word	0x20003ba8
 800c144:	20003ba4 	.word	0x20003ba4
 800c148:	20003b68 	.word	0x20003b68
 800c14c:	20003baa 	.word	0x20003baa
 800c150:	20003ba0 	.word	0x20003ba0
 800c154:	20003b80 	.word	0x20003b80
 800c158:	08017a5c 	.word	0x08017a5c
 800c15c:	08017dd4 	.word	0x08017dd4
 800c160:	08017aa8 	.word	0x08017aa8
 800c164:	08017de4 	.word	0x08017de4
 800c168:	08017df4 	.word	0x08017df4
        off -= p->len;
 800c16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c16e:	895b      	ldrh	r3, [r3, #10]
 800c170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c17c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c17e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c182:	2200      	movs	r2, #0
 800c184:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c18c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c18e:	895b      	ldrh	r3, [r3, #10]
 800c190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c194:	429a      	cmp	r2, r3
 800c196:	d8e9      	bhi.n	800c16c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c19c:	4619      	mov	r1, r3
 800c19e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c1a0:	f7fb fea2 	bl	8007ee8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a8:	4a90      	ldr	r2, [pc, #576]	@ (800c3ec <tcp_receive+0x884>)
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	4b90      	ldr	r3, [pc, #576]	@ (800c3f0 <tcp_receive+0x888>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	4a8e      	ldr	r2, [pc, #568]	@ (800c3ec <tcp_receive+0x884>)
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c1b6:	e00d      	b.n	800c1d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c1b8:	4b8c      	ldr	r3, [pc, #560]	@ (800c3ec <tcp_receive+0x884>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da06      	bge.n	800c1d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ca:	f043 0302 	orr.w	r3, r3, #2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1d4:	4b85      	ldr	r3, [pc, #532]	@ (800c3ec <tcp_receive+0x884>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f2c0 8427 	blt.w	800ca32 <tcp_receive+0xeca>
 800c1e4:	4b81      	ldr	r3, [pc, #516]	@ (800c3ec <tcp_receive+0x884>)
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c1f0:	440b      	add	r3, r1
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f300 841b 	bgt.w	800ca32 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c200:	4b7a      	ldr	r3, [pc, #488]	@ (800c3ec <tcp_receive+0x884>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	429a      	cmp	r2, r3
 800c206:	f040 8298 	bne.w	800c73a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c20a:	4b79      	ldr	r3, [pc, #484]	@ (800c3f0 <tcp_receive+0x888>)
 800c20c:	891c      	ldrh	r4, [r3, #8]
 800c20e:	4b78      	ldr	r3, [pc, #480]	@ (800c3f0 <tcp_receive+0x888>)
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	899b      	ldrh	r3, [r3, #12]
 800c214:	b29b      	uxth	r3, r3
 800c216:	4618      	mov	r0, r3
 800c218:	f7fa faec 	bl	80067f4 <lwip_htons>
 800c21c:	4603      	mov	r3, r0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <tcp_receive+0x6c4>
 800c228:	2301      	movs	r3, #1
 800c22a:	e000      	b.n	800c22e <tcp_receive+0x6c6>
 800c22c:	2300      	movs	r3, #0
 800c22e:	4423      	add	r3, r4
 800c230:	b29a      	uxth	r2, r3
 800c232:	4b70      	ldr	r3, [pc, #448]	@ (800c3f4 <tcp_receive+0x88c>)
 800c234:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c23a:	4b6e      	ldr	r3, [pc, #440]	@ (800c3f4 <tcp_receive+0x88c>)
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d274      	bcs.n	800c32c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c242:	4b6b      	ldr	r3, [pc, #428]	@ (800c3f0 <tcp_receive+0x888>)
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	899b      	ldrh	r3, [r3, #12]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fa fad2 	bl	80067f4 <lwip_htons>
 800c250:	4603      	mov	r3, r0
 800c252:	b2db      	uxtb	r3, r3
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01e      	beq.n	800c29a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c25c:	4b64      	ldr	r3, [pc, #400]	@ (800c3f0 <tcp_receive+0x888>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	899b      	ldrh	r3, [r3, #12]
 800c262:	b29b      	uxth	r3, r3
 800c264:	b21b      	sxth	r3, r3
 800c266:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c26a:	b21c      	sxth	r4, r3
 800c26c:	4b60      	ldr	r3, [pc, #384]	@ (800c3f0 <tcp_receive+0x888>)
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	899b      	ldrh	r3, [r3, #12]
 800c272:	b29b      	uxth	r3, r3
 800c274:	4618      	mov	r0, r3
 800c276:	f7fa fabd 	bl	80067f4 <lwip_htons>
 800c27a:	4603      	mov	r3, r0
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c282:	b29b      	uxth	r3, r3
 800c284:	4618      	mov	r0, r3
 800c286:	f7fa fab5 	bl	80067f4 <lwip_htons>
 800c28a:	4603      	mov	r3, r0
 800c28c:	b21b      	sxth	r3, r3
 800c28e:	4323      	orrs	r3, r4
 800c290:	b21a      	sxth	r2, r3
 800c292:	4b57      	ldr	r3, [pc, #348]	@ (800c3f0 <tcp_receive+0x888>)
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	b292      	uxth	r2, r2
 800c298:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c29e:	4b54      	ldr	r3, [pc, #336]	@ (800c3f0 <tcp_receive+0x888>)
 800c2a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c2a2:	4b53      	ldr	r3, [pc, #332]	@ (800c3f0 <tcp_receive+0x888>)
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	899b      	ldrh	r3, [r3, #12]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fa faa2 	bl	80067f4 <lwip_htons>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0302 	and.w	r3, r3, #2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d005      	beq.n	800c2c8 <tcp_receive+0x760>
            inseg.len -= 1;
 800c2bc:	4b4c      	ldr	r3, [pc, #304]	@ (800c3f0 <tcp_receive+0x888>)
 800c2be:	891b      	ldrh	r3, [r3, #8]
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	4b4a      	ldr	r3, [pc, #296]	@ (800c3f0 <tcp_receive+0x888>)
 800c2c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c2c8:	4b49      	ldr	r3, [pc, #292]	@ (800c3f0 <tcp_receive+0x888>)
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	4a48      	ldr	r2, [pc, #288]	@ (800c3f0 <tcp_receive+0x888>)
 800c2ce:	8912      	ldrh	r2, [r2, #8]
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fb fd0a 	bl	8007cec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c2d8:	4b45      	ldr	r3, [pc, #276]	@ (800c3f0 <tcp_receive+0x888>)
 800c2da:	891c      	ldrh	r4, [r3, #8]
 800c2dc:	4b44      	ldr	r3, [pc, #272]	@ (800c3f0 <tcp_receive+0x888>)
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	899b      	ldrh	r3, [r3, #12]
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fa fa85 	bl	80067f4 <lwip_htons>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <tcp_receive+0x792>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <tcp_receive+0x794>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4423      	add	r3, r4
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	4b3c      	ldr	r3, [pc, #240]	@ (800c3f4 <tcp_receive+0x88c>)
 800c302:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c304:	4b3b      	ldr	r3, [pc, #236]	@ (800c3f4 <tcp_receive+0x88c>)
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	4b38      	ldr	r3, [pc, #224]	@ (800c3ec <tcp_receive+0x884>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	441a      	add	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c318:	440b      	add	r3, r1
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d006      	beq.n	800c32c <tcp_receive+0x7c4>
 800c31e:	4b36      	ldr	r3, [pc, #216]	@ (800c3f8 <tcp_receive+0x890>)
 800c320:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c324:	4935      	ldr	r1, [pc, #212]	@ (800c3fc <tcp_receive+0x894>)
 800c326:	4836      	ldr	r0, [pc, #216]	@ (800c400 <tcp_receive+0x898>)
 800c328:	f009 fba2 	bl	8015a70 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 80e6 	beq.w	800c502 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c336:	4b2e      	ldr	r3, [pc, #184]	@ (800c3f0 <tcp_receive+0x888>)
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	899b      	ldrh	r3, [r3, #12]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fa fa58 	bl	80067f4 <lwip_htons>
 800c344:	4603      	mov	r3, r0
 800c346:	b2db      	uxtb	r3, r3
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d010      	beq.n	800c372 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c350:	e00a      	b.n	800c368 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c356:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7fd fbf3 	bl	8009b4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f0      	bne.n	800c352 <tcp_receive+0x7ea>
 800c370:	e0c7      	b.n	800c502 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c378:	e051      	b.n	800c41e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	899b      	ldrh	r3, [r3, #12]
 800c380:	b29b      	uxth	r3, r3
 800c382:	4618      	mov	r0, r3
 800c384:	f7fa fa36 	bl	80067f4 <lwip_htons>
 800c388:	4603      	mov	r3, r0
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	d03c      	beq.n	800c40e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c394:	4b16      	ldr	r3, [pc, #88]	@ (800c3f0 <tcp_receive+0x888>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fa fa29 	bl	80067f4 <lwip_htons>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d12f      	bne.n	800c40e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c3ae:	4b10      	ldr	r3, [pc, #64]	@ (800c3f0 <tcp_receive+0x888>)
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	899b      	ldrh	r3, [r3, #12]
 800c3b4:	b29c      	uxth	r4, r3
 800c3b6:	2001      	movs	r0, #1
 800c3b8:	f7fa fa1c 	bl	80067f4 <lwip_htons>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c3f0 <tcp_receive+0x888>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	4322      	orrs	r2, r4
 800c3c6:	b292      	uxth	r2, r2
 800c3c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c3ca:	4b09      	ldr	r3, [pc, #36]	@ (800c3f0 <tcp_receive+0x888>)
 800c3cc:	891c      	ldrh	r4, [r3, #8]
 800c3ce:	4b08      	ldr	r3, [pc, #32]	@ (800c3f0 <tcp_receive+0x888>)
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	899b      	ldrh	r3, [r3, #12]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fa fa0c 	bl	80067f4 <lwip_htons>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00d      	beq.n	800c404 <tcp_receive+0x89c>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e00c      	b.n	800c406 <tcp_receive+0x89e>
 800c3ec:	20003ba0 	.word	0x20003ba0
 800c3f0:	20003b80 	.word	0x20003b80
 800c3f4:	20003baa 	.word	0x20003baa
 800c3f8:	08017a5c 	.word	0x08017a5c
 800c3fc:	08017e04 	.word	0x08017e04
 800c400:	08017aa8 	.word	0x08017aa8
 800c404:	2300      	movs	r3, #0
 800c406:	4423      	add	r3, r4
 800c408:	b29a      	uxth	r2, r3
 800c40a:	4b98      	ldr	r3, [pc, #608]	@ (800c66c <tcp_receive+0xb04>)
 800c40c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c410:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c418:	6938      	ldr	r0, [r7, #16]
 800c41a:	f7fd fb98 	bl	8009b4e <tcp_seg_free>
            while (next &&
 800c41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c424:	4b91      	ldr	r3, [pc, #580]	@ (800c66c <tcp_receive+0xb04>)
 800c426:	881b      	ldrh	r3, [r3, #0]
 800c428:	461a      	mov	r2, r3
 800c42a:	4b91      	ldr	r3, [pc, #580]	@ (800c670 <tcp_receive+0xb08>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	441a      	add	r2, r3
 800c430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c438:	8909      	ldrh	r1, [r1, #8]
 800c43a:	440b      	add	r3, r1
 800c43c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c43e:	2b00      	cmp	r3, #0
 800c440:	da9b      	bge.n	800c37a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c444:	2b00      	cmp	r3, #0
 800c446:	d059      	beq.n	800c4fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c448:	4b88      	ldr	r3, [pc, #544]	@ (800c66c <tcp_receive+0xb04>)
 800c44a:	881b      	ldrh	r3, [r3, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4b88      	ldr	r3, [pc, #544]	@ (800c670 <tcp_receive+0xb08>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	441a      	add	r2, r3
 800c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd4d      	ble.n	800c4fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	b29a      	uxth	r2, r3
 800c468:	4b81      	ldr	r3, [pc, #516]	@ (800c670 <tcp_receive+0xb08>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	b29a      	uxth	r2, r3
 800c472:	4b80      	ldr	r3, [pc, #512]	@ (800c674 <tcp_receive+0xb0c>)
 800c474:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c476:	4b7f      	ldr	r3, [pc, #508]	@ (800c674 <tcp_receive+0xb0c>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	899b      	ldrh	r3, [r3, #12]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fa f9b8 	bl	80067f4 <lwip_htons>
 800c484:	4603      	mov	r3, r0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0302 	and.w	r3, r3, #2
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <tcp_receive+0x934>
                inseg.len -= 1;
 800c490:	4b78      	ldr	r3, [pc, #480]	@ (800c674 <tcp_receive+0xb0c>)
 800c492:	891b      	ldrh	r3, [r3, #8]
 800c494:	3b01      	subs	r3, #1
 800c496:	b29a      	uxth	r2, r3
 800c498:	4b76      	ldr	r3, [pc, #472]	@ (800c674 <tcp_receive+0xb0c>)
 800c49a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c49c:	4b75      	ldr	r3, [pc, #468]	@ (800c674 <tcp_receive+0xb0c>)
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4a74      	ldr	r2, [pc, #464]	@ (800c674 <tcp_receive+0xb0c>)
 800c4a2:	8912      	ldrh	r2, [r2, #8]
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fb fc20 	bl	8007cec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c4ac:	4b71      	ldr	r3, [pc, #452]	@ (800c674 <tcp_receive+0xb0c>)
 800c4ae:	891c      	ldrh	r4, [r3, #8]
 800c4b0:	4b70      	ldr	r3, [pc, #448]	@ (800c674 <tcp_receive+0xb0c>)
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	899b      	ldrh	r3, [r3, #12]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fa f99b 	bl	80067f4 <lwip_htons>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f003 0303 	and.w	r3, r3, #3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <tcp_receive+0x966>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e000      	b.n	800c4d0 <tcp_receive+0x968>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4423      	add	r3, r4
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	4b65      	ldr	r3, [pc, #404]	@ (800c66c <tcp_receive+0xb04>)
 800c4d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c4d8:	4b64      	ldr	r3, [pc, #400]	@ (800c66c <tcp_receive+0xb04>)
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	4b64      	ldr	r3, [pc, #400]	@ (800c670 <tcp_receive+0xb08>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	441a      	add	r2, r3
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d006      	beq.n	800c4fc <tcp_receive+0x994>
 800c4ee:	4b62      	ldr	r3, [pc, #392]	@ (800c678 <tcp_receive+0xb10>)
 800c4f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c4f4:	4961      	ldr	r1, [pc, #388]	@ (800c67c <tcp_receive+0xb14>)
 800c4f6:	4862      	ldr	r0, [pc, #392]	@ (800c680 <tcp_receive+0xb18>)
 800c4f8:	f009 faba 	bl	8015a70 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c500:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c502:	4b5a      	ldr	r3, [pc, #360]	@ (800c66c <tcp_receive+0xb04>)
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	4b59      	ldr	r3, [pc, #356]	@ (800c670 <tcp_receive+0xb08>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	441a      	add	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c516:	4b55      	ldr	r3, [pc, #340]	@ (800c66c <tcp_receive+0xb04>)
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d206      	bcs.n	800c52c <tcp_receive+0x9c4>
 800c51e:	4b56      	ldr	r3, [pc, #344]	@ (800c678 <tcp_receive+0xb10>)
 800c520:	f240 6207 	movw	r2, #1543	@ 0x607
 800c524:	4957      	ldr	r1, [pc, #348]	@ (800c684 <tcp_receive+0xb1c>)
 800c526:	4856      	ldr	r0, [pc, #344]	@ (800c680 <tcp_receive+0xb18>)
 800c528:	f009 faa2 	bl	8015a70 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c530:	4b4e      	ldr	r3, [pc, #312]	@ (800c66c <tcp_receive+0xb04>)
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	b29a      	uxth	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7fc fddf 	bl	8009100 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c542:	4b4c      	ldr	r3, [pc, #304]	@ (800c674 <tcp_receive+0xb0c>)
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	891b      	ldrh	r3, [r3, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d006      	beq.n	800c55a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c54c:	4b49      	ldr	r3, [pc, #292]	@ (800c674 <tcp_receive+0xb0c>)
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4a4d      	ldr	r2, [pc, #308]	@ (800c688 <tcp_receive+0xb20>)
 800c552:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c554:	4b47      	ldr	r3, [pc, #284]	@ (800c674 <tcp_receive+0xb0c>)
 800c556:	2200      	movs	r2, #0
 800c558:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c55a:	4b46      	ldr	r3, [pc, #280]	@ (800c674 <tcp_receive+0xb0c>)
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	899b      	ldrh	r3, [r3, #12]
 800c560:	b29b      	uxth	r3, r3
 800c562:	4618      	mov	r0, r3
 800c564:	f7fa f946 	bl	80067f4 <lwip_htons>
 800c568:	4603      	mov	r3, r0
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80b8 	beq.w	800c6e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c576:	4b45      	ldr	r3, [pc, #276]	@ (800c68c <tcp_receive+0xb24>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f043 0320 	orr.w	r3, r3, #32
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	4b42      	ldr	r3, [pc, #264]	@ (800c68c <tcp_receive+0xb24>)
 800c582:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c584:	e0af      	b.n	800c6e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c58a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4a36      	ldr	r2, [pc, #216]	@ (800c670 <tcp_receive+0xb08>)
 800c596:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	891b      	ldrh	r3, [r3, #8]
 800c59c:	461c      	mov	r4, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	899b      	ldrh	r3, [r3, #12]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fa f924 	bl	80067f4 <lwip_htons>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	f003 0303 	and.w	r3, r3, #3
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <tcp_receive+0xa54>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e000      	b.n	800c5be <tcp_receive+0xa56>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	191a      	adds	r2, r3, r4
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	441a      	add	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5ce:	461c      	mov	r4, r3
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	891b      	ldrh	r3, [r3, #8]
 800c5d4:	461d      	mov	r5, r3
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	899b      	ldrh	r3, [r3, #12]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fa f908 	bl	80067f4 <lwip_htons>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	f003 0303 	and.w	r3, r3, #3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <tcp_receive+0xa8c>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e000      	b.n	800c5f6 <tcp_receive+0xa8e>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	442b      	add	r3, r5
 800c5f8:	429c      	cmp	r4, r3
 800c5fa:	d206      	bcs.n	800c60a <tcp_receive+0xaa2>
 800c5fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c678 <tcp_receive+0xb10>)
 800c5fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c602:	4923      	ldr	r1, [pc, #140]	@ (800c690 <tcp_receive+0xb28>)
 800c604:	481e      	ldr	r0, [pc, #120]	@ (800c680 <tcp_receive+0xb18>)
 800c606:	f009 fa33 	bl	8015a70 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	461c      	mov	r4, r3
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	899b      	ldrh	r3, [r3, #12]
 800c616:	b29b      	uxth	r3, r3
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fa f8eb 	bl	80067f4 <lwip_htons>
 800c61e:	4603      	mov	r3, r0
 800c620:	b2db      	uxtb	r3, r3
 800c622:	f003 0303 	and.w	r3, r3, #3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <tcp_receive+0xac6>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <tcp_receive+0xac8>
 800c62e:	2300      	movs	r3, #0
 800c630:	1919      	adds	r1, r3, r4
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c636:	b28b      	uxth	r3, r1
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7fc fd5d 	bl	8009100 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	891b      	ldrh	r3, [r3, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d028      	beq.n	800c6a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c650:	4b0d      	ldr	r3, [pc, #52]	@ (800c688 <tcp_receive+0xb20>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01d      	beq.n	800c694 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c658:	4b0b      	ldr	r3, [pc, #44]	@ (800c688 <tcp_receive+0xb20>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7fb fd94 	bl	8008190 <pbuf_cat>
 800c668:	e018      	b.n	800c69c <tcp_receive+0xb34>
 800c66a:	bf00      	nop
 800c66c:	20003baa 	.word	0x20003baa
 800c670:	20003ba0 	.word	0x20003ba0
 800c674:	20003b80 	.word	0x20003b80
 800c678:	08017a5c 	.word	0x08017a5c
 800c67c:	08017e3c 	.word	0x08017e3c
 800c680:	08017aa8 	.word	0x08017aa8
 800c684:	08017e78 	.word	0x08017e78
 800c688:	20003bb0 	.word	0x20003bb0
 800c68c:	20003bad 	.word	0x20003bad
 800c690:	08017e98 	.word	0x08017e98
            } else {
              recv_data = cseg->p;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	4a70      	ldr	r2, [pc, #448]	@ (800c85c <tcp_receive+0xcf4>)
 800c69a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	899b      	ldrh	r3, [r3, #12]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fa f8a2 	bl	80067f4 <lwip_htons>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0301 	and.w	r3, r3, #1
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00d      	beq.n	800c6d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c6bc:	4b68      	ldr	r3, [pc, #416]	@ (800c860 <tcp_receive+0xcf8>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f043 0320 	orr.w	r3, r3, #32
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	4b66      	ldr	r3, [pc, #408]	@ (800c860 <tcp_receive+0xcf8>)
 800c6c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	7d1b      	ldrb	r3, [r3, #20]
 800c6ce:	2b04      	cmp	r3, #4
 800c6d0:	d102      	bne.n	800c6d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2207      	movs	r2, #7
 800c6d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c6e0:	68b8      	ldr	r0, [r7, #8]
 800c6e2:	f7fd fa34 	bl	8009b4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d008      	beq.n	800c700 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	f43f af43 	beq.w	800c586 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	8b5b      	ldrh	r3, [r3, #26]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00e      	beq.n	800c72a <tcp_receive+0xbc2>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	8b5b      	ldrh	r3, [r3, #26]
 800c710:	f023 0301 	bic.w	r3, r3, #1
 800c714:	b29a      	uxth	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	835a      	strh	r2, [r3, #26]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	8b5b      	ldrh	r3, [r3, #26]
 800c71e:	f043 0302 	orr.w	r3, r3, #2
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c728:	e187      	b.n	800ca3a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	8b5b      	ldrh	r3, [r3, #26]
 800c72e:	f043 0301 	orr.w	r3, r3, #1
 800c732:	b29a      	uxth	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c738:	e17f      	b.n	800ca3a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c742:	4848      	ldr	r0, [pc, #288]	@ (800c864 <tcp_receive+0xcfc>)
 800c744:	f7fd fa3a 	bl	8009bbc <tcp_seg_copy>
 800c748:	4602      	mov	r2, r0
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	675a      	str	r2, [r3, #116]	@ 0x74
 800c74e:	e16c      	b.n	800ca2a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c750:	2300      	movs	r3, #0
 800c752:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c75a:	e156      	b.n	800ca0a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	4b41      	ldr	r3, [pc, #260]	@ (800c868 <tcp_receive+0xd00>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	429a      	cmp	r2, r3
 800c768:	d11d      	bne.n	800c7a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c76a:	4b3e      	ldr	r3, [pc, #248]	@ (800c864 <tcp_receive+0xcfc>)
 800c76c:	891a      	ldrh	r2, [r3, #8]
 800c76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c770:	891b      	ldrh	r3, [r3, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	f240 814e 	bls.w	800ca14 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c778:	483a      	ldr	r0, [pc, #232]	@ (800c864 <tcp_receive+0xcfc>)
 800c77a:	f7fd fa1f 	bl	8009bbc <tcp_seg_copy>
 800c77e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8148 	beq.w	800ca18 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d003      	beq.n	800c796 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c790:	697a      	ldr	r2, [r7, #20]
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e002      	b.n	800c79c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c79c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c79e:	6978      	ldr	r0, [r7, #20]
 800c7a0:	f7ff f8de 	bl	800b960 <tcp_oos_insert_segment>
                }
                break;
 800c7a4:	e138      	b.n	800ca18 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d117      	bne.n	800c7dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c7ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c868 <tcp_receive+0xd00>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	da57      	bge.n	800c86c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c7bc:	4829      	ldr	r0, [pc, #164]	@ (800c864 <tcp_receive+0xcfc>)
 800c7be:	f7fd f9fd 	bl	8009bbc <tcp_seg_copy>
 800c7c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 8128 	beq.w	800ca1c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c7d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7d4:	69b8      	ldr	r0, [r7, #24]
 800c7d6:	f7ff f8c3 	bl	800b960 <tcp_oos_insert_segment>
                  }
                  break;
 800c7da:	e11f      	b.n	800ca1c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c7dc:	4b22      	ldr	r3, [pc, #136]	@ (800c868 <tcp_receive+0xd00>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	db3e      	blt.n	800c86c <tcp_receive+0xd04>
 800c7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <tcp_receive+0xd00>)
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dc35      	bgt.n	800c86c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c800:	4818      	ldr	r0, [pc, #96]	@ (800c864 <tcp_receive+0xcfc>)
 800c802:	f7fd f9db 	bl	8009bbc <tcp_seg_copy>
 800c806:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8108 	beq.w	800ca20 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c818:	8912      	ldrh	r2, [r2, #8]
 800c81a:	441a      	add	r2, r3
 800c81c:	4b12      	ldr	r3, [pc, #72]	@ (800c868 <tcp_receive+0xd00>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	dd12      	ble.n	800c84c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c826:	4b10      	ldr	r3, [pc, #64]	@ (800c868 <tcp_receive+0xd00>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	b29b      	uxth	r3, r3
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	b29a      	uxth	r2, r3
 800c838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c842:	891b      	ldrh	r3, [r3, #8]
 800c844:	4619      	mov	r1, r3
 800c846:	4610      	mov	r0, r2
 800c848:	f7fb fa50 	bl	8007cec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c852:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c854:	69f8      	ldr	r0, [r7, #28]
 800c856:	f7ff f883 	bl	800b960 <tcp_oos_insert_segment>
                  }
                  break;
 800c85a:	e0e1      	b.n	800ca20 <tcp_receive+0xeb8>
 800c85c:	20003bb0 	.word	0x20003bb0
 800c860:	20003bad 	.word	0x20003bad
 800c864:	20003b80 	.word	0x20003b80
 800c868:	20003ba0 	.word	0x20003ba0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 80c5 	bne.w	800ca04 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c87a:	4b7f      	ldr	r3, [pc, #508]	@ (800ca78 <tcp_receive+0xf10>)
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c886:	2b00      	cmp	r3, #0
 800c888:	f340 80bc 	ble.w	800ca04 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	899b      	ldrh	r3, [r3, #12]
 800c892:	b29b      	uxth	r3, r3
 800c894:	4618      	mov	r0, r3
 800c896:	f7f9 ffad 	bl	80067f4 <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f040 80be 	bne.w	800ca24 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c8a8:	4874      	ldr	r0, [pc, #464]	@ (800ca7c <tcp_receive+0xf14>)
 800c8aa:	f7fd f987 	bl	8009bbc <tcp_seg_copy>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 80b5 	beq.w	800ca28 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8c6:	8912      	ldrh	r2, [r2, #8]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	4b6b      	ldr	r3, [pc, #428]	@ (800ca78 <tcp_receive+0xf10>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	dd12      	ble.n	800c8fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c8d4:	4b68      	ldr	r3, [pc, #416]	@ (800ca78 <tcp_receive+0xf10>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f0:	891b      	ldrh	r3, [r3, #8]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	f7fb f9f9 	bl	8007cec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c8fa:	4b61      	ldr	r3, [pc, #388]	@ (800ca80 <tcp_receive+0xf18>)
 800c8fc:	881b      	ldrh	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	4b5d      	ldr	r3, [pc, #372]	@ (800ca78 <tcp_receive+0xf10>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	441a      	add	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	6879      	ldr	r1, [r7, #4]
 800c90c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c90e:	440b      	add	r3, r1
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	f340 8088 	ble.w	800ca28 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	899b      	ldrh	r3, [r3, #12]
 800c920:	b29b      	uxth	r3, r3
 800c922:	4618      	mov	r0, r3
 800c924:	f7f9 ff66 	bl	80067f4 <lwip_htons>
 800c928:	4603      	mov	r3, r0
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	2b00      	cmp	r3, #0
 800c932:	d021      	beq.n	800c978 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	899b      	ldrh	r3, [r3, #12]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	b21b      	sxth	r3, r3
 800c940:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c944:	b21c      	sxth	r4, r3
 800c946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	899b      	ldrh	r3, [r3, #12]
 800c94e:	b29b      	uxth	r3, r3
 800c950:	4618      	mov	r0, r3
 800c952:	f7f9 ff4f 	bl	80067f4 <lwip_htons>
 800c956:	4603      	mov	r3, r0
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4618      	mov	r0, r3
 800c962:	f7f9 ff47 	bl	80067f4 <lwip_htons>
 800c966:	4603      	mov	r3, r0
 800c968:	b21b      	sxth	r3, r3
 800c96a:	4323      	orrs	r3, r4
 800c96c:	b21a      	sxth	r2, r3
 800c96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	b292      	uxth	r2, r2
 800c976:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c982:	4413      	add	r3, r2
 800c984:	b299      	uxth	r1, r3
 800c986:	4b3c      	ldr	r3, [pc, #240]	@ (800ca78 <tcp_receive+0xf10>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	1a8a      	subs	r2, r1, r2
 800c992:	b292      	uxth	r2, r2
 800c994:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	891b      	ldrh	r3, [r3, #8]
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	f7fb f9a1 	bl	8007cec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	891c      	ldrh	r4, [r3, #8]
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	899b      	ldrh	r3, [r3, #12]
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7f9 ff1a 	bl	80067f4 <lwip_htons>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	f003 0303 	and.w	r3, r3, #3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <tcp_receive+0xe68>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e000      	b.n	800c9d2 <tcp_receive+0xe6a>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4423      	add	r3, r4
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	4b2a      	ldr	r3, [pc, #168]	@ (800ca80 <tcp_receive+0xf18>)
 800c9d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c9da:	4b29      	ldr	r3, [pc, #164]	@ (800ca80 <tcp_receive+0xf18>)
 800c9dc:	881b      	ldrh	r3, [r3, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4b25      	ldr	r3, [pc, #148]	@ (800ca78 <tcp_receive+0xf10>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	441a      	add	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c9ee:	440b      	add	r3, r1
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d019      	beq.n	800ca28 <tcp_receive+0xec0>
 800c9f4:	4b23      	ldr	r3, [pc, #140]	@ (800ca84 <tcp_receive+0xf1c>)
 800c9f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c9fa:	4923      	ldr	r1, [pc, #140]	@ (800ca88 <tcp_receive+0xf20>)
 800c9fc:	4823      	ldr	r0, [pc, #140]	@ (800ca8c <tcp_receive+0xf24>)
 800c9fe:	f009 f837 	bl	8015a70 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ca02:	e011      	b.n	800ca28 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f47f aea5 	bne.w	800c75c <tcp_receive+0xbf4>
 800ca12:	e00a      	b.n	800ca2a <tcp_receive+0xec2>
                break;
 800ca14:	bf00      	nop
 800ca16:	e008      	b.n	800ca2a <tcp_receive+0xec2>
                break;
 800ca18:	bf00      	nop
 800ca1a:	e006      	b.n	800ca2a <tcp_receive+0xec2>
                  break;
 800ca1c:	bf00      	nop
 800ca1e:	e004      	b.n	800ca2a <tcp_receive+0xec2>
                  break;
 800ca20:	bf00      	nop
 800ca22:	e002      	b.n	800ca2a <tcp_receive+0xec2>
                  break;
 800ca24:	bf00      	nop
 800ca26:	e000      	b.n	800ca2a <tcp_receive+0xec2>
                break;
 800ca28:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f001 fef8 	bl	800e820 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ca30:	e003      	b.n	800ca3a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 fef4 	bl	800e820 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca38:	e01a      	b.n	800ca70 <tcp_receive+0xf08>
 800ca3a:	e019      	b.n	800ca70 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca78 <tcp_receive+0xf10>)
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	db0a      	blt.n	800ca60 <tcp_receive+0xef8>
 800ca4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca78 <tcp_receive+0xf10>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ca56:	440b      	add	r3, r1
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	dd07      	ble.n	800ca70 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8b5b      	ldrh	r3, [r3, #26]
 800ca64:	f043 0302 	orr.w	r3, r3, #2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ca6e:	e7ff      	b.n	800ca70 <tcp_receive+0xf08>
 800ca70:	bf00      	nop
 800ca72:	3750      	adds	r7, #80	@ 0x50
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bdb0      	pop	{r4, r5, r7, pc}
 800ca78:	20003ba0 	.word	0x20003ba0
 800ca7c:	20003b80 	.word	0x20003b80
 800ca80:	20003baa 	.word	0x20003baa
 800ca84:	08017a5c 	.word	0x08017a5c
 800ca88:	08017e04 	.word	0x08017e04
 800ca8c:	08017aa8 	.word	0x08017aa8

0800ca90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ca96:	4b15      	ldr	r3, [pc, #84]	@ (800caec <tcp_get_next_optbyte+0x5c>)
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	b291      	uxth	r1, r2
 800ca9e:	4a13      	ldr	r2, [pc, #76]	@ (800caec <tcp_get_next_optbyte+0x5c>)
 800caa0:	8011      	strh	r1, [r2, #0]
 800caa2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800caa4:	4b12      	ldr	r3, [pc, #72]	@ (800caf0 <tcp_get_next_optbyte+0x60>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <tcp_get_next_optbyte+0x26>
 800caac:	4b11      	ldr	r3, [pc, #68]	@ (800caf4 <tcp_get_next_optbyte+0x64>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	88fa      	ldrh	r2, [r7, #6]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d208      	bcs.n	800cac8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cab6:	4b10      	ldr	r3, [pc, #64]	@ (800caf8 <tcp_get_next_optbyte+0x68>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3314      	adds	r3, #20
 800cabc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	4413      	add	r3, r2
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	e00b      	b.n	800cae0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cac8:	88fb      	ldrh	r3, [r7, #6]
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	4b09      	ldr	r3, [pc, #36]	@ (800caf4 <tcp_get_next_optbyte+0x64>)
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cad6:	4b06      	ldr	r3, [pc, #24]	@ (800caf0 <tcp_get_next_optbyte+0x60>)
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	797b      	ldrb	r3, [r7, #5]
 800cadc:	4413      	add	r3, r2
 800cade:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	20003b9c 	.word	0x20003b9c
 800caf0:	20003b98 	.word	0x20003b98
 800caf4:	20003b96 	.word	0x20003b96
 800caf8:	20003b90 	.word	0x20003b90

0800cafc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <tcp_parseopt+0x1c>
 800cb0a:	4b32      	ldr	r3, [pc, #200]	@ (800cbd4 <tcp_parseopt+0xd8>)
 800cb0c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cb10:	4931      	ldr	r1, [pc, #196]	@ (800cbd8 <tcp_parseopt+0xdc>)
 800cb12:	4832      	ldr	r0, [pc, #200]	@ (800cbdc <tcp_parseopt+0xe0>)
 800cb14:	f008 ffac 	bl	8015a70 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cb18:	4b31      	ldr	r3, [pc, #196]	@ (800cbe0 <tcp_parseopt+0xe4>)
 800cb1a:	881b      	ldrh	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d056      	beq.n	800cbce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cb20:	4b30      	ldr	r3, [pc, #192]	@ (800cbe4 <tcp_parseopt+0xe8>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	801a      	strh	r2, [r3, #0]
 800cb26:	e046      	b.n	800cbb6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cb28:	f7ff ffb2 	bl	800ca90 <tcp_get_next_optbyte>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d006      	beq.n	800cb44 <tcp_parseopt+0x48>
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dc2a      	bgt.n	800cb90 <tcp_parseopt+0x94>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d042      	beq.n	800cbc4 <tcp_parseopt+0xc8>
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d038      	beq.n	800cbb4 <tcp_parseopt+0xb8>
 800cb42:	e025      	b.n	800cb90 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cb44:	f7ff ffa4 	bl	800ca90 <tcp_get_next_optbyte>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b04      	cmp	r3, #4
 800cb4c:	d13c      	bne.n	800cbc8 <tcp_parseopt+0xcc>
 800cb4e:	4b25      	ldr	r3, [pc, #148]	@ (800cbe4 <tcp_parseopt+0xe8>)
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	4a22      	ldr	r2, [pc, #136]	@ (800cbe0 <tcp_parseopt+0xe4>)
 800cb56:	8812      	ldrh	r2, [r2, #0]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	da35      	bge.n	800cbc8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cb5c:	f7ff ff98 	bl	800ca90 <tcp_get_next_optbyte>
 800cb60:	4603      	mov	r3, r0
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cb66:	f7ff ff93 	bl	800ca90 <tcp_get_next_optbyte>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	89bb      	ldrh	r3, [r7, #12]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cb74:	89bb      	ldrh	r3, [r7, #12]
 800cb76:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cb7a:	d804      	bhi.n	800cb86 <tcp_parseopt+0x8a>
 800cb7c:	89bb      	ldrh	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <tcp_parseopt+0x8a>
 800cb82:	89ba      	ldrh	r2, [r7, #12]
 800cb84:	e001      	b.n	800cb8a <tcp_parseopt+0x8e>
 800cb86:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800cb8e:	e012      	b.n	800cbb6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cb90:	f7ff ff7e 	bl	800ca90 <tcp_get_next_optbyte>
 800cb94:	4603      	mov	r3, r0
 800cb96:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cb98:	7afb      	ldrb	r3, [r7, #11]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d916      	bls.n	800cbcc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	4b10      	ldr	r3, [pc, #64]	@ (800cbe4 <tcp_parseopt+0xe8>)
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	4413      	add	r3, r2
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	3b02      	subs	r3, #2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe4 <tcp_parseopt+0xe8>)
 800cbb0:	801a      	strh	r2, [r3, #0]
 800cbb2:	e000      	b.n	800cbb6 <tcp_parseopt+0xba>
          break;
 800cbb4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe4 <tcp_parseopt+0xe8>)
 800cbb8:	881a      	ldrh	r2, [r3, #0]
 800cbba:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <tcp_parseopt+0xe4>)
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d3b2      	bcc.n	800cb28 <tcp_parseopt+0x2c>
 800cbc2:	e004      	b.n	800cbce <tcp_parseopt+0xd2>
          return;
 800cbc4:	bf00      	nop
 800cbc6:	e002      	b.n	800cbce <tcp_parseopt+0xd2>
            return;
 800cbc8:	bf00      	nop
 800cbca:	e000      	b.n	800cbce <tcp_parseopt+0xd2>
            return;
 800cbcc:	bf00      	nop
      }
    }
  }
}
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	08017a5c 	.word	0x08017a5c
 800cbd8:	08017ec0 	.word	0x08017ec0
 800cbdc:	08017aa8 	.word	0x08017aa8
 800cbe0:	20003b94 	.word	0x20003b94
 800cbe4:	20003b9c 	.word	0x20003b9c

0800cbe8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cbec:	4b05      	ldr	r3, [pc, #20]	@ (800cc04 <tcp_trigger_input_pcb_close+0x1c>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	f043 0310 	orr.w	r3, r3, #16
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	4b03      	ldr	r3, [pc, #12]	@ (800cc04 <tcp_trigger_input_pcb_close+0x1c>)
 800cbf8:	701a      	strb	r2, [r3, #0]
}
 800cbfa:	bf00      	nop
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr
 800cc04:	20003bad 	.word	0x20003bad

0800cc08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <tcp_route+0x28>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	7a1b      	ldrb	r3, [r3, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d006      	beq.n	800cc30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	7a1b      	ldrb	r3, [r3, #8]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fa fea0 	bl	800796c <netif_get_by_index>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	e003      	b.n	800cc38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f005 fe1d 	bl	8012870 <ip4_route>
 800cc36:	4603      	mov	r3, r0
  }
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cc40:	b590      	push	{r4, r7, lr}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d105      	bne.n	800cc62 <tcp_create_segment+0x22>
 800cc56:	4b47      	ldr	r3, [pc, #284]	@ (800cd74 <tcp_create_segment+0x134>)
 800cc58:	22a3      	movs	r2, #163	@ 0xa3
 800cc5a:	4947      	ldr	r1, [pc, #284]	@ (800cd78 <tcp_create_segment+0x138>)
 800cc5c:	4847      	ldr	r0, [pc, #284]	@ (800cd7c <tcp_create_segment+0x13c>)
 800cc5e:	f008 ff07 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d105      	bne.n	800cc74 <tcp_create_segment+0x34>
 800cc68:	4b42      	ldr	r3, [pc, #264]	@ (800cd74 <tcp_create_segment+0x134>)
 800cc6a:	22a4      	movs	r2, #164	@ 0xa4
 800cc6c:	4944      	ldr	r1, [pc, #272]	@ (800cd80 <tcp_create_segment+0x140>)
 800cc6e:	4843      	ldr	r0, [pc, #268]	@ (800cd7c <tcp_create_segment+0x13c>)
 800cc70:	f008 fefe 	bl	8015a70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc82:	2003      	movs	r0, #3
 800cc84:	f7fa fba8 	bl	80073d8 <memp_malloc>
 800cc88:	6138      	str	r0, [r7, #16]
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d104      	bne.n	800cc9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cc90:	68b8      	ldr	r0, [r7, #8]
 800cc92:	f7fb f9af 	bl	8007ff4 <pbuf_free>
    return NULL;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e068      	b.n	800cd6c <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cca0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	891a      	ldrh	r2, [r3, #8]
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d205      	bcs.n	800ccc6 <tcp_create_segment+0x86>
 800ccba:	4b2e      	ldr	r3, [pc, #184]	@ (800cd74 <tcp_create_segment+0x134>)
 800ccbc:	22b0      	movs	r2, #176	@ 0xb0
 800ccbe:	4931      	ldr	r1, [pc, #196]	@ (800cd84 <tcp_create_segment+0x144>)
 800ccc0:	482e      	ldr	r0, [pc, #184]	@ (800cd7c <tcp_create_segment+0x13c>)
 800ccc2:	f008 fed5 	bl	8015a70 <iprintf>
  seg->len = p->tot_len - optlen;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	891a      	ldrh	r2, [r3, #8]
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ccd6:	2114      	movs	r1, #20
 800ccd8:	68b8      	ldr	r0, [r7, #8]
 800ccda:	f7fb f8f5 	bl	8007ec8 <pbuf_add_header>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00c      	beq.n	800ccfe <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800cce4:	4b28      	ldr	r3, [pc, #160]	@ (800cd88 <tcp_create_segment+0x148>)
 800cce6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800ccea:	3301      	adds	r3, #1
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	4b26      	ldr	r3, [pc, #152]	@ (800cd88 <tcp_create_segment+0x148>)
 800ccf0:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 800ccf4:	6938      	ldr	r0, [r7, #16]
 800ccf6:	f7fc ff2a 	bl	8009b4e <tcp_seg_free>
    return NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e036      	b.n	800cd6c <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	8ada      	ldrh	r2, [r3, #22]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68dc      	ldr	r4, [r3, #12]
 800cd10:	4610      	mov	r0, r2
 800cd12:	f7f9 fd6f 	bl	80067f4 <lwip_htons>
 800cd16:	4603      	mov	r3, r0
 800cd18:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	8b1a      	ldrh	r2, [r3, #24]
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	68dc      	ldr	r4, [r3, #12]
 800cd22:	4610      	mov	r0, r2
 800cd24:	f7f9 fd66 	bl	80067f4 <lwip_htons>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	68dc      	ldr	r4, [r3, #12]
 800cd30:	6838      	ldr	r0, [r7, #0]
 800cd32:	f7f9 fd75 	bl	8006820 <lwip_htonl>
 800cd36:	4603      	mov	r3, r0
 800cd38:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	089b      	lsrs	r3, r3, #2
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	3305      	adds	r3, #5
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	031b      	lsls	r3, r3, #12
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	68dc      	ldr	r4, [r3, #12]
 800cd54:	4610      	mov	r0, r2
 800cd56:	f7f9 fd4d 	bl	80067f4 <lwip_htons>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	749a      	strb	r2, [r3, #18]
 800cd66:	2200      	movs	r2, #0
 800cd68:	74da      	strb	r2, [r3, #19]
  return seg;
 800cd6a:	693b      	ldr	r3, [r7, #16]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd90      	pop	{r4, r7, pc}
 800cd74:	08017edc 	.word	0x08017edc
 800cd78:	08017f10 	.word	0x08017f10
 800cd7c:	08017f30 	.word	0x08017f30
 800cd80:	08017f58 	.word	0x08017f58
 800cd84:	08017f7c 	.word	0x08017f7c
 800cd88:	20003a9c 	.word	0x20003a9c

0800cd8c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	607b      	str	r3, [r7, #4]
 800cd94:	4603      	mov	r3, r0
 800cd96:	73fb      	strb	r3, [r7, #15]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	81bb      	strh	r3, [r7, #12]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800cda0:	89bb      	ldrh	r3, [r7, #12]
 800cda2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d105      	bne.n	800cdb6 <tcp_pbuf_prealloc+0x2a>
 800cdaa:	4b30      	ldr	r3, [pc, #192]	@ (800ce6c <tcp_pbuf_prealloc+0xe0>)
 800cdac:	22e8      	movs	r2, #232	@ 0xe8
 800cdae:	4930      	ldr	r1, [pc, #192]	@ (800ce70 <tcp_pbuf_prealloc+0xe4>)
 800cdb0:	4830      	ldr	r0, [pc, #192]	@ (800ce74 <tcp_pbuf_prealloc+0xe8>)
 800cdb2:	f008 fe5d 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d105      	bne.n	800cdc8 <tcp_pbuf_prealloc+0x3c>
 800cdbc:	4b2b      	ldr	r3, [pc, #172]	@ (800ce6c <tcp_pbuf_prealloc+0xe0>)
 800cdbe:	22e9      	movs	r2, #233	@ 0xe9
 800cdc0:	492d      	ldr	r1, [pc, #180]	@ (800ce78 <tcp_pbuf_prealloc+0xec>)
 800cdc2:	482c      	ldr	r0, [pc, #176]	@ (800ce74 <tcp_pbuf_prealloc+0xe8>)
 800cdc4:	f008 fe54 	bl	8015a70 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cdc8:	89ba      	ldrh	r2, [r7, #12]
 800cdca:	897b      	ldrh	r3, [r7, #10]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d221      	bcs.n	800ce14 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cdd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d111      	bne.n	800ce00 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	8b5b      	ldrh	r3, [r3, #26]
 800cde0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d115      	bne.n	800ce14 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800cde8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d007      	beq.n	800ce00 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d103      	bne.n	800ce00 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ce00:	89bb      	ldrh	r3, [r7, #12]
 800ce02:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800ce06:	f023 0203 	bic.w	r2, r3, #3
 800ce0a:	897b      	ldrh	r3, [r7, #10]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	bf28      	it	cs
 800ce10:	4613      	movcs	r3, r2
 800ce12:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ce14:	8af9      	ldrh	r1, [r7, #22]
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fa fe07 	bl	8007a30 <pbuf_alloc>
 800ce22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e019      	b.n	800ce62 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <tcp_pbuf_prealloc+0xb8>
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <tcp_pbuf_prealloc+0xe0>)
 800ce38:	f240 120b 	movw	r2, #267	@ 0x10b
 800ce3c:	490f      	ldr	r1, [pc, #60]	@ (800ce7c <tcp_pbuf_prealloc+0xf0>)
 800ce3e:	480d      	ldr	r0, [pc, #52]	@ (800ce74 <tcp_pbuf_prealloc+0xe8>)
 800ce40:	f008 fe16 	bl	8015a70 <iprintf>
  *oversize = p->len - length;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	895a      	ldrh	r2, [r3, #10]
 800ce48:	89bb      	ldrh	r3, [r7, #12]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	89ba      	ldrh	r2, [r7, #12]
 800ce56:	811a      	strh	r2, [r3, #8]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	891a      	ldrh	r2, [r3, #8]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	815a      	strh	r2, [r3, #10]
  return p;
 800ce60:	693b      	ldr	r3, [r7, #16]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	08017edc 	.word	0x08017edc
 800ce70:	08017f94 	.word	0x08017f94
 800ce74:	08017f30 	.word	0x08017f30
 800ce78:	08017fb8 	.word	0x08017fb8
 800ce7c:	08017fd8 	.word	0x08017fd8

0800ce80 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <tcp_write_checks+0x20>
 800ce92:	4b37      	ldr	r3, [pc, #220]	@ (800cf70 <tcp_write_checks+0xf0>)
 800ce94:	f240 1233 	movw	r2, #307	@ 0x133
 800ce98:	4936      	ldr	r1, [pc, #216]	@ (800cf74 <tcp_write_checks+0xf4>)
 800ce9a:	4837      	ldr	r0, [pc, #220]	@ (800cf78 <tcp_write_checks+0xf8>)
 800ce9c:	f008 fde8 	bl	8015a70 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	7d1b      	ldrb	r3, [r3, #20]
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	d00e      	beq.n	800cec6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ceac:	2b07      	cmp	r3, #7
 800ceae:	d00a      	beq.n	800cec6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d006      	beq.n	800cec6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cebc:	2b03      	cmp	r3, #3
 800cebe:	d002      	beq.n	800cec6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cec0:	f06f 030a 	mvn.w	r3, #10
 800cec4:	e050      	b.n	800cf68 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 800cec6:	887b      	ldrh	r3, [r7, #2]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <tcp_write_checks+0x50>
    return ERR_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	e04b      	b.n	800cf68 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ced6:	887a      	ldrh	r2, [r7, #2]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d909      	bls.n	800cef0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	8b5b      	ldrh	r3, [r3, #26]
 800cee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ceea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ceee:	e03b      	b.n	800cf68 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cef6:	2b07      	cmp	r3, #7
 800cef8:	d911      	bls.n	800cf1e <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800cefa:	4b20      	ldr	r3, [pc, #128]	@ (800cf7c <tcp_write_checks+0xfc>)
 800cefc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800cf00:	3301      	adds	r3, #1
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	4b1d      	ldr	r3, [pc, #116]	@ (800cf7c <tcp_write_checks+0xfc>)
 800cf06:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	8b5b      	ldrh	r3, [r3, #26]
 800cf0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf1c:	e024      	b.n	800cf68 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00f      	beq.n	800cf48 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d11a      	bne.n	800cf66 <tcp_write_checks+0xe6>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d116      	bne.n	800cf66 <tcp_write_checks+0xe6>
 800cf38:	4b0d      	ldr	r3, [pc, #52]	@ (800cf70 <tcp_write_checks+0xf0>)
 800cf3a:	f240 1255 	movw	r2, #341	@ 0x155
 800cf3e:	4910      	ldr	r1, [pc, #64]	@ (800cf80 <tcp_write_checks+0x100>)
 800cf40:	480d      	ldr	r0, [pc, #52]	@ (800cf78 <tcp_write_checks+0xf8>)
 800cf42:	f008 fd95 	bl	8015a70 <iprintf>
 800cf46:	e00e      	b.n	800cf66 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <tcp_write_checks+0xd8>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d006      	beq.n	800cf66 <tcp_write_checks+0xe6>
 800cf58:	4b05      	ldr	r3, [pc, #20]	@ (800cf70 <tcp_write_checks+0xf0>)
 800cf5a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800cf5e:	4909      	ldr	r1, [pc, #36]	@ (800cf84 <tcp_write_checks+0x104>)
 800cf60:	4805      	ldr	r0, [pc, #20]	@ (800cf78 <tcp_write_checks+0xf8>)
 800cf62:	f008 fd85 	bl	8015a70 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	08017edc 	.word	0x08017edc
 800cf74:	08017fec 	.word	0x08017fec
 800cf78:	08017f30 	.word	0x08017f30
 800cf7c:	20003a9c 	.word	0x20003a9c
 800cf80:	0801800c 	.word	0x0801800c
 800cf84:	08018048 	.word	0x08018048

0800cf88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cf88:	b590      	push	{r4, r7, lr}
 800cf8a:	b09b      	sub	sp, #108	@ 0x6c
 800cf8c:	af04      	add	r7, sp, #16
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	4611      	mov	r1, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	460b      	mov	r3, r1
 800cf98:	80fb      	strh	r3, [r7, #6]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfaa:	2300      	movs	r3, #0
 800cfac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfae:	2300      	movs	r3, #0
 800cfb0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <tcp_write+0x5c>
 800cfd0:	4ba4      	ldr	r3, [pc, #656]	@ (800d264 <tcp_write+0x2dc>)
 800cfd2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cfd6:	49a4      	ldr	r1, [pc, #656]	@ (800d268 <tcp_write+0x2e0>)
 800cfd8:	48a4      	ldr	r0, [pc, #656]	@ (800d26c <tcp_write+0x2e4>)
 800cfda:	f008 fd49 	bl	8015a70 <iprintf>
 800cfde:	f06f 030f 	mvn.w	r3, #15
 800cfe2:	e332      	b.n	800d64a <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfea:	085b      	lsrs	r3, r3, #1
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bf28      	it	cs
 800cff6:	4613      	movcs	r3, r2
 800cff8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d102      	bne.n	800d006 <tcp_write+0x7e>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d004:	e000      	b.n	800d008 <tcp_write+0x80>
 800d006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d008:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <tcp_write+0x9c>
 800d010:	4b94      	ldr	r3, [pc, #592]	@ (800d264 <tcp_write+0x2dc>)
 800d012:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d016:	4996      	ldr	r1, [pc, #600]	@ (800d270 <tcp_write+0x2e8>)
 800d018:	4894      	ldr	r0, [pc, #592]	@ (800d26c <tcp_write+0x2e4>)
 800d01a:	f008 fd29 	bl	8015a70 <iprintf>
 800d01e:	f06f 030f 	mvn.w	r3, #15
 800d022:	e312      	b.n	800d64a <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	4619      	mov	r1, r3
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f7ff ff29 	bl	800ce80 <tcp_write_checks>
 800d02e:	4603      	mov	r3, r0
 800d030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d034:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <tcp_write+0xba>
    return err;
 800d03c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d040:	e303      	b.n	800d64a <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d048:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d04c:	2300      	movs	r3, #0
 800d04e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80f6 	beq.w	800d248 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d060:	653b      	str	r3, [r7, #80]	@ 0x50
 800d062:	e002      	b.n	800d06a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1f8      	bne.n	800d064 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d074:	7a9b      	ldrb	r3, [r3, #10]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	b29b      	uxth	r3, r3
 800d07a:	f003 0304 	and.w	r3, r3, #4
 800d07e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d080:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d084:	891b      	ldrh	r3, [r3, #8]
 800d086:	4619      	mov	r1, r3
 800d088:	8c3b      	ldrh	r3, [r7, #32]
 800d08a:	440b      	add	r3, r1
 800d08c:	429a      	cmp	r2, r3
 800d08e:	da06      	bge.n	800d09e <tcp_write+0x116>
 800d090:	4b74      	ldr	r3, [pc, #464]	@ (800d264 <tcp_write+0x2dc>)
 800d092:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d096:	4977      	ldr	r1, [pc, #476]	@ (800d274 <tcp_write+0x2ec>)
 800d098:	4874      	ldr	r0, [pc, #464]	@ (800d26c <tcp_write+0x2e4>)
 800d09a:	f008 fce9 	bl	8015a70 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d09e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a0:	891a      	ldrh	r2, [r3, #8]
 800d0a2:	8c3b      	ldrh	r3, [r7, #32]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d0b4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d0b6:	8a7b      	ldrh	r3, [r7, #18]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d026      	beq.n	800d10a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d0bc:	8a7b      	ldrh	r3, [r7, #18]
 800d0be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d206      	bcs.n	800d0d2 <tcp_write+0x14a>
 800d0c4:	4b67      	ldr	r3, [pc, #412]	@ (800d264 <tcp_write+0x2dc>)
 800d0c6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d0ca:	496b      	ldr	r1, [pc, #428]	@ (800d278 <tcp_write+0x2f0>)
 800d0cc:	4867      	ldr	r0, [pc, #412]	@ (800d26c <tcp_write+0x2e4>)
 800d0ce:	f008 fccf 	bl	8015a70 <iprintf>
      seg = last_unsent;
 800d0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d0d6:	8a7b      	ldrh	r3, [r7, #18]
 800d0d8:	88fa      	ldrh	r2, [r7, #6]
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	bf28      	it	cs
 800d0de:	4613      	movcs	r3, r2
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bf28      	it	cs
 800d0e8:	4613      	movcs	r3, r2
 800d0ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d0ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d0f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d0f8:	8a7a      	ldrh	r2, [r7, #18]
 800d0fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d102:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d104:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d10a:	8a7b      	ldrh	r3, [r7, #18]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <tcp_write+0x1a0>
 800d110:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d114:	88fb      	ldrh	r3, [r7, #6]
 800d116:	429a      	cmp	r2, r3
 800d118:	d006      	beq.n	800d128 <tcp_write+0x1a0>
 800d11a:	4b52      	ldr	r3, [pc, #328]	@ (800d264 <tcp_write+0x2dc>)
 800d11c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d120:	4956      	ldr	r1, [pc, #344]	@ (800d27c <tcp_write+0x2f4>)
 800d122:	4852      	ldr	r0, [pc, #328]	@ (800d26c <tcp_write+0x2e4>)
 800d124:	f008 fca4 	bl	8015a70 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d12c:	88fb      	ldrh	r3, [r7, #6]
 800d12e:	429a      	cmp	r2, r3
 800d130:	f080 8167 	bcs.w	800d402 <tcp_write+0x47a>
 800d134:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d136:	2b00      	cmp	r3, #0
 800d138:	f000 8163 	beq.w	800d402 <tcp_write+0x47a>
 800d13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d13e:	891b      	ldrh	r3, [r3, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 815e 	beq.w	800d402 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d146:	88fa      	ldrh	r2, [r7, #6]
 800d148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d14c:	1ad2      	subs	r2, r2, r3
 800d14e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d150:	4293      	cmp	r3, r2
 800d152:	bfa8      	it	ge
 800d154:	4613      	movge	r3, r2
 800d156:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d15c:	797b      	ldrb	r3, [r7, #5]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d027      	beq.n	800d1b6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d166:	f107 0012 	add.w	r0, r7, #18
 800d16a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d16c:	8bf9      	ldrh	r1, [r7, #30]
 800d16e:	2301      	movs	r3, #1
 800d170:	9302      	str	r3, [sp, #8]
 800d172:	797b      	ldrb	r3, [r7, #5]
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	4603      	mov	r3, r0
 800d17c:	2000      	movs	r0, #0
 800d17e:	f7ff fe05 	bl	800cd8c <tcp_pbuf_prealloc>
 800d182:	6578      	str	r0, [r7, #84]	@ 0x54
 800d184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 8225 	beq.w	800d5d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d18c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d18e:	6858      	ldr	r0, [r3, #4]
 800d190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	4413      	add	r3, r2
 800d198:	8bfa      	ldrh	r2, [r7, #30]
 800d19a:	4619      	mov	r1, r3
 800d19c:	f008 fd71 	bl	8015c82 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d1a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d1a2:	f7fa ffb5 	bl	8008110 <pbuf_clen>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d1b4:	e041      	b.n	800d23a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d1b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1bc:	e002      	b.n	800d1c4 <tcp_write+0x23c>
 800d1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1f8      	bne.n	800d1be <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ce:	7b1b      	ldrb	r3, [r3, #12]
 800d1d0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d115      	bne.n	800d204 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1de:	8952      	ldrh	r2, [r2, #10]
 800d1e0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d10d      	bne.n	800d204 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d1e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <tcp_write+0x276>
 800d1f0:	4b1c      	ldr	r3, [pc, #112]	@ (800d264 <tcp_write+0x2dc>)
 800d1f2:	f240 2231 	movw	r2, #561	@ 0x231
 800d1f6:	4922      	ldr	r1, [pc, #136]	@ (800d280 <tcp_write+0x2f8>)
 800d1f8:	481c      	ldr	r0, [pc, #112]	@ (800d26c <tcp_write+0x2e4>)
 800d1fa:	f008 fc39 	bl	8015a70 <iprintf>
          extendlen = seglen;
 800d1fe:	8bfb      	ldrh	r3, [r7, #30]
 800d200:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d202:	e01a      	b.n	800d23a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d204:	8bfb      	ldrh	r3, [r7, #30]
 800d206:	2201      	movs	r2, #1
 800d208:	4619      	mov	r1, r3
 800d20a:	2000      	movs	r0, #0
 800d20c:	f7fa fc10 	bl	8007a30 <pbuf_alloc>
 800d210:	6578      	str	r0, [r7, #84]	@ 0x54
 800d212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 81e0 	beq.w	800d5da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d21a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	441a      	add	r2, r3
 800d222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d224:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d226:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d228:	f7fa ff72 	bl	8008110 <pbuf_clen>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d234:	4413      	add	r3, r2
 800d236:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d23a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d23e:	8bfb      	ldrh	r3, [r7, #30]
 800d240:	4413      	add	r3, r2
 800d242:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d246:	e0dc      	b.n	800d402 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80d7 	beq.w	800d402 <tcp_write+0x47a>
 800d254:	4b03      	ldr	r3, [pc, #12]	@ (800d264 <tcp_write+0x2dc>)
 800d256:	f240 224a 	movw	r2, #586	@ 0x24a
 800d25a:	490a      	ldr	r1, [pc, #40]	@ (800d284 <tcp_write+0x2fc>)
 800d25c:	4803      	ldr	r0, [pc, #12]	@ (800d26c <tcp_write+0x2e4>)
 800d25e:	f008 fc07 	bl	8015a70 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d262:	e0ce      	b.n	800d402 <tcp_write+0x47a>
 800d264:	08017edc 	.word	0x08017edc
 800d268:	0801807c 	.word	0x0801807c
 800d26c:	08017f30 	.word	0x08017f30
 800d270:	08018094 	.word	0x08018094
 800d274:	080180c8 	.word	0x080180c8
 800d278:	080180e0 	.word	0x080180e0
 800d27c:	08018100 	.word	0x08018100
 800d280:	08018120 	.word	0x08018120
 800d284:	0801814c 	.word	0x0801814c
    struct pbuf *p;
    u16_t left = len - pos;
 800d288:	88fa      	ldrh	r2, [r7, #6]
 800d28a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d292:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d296:	b29b      	uxth	r3, r3
 800d298:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d29e:	8b7a      	ldrh	r2, [r7, #26]
 800d2a0:	8bbb      	ldrh	r3, [r7, #28]
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	bf28      	it	cs
 800d2a6:	4613      	movcs	r3, r2
 800d2a8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d2aa:	797b      	ldrb	r3, [r7, #5]
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d036      	beq.n	800d322 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d2b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	8b3b      	ldrh	r3, [r7, #24]
 800d2bc:	4413      	add	r3, r2
 800d2be:	b299      	uxth	r1, r3
 800d2c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf0c      	ite	eq
 800d2c6:	2301      	moveq	r3, #1
 800d2c8:	2300      	movne	r3, #0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f107 0012 	add.w	r0, r7, #18
 800d2d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d2d2:	9302      	str	r3, [sp, #8]
 800d2d4:	797b      	ldrb	r3, [r7, #5]
 800d2d6:	9301      	str	r3, [sp, #4]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2036      	movs	r0, #54	@ 0x36
 800d2e0:	f7ff fd54 	bl	800cd8c <tcp_pbuf_prealloc>
 800d2e4:	6338      	str	r0, [r7, #48]	@ 0x30
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 8178 	beq.w	800d5de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	895b      	ldrh	r3, [r3, #10]
 800d2f2:	8b3a      	ldrh	r2, [r7, #24]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d906      	bls.n	800d306 <tcp_write+0x37e>
 800d2f8:	4b8c      	ldr	r3, [pc, #560]	@ (800d52c <tcp_write+0x5a4>)
 800d2fa:	f240 2266 	movw	r2, #614	@ 0x266
 800d2fe:	498c      	ldr	r1, [pc, #560]	@ (800d530 <tcp_write+0x5a8>)
 800d300:	488c      	ldr	r0, [pc, #560]	@ (800d534 <tcp_write+0x5ac>)
 800d302:	f008 fbb5 	bl	8015a70 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d308:	685a      	ldr	r2, [r3, #4]
 800d30a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d30e:	18d0      	adds	r0, r2, r3
 800d310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d314:	68ba      	ldr	r2, [r7, #8]
 800d316:	4413      	add	r3, r2
 800d318:	8b3a      	ldrh	r2, [r7, #24]
 800d31a:	4619      	mov	r1, r3
 800d31c:	f008 fcb1 	bl	8015c82 <memcpy>
 800d320:	e02f      	b.n	800d382 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d322:	8a7b      	ldrh	r3, [r7, #18]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <tcp_write+0x3ae>
 800d328:	4b80      	ldr	r3, [pc, #512]	@ (800d52c <tcp_write+0x5a4>)
 800d32a:	f240 2271 	movw	r2, #625	@ 0x271
 800d32e:	4982      	ldr	r1, [pc, #520]	@ (800d538 <tcp_write+0x5b0>)
 800d330:	4880      	ldr	r0, [pc, #512]	@ (800d534 <tcp_write+0x5ac>)
 800d332:	f008 fb9d 	bl	8015a70 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d336:	8b3b      	ldrh	r3, [r7, #24]
 800d338:	2201      	movs	r2, #1
 800d33a:	4619      	mov	r1, r3
 800d33c:	2036      	movs	r0, #54	@ 0x36
 800d33e:	f7fa fb77 	bl	8007a30 <pbuf_alloc>
 800d342:	6178      	str	r0, [r7, #20]
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 814b 	beq.w	800d5e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d34c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	441a      	add	r2, r3
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d358:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d362:	4619      	mov	r1, r3
 800d364:	2036      	movs	r0, #54	@ 0x36
 800d366:	f7fa fb63 	bl	8007a30 <pbuf_alloc>
 800d36a:	6338      	str	r0, [r7, #48]	@ 0x30
 800d36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d103      	bne.n	800d37a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d372:	6978      	ldr	r0, [r7, #20]
 800d374:	f7fa fe3e 	bl	8007ff4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d378:	e136      	b.n	800d5e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d37a:	6979      	ldr	r1, [r7, #20]
 800d37c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d37e:	f7fa ff07 	bl	8008190 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d384:	f7fa fec4 	bl	8008110 <pbuf_clen>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d390:	4413      	add	r3, r2
 800d392:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d39a:	2b08      	cmp	r3, #8
 800d39c:	d903      	bls.n	800d3a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d39e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3a0:	f7fa fe28 	bl	8007ff4 <pbuf_free>
      goto memerr;
 800d3a4:	e120      	b.n	800d5e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3ae:	441a      	add	r2, r3
 800d3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff fc3f 	bl	800cc40 <tcp_create_segment>
 800d3c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 810d 	beq.w	800d5e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d102      	bne.n	800d3d8 <tcp_write+0x450>
      queue = seg;
 800d3d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3d6:	e00c      	b.n	800d3f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <tcp_write+0x464>
 800d3de:	4b53      	ldr	r3, [pc, #332]	@ (800d52c <tcp_write+0x5a4>)
 800d3e0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d3e4:	4955      	ldr	r1, [pc, #340]	@ (800d53c <tcp_write+0x5b4>)
 800d3e6:	4853      	ldr	r0, [pc, #332]	@ (800d534 <tcp_write+0x5ac>)
 800d3e8:	f008 fb42 	bl	8015a70 <iprintf>
      prev_seg->next = seg;
 800d3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d3f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3f4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d3f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d3fa:	8b3b      	ldrh	r3, [r7, #24]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d406:	88fb      	ldrh	r3, [r7, #6]
 800d408:	429a      	cmp	r2, r3
 800d40a:	f4ff af3d 	bcc.w	800d288 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d40e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d410:	2b00      	cmp	r3, #0
 800d412:	d02c      	beq.n	800d46e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d41a:	e01e      	b.n	800d45a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41e:	891a      	ldrh	r2, [r3, #8]
 800d420:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d422:	4413      	add	r3, r2
 800d424:	b29a      	uxth	r2, r3
 800d426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d428:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d110      	bne.n	800d454 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d438:	8952      	ldrh	r2, [r2, #10]
 800d43a:	4413      	add	r3, r2
 800d43c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d43e:	68b9      	ldr	r1, [r7, #8]
 800d440:	4618      	mov	r0, r3
 800d442:	f008 fc1e 	bl	8015c82 <memcpy>
        p->len += oversize_used;
 800d446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d448:	895a      	ldrh	r2, [r3, #10]
 800d44a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d44c:	4413      	add	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d452:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1dd      	bne.n	800d41c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d462:	891a      	ldrh	r2, [r3, #8]
 800d464:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d466:	4413      	add	r3, r2
 800d468:	b29a      	uxth	r2, r3
 800d46a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d46c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d46e:	8a7a      	ldrh	r2, [r7, #18]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d018      	beq.n	800d4ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <tcp_write+0x508>
 800d482:	4b2a      	ldr	r3, [pc, #168]	@ (800d52c <tcp_write+0x5a4>)
 800d484:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d488:	492d      	ldr	r1, [pc, #180]	@ (800d540 <tcp_write+0x5b8>)
 800d48a:	482a      	ldr	r0, [pc, #168]	@ (800d534 <tcp_write+0x5ac>)
 800d48c:	f008 faf0 	bl	8015a70 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d496:	4618      	mov	r0, r3
 800d498:	f7fa fe7a 	bl	8008190 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d49e:	891a      	ldrh	r2, [r3, #8]
 800d4a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a2:	891b      	ldrh	r3, [r3, #8]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4aa:	811a      	strh	r2, [r3, #8]
 800d4ac:	e037      	b.n	800d51e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d4ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d034      	beq.n	800d51e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <tcp_write+0x53a>
 800d4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <tcp_write+0x548>
 800d4c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d52c <tcp_write+0x5a4>)
 800d4c4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d4c8:	491e      	ldr	r1, [pc, #120]	@ (800d544 <tcp_write+0x5bc>)
 800d4ca:	481a      	ldr	r0, [pc, #104]	@ (800d534 <tcp_write+0x5ac>)
 800d4cc:	f008 fad0 	bl	8015a70 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4d6:	e009      	b.n	800d4ec <tcp_write+0x564>
      p->tot_len += extendlen;
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	891a      	ldrh	r2, [r3, #8]
 800d4dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4de:	4413      	add	r3, r2
 800d4e0:	b29a      	uxth	r2, r3
 800d4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d1f1      	bne.n	800d4d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f6:	891a      	ldrh	r2, [r3, #8]
 800d4f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4fa:	4413      	add	r3, r2
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d500:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	895a      	ldrh	r2, [r3, #10]
 800d506:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d508:	4413      	add	r3, r2
 800d50a:	b29a      	uxth	r2, r3
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d512:	891a      	ldrh	r2, [r3, #8]
 800d514:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d516:	4413      	add	r3, r2
 800d518:	b29a      	uxth	r2, r3
 800d51a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d51c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d520:	2b00      	cmp	r3, #0
 800d522:	d111      	bne.n	800d548 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d528:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d52a:	e010      	b.n	800d54e <tcp_write+0x5c6>
 800d52c:	08017edc 	.word	0x08017edc
 800d530:	0801817c 	.word	0x0801817c
 800d534:	08017f30 	.word	0x08017f30
 800d538:	080181bc 	.word	0x080181bc
 800d53c:	080181cc 	.word	0x080181cc
 800d540:	080181e0 	.word	0x080181e0
 800d544:	08018218 	.word	0x08018218
  } else {
    last_unsent->next = queue;
 800d548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d54c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d552:	88fb      	ldrh	r3, [r7, #6]
 800d554:	441a      	add	r2, r3
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d560:	88fb      	ldrh	r3, [r7, #6]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	b29a      	uxth	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d572:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00e      	beq.n	800d59e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <tcp_write+0x616>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d106      	bne.n	800d59e <tcp_write+0x616>
 800d590:	4b30      	ldr	r3, [pc, #192]	@ (800d654 <tcp_write+0x6cc>)
 800d592:	f240 3212 	movw	r2, #786	@ 0x312
 800d596:	4930      	ldr	r1, [pc, #192]	@ (800d658 <tcp_write+0x6d0>)
 800d598:	4830      	ldr	r0, [pc, #192]	@ (800d65c <tcp_write+0x6d4>)
 800d59a:	f008 fa69 	bl	8015a70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d016      	beq.n	800d5d2 <tcp_write+0x64a>
 800d5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d012      	beq.n	800d5d2 <tcp_write+0x64a>
 800d5ac:	797b      	ldrb	r3, [r7, #5]
 800d5ae:	f003 0302 	and.w	r3, r3, #2
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10d      	bne.n	800d5d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	899b      	ldrh	r3, [r3, #12]
 800d5bc:	b29c      	uxth	r4, r3
 800d5be:	2008      	movs	r0, #8
 800d5c0:	f7f9 f918 	bl	80067f4 <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	4322      	orrs	r2, r4
 800d5ce:	b292      	uxth	r2, r2
 800d5d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e039      	b.n	800d64a <tcp_write+0x6c2>
          goto memerr;
 800d5d6:	bf00      	nop
 800d5d8:	e006      	b.n	800d5e8 <tcp_write+0x660>
            goto memerr;
 800d5da:	bf00      	nop
 800d5dc:	e004      	b.n	800d5e8 <tcp_write+0x660>
        goto memerr;
 800d5de:	bf00      	nop
 800d5e0:	e002      	b.n	800d5e8 <tcp_write+0x660>
        goto memerr;
 800d5e2:	bf00      	nop
 800d5e4:	e000      	b.n	800d5e8 <tcp_write+0x660>
      goto memerr;
 800d5e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	8b5b      	ldrh	r3, [r3, #26]
 800d5ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800d5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d660 <tcp_write+0x6d8>)
 800d5f8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	4b17      	ldr	r3, [pc, #92]	@ (800d660 <tcp_write+0x6d8>)
 800d602:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 800d606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <tcp_write+0x68a>
    pbuf_free(concat_p);
 800d60c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d60e:	f7fa fcf1 	bl	8007ff4 <pbuf_free>
  }
  if (queue != NULL) {
 800d612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <tcp_write+0x696>
    tcp_segs_free(queue);
 800d618:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d61a:	f7fc fa83 	bl	8009b24 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00e      	beq.n	800d646 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <tcp_write+0x6be>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <tcp_write+0x6be>
 800d638:	4b06      	ldr	r3, [pc, #24]	@ (800d654 <tcp_write+0x6cc>)
 800d63a:	f240 3227 	movw	r2, #807	@ 0x327
 800d63e:	4906      	ldr	r1, [pc, #24]	@ (800d658 <tcp_write+0x6d0>)
 800d640:	4806      	ldr	r0, [pc, #24]	@ (800d65c <tcp_write+0x6d4>)
 800d642:	f008 fa15 	bl	8015a70 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	375c      	adds	r7, #92	@ 0x5c
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd90      	pop	{r4, r7, pc}
 800d652:	bf00      	nop
 800d654:	08017edc 	.word	0x08017edc
 800d658:	08018250 	.word	0x08018250
 800d65c:	08017f30 	.word	0x08017f30
 800d660:	20003a9c 	.word	0x20003a9c

0800d664 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b08b      	sub	sp, #44	@ 0x2c
 800d668:	af02      	add	r7, sp, #8
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d670:	2300      	movs	r3, #0
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	2300      	movs	r3, #0
 800d676:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d678:	2300      	movs	r3, #0
 800d67a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <tcp_split_unsent_seg+0x2c>
 800d682:	4b99      	ldr	r3, [pc, #612]	@ (800d8e8 <tcp_split_unsent_seg+0x284>)
 800d684:	f240 324b 	movw	r2, #843	@ 0x34b
 800d688:	4998      	ldr	r1, [pc, #608]	@ (800d8ec <tcp_split_unsent_seg+0x288>)
 800d68a:	4899      	ldr	r0, [pc, #612]	@ (800d8f0 <tcp_split_unsent_seg+0x28c>)
 800d68c:	f008 f9f0 	bl	8015a70 <iprintf>

  useg = pcb->unsent;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d694:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d102      	bne.n	800d6a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6a0:	e11e      	b.n	800d8e0 <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800d6a2:	887b      	ldrh	r3, [r7, #2]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d109      	bne.n	800d6bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d6a8:	4b8f      	ldr	r3, [pc, #572]	@ (800d8e8 <tcp_split_unsent_seg+0x284>)
 800d6aa:	f240 3253 	movw	r2, #851	@ 0x353
 800d6ae:	4991      	ldr	r1, [pc, #580]	@ (800d8f4 <tcp_split_unsent_seg+0x290>)
 800d6b0:	488f      	ldr	r0, [pc, #572]	@ (800d8f0 <tcp_split_unsent_seg+0x28c>)
 800d6b2:	f008 f9dd 	bl	8015a70 <iprintf>
    return ERR_VAL;
 800d6b6:	f06f 0305 	mvn.w	r3, #5
 800d6ba:	e111      	b.n	800d8e0 <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	891b      	ldrh	r3, [r3, #8]
 800d6c0:	887a      	ldrh	r2, [r7, #2]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d301      	bcc.n	800d6ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e10a      	b.n	800d8e0 <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6ce:	887a      	ldrh	r2, [r7, #2]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d906      	bls.n	800d6e2 <tcp_split_unsent_seg+0x7e>
 800d6d4:	4b84      	ldr	r3, [pc, #528]	@ (800d8e8 <tcp_split_unsent_seg+0x284>)
 800d6d6:	f240 325b 	movw	r2, #859	@ 0x35b
 800d6da:	4987      	ldr	r1, [pc, #540]	@ (800d8f8 <tcp_split_unsent_seg+0x294>)
 800d6dc:	4884      	ldr	r0, [pc, #528]	@ (800d8f0 <tcp_split_unsent_seg+0x28c>)
 800d6de:	f008 f9c7 	bl	8015a70 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	891b      	ldrh	r3, [r3, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d106      	bne.n	800d6f8 <tcp_split_unsent_seg+0x94>
 800d6ea:	4b7f      	ldr	r3, [pc, #508]	@ (800d8e8 <tcp_split_unsent_seg+0x284>)
 800d6ec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d6f0:	4982      	ldr	r1, [pc, #520]	@ (800d8fc <tcp_split_unsent_seg+0x298>)
 800d6f2:	487f      	ldr	r0, [pc, #508]	@ (800d8f0 <tcp_split_unsent_seg+0x28c>)
 800d6f4:	f008 f9bc 	bl	8015a70 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	7a9b      	ldrb	r3, [r3, #10]
 800d6fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	b2db      	uxtb	r3, r3
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	891a      	ldrh	r2, [r3, #8]
 800d70e:	887b      	ldrh	r3, [r7, #2]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	b29a      	uxth	r2, r3
 800d718:	89bb      	ldrh	r3, [r7, #12]
 800d71a:	4413      	add	r3, r2
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d722:	4619      	mov	r1, r3
 800d724:	2036      	movs	r0, #54	@ 0x36
 800d726:	f7fa f983 	bl	8007a30 <pbuf_alloc>
 800d72a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f000 80b7 	beq.w	800d8a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	891a      	ldrh	r2, [r3, #8]
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	891b      	ldrh	r3, [r3, #8]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	b29a      	uxth	r2, r3
 800d742:	887b      	ldrh	r3, [r7, #2]
 800d744:	4413      	add	r3, r2
 800d746:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	6858      	ldr	r0, [r3, #4]
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	7bbb      	ldrb	r3, [r7, #14]
 800d752:	18d1      	adds	r1, r2, r3
 800d754:	897b      	ldrh	r3, [r7, #10]
 800d756:	89ba      	ldrh	r2, [r7, #12]
 800d758:	f7fa fe52 	bl	8008400 <pbuf_copy_partial>
 800d75c:	4603      	mov	r3, r0
 800d75e:	461a      	mov	r2, r3
 800d760:	89bb      	ldrh	r3, [r7, #12]
 800d762:	4293      	cmp	r3, r2
 800d764:	f040 809f 	bne.w	800d8a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	899b      	ldrh	r3, [r3, #12]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	4618      	mov	r0, r3
 800d772:	f7f9 f83f 	bl	80067f4 <lwip_htons>
 800d776:	4603      	mov	r3, r0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d77e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d780:	2300      	movs	r3, #0
 800d782:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d784:	7efb      	ldrb	r3, [r7, #27]
 800d786:	f003 0308 	and.w	r3, r3, #8
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d78e:	7efb      	ldrb	r3, [r7, #27]
 800d790:	f023 0308 	bic.w	r3, r3, #8
 800d794:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d796:	7ebb      	ldrb	r3, [r7, #26]
 800d798:	f043 0308 	orr.w	r3, r3, #8
 800d79c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d79e:	7efb      	ldrb	r3, [r7, #27]
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d7a8:	7efb      	ldrb	r3, [r7, #27]
 800d7aa:	f023 0301 	bic.w	r3, r3, #1
 800d7ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d7b0:	7ebb      	ldrb	r3, [r7, #26]
 800d7b2:	f043 0301 	orr.w	r3, r3, #1
 800d7b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f9 f82e 	bl	8006820 <lwip_htonl>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	887b      	ldrh	r3, [r7, #2]
 800d7c8:	18d1      	adds	r1, r2, r3
 800d7ca:	7eba      	ldrb	r2, [r7, #26]
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	6939      	ldr	r1, [r7, #16]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff fa33 	bl	800cc40 <tcp_create_segment>
 800d7da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d063      	beq.n	800d8aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fa fc92 	bl	8008110 <pbuf_clen>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7f6:	1a9b      	subs	r3, r3, r2
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6858      	ldr	r0, [r3, #4]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	891a      	ldrh	r2, [r3, #8]
 800d80a:	89bb      	ldrh	r3, [r7, #12]
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4619      	mov	r1, r3
 800d812:	f7fa fa6b 	bl	8007cec <pbuf_realloc>
  useg->len -= remainder;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	891a      	ldrh	r2, [r3, #8]
 800d81a:	89bb      	ldrh	r3, [r7, #12]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b29a      	uxth	r2, r3
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	899b      	ldrh	r3, [r3, #12]
 800d82a:	b29c      	uxth	r4, r3
 800d82c:	7efb      	ldrb	r3, [r7, #27]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4618      	mov	r0, r3
 800d832:	f7f8 ffdf 	bl	80067f4 <lwip_htons>
 800d836:	4603      	mov	r3, r0
 800d838:	461a      	mov	r2, r3
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	4322      	orrs	r2, r4
 800d840:	b292      	uxth	r2, r2
 800d842:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fa fc61 	bl	8008110 <pbuf_clen>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d858:	4413      	add	r3, r2
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	f7fa fc52 	bl	8008110 <pbuf_clen>
 800d86c:	4603      	mov	r3, r0
 800d86e:	461a      	mov	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d876:	4413      	add	r3, r2
 800d878:	b29a      	uxth	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	69fa      	ldr	r2, [r7, #28]
 800d88c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d103      	bne.n	800d89e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	e01e      	b.n	800d8e0 <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800d8a2:	bf00      	nop
 800d8a4:	e002      	b.n	800d8ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d8a6:	bf00      	nop
 800d8a8:	e000      	b.n	800d8ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d8aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800d8ac:	4b14      	ldr	r3, [pc, #80]	@ (800d900 <tcp_split_unsent_seg+0x29c>)
 800d8ae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	4b12      	ldr	r3, [pc, #72]	@ (800d900 <tcp_split_unsent_seg+0x29c>)
 800d8b8:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d006      	beq.n	800d8d0 <tcp_split_unsent_seg+0x26c>
 800d8c2:	4b09      	ldr	r3, [pc, #36]	@ (800d8e8 <tcp_split_unsent_seg+0x284>)
 800d8c4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d8c8:	490e      	ldr	r1, [pc, #56]	@ (800d904 <tcp_split_unsent_seg+0x2a0>)
 800d8ca:	4809      	ldr	r0, [pc, #36]	@ (800d8f0 <tcp_split_unsent_seg+0x28c>)
 800d8cc:	f008 f8d0 	bl	8015a70 <iprintf>
  if (p != NULL) {
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d002      	beq.n	800d8dc <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800d8d6:	6938      	ldr	r0, [r7, #16]
 800d8d8:	f7fa fb8c 	bl	8007ff4 <pbuf_free>
  }

  return ERR_MEM;
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3724      	adds	r7, #36	@ 0x24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd90      	pop	{r4, r7, pc}
 800d8e8:	08017edc 	.word	0x08017edc
 800d8ec:	08018270 	.word	0x08018270
 800d8f0:	08017f30 	.word	0x08017f30
 800d8f4:	08018294 	.word	0x08018294
 800d8f8:	080182b8 	.word	0x080182b8
 800d8fc:	080182c8 	.word	0x080182c8
 800d900:	20003a9c 	.word	0x20003a9c
 800d904:	080182d8 	.word	0x080182d8

0800d908 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d106      	bne.n	800d924 <tcp_send_fin+0x1c>
 800d916:	4b21      	ldr	r3, [pc, #132]	@ (800d99c <tcp_send_fin+0x94>)
 800d918:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d91c:	4920      	ldr	r1, [pc, #128]	@ (800d9a0 <tcp_send_fin+0x98>)
 800d91e:	4821      	ldr	r0, [pc, #132]	@ (800d9a4 <tcp_send_fin+0x9c>)
 800d920:	f008 f8a6 	bl	8015a70 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d02e      	beq.n	800d98a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d930:	60fb      	str	r3, [r7, #12]
 800d932:	e002      	b.n	800d93a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d1f8      	bne.n	800d934 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	899b      	ldrh	r3, [r3, #12]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f8 ff52 	bl	80067f4 <lwip_htons>
 800d950:	4603      	mov	r3, r0
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 0307 	and.w	r3, r3, #7
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d116      	bne.n	800d98a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	899b      	ldrh	r3, [r3, #12]
 800d962:	b29c      	uxth	r4, r3
 800d964:	2001      	movs	r0, #1
 800d966:	f7f8 ff45 	bl	80067f4 <lwip_htons>
 800d96a:	4603      	mov	r3, r0
 800d96c:	461a      	mov	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	4322      	orrs	r2, r4
 800d974:	b292      	uxth	r2, r2
 800d976:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	8b5b      	ldrh	r3, [r3, #26]
 800d97c:	f043 0320 	orr.w	r3, r3, #32
 800d980:	b29a      	uxth	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d986:	2300      	movs	r3, #0
 800d988:	e004      	b.n	800d994 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d98a:	2101      	movs	r1, #1
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f80b 	bl	800d9a8 <tcp_enqueue_flags>
 800d992:	4603      	mov	r3, r0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd90      	pop	{r4, r7, pc}
 800d99c:	08017edc 	.word	0x08017edc
 800d9a0:	080182e4 	.word	0x080182e4
 800d9a4:	08017f30 	.word	0x08017f30

0800d9a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b08a      	sub	sp, #40	@ 0x28
 800d9ac:	af02      	add	r7, sp, #8
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d9bc:	78fb      	ldrb	r3, [r7, #3]
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d106      	bne.n	800d9d4 <tcp_enqueue_flags+0x2c>
 800d9c6:	4b6f      	ldr	r3, [pc, #444]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800d9c8:	f240 4211 	movw	r2, #1041	@ 0x411
 800d9cc:	496e      	ldr	r1, [pc, #440]	@ (800db88 <tcp_enqueue_flags+0x1e0>)
 800d9ce:	486f      	ldr	r0, [pc, #444]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800d9d0:	f008 f84e 	bl	8015a70 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d106      	bne.n	800d9e8 <tcp_enqueue_flags+0x40>
 800d9da:	4b6a      	ldr	r3, [pc, #424]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800d9dc:	f240 4213 	movw	r2, #1043	@ 0x413
 800d9e0:	496b      	ldr	r1, [pc, #428]	@ (800db90 <tcp_enqueue_flags+0x1e8>)
 800d9e2:	486a      	ldr	r0, [pc, #424]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800d9e4:	f008 f844 	bl	8015a70 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d9e8:	78fb      	ldrb	r3, [r7, #3]
 800d9ea:	f003 0302 	and.w	r3, r3, #2
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9f6:	7ffb      	ldrb	r3, [r7, #31]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 0304 	and.w	r3, r3, #4
 800da00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da0a:	4619      	mov	r1, r3
 800da0c:	2036      	movs	r0, #54	@ 0x36
 800da0e:	f7fa f80f 	bl	8007a30 <pbuf_alloc>
 800da12:	6138      	str	r0, [r7, #16]
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d111      	bne.n	800da3e <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	8b5b      	ldrh	r3, [r3, #26]
 800da1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da22:	b29a      	uxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800da28:	4b5a      	ldr	r3, [pc, #360]	@ (800db94 <tcp_enqueue_flags+0x1ec>)
 800da2a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800da2e:	3301      	adds	r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	4b58      	ldr	r3, [pc, #352]	@ (800db94 <tcp_enqueue_flags+0x1ec>)
 800da34:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 800da38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da3c:	e09d      	b.n	800db7a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	895a      	ldrh	r2, [r3, #10]
 800da42:	7dfb      	ldrb	r3, [r7, #23]
 800da44:	b29b      	uxth	r3, r3
 800da46:	429a      	cmp	r2, r3
 800da48:	d206      	bcs.n	800da58 <tcp_enqueue_flags+0xb0>
 800da4a:	4b4e      	ldr	r3, [pc, #312]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800da4c:	f240 4239 	movw	r2, #1081	@ 0x439
 800da50:	4951      	ldr	r1, [pc, #324]	@ (800db98 <tcp_enqueue_flags+0x1f0>)
 800da52:	484e      	ldr	r0, [pc, #312]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800da54:	f008 f80c 	bl	8015a70 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800da5c:	78fa      	ldrb	r2, [r7, #3]
 800da5e:	7ffb      	ldrb	r3, [r7, #31]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	460b      	mov	r3, r1
 800da64:	6939      	ldr	r1, [r7, #16]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff f8ea 	bl	800cc40 <tcp_create_segment>
 800da6c:	60f8      	str	r0, [r7, #12]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d111      	bne.n	800da98 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	8b5b      	ldrh	r3, [r3, #26]
 800da78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800da82:	4b44      	ldr	r3, [pc, #272]	@ (800db94 <tcp_enqueue_flags+0x1ec>)
 800da84:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 800da88:	3301      	adds	r3, #1
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	4b41      	ldr	r3, [pc, #260]	@ (800db94 <tcp_enqueue_flags+0x1ec>)
 800da8e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 800da92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da96:	e070      	b.n	800db7a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	f003 0303 	and.w	r3, r3, #3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <tcp_enqueue_flags+0x10a>
 800daa4:	4b37      	ldr	r3, [pc, #220]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800daa6:	f240 4242 	movw	r2, #1090	@ 0x442
 800daaa:	493c      	ldr	r1, [pc, #240]	@ (800db9c <tcp_enqueue_flags+0x1f4>)
 800daac:	4837      	ldr	r0, [pc, #220]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800daae:	f007 ffdf 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	891b      	ldrh	r3, [r3, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d006      	beq.n	800dac8 <tcp_enqueue_flags+0x120>
 800daba:	4b32      	ldr	r3, [pc, #200]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800dabc:	f240 4243 	movw	r2, #1091	@ 0x443
 800dac0:	4937      	ldr	r1, [pc, #220]	@ (800dba0 <tcp_enqueue_flags+0x1f8>)
 800dac2:	4832      	ldr	r0, [pc, #200]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800dac4:	f007 ffd4 	bl	8015a70 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d103      	bne.n	800dad8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dad6:	e00d      	b.n	800daf4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dadc:	61bb      	str	r3, [r7, #24]
 800dade:	e002      	b.n	800dae6 <tcp_enqueue_flags+0x13e>
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	61bb      	str	r3, [r7, #24]
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d1f8      	bne.n	800dae0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	f003 0302 	and.w	r3, r3, #2
 800db02:	2b00      	cmp	r3, #0
 800db04:	d104      	bne.n	800db10 <tcp_enqueue_flags+0x168>
 800db06:	78fb      	ldrb	r3, [r7, #3]
 800db08:	f003 0301 	and.w	r3, r3, #1
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800db1a:	78fb      	ldrb	r3, [r7, #3]
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d006      	beq.n	800db32 <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	8b5b      	ldrh	r3, [r3, #26]
 800db28:	f043 0320 	orr.w	r3, r3, #32
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	685b      	ldr	r3, [r3, #4]
 800db36:	4618      	mov	r0, r3
 800db38:	f7fa faea 	bl	8008110 <pbuf_clen>
 800db3c:	4603      	mov	r3, r0
 800db3e:	461a      	mov	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db46:	4413      	add	r3, r2
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00e      	beq.n	800db78 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10a      	bne.n	800db78 <tcp_enqueue_flags+0x1d0>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <tcp_enqueue_flags+0x1d0>
 800db6a:	4b06      	ldr	r3, [pc, #24]	@ (800db84 <tcp_enqueue_flags+0x1dc>)
 800db6c:	f240 4265 	movw	r2, #1125	@ 0x465
 800db70:	490c      	ldr	r1, [pc, #48]	@ (800dba4 <tcp_enqueue_flags+0x1fc>)
 800db72:	4806      	ldr	r0, [pc, #24]	@ (800db8c <tcp_enqueue_flags+0x1e4>)
 800db74:	f007 ff7c 	bl	8015a70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08017edc 	.word	0x08017edc
 800db88:	08018300 	.word	0x08018300
 800db8c:	08017f30 	.word	0x08017f30
 800db90:	08018358 	.word	0x08018358
 800db94:	20003a9c 	.word	0x20003a9c
 800db98:	08018378 	.word	0x08018378
 800db9c:	080183b4 	.word	0x080183b4
 800dba0:	080183cc 	.word	0x080183cc
 800dba4:	080183f8 	.word	0x080183f8

0800dba8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dba8:	b5b0      	push	{r4, r5, r7, lr}
 800dbaa:	b08a      	sub	sp, #40	@ 0x28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d106      	bne.n	800dbc4 <tcp_output+0x1c>
 800dbb6:	4b8a      	ldr	r3, [pc, #552]	@ (800dde0 <tcp_output+0x238>)
 800dbb8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800dbbc:	4989      	ldr	r1, [pc, #548]	@ (800dde4 <tcp_output+0x23c>)
 800dbbe:	488a      	ldr	r0, [pc, #552]	@ (800dde8 <tcp_output+0x240>)
 800dbc0:	f007 ff56 	bl	8015a70 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	7d1b      	ldrb	r3, [r3, #20]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d106      	bne.n	800dbda <tcp_output+0x32>
 800dbcc:	4b84      	ldr	r3, [pc, #528]	@ (800dde0 <tcp_output+0x238>)
 800dbce:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800dbd2:	4986      	ldr	r1, [pc, #536]	@ (800ddec <tcp_output+0x244>)
 800dbd4:	4884      	ldr	r0, [pc, #528]	@ (800dde8 <tcp_output+0x240>)
 800dbd6:	f007 ff4b 	bl	8015a70 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dbda:	4b85      	ldr	r3, [pc, #532]	@ (800ddf0 <tcp_output+0x248>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d101      	bne.n	800dbe8 <tcp_output+0x40>
    return ERR_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e1ce      	b.n	800df86 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	bf28      	it	cs
 800dbf8:	4613      	movcs	r3, r2
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	8b5b      	ldrh	r3, [r3, #26]
 800dc0e:	f003 0302 	and.w	r3, r3, #2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f000 81aa 	beq.w	800df6c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fe01 	bl	800e820 <tcp_send_empty_ack>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	e1b1      	b.n	800df86 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3304      	adds	r3, #4
 800dc28:	461a      	mov	r2, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7fe ffec 	bl	800cc08 <tcp_route>
 800dc30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d102      	bne.n	800dc3e <tcp_output+0x96>
    return ERR_RTE;
 800dc38:	f06f 0303 	mvn.w	r3, #3
 800dc3c:	e1a3      	b.n	800df86 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <tcp_output+0xa4>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d111      	bne.n	800dc70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d002      	beq.n	800dc58 <tcp_output+0xb0>
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	3304      	adds	r3, #4
 800dc56:	e000      	b.n	800dc5a <tcp_output+0xb2>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d102      	bne.n	800dc68 <tcp_output+0xc0>
      return ERR_RTE;
 800dc62:	f06f 0303 	mvn.w	r3, #3
 800dc66:	e18e      	b.n	800df86 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f8 fdd2 	bl	8006820 <lwip_htonl>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc82:	1ad3      	subs	r3, r2, r3
 800dc84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc86:	8912      	ldrh	r2, [r2, #8]
 800dc88:	4413      	add	r3, r2
 800dc8a:	69ba      	ldr	r2, [r7, #24]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d227      	bcs.n	800dce0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc96:	461a      	mov	r2, r3
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d114      	bne.n	800dcc8 <tcp_output+0x120>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d110      	bne.n	800dcc8 <tcp_output+0x120>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10b      	bne.n	800dcc8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8b5b      	ldrh	r3, [r3, #26]
 800dccc:	f003 0302 	and.w	r3, r3, #2
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 814d 	beq.w	800df70 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fda2 	bl	800e820 <tcp_send_empty_ack>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	e152      	b.n	800df86 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f000 811c 	beq.w	800df2e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dcf6:	e002      	b.n	800dcfe <tcp_output+0x156>
 800dcf8:	6a3b      	ldr	r3, [r7, #32]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	623b      	str	r3, [r7, #32]
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1f8      	bne.n	800dcf8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dd06:	e112      	b.n	800df2e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	899b      	ldrh	r3, [r3, #12]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7f8 fd6f 	bl	80067f4 <lwip_htons>
 800dd16:	4603      	mov	r3, r0
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	f003 0304 	and.w	r3, r3, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <tcp_output+0x188>
 800dd22:	4b2f      	ldr	r3, [pc, #188]	@ (800dde0 <tcp_output+0x238>)
 800dd24:	f240 5236 	movw	r2, #1334	@ 0x536
 800dd28:	4932      	ldr	r1, [pc, #200]	@ (800ddf4 <tcp_output+0x24c>)
 800dd2a:	482f      	ldr	r0, [pc, #188]	@ (800dde8 <tcp_output+0x240>)
 800dd2c:	f007 fea0 	bl	8015a70 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01f      	beq.n	800dd78 <tcp_output+0x1d0>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	8b5b      	ldrh	r3, [r3, #26]
 800dd3c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d119      	bne.n	800dd78 <tcp_output+0x1d0>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <tcp_output+0x1bc>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d110      	bne.n	800dd78 <tcp_output+0x1d0>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd5a:	891a      	ldrh	r2, [r3, #8]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d209      	bcs.n	800dd78 <tcp_output+0x1d0>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d004      	beq.n	800dd78 <tcp_output+0x1d0>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd74:	2b07      	cmp	r3, #7
 800dd76:	d901      	bls.n	800dd7c <tcp_output+0x1d4>
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e000      	b.n	800dd7e <tcp_output+0x1d6>
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	8b5b      	ldrh	r3, [r3, #26]
 800dd86:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 80e4 	beq.w	800df58 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7d1b      	ldrb	r3, [r3, #20]
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d00d      	beq.n	800ddb4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	899b      	ldrh	r3, [r3, #12]
 800dd9e:	b29c      	uxth	r4, r3
 800dda0:	2010      	movs	r0, #16
 800dda2:	f7f8 fd27 	bl	80067f4 <lwip_htons>
 800dda6:	4603      	mov	r3, r0
 800dda8:	461a      	mov	r2, r3
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	4322      	orrs	r2, r4
 800ddb0:	b292      	uxth	r2, r2
 800ddb2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ddb4:	697a      	ldr	r2, [r7, #20]
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ddba:	f000 f909 	bl	800dfd0 <tcp_output_segment>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ddc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d016      	beq.n	800ddf8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	8b5b      	ldrh	r3, [r3, #26]
 800ddce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	835a      	strh	r2, [r3, #26]
      return err;
 800ddd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dddc:	e0d3      	b.n	800df86 <tcp_output+0x3de>
 800ddde:	bf00      	nop
 800dde0:	08017edc 	.word	0x08017edc
 800dde4:	08018420 	.word	0x08018420
 800dde8:	08017f30 	.word	0x08017f30
 800ddec:	08018438 	.word	0x08018438
 800ddf0:	20003bb4 	.word	0x20003bb4
 800ddf4:	08018460 	.word	0x08018460
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7d1b      	ldrb	r3, [r3, #20]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d006      	beq.n	800de16 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	8b5b      	ldrh	r3, [r3, #26]
 800de0c:	f023 0303 	bic.w	r3, r3, #3
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800de16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7f8 fcff 	bl	8006820 <lwip_htonl>
 800de22:	4604      	mov	r4, r0
 800de24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de26:	891b      	ldrh	r3, [r3, #8]
 800de28:	461d      	mov	r5, r3
 800de2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	899b      	ldrh	r3, [r3, #12]
 800de30:	b29b      	uxth	r3, r3
 800de32:	4618      	mov	r0, r3
 800de34:	f7f8 fcde 	bl	80067f4 <lwip_htons>
 800de38:	4603      	mov	r3, r0
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 0303 	and.w	r3, r3, #3
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <tcp_output+0x2a0>
 800de44:	2301      	movs	r3, #1
 800de46:	e000      	b.n	800de4a <tcp_output+0x2a2>
 800de48:	2300      	movs	r3, #0
 800de4a:	442b      	add	r3, r5
 800de4c:	4423      	add	r3, r4
 800de4e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	2b00      	cmp	r3, #0
 800de5a:	da02      	bge.n	800de62 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800de62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de64:	891b      	ldrh	r3, [r3, #8]
 800de66:	461c      	mov	r4, r3
 800de68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	899b      	ldrh	r3, [r3, #12]
 800de6e:	b29b      	uxth	r3, r3
 800de70:	4618      	mov	r0, r3
 800de72:	f7f8 fcbf 	bl	80067f4 <lwip_htons>
 800de76:	4603      	mov	r3, r0
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 0303 	and.w	r3, r3, #3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <tcp_output+0x2de>
 800de82:	2301      	movs	r3, #1
 800de84:	e000      	b.n	800de88 <tcp_output+0x2e0>
 800de86:	2300      	movs	r3, #0
 800de88:	4423      	add	r3, r4
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d049      	beq.n	800df22 <tcp_output+0x37a>
      seg->next = NULL;
 800de8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de90:	2200      	movs	r2, #0
 800de92:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d105      	bne.n	800dea8 <tcp_output+0x300>
        pcb->unacked = seg;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dea0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	623b      	str	r3, [r7, #32]
 800dea6:	e03f      	b.n	800df28 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 fcb6 	bl	8006820 <lwip_htonl>
 800deb4:	4604      	mov	r4, r0
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	4618      	mov	r0, r3
 800debe:	f7f8 fcaf 	bl	8006820 <lwip_htonl>
 800dec2:	4603      	mov	r3, r0
 800dec4:	1ae3      	subs	r3, r4, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	da24      	bge.n	800df14 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3370      	adds	r3, #112	@ 0x70
 800dece:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ded0:	e002      	b.n	800ded8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d011      	beq.n	800df04 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f8 fc99 	bl	8006820 <lwip_htonl>
 800deee:	4604      	mov	r4, r0
 800def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	4618      	mov	r0, r3
 800def8:	f7f8 fc92 	bl	8006820 <lwip_htonl>
 800defc:	4603      	mov	r3, r0
 800defe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800df00:	2b00      	cmp	r3, #0
 800df02:	dbe6      	blt.n	800ded2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	e009      	b.n	800df28 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800df14:	6a3b      	ldr	r3, [r7, #32]
 800df16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df18:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	623b      	str	r3, [r7, #32]
 800df20:	e002      	b.n	800df28 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800df22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df24:	f7fb fe13 	bl	8009b4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df2c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	d012      	beq.n	800df5a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800df34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7f8 fc70 	bl	8006820 <lwip_htonl>
 800df40:	4602      	mov	r2, r0
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df46:	1ad3      	subs	r3, r2, r3
 800df48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df4a:	8912      	ldrh	r2, [r2, #8]
 800df4c:	4413      	add	r3, r2
  while (seg != NULL &&
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	429a      	cmp	r2, r3
 800df52:	f4bf aed9 	bcs.w	800dd08 <tcp_output+0x160>
 800df56:	e000      	b.n	800df5a <tcp_output+0x3b2>
      break;
 800df58:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d108      	bne.n	800df74 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800df6a:	e004      	b.n	800df76 <tcp_output+0x3ce>
    goto output_done;
 800df6c:	bf00      	nop
 800df6e:	e002      	b.n	800df76 <tcp_output+0x3ce>
    goto output_done;
 800df70:	bf00      	nop
 800df72:	e000      	b.n	800df76 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800df74:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	8b5b      	ldrh	r3, [r3, #26]
 800df7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df7e:	b29a      	uxth	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3728      	adds	r7, #40	@ 0x28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bdb0      	pop	{r4, r5, r7, pc}
 800df8e:	bf00      	nop

0800df90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <tcp_output_segment_busy+0x1c>
 800df9e:	4b09      	ldr	r3, [pc, #36]	@ (800dfc4 <tcp_output_segment_busy+0x34>)
 800dfa0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800dfa4:	4908      	ldr	r1, [pc, #32]	@ (800dfc8 <tcp_output_segment_busy+0x38>)
 800dfa6:	4809      	ldr	r0, [pc, #36]	@ (800dfcc <tcp_output_segment_busy+0x3c>)
 800dfa8:	f007 fd62 	bl	8015a70 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	7b9b      	ldrb	r3, [r3, #14]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d001      	beq.n	800dfba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	08017edc 	.word	0x08017edc
 800dfc8:	08018478 	.word	0x08018478
 800dfcc:	08017f30 	.word	0x08017f30

0800dfd0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dfd0:	b5b0      	push	{r4, r5, r7, lr}
 800dfd2:	b08c      	sub	sp, #48	@ 0x30
 800dfd4:	af04      	add	r7, sp, #16
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <tcp_output_segment+0x20>
 800dfe2:	4b71      	ldr	r3, [pc, #452]	@ (800e1a8 <tcp_output_segment+0x1d8>)
 800dfe4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800dfe8:	4970      	ldr	r1, [pc, #448]	@ (800e1ac <tcp_output_segment+0x1dc>)
 800dfea:	4871      	ldr	r0, [pc, #452]	@ (800e1b0 <tcp_output_segment+0x1e0>)
 800dfec:	f007 fd40 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d106      	bne.n	800e004 <tcp_output_segment+0x34>
 800dff6:	4b6c      	ldr	r3, [pc, #432]	@ (800e1a8 <tcp_output_segment+0x1d8>)
 800dff8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800dffc:	496d      	ldr	r1, [pc, #436]	@ (800e1b4 <tcp_output_segment+0x1e4>)
 800dffe:	486c      	ldr	r0, [pc, #432]	@ (800e1b0 <tcp_output_segment+0x1e0>)
 800e000:	f007 fd36 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d106      	bne.n	800e018 <tcp_output_segment+0x48>
 800e00a:	4b67      	ldr	r3, [pc, #412]	@ (800e1a8 <tcp_output_segment+0x1d8>)
 800e00c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e010:	4969      	ldr	r1, [pc, #420]	@ (800e1b8 <tcp_output_segment+0x1e8>)
 800e012:	4867      	ldr	r0, [pc, #412]	@ (800e1b0 <tcp_output_segment+0x1e0>)
 800e014:	f007 fd2c 	bl	8015a70 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7ff ffb9 	bl	800df90 <tcp_output_segment_busy>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e0bb      	b.n	800e1a0 <tcp_output_segment+0x1d0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68dc      	ldr	r4, [r3, #12]
 800e030:	4610      	mov	r0, r2
 800e032:	f7f8 fbf5 	bl	8006820 <lwip_htonl>
 800e036:	4603      	mov	r3, r0
 800e038:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	68dc      	ldr	r4, [r3, #12]
 800e042:	4610      	mov	r0, r2
 800e044:	f7f8 fbd6 	bl	80067f4 <lwip_htons>
 800e048:	4603      	mov	r3, r0
 800e04a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e054:	441a      	add	r2, r3
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	3314      	adds	r3, #20
 800e060:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	7a9b      	ldrb	r3, [r3, #10]
 800e066:	f003 0301 	and.w	r3, r3, #1
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d015      	beq.n	800e09a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	3304      	adds	r3, #4
 800e072:	461a      	mov	r2, r3
 800e074:	6879      	ldr	r1, [r7, #4]
 800e076:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e07a:	f7fc f975 	bl	800a368 <tcp_eff_send_mss_netif>
 800e07e:	4603      	mov	r3, r0
 800e080:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e082:	8b7b      	ldrh	r3, [r7, #26]
 800e084:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f8 fbc9 	bl	8006820 <lwip_htonl>
 800e08e:	4602      	mov	r2, r0
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	3304      	adds	r3, #4
 800e098:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da02      	bge.n	800e0aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10c      	bne.n	800e0cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e0b2:	4b42      	ldr	r3, [pc, #264]	@ (800e1bc <tcp_output_segment+0x1ec>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f8 fbad 	bl	8006820 <lwip_htonl>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68da      	ldr	r2, [r3, #12]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	1ad3      	subs	r3, r2, r3
 800e0d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	8959      	ldrh	r1, [r3, #10]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	8b3a      	ldrh	r2, [r7, #24]
 800e0e6:	1a8a      	subs	r2, r1, r2
 800e0e8:	b292      	uxth	r2, r2
 800e0ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	8919      	ldrh	r1, [r3, #8]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	8b3a      	ldrh	r2, [r7, #24]
 800e0f8:	1a8a      	subs	r2, r1, r2
 800e0fa:	b292      	uxth	r2, r2
 800e0fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	68fa      	ldr	r2, [r7, #12]
 800e104:	68d2      	ldr	r2, [r2, #12]
 800e106:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	741a      	strb	r2, [r3, #16]
 800e110:	2200      	movs	r2, #0
 800e112:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	68da      	ldr	r2, [r3, #12]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	7a9b      	ldrb	r3, [r3, #10]
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <tcp_output_segment+0x158>
 800e124:	2318      	movs	r3, #24
 800e126:	e000      	b.n	800e12a <tcp_output_segment+0x15a>
 800e128:	2314      	movs	r3, #20
 800e12a:	4413      	add	r3, r2
 800e12c:	69fa      	ldr	r2, [r7, #28]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d006      	beq.n	800e140 <tcp_output_segment+0x170>
 800e132:	4b1d      	ldr	r3, [pc, #116]	@ (800e1a8 <tcp_output_segment+0x1d8>)
 800e134:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e138:	4921      	ldr	r1, [pc, #132]	@ (800e1c0 <tcp_output_segment+0x1f0>)
 800e13a:	481d      	ldr	r0, [pc, #116]	@ (800e1b0 <tcp_output_segment+0x1e0>)
 800e13c:	f007 fc98 	bl	8015a70 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e148:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e14a:	68bd      	ldr	r5, [r7, #8]
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	68d4      	ldr	r4, [r2, #12]
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	462b      	mov	r3, r5
 800e158:	460a      	mov	r2, r1
 800e15a:	2106      	movs	r1, #6
 800e15c:	f7f8 ff9f 	bl	800709e <ip_chksum_pseudo>
 800e160:	4603      	mov	r3, r0
 800e162:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800e164:	4b17      	ldr	r3, [pc, #92]	@ (800e1c4 <tcp_output_segment+0x1f4>)
 800e166:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800e16a:	3301      	adds	r3, #1
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	4b15      	ldr	r3, [pc, #84]	@ (800e1c4 <tcp_output_segment+0x1f4>)
 800e170:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6858      	ldr	r0, [r3, #4]
 800e178:	68b9      	ldr	r1, [r7, #8]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	1d1c      	adds	r4, r3, #4
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	7add      	ldrb	r5, [r3, #11]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	7a9b      	ldrb	r3, [r3, #10]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	9202      	str	r2, [sp, #8]
 800e18a:	2206      	movs	r2, #6
 800e18c:	9201      	str	r2, [sp, #4]
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	462b      	mov	r3, r5
 800e192:	4622      	mov	r2, r4
 800e194:	f004 fdbe 	bl	8012d14 <ip4_output_if>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e19c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e1a8:	08017edc 	.word	0x08017edc
 800e1ac:	080184a0 	.word	0x080184a0
 800e1b0:	08017f30 	.word	0x08017f30
 800e1b4:	080184c0 	.word	0x080184c0
 800e1b8:	080184e0 	.word	0x080184e0
 800e1bc:	20003b68 	.word	0x20003b68
 800e1c0:	08018504 	.word	0x08018504
 800e1c4:	20003a9c 	.word	0x20003a9c

0800e1c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e1c8:	b5b0      	push	{r4, r5, r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <tcp_rexmit_rto_prepare+0x1c>
 800e1d6:	4b31      	ldr	r3, [pc, #196]	@ (800e29c <tcp_rexmit_rto_prepare+0xd4>)
 800e1d8:	f240 6263 	movw	r2, #1635	@ 0x663
 800e1dc:	4930      	ldr	r1, [pc, #192]	@ (800e2a0 <tcp_rexmit_rto_prepare+0xd8>)
 800e1de:	4831      	ldr	r0, [pc, #196]	@ (800e2a4 <tcp_rexmit_rto_prepare+0xdc>)
 800e1e0:	f007 fc46 	bl	8015a70 <iprintf>

  if (pcb->unacked == NULL) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d102      	bne.n	800e1f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e1ec:	f06f 0305 	mvn.w	r3, #5
 800e1f0:	e050      	b.n	800e294 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	e00b      	b.n	800e212 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff fec8 	bl	800df90 <tcp_output_segment_busy>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d002      	beq.n	800e20c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e206:	f06f 0305 	mvn.w	r3, #5
 800e20a:	e043      	b.n	800e294 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	60fb      	str	r3, [r7, #12]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1ef      	bne.n	800e1fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff feb8 	bl	800df90 <tcp_output_segment_busy>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e226:	f06f 0305 	mvn.w	r3, #5
 800e22a:	e033      	b.n	800e294 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	8b5b      	ldrh	r3, [r3, #26]
 800e246:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	4618      	mov	r0, r3
 800e258:	f7f8 fae2 	bl	8006820 <lwip_htonl>
 800e25c:	4604      	mov	r4, r0
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	891b      	ldrh	r3, [r3, #8]
 800e262:	461d      	mov	r5, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	899b      	ldrh	r3, [r3, #12]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f8 fac1 	bl	80067f4 <lwip_htons>
 800e272:	4603      	mov	r3, r0
 800e274:	b2db      	uxtb	r3, r3
 800e276:	f003 0303 	and.w	r3, r3, #3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <tcp_rexmit_rto_prepare+0xba>
 800e27e:	2301      	movs	r3, #1
 800e280:	e000      	b.n	800e284 <tcp_rexmit_rto_prepare+0xbc>
 800e282:	2300      	movs	r3, #0
 800e284:	442b      	add	r3, r5
 800e286:	18e2      	adds	r2, r4, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bdb0      	pop	{r4, r5, r7, pc}
 800e29c:	08017edc 	.word	0x08017edc
 800e2a0:	08018518 	.word	0x08018518
 800e2a4:	08017f30 	.word	0x08017f30

0800e2a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <tcp_rexmit_rto_commit+0x1c>
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ec <tcp_rexmit_rto_commit+0x44>)
 800e2b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e2bc:	490c      	ldr	r1, [pc, #48]	@ (800e2f0 <tcp_rexmit_rto_commit+0x48>)
 800e2be:	480d      	ldr	r0, [pc, #52]	@ (800e2f4 <tcp_rexmit_rto_commit+0x4c>)
 800e2c0:	f007 fbd6 	bl	8015a70 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2ca:	2bff      	cmp	r3, #255	@ 0xff
 800e2cc:	d007      	beq.n	800e2de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fc62 	bl	800dba8 <tcp_output>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	08017edc 	.word	0x08017edc
 800e2f0:	0801853c 	.word	0x0801853c
 800e2f4:	08017f30 	.word	0x08017f30

0800e2f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <tcp_rexmit_rto+0x1c>
 800e306:	4b0a      	ldr	r3, [pc, #40]	@ (800e330 <tcp_rexmit_rto+0x38>)
 800e308:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e30c:	4909      	ldr	r1, [pc, #36]	@ (800e334 <tcp_rexmit_rto+0x3c>)
 800e30e:	480a      	ldr	r0, [pc, #40]	@ (800e338 <tcp_rexmit_rto+0x40>)
 800e310:	f007 fbae 	bl	8015a70 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff ff57 	bl	800e1c8 <tcp_rexmit_rto_prepare>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff ffc1 	bl	800e2a8 <tcp_rexmit_rto_commit>
  }
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	08017edc 	.word	0x08017edc
 800e334:	08018560 	.word	0x08018560
 800e338:	08017f30 	.word	0x08017f30

0800e33c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e33c:	b590      	push	{r4, r7, lr}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <tcp_rexmit+0x1c>
 800e34a:	4b2f      	ldr	r3, [pc, #188]	@ (800e408 <tcp_rexmit+0xcc>)
 800e34c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e350:	492e      	ldr	r1, [pc, #184]	@ (800e40c <tcp_rexmit+0xd0>)
 800e352:	482f      	ldr	r0, [pc, #188]	@ (800e410 <tcp_rexmit+0xd4>)
 800e354:	f007 fb8c 	bl	8015a70 <iprintf>

  if (pcb->unacked == NULL) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e360:	f06f 0305 	mvn.w	r3, #5
 800e364:	e04c      	b.n	800e400 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e36a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7ff fe0f 	bl	800df90 <tcp_output_segment_busy>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e378:	f06f 0305 	mvn.w	r3, #5
 800e37c:	e040      	b.n	800e400 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	336c      	adds	r3, #108	@ 0x6c
 800e38a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e38c:	e002      	b.n	800e394 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d011      	beq.n	800e3c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f8 fa3b 	bl	8006820 <lwip_htonl>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f8 fa34 	bl	8006820 <lwip_htonl>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dbe6      	blt.n	800e38e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d103      	bne.n	800e3de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3e4:	2bff      	cmp	r3, #255	@ 0xff
 800e3e6:	d007      	beq.n	800e3f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e3fe:	2300      	movs	r3, #0
}
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	bd90      	pop	{r4, r7, pc}
 800e408:	08017edc 	.word	0x08017edc
 800e40c:	0801857c 	.word	0x0801857c
 800e410:	08017f30 	.word	0x08017f30

0800e414 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <tcp_rexmit_fast+0x1c>
 800e422:	4b2a      	ldr	r3, [pc, #168]	@ (800e4cc <tcp_rexmit_fast+0xb8>)
 800e424:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e428:	4929      	ldr	r1, [pc, #164]	@ (800e4d0 <tcp_rexmit_fast+0xbc>)
 800e42a:	482a      	ldr	r0, [pc, #168]	@ (800e4d4 <tcp_rexmit_fast+0xc0>)
 800e42c:	f007 fb20 	bl	8015a70 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e434:	2b00      	cmp	r3, #0
 800e436:	d044      	beq.n	800e4c2 <tcp_rexmit_fast+0xae>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	8b5b      	ldrh	r3, [r3, #26]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d13e      	bne.n	800e4c2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff ff79 	bl	800e33c <tcp_rexmit>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d138      	bne.n	800e4c2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e45c:	4293      	cmp	r3, r2
 800e45e:	bf28      	it	cs
 800e460:	4613      	movcs	r3, r2
 800e462:	b29b      	uxth	r3, r3
 800e464:	0fda      	lsrs	r2, r3, #31
 800e466:	4413      	add	r3, r2
 800e468:	105b      	asrs	r3, r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e478:	461a      	mov	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	429a      	cmp	r2, r3
 800e482:	d206      	bcs.n	800e492 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e49c:	4619      	mov	r1, r3
 800e49e:	0049      	lsls	r1, r1, #1
 800e4a0:	440b      	add	r3, r1
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	4413      	add	r3, r2
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	8b5b      	ldrh	r3, [r3, #26]
 800e4b2:	f043 0304 	orr.w	r3, r3, #4
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e4c2:	bf00      	nop
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	08017edc 	.word	0x08017edc
 800e4d0:	08018594 	.word	0x08018594
 800e4d4:	08017f30 	.word	0x08017f30

0800e4d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	607b      	str	r3, [r7, #4]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	817b      	strh	r3, [r7, #10]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e4ea:	897a      	ldrh	r2, [r7, #10]
 800e4ec:	893b      	ldrh	r3, [r7, #8]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	3314      	adds	r3, #20
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	2022      	movs	r0, #34	@ 0x22
 800e4fe:	f7f9 fa97 	bl	8007a30 <pbuf_alloc>
 800e502:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d04d      	beq.n	800e5a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e50a:	897b      	ldrh	r3, [r7, #10]
 800e50c:	3313      	adds	r3, #19
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	8952      	ldrh	r2, [r2, #10]
 800e512:	4293      	cmp	r3, r2
 800e514:	db06      	blt.n	800e524 <tcp_output_alloc_header_common+0x4c>
 800e516:	4b26      	ldr	r3, [pc, #152]	@ (800e5b0 <tcp_output_alloc_header_common+0xd8>)
 800e518:	f240 7223 	movw	r2, #1827	@ 0x723
 800e51c:	4925      	ldr	r1, [pc, #148]	@ (800e5b4 <tcp_output_alloc_header_common+0xdc>)
 800e51e:	4826      	ldr	r0, [pc, #152]	@ (800e5b8 <tcp_output_alloc_header_common+0xe0>)
 800e520:	f007 faa6 	bl	8015a70 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e52a:	8c3b      	ldrh	r3, [r7, #32]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f8 f961 	bl	80067f4 <lwip_htons>
 800e532:	4603      	mov	r3, r0
 800e534:	461a      	mov	r2, r3
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e53a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7f8 f959 	bl	80067f4 <lwip_htons>
 800e542:	4603      	mov	r3, r0
 800e544:	461a      	mov	r2, r3
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f7f8 f965 	bl	8006820 <lwip_htonl>
 800e556:	4602      	mov	r2, r0
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e55c:	897b      	ldrh	r3, [r7, #10]
 800e55e:	089b      	lsrs	r3, r3, #2
 800e560:	b29b      	uxth	r3, r3
 800e562:	3305      	adds	r3, #5
 800e564:	b29b      	uxth	r3, r3
 800e566:	031b      	lsls	r3, r3, #12
 800e568:	b29a      	uxth	r2, r3
 800e56a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4313      	orrs	r3, r2
 800e572:	b29b      	uxth	r3, r3
 800e574:	4618      	mov	r0, r3
 800e576:	f7f8 f93d 	bl	80067f4 <lwip_htons>
 800e57a:	4603      	mov	r3, r0
 800e57c:	461a      	mov	r2, r3
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e582:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e584:	4618      	mov	r0, r3
 800e586:	f7f8 f935 	bl	80067f4 <lwip_htons>
 800e58a:	4603      	mov	r3, r0
 800e58c:	461a      	mov	r2, r3
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	2200      	movs	r2, #0
 800e596:	741a      	strb	r2, [r3, #16]
 800e598:	2200      	movs	r2, #0
 800e59a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	749a      	strb	r2, [r3, #18]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e5a6:	697b      	ldr	r3, [r7, #20]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3718      	adds	r7, #24
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	08017edc 	.word	0x08017edc
 800e5b4:	080185b4 	.word	0x080185b4
 800e5b8:	08017f30 	.word	0x08017f30

0800e5bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e5bc:	b5b0      	push	{r4, r5, r7, lr}
 800e5be:	b08a      	sub	sp, #40	@ 0x28
 800e5c0:	af04      	add	r7, sp, #16
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	607b      	str	r3, [r7, #4]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	817b      	strh	r3, [r7, #10]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d106      	bne.n	800e5e2 <tcp_output_alloc_header+0x26>
 800e5d4:	4b15      	ldr	r3, [pc, #84]	@ (800e62c <tcp_output_alloc_header+0x70>)
 800e5d6:	f240 7242 	movw	r2, #1858	@ 0x742
 800e5da:	4915      	ldr	r1, [pc, #84]	@ (800e630 <tcp_output_alloc_header+0x74>)
 800e5dc:	4815      	ldr	r0, [pc, #84]	@ (800e634 <tcp_output_alloc_header+0x78>)
 800e5de:	f007 fa47 	bl	8015a70 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8adb      	ldrh	r3, [r3, #22]
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	8b12      	ldrh	r2, [r2, #24]
 800e5ee:	68f9      	ldr	r1, [r7, #12]
 800e5f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e5f2:	893d      	ldrh	r5, [r7, #8]
 800e5f4:	897c      	ldrh	r4, [r7, #10]
 800e5f6:	9103      	str	r1, [sp, #12]
 800e5f8:	2110      	movs	r1, #16
 800e5fa:	9102      	str	r1, [sp, #8]
 800e5fc:	9201      	str	r2, [sp, #4]
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	462a      	mov	r2, r5
 800e604:	4621      	mov	r1, r4
 800e606:	f7ff ff67 	bl	800e4d8 <tcp_output_alloc_header_common>
 800e60a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d006      	beq.n	800e620 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e61a:	441a      	add	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e620:	697b      	ldr	r3, [r7, #20]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bdb0      	pop	{r4, r5, r7, pc}
 800e62a:	bf00      	nop
 800e62c:	08017edc 	.word	0x08017edc
 800e630:	080185e4 	.word	0x080185e4
 800e634:	08017f30 	.word	0x08017f30

0800e638 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b088      	sub	sp, #32
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	4611      	mov	r1, r2
 800e644:	461a      	mov	r2, r3
 800e646:	460b      	mov	r3, r1
 800e648:	71fb      	strb	r3, [r7, #7]
 800e64a:	4613      	mov	r3, r2
 800e64c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d106      	bne.n	800e666 <tcp_output_fill_options+0x2e>
 800e658:	4b12      	ldr	r3, [pc, #72]	@ (800e6a4 <tcp_output_fill_options+0x6c>)
 800e65a:	f240 7256 	movw	r2, #1878	@ 0x756
 800e65e:	4912      	ldr	r1, [pc, #72]	@ (800e6a8 <tcp_output_fill_options+0x70>)
 800e660:	4812      	ldr	r0, [pc, #72]	@ (800e6ac <tcp_output_fill_options+0x74>)
 800e662:	f007 fa05 	bl	8015a70 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	3314      	adds	r3, #20
 800e670:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e672:	8bfb      	ldrh	r3, [r7, #30]
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	461a      	mov	r2, r3
 800e678:	79fb      	ldrb	r3, [r7, #7]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	f003 0304 	and.w	r3, r3, #4
 800e680:	4413      	add	r3, r2
 800e682:	3314      	adds	r3, #20
 800e684:	69ba      	ldr	r2, [r7, #24]
 800e686:	4413      	add	r3, r2
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d006      	beq.n	800e69c <tcp_output_fill_options+0x64>
 800e68e:	4b05      	ldr	r3, [pc, #20]	@ (800e6a4 <tcp_output_fill_options+0x6c>)
 800e690:	f240 7275 	movw	r2, #1909	@ 0x775
 800e694:	4906      	ldr	r1, [pc, #24]	@ (800e6b0 <tcp_output_fill_options+0x78>)
 800e696:	4805      	ldr	r0, [pc, #20]	@ (800e6ac <tcp_output_fill_options+0x74>)
 800e698:	f007 f9ea 	bl	8015a70 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e69c:	bf00      	nop
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08017edc 	.word	0x08017edc
 800e6a8:	0801860c 	.word	0x0801860c
 800e6ac:	08017f30 	.word	0x08017f30
 800e6b0:	08018504 	.word	0x08018504

0800e6b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08c      	sub	sp, #48	@ 0x30
 800e6b8:	af04      	add	r7, sp, #16
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <tcp_output_control_segment+0x22>
 800e6c8:	4b28      	ldr	r3, [pc, #160]	@ (800e76c <tcp_output_control_segment+0xb8>)
 800e6ca:	f240 7287 	movw	r2, #1927	@ 0x787
 800e6ce:	4928      	ldr	r1, [pc, #160]	@ (800e770 <tcp_output_control_segment+0xbc>)
 800e6d0:	4828      	ldr	r0, [pc, #160]	@ (800e774 <tcp_output_control_segment+0xc0>)
 800e6d2:	f007 f9cd 	bl	8015a70 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f7fe fa94 	bl	800cc08 <tcp_route>
 800e6e0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d102      	bne.n	800e6ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e6e8:	23fc      	movs	r3, #252	@ 0xfc
 800e6ea:	77fb      	strb	r3, [r7, #31]
 800e6ec:	e034      	b.n	800e758 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	891a      	ldrh	r2, [r3, #8]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2106      	movs	r1, #6
 800e700:	68b8      	ldr	r0, [r7, #8]
 800e702:	f7f8 fccc 	bl	800709e <ip_chksum_pseudo>
 800e706:	4603      	mov	r3, r0
 800e708:	461a      	mov	r2, r3
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	7adb      	ldrb	r3, [r3, #11]
 800e718:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	7a9b      	ldrb	r3, [r3, #10]
 800e71e:	777b      	strb	r3, [r7, #29]
 800e720:	e003      	b.n	800e72a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e722:	23ff      	movs	r3, #255	@ 0xff
 800e724:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800e726:	2300      	movs	r3, #0
 800e728:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800e72a:	4b13      	ldr	r3, [pc, #76]	@ (800e778 <tcp_output_control_segment+0xc4>)
 800e72c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 800e730:	3301      	adds	r3, #1
 800e732:	b29a      	uxth	r2, r3
 800e734:	4b10      	ldr	r3, [pc, #64]	@ (800e778 <tcp_output_control_segment+0xc4>)
 800e736:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e73a:	7fba      	ldrb	r2, [r7, #30]
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	9302      	str	r3, [sp, #8]
 800e740:	2306      	movs	r3, #6
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	7f7b      	ldrb	r3, [r7, #29]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4613      	mov	r3, r2
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	6879      	ldr	r1, [r7, #4]
 800e74e:	68b8      	ldr	r0, [r7, #8]
 800e750:	f004 fae0 	bl	8012d14 <ip4_output_if>
 800e754:	4603      	mov	r3, r0
 800e756:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e758:	68b8      	ldr	r0, [r7, #8]
 800e75a:	f7f9 fc4b 	bl	8007ff4 <pbuf_free>
  return err;
 800e75e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3720      	adds	r7, #32
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	08017edc 	.word	0x08017edc
 800e770:	08018634 	.word	0x08018634
 800e774:	08017f30 	.word	0x08017f30
 800e778:	20003a9c 	.word	0x20003a9c

0800e77c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e77c:	b590      	push	{r4, r7, lr}
 800e77e:	b08b      	sub	sp, #44	@ 0x2c
 800e780:	af04      	add	r7, sp, #16
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
 800e788:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d106      	bne.n	800e79e <tcp_rst+0x22>
 800e790:	4b1f      	ldr	r3, [pc, #124]	@ (800e810 <tcp_rst+0x94>)
 800e792:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e796:	491f      	ldr	r1, [pc, #124]	@ (800e814 <tcp_rst+0x98>)
 800e798:	481f      	ldr	r0, [pc, #124]	@ (800e818 <tcp_rst+0x9c>)
 800e79a:	f007 f969 	bl	8015a70 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <tcp_rst+0x36>
 800e7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800e810 <tcp_rst+0x94>)
 800e7a6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e7aa:	491c      	ldr	r1, [pc, #112]	@ (800e81c <tcp_rst+0xa0>)
 800e7ac:	481a      	ldr	r0, [pc, #104]	@ (800e818 <tcp_rst+0x9c>)
 800e7ae:	f007 f95f 	bl	8015a70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e7b6:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e7ba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e7bc:	7dfb      	ldrb	r3, [r7, #23]
 800e7be:	b29c      	uxth	r4, r3
 800e7c0:	68b8      	ldr	r0, [r7, #8]
 800e7c2:	f7f8 f82d 	bl	8006820 <lwip_htonl>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	8abb      	ldrh	r3, [r7, #20]
 800e7ca:	9303      	str	r3, [sp, #12]
 800e7cc:	2314      	movs	r3, #20
 800e7ce:	9302      	str	r3, [sp, #8]
 800e7d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	4621      	mov	r1, r4
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff fe7a 	bl	800e4d8 <tcp_output_alloc_header_common>
 800e7e4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00c      	beq.n	800e806 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e7ec:	7dfb      	ldrb	r3, [r7, #23]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	6939      	ldr	r1, [r7, #16]
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ff20 	bl	800e638 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	6939      	ldr	r1, [r7, #16]
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f7ff ff58 	bl	800e6b4 <tcp_output_control_segment>
 800e804:	e000      	b.n	800e808 <tcp_rst+0x8c>
    return;
 800e806:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e808:	371c      	adds	r7, #28
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd90      	pop	{r4, r7, pc}
 800e80e:	bf00      	nop
 800e810:	08017edc 	.word	0x08017edc
 800e814:	08018660 	.word	0x08018660
 800e818:	08017f30 	.word	0x08017f30
 800e81c:	0801867c 	.word	0x0801867c

0800e820 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e828:	2300      	movs	r3, #0
 800e82a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d106      	bne.n	800e844 <tcp_send_empty_ack+0x24>
 800e836:	4b28      	ldr	r3, [pc, #160]	@ (800e8d8 <tcp_send_empty_ack+0xb8>)
 800e838:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e83c:	4927      	ldr	r1, [pc, #156]	@ (800e8dc <tcp_send_empty_ack+0xbc>)
 800e83e:	4828      	ldr	r0, [pc, #160]	@ (800e8e0 <tcp_send_empty_ack+0xc0>)
 800e840:	f007 f916 	bl	8015a70 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	009b      	lsls	r3, r3, #2
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	f003 0304 	and.w	r3, r3, #4
 800e84e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e850:	7d7b      	ldrb	r3, [r7, #21]
 800e852:	b29c      	uxth	r4, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e858:	4618      	mov	r0, r3
 800e85a:	f7f7 ffe1 	bl	8006820 <lwip_htonl>
 800e85e:	4603      	mov	r3, r0
 800e860:	2200      	movs	r2, #0
 800e862:	4621      	mov	r1, r4
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff fea9 	bl	800e5bc <tcp_output_alloc_header>
 800e86a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d109      	bne.n	800e886 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	8b5b      	ldrh	r3, [r3, #26]
 800e876:	f043 0303 	orr.w	r3, r3, #3
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e880:	f06f 0301 	mvn.w	r3, #1
 800e884:	e023      	b.n	800e8ce <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e886:	7dbb      	ldrb	r3, [r7, #22]
 800e888:	7dfa      	ldrb	r2, [r7, #23]
 800e88a:	6939      	ldr	r1, [r7, #16]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff fed3 	bl	800e638 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	3304      	adds	r3, #4
 800e898:	6939      	ldr	r1, [r7, #16]
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff ff0a 	bl	800e6b4 <tcp_output_control_segment>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d007      	beq.n	800e8bc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	8b5b      	ldrh	r3, [r3, #26]
 800e8b0:	f043 0303 	orr.w	r3, r3, #3
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	835a      	strh	r2, [r3, #26]
 800e8ba:	e006      	b.n	800e8ca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	8b5b      	ldrh	r3, [r3, #26]
 800e8c0:	f023 0303 	bic.w	r3, r3, #3
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	371c      	adds	r7, #28
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd90      	pop	{r4, r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	08017edc 	.word	0x08017edc
 800e8dc:	08018698 	.word	0x08018698
 800e8e0:	08017f30 	.word	0x08017f30

0800e8e4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e8e4:	b590      	push	{r4, r7, lr}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <tcp_keepalive+0x20>
 800e8f6:	4b18      	ldr	r3, [pc, #96]	@ (800e958 <tcp_keepalive+0x74>)
 800e8f8:	f640 0224 	movw	r2, #2084	@ 0x824
 800e8fc:	4917      	ldr	r1, [pc, #92]	@ (800e95c <tcp_keepalive+0x78>)
 800e8fe:	4818      	ldr	r0, [pc, #96]	@ (800e960 <tcp_keepalive+0x7c>)
 800e900:	f007 f8b6 	bl	8015a70 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	b29c      	uxth	r4, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e90c:	3b01      	subs	r3, #1
 800e90e:	4618      	mov	r0, r3
 800e910:	f7f7 ff86 	bl	8006820 <lwip_htonl>
 800e914:	4603      	mov	r3, r0
 800e916:	2200      	movs	r2, #0
 800e918:	4621      	mov	r1, r4
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff fe4e 	bl	800e5bc <tcp_output_alloc_header>
 800e920:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d102      	bne.n	800e92e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e92c:	e010      	b.n	800e950 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	2200      	movs	r2, #0
 800e932:	6939      	ldr	r1, [r7, #16]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff fe7f 	bl	800e638 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	3304      	adds	r3, #4
 800e940:	6939      	ldr	r1, [r7, #16]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7ff feb6 	bl	800e6b4 <tcp_output_control_segment>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e950:	4618      	mov	r0, r3
 800e952:	371c      	adds	r7, #28
 800e954:	46bd      	mov	sp, r7
 800e956:	bd90      	pop	{r4, r7, pc}
 800e958:	08017edc 	.word	0x08017edc
 800e95c:	080186b8 	.word	0x080186b8
 800e960:	08017f30 	.word	0x08017f30

0800e964 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e964:	b590      	push	{r4, r7, lr}
 800e966:	b08b      	sub	sp, #44	@ 0x2c
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e96c:	2300      	movs	r3, #0
 800e96e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d106      	bne.n	800e986 <tcp_zero_window_probe+0x22>
 800e978:	4b4c      	ldr	r3, [pc, #304]	@ (800eaac <tcp_zero_window_probe+0x148>)
 800e97a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e97e:	494c      	ldr	r1, [pc, #304]	@ (800eab0 <tcp_zero_window_probe+0x14c>)
 800e980:	484c      	ldr	r0, [pc, #304]	@ (800eab4 <tcp_zero_window_probe+0x150>)
 800e982:	f007 f875 	bl	8015a70 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e98a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	e086      	b.n	800eaa4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e99c:	2bff      	cmp	r3, #255	@ 0xff
 800e99e:	d007      	beq.n	800e9b0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	899b      	ldrh	r3, [r3, #12]
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7f7 ff1b 	bl	80067f4 <lwip_htons>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d005      	beq.n	800e9d6 <tcp_zero_window_probe+0x72>
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	891b      	ldrh	r3, [r3, #8]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <tcp_zero_window_probe+0x72>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e000      	b.n	800e9d8 <tcp_zero_window_probe+0x74>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e9da:	7ffb      	ldrb	r3, [r7, #31]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	bf0c      	ite	eq
 800e9e0:	2301      	moveq	r3, #1
 800e9e2:	2300      	movne	r3, #0
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9ec:	b299      	uxth	r1, r3
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	8bba      	ldrh	r2, [r7, #28]
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff fde0 	bl	800e5bc <tcp_output_alloc_header>
 800e9fc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d102      	bne.n	800ea0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ea04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea08:	e04c      	b.n	800eaa4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ea10:	7ffb      	ldrb	r3, [r7, #31]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d011      	beq.n	800ea3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	b21b      	sxth	r3, r3
 800ea1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ea22:	b21c      	sxth	r4, r3
 800ea24:	2011      	movs	r0, #17
 800ea26:	f7f7 fee5 	bl	80067f4 <lwip_htons>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	b21b      	sxth	r3, r3
 800ea2e:	4323      	orrs	r3, r4
 800ea30:	b21b      	sxth	r3, r3
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	819a      	strh	r2, [r3, #12]
 800ea38:	e010      	b.n	800ea5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	3314      	adds	r3, #20
 800ea40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ea42:	6a3b      	ldr	r3, [r7, #32]
 800ea44:	6858      	ldr	r0, [r3, #4]
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	891a      	ldrh	r2, [r3, #8]
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	891b      	ldrh	r3, [r3, #8]
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	2201      	movs	r2, #1
 800ea56:	6939      	ldr	r1, [r7, #16]
 800ea58:	f7f9 fcd2 	bl	8008400 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7f7 fedc 	bl	8006820 <lwip_htonl>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	da02      	bge.n	800ea80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea84:	2200      	movs	r2, #0
 800ea86:	69b9      	ldr	r1, [r7, #24]
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7ff fdd5 	bl	800e638 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3304      	adds	r3, #4
 800ea94:	69b9      	ldr	r1, [r7, #24]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7ff fe0c 	bl	800e6b4 <tcp_output_control_segment>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eaa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	372c      	adds	r7, #44	@ 0x2c
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd90      	pop	{r4, r7, pc}
 800eaac:	08017edc 	.word	0x08017edc
 800eab0:	080186d4 	.word	0x080186d4
 800eab4:	08017f30 	.word	0x08017f30

0800eab8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800eac0:	f7f9 feee 	bl	80088a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eac4:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf0 <tcpip_tcp_timer+0x38>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <tcpip_tcp_timer+0x1c>
 800eacc:	4b09      	ldr	r3, [pc, #36]	@ (800eaf4 <tcpip_tcp_timer+0x3c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d005      	beq.n	800eae0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ead4:	2200      	movs	r2, #0
 800ead6:	4908      	ldr	r1, [pc, #32]	@ (800eaf8 <tcpip_tcp_timer+0x40>)
 800ead8:	20fa      	movs	r0, #250	@ 0xfa
 800eada:	f000 f8f3 	bl	800ecc4 <sys_timeout>
 800eade:	e003      	b.n	800eae8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800eae0:	4b06      	ldr	r3, [pc, #24]	@ (800eafc <tcpip_tcp_timer+0x44>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
  }
}
 800eae6:	bf00      	nop
 800eae8:	bf00      	nop
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20003b74 	.word	0x20003b74
 800eaf4:	20003b78 	.word	0x20003b78
 800eaf8:	0800eab9 	.word	0x0800eab9
 800eafc:	20003bc0 	.word	0x20003bc0

0800eb00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800eb04:	4b0a      	ldr	r3, [pc, #40]	@ (800eb30 <tcp_timer_needed+0x30>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10f      	bne.n	800eb2c <tcp_timer_needed+0x2c>
 800eb0c:	4b09      	ldr	r3, [pc, #36]	@ (800eb34 <tcp_timer_needed+0x34>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d103      	bne.n	800eb1c <tcp_timer_needed+0x1c>
 800eb14:	4b08      	ldr	r3, [pc, #32]	@ (800eb38 <tcp_timer_needed+0x38>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d007      	beq.n	800eb2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800eb1c:	4b04      	ldr	r3, [pc, #16]	@ (800eb30 <tcp_timer_needed+0x30>)
 800eb1e:	2201      	movs	r2, #1
 800eb20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eb22:	2200      	movs	r2, #0
 800eb24:	4905      	ldr	r1, [pc, #20]	@ (800eb3c <tcp_timer_needed+0x3c>)
 800eb26:	20fa      	movs	r0, #250	@ 0xfa
 800eb28:	f000 f8cc 	bl	800ecc4 <sys_timeout>
  }
}
 800eb2c:	bf00      	nop
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20003bc0 	.word	0x20003bc0
 800eb34:	20003b74 	.word	0x20003b74
 800eb38:	20003b78 	.word	0x20003b78
 800eb3c:	0800eab9 	.word	0x0800eab9

0800eb40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eb4c:	2006      	movs	r0, #6
 800eb4e:	f7f8 fc43 	bl	80073d8 <memp_malloc>
 800eb52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d109      	bne.n	800eb6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d151      	bne.n	800ec04 <sys_timeout_abs+0xc4>
 800eb60:	4b2a      	ldr	r3, [pc, #168]	@ (800ec0c <sys_timeout_abs+0xcc>)
 800eb62:	22be      	movs	r2, #190	@ 0xbe
 800eb64:	492a      	ldr	r1, [pc, #168]	@ (800ec10 <sys_timeout_abs+0xd0>)
 800eb66:	482b      	ldr	r0, [pc, #172]	@ (800ec14 <sys_timeout_abs+0xd4>)
 800eb68:	f006 ff82 	bl	8015a70 <iprintf>
    return;
 800eb6c:	e04a      	b.n	800ec04 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	2200      	movs	r2, #0
 800eb72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eb86:	4b24      	ldr	r3, [pc, #144]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800eb8e:	4a22      	ldr	r2, [pc, #136]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	6013      	str	r3, [r2, #0]
    return;
 800eb94:	e037      	b.n	800ec06 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	685a      	ldr	r2, [r3, #4]
 800eb9a:	4b1f      	ldr	r3, [pc, #124]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	0fdb      	lsrs	r3, r3, #31
 800eba4:	f003 0301 	and.w	r3, r3, #1
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d007      	beq.n	800ebbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ebae:	4b1a      	ldr	r3, [pc, #104]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ebb6:	4a18      	ldr	r2, [pc, #96]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	e023      	b.n	800ec06 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ebbe:	4b16      	ldr	r3, [pc, #88]	@ (800ec18 <sys_timeout_abs+0xd8>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	617b      	str	r3, [r7, #20]
 800ebc4:	e01a      	b.n	800ebfc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00b      	beq.n	800ebe6 <sys_timeout_abs+0xa6>
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	0fdb      	lsrs	r3, r3, #31
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d007      	beq.n	800ebf6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	693a      	ldr	r2, [r7, #16]
 800ebf2:	601a      	str	r2, [r3, #0]
        break;
 800ebf4:	e007      	b.n	800ec06 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	617b      	str	r3, [r7, #20]
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1e1      	bne.n	800ebc6 <sys_timeout_abs+0x86>
 800ec02:	e000      	b.n	800ec06 <sys_timeout_abs+0xc6>
    return;
 800ec04:	bf00      	nop
      }
    }
  }
}
 800ec06:	3718      	adds	r7, #24
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	080186f8 	.word	0x080186f8
 800ec10:	0801872c 	.word	0x0801872c
 800ec14:	0801876c 	.word	0x0801876c
 800ec18:	20003bb8 	.word	0x20003bb8

0800ec1c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	4798      	blx	r3

  now = sys_now();
 800ec2e:	f005 f98b 	bl	8013f48 <sys_now>
 800ec32:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	4b0f      	ldr	r3, [pc, #60]	@ (800ec78 <lwip_cyclic_timer+0x5c>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	1ad3      	subs	r3, r2, r3
 800ec46:	0fdb      	lsrs	r3, r3, #31
 800ec48:	f003 0301 	and.w	r3, r3, #1
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d009      	beq.n	800ec66 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	681a      	ldr	r2, [r3, #0]
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	4413      	add	r3, r2
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	4907      	ldr	r1, [pc, #28]	@ (800ec7c <lwip_cyclic_timer+0x60>)
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7ff ff6e 	bl	800eb40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ec64:	e004      	b.n	800ec70 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	4904      	ldr	r1, [pc, #16]	@ (800ec7c <lwip_cyclic_timer+0x60>)
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f7ff ff68 	bl	800eb40 <sys_timeout_abs>
}
 800ec70:	bf00      	nop
 800ec72:	3718      	adds	r7, #24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20003bbc 	.word	0x20003bbc
 800ec7c:	0800ec1d 	.word	0x0800ec1d

0800ec80 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ec86:	2301      	movs	r3, #1
 800ec88:	607b      	str	r3, [r7, #4]
 800ec8a:	e00e      	b.n	800ecaa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ec8c:	4a0b      	ldr	r2, [pc, #44]	@ (800ecbc <sys_timeouts_init+0x3c>)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	4a08      	ldr	r2, [pc, #32]	@ (800ecbc <sys_timeouts_init+0x3c>)
 800ec9a:	4413      	add	r3, r2
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	4908      	ldr	r1, [pc, #32]	@ (800ecc0 <sys_timeouts_init+0x40>)
 800eca0:	f000 f810 	bl	800ecc4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3301      	adds	r3, #1
 800eca8:	607b      	str	r3, [r7, #4]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b05      	cmp	r3, #5
 800ecae:	d9ed      	bls.n	800ec8c <sys_timeouts_init+0xc>
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	bf00      	nop
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08019854 	.word	0x08019854
 800ecc0:	0800ec1d 	.word	0x0800ec1d

0800ecc4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecd6:	d306      	bcc.n	800ece6 <sys_timeout+0x22>
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed04 <sys_timeout+0x40>)
 800ecda:	f240 1229 	movw	r2, #297	@ 0x129
 800ecde:	490a      	ldr	r1, [pc, #40]	@ (800ed08 <sys_timeout+0x44>)
 800ece0:	480a      	ldr	r0, [pc, #40]	@ (800ed0c <sys_timeout+0x48>)
 800ece2:	f006 fec5 	bl	8015a70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ece6:	f005 f92f 	bl	8013f48 <sys_now>
 800ecea:	4602      	mov	r2, r0
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	4413      	add	r3, r2
 800ecf0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	68b9      	ldr	r1, [r7, #8]
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f7ff ff22 	bl	800eb40 <sys_timeout_abs>
#endif
}
 800ecfc:	bf00      	nop
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	080186f8 	.word	0x080186f8
 800ed08:	08018794 	.word	0x08018794
 800ed0c:	0801876c 	.word	0x0801876c

0800ed10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed14:	f006 fdac 	bl	8015870 <rand>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	4b01      	ldr	r3, [pc, #4]	@ (800ed30 <udp_init+0x20>)
 800ed2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed2c:	bf00      	nop
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20000010 	.word	0x20000010

0800ed34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ed3e:	4b17      	ldr	r3, [pc, #92]	@ (800ed9c <udp_new_port+0x68>)
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	b291      	uxth	r1, r2
 800ed46:	4a15      	ldr	r2, [pc, #84]	@ (800ed9c <udp_new_port+0x68>)
 800ed48:	8011      	strh	r1, [r2, #0]
 800ed4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d103      	bne.n	800ed5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ed52:	4b12      	ldr	r3, [pc, #72]	@ (800ed9c <udp_new_port+0x68>)
 800ed54:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ed58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed5a:	4b11      	ldr	r3, [pc, #68]	@ (800eda0 <udp_new_port+0x6c>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	603b      	str	r3, [r7, #0]
 800ed60:	e011      	b.n	800ed86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	8a5a      	ldrh	r2, [r3, #18]
 800ed66:	4b0d      	ldr	r3, [pc, #52]	@ (800ed9c <udp_new_port+0x68>)
 800ed68:	881b      	ldrh	r3, [r3, #0]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d108      	bne.n	800ed80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ed6e:	88fb      	ldrh	r3, [r7, #6]
 800ed70:	3301      	adds	r3, #1
 800ed72:	80fb      	strh	r3, [r7, #6]
 800ed74:	88fb      	ldrh	r3, [r7, #6]
 800ed76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed7a:	d3e0      	bcc.n	800ed3e <udp_new_port+0xa>
        return 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e007      	b.n	800ed90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	603b      	str	r3, [r7, #0]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1ea      	bne.n	800ed62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ed8c:	4b03      	ldr	r3, [pc, #12]	@ (800ed9c <udp_new_port+0x68>)
 800ed8e:	881b      	ldrh	r3, [r3, #0]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	20000010 	.word	0x20000010
 800eda0:	20003bc4 	.word	0x20003bc4

0800eda4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d105      	bne.n	800edc4 <udp_input_local_match+0x20>
 800edb8:	4b27      	ldr	r3, [pc, #156]	@ (800ee58 <udp_input_local_match+0xb4>)
 800edba:	2287      	movs	r2, #135	@ 0x87
 800edbc:	4927      	ldr	r1, [pc, #156]	@ (800ee5c <udp_input_local_match+0xb8>)
 800edbe:	4828      	ldr	r0, [pc, #160]	@ (800ee60 <udp_input_local_match+0xbc>)
 800edc0:	f006 fe56 	bl	8015a70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d105      	bne.n	800edd6 <udp_input_local_match+0x32>
 800edca:	4b23      	ldr	r3, [pc, #140]	@ (800ee58 <udp_input_local_match+0xb4>)
 800edcc:	2288      	movs	r2, #136	@ 0x88
 800edce:	4925      	ldr	r1, [pc, #148]	@ (800ee64 <udp_input_local_match+0xc0>)
 800edd0:	4823      	ldr	r0, [pc, #140]	@ (800ee60 <udp_input_local_match+0xbc>)
 800edd2:	f006 fe4d 	bl	8015a70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	7a1b      	ldrb	r3, [r3, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00b      	beq.n	800edf6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	7a1a      	ldrb	r2, [r3, #8]
 800ede2:	4b21      	ldr	r3, [pc, #132]	@ (800ee68 <udp_input_local_match+0xc4>)
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800edea:	3301      	adds	r3, #1
 800edec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edee:	429a      	cmp	r2, r3
 800edf0:	d001      	beq.n	800edf6 <udp_input_local_match+0x52>
    return 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e02b      	b.n	800ee4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800edf6:	79fb      	ldrb	r3, [r7, #7]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d018      	beq.n	800ee2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d013      	beq.n	800ee2a <udp_input_local_match+0x86>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00f      	beq.n	800ee2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee0a:	4b17      	ldr	r3, [pc, #92]	@ (800ee68 <udp_input_local_match+0xc4>)
 800ee0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee12:	d00a      	beq.n	800ee2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b13      	ldr	r3, [pc, #76]	@ (800ee68 <udp_input_local_match+0xc4>)
 800ee1a:	695b      	ldr	r3, [r3, #20]
 800ee1c:	405a      	eors	r2, r3
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	3308      	adds	r3, #8
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d110      	bne.n	800ee4c <udp_input_local_match+0xa8>
          return 1;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e00f      	b.n	800ee4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d009      	beq.n	800ee48 <udp_input_local_match+0xa4>
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d005      	beq.n	800ee48 <udp_input_local_match+0xa4>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	4b09      	ldr	r3, [pc, #36]	@ (800ee68 <udp_input_local_match+0xc4>)
 800ee42:	695b      	ldr	r3, [r3, #20]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d101      	bne.n	800ee4c <udp_input_local_match+0xa8>
        return 1;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	080187e0 	.word	0x080187e0
 800ee5c:	08018810 	.word	0x08018810
 800ee60:	08018834 	.word	0x08018834
 800ee64:	0801885c 	.word	0x0801885c
 800ee68:	20000aa8 	.word	0x20000aa8

0800ee6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ee6c:	b590      	push	{r4, r7, lr}
 800ee6e:	b08d      	sub	sp, #52	@ 0x34
 800ee70:	af02      	add	r7, sp, #8
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ee76:	2300      	movs	r3, #0
 800ee78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d105      	bne.n	800ee8c <udp_input+0x20>
 800ee80:	4b88      	ldr	r3, [pc, #544]	@ (800f0a4 <udp_input+0x238>)
 800ee82:	22cf      	movs	r2, #207	@ 0xcf
 800ee84:	4988      	ldr	r1, [pc, #544]	@ (800f0a8 <udp_input+0x23c>)
 800ee86:	4889      	ldr	r0, [pc, #548]	@ (800f0ac <udp_input+0x240>)
 800ee88:	f006 fdf2 	bl	8015a70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d105      	bne.n	800ee9e <udp_input+0x32>
 800ee92:	4b84      	ldr	r3, [pc, #528]	@ (800f0a4 <udp_input+0x238>)
 800ee94:	22d0      	movs	r2, #208	@ 0xd0
 800ee96:	4986      	ldr	r1, [pc, #536]	@ (800f0b0 <udp_input+0x244>)
 800ee98:	4884      	ldr	r0, [pc, #528]	@ (800f0ac <udp_input+0x240>)
 800ee9a:	f006 fde9 	bl	8015a70 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800ee9e:	4b85      	ldr	r3, [pc, #532]	@ (800f0b4 <udp_input+0x248>)
 800eea0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800eea4:	3301      	adds	r3, #1
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	4b82      	ldr	r3, [pc, #520]	@ (800f0b4 <udp_input+0x248>)
 800eeaa:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	895b      	ldrh	r3, [r3, #10]
 800eeb2:	2b07      	cmp	r3, #7
 800eeb4:	d813      	bhi.n	800eede <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800eeb6:	4b7f      	ldr	r3, [pc, #508]	@ (800f0b4 <udp_input+0x248>)
 800eeb8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800eebc:	3301      	adds	r3, #1
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	4b7c      	ldr	r3, [pc, #496]	@ (800f0b4 <udp_input+0x248>)
 800eec2:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 800eec6:	4b7b      	ldr	r3, [pc, #492]	@ (800f0b4 <udp_input+0x248>)
 800eec8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800eecc:	3301      	adds	r3, #1
 800eece:	b29a      	uxth	r2, r3
 800eed0:	4b78      	ldr	r3, [pc, #480]	@ (800f0b4 <udp_input+0x248>)
 800eed2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7f9 f88c 	bl	8007ff4 <pbuf_free>
    goto end;
 800eedc:	e124      	b.n	800f128 <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eee4:	4b74      	ldr	r3, [pc, #464]	@ (800f0b8 <udp_input+0x24c>)
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	4a73      	ldr	r2, [pc, #460]	@ (800f0b8 <udp_input+0x24c>)
 800eeea:	6812      	ldr	r2, [r2, #0]
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f004 f86a 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 800eef4:	4603      	mov	r3, r0
 800eef6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7f7 fc78 	bl	80067f4 <lwip_htons>
 800ef04:	4603      	mov	r3, r0
 800ef06:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	885b      	ldrh	r3, [r3, #2]
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7f7 fc70 	bl	80067f4 <lwip_htons>
 800ef14:	4603      	mov	r3, r0
 800ef16:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef20:	2300      	movs	r3, #0
 800ef22:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef24:	4b65      	ldr	r3, [pc, #404]	@ (800f0bc <udp_input+0x250>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef2a:	e05d      	b.n	800efe8 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	8a5b      	ldrh	r3, [r3, #18]
 800ef30:	89fa      	ldrh	r2, [r7, #14]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d153      	bne.n	800efde <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef36:	7cfb      	ldrb	r3, [r7, #19]
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef3e:	f7ff ff31 	bl	800eda4 <udp_input_local_match>
 800ef42:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d04a      	beq.n	800efde <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ef48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4a:	7c1b      	ldrb	r3, [r3, #16]
 800ef4c:	f003 0304 	and.w	r3, r3, #4
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d11d      	bne.n	800ef90 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d102      	bne.n	800ef60 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ef5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5c:	61fb      	str	r3, [r7, #28]
 800ef5e:	e017      	b.n	800ef90 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ef60:	7cfb      	ldrb	r3, [r7, #19]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d014      	beq.n	800ef90 <udp_input+0x124>
 800ef66:	4b54      	ldr	r3, [pc, #336]	@ (800f0b8 <udp_input+0x24c>)
 800ef68:	695b      	ldr	r3, [r3, #20]
 800ef6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef6e:	d10f      	bne.n	800ef90 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	3304      	adds	r3, #4
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d008      	beq.n	800ef90 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	3304      	adds	r3, #4
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d101      	bne.n	800ef90 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ef90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef92:	8a9b      	ldrh	r3, [r3, #20]
 800ef94:	8a3a      	ldrh	r2, [r7, #16]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d121      	bne.n	800efde <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d005      	beq.n	800efae <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800efa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	4b44      	ldr	r3, [pc, #272]	@ (800f0b8 <udp_input+0x24c>)
 800efa8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efaa:	429a      	cmp	r2, r3
 800efac:	d117      	bne.n	800efde <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00b      	beq.n	800efcc <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb6:	68da      	ldr	r2, [r3, #12]
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800efbc:	4b3f      	ldr	r3, [pc, #252]	@ (800f0bc <udp_input+0x250>)
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800efc4:	4a3d      	ldr	r2, [pc, #244]	@ (800f0bc <udp_input+0x250>)
 800efc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800efca:	e010      	b.n	800efee <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800efcc:	4b39      	ldr	r3, [pc, #228]	@ (800f0b4 <udp_input+0x248>)
 800efce:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800efd2:	3301      	adds	r3, #1
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	4b37      	ldr	r3, [pc, #220]	@ (800f0b4 <udp_input+0x248>)
 800efd8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 800efdc:	e007      	b.n	800efee <udp_input+0x182>
      }
    }

    prev = pcb;
 800efde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800efe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efea:	2b00      	cmp	r3, #0
 800efec:	d19e      	bne.n	800ef2c <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800efee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d101      	bne.n	800eff8 <udp_input+0x18c>
    pcb = uncon_pcb;
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800eff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effa:	2b00      	cmp	r3, #0
 800effc:	d002      	beq.n	800f004 <udp_input+0x198>
    for_us = 1;
 800effe:	2301      	movs	r3, #1
 800f000:	76fb      	strb	r3, [r7, #27]
 800f002:	e00a      	b.n	800f01a <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	3304      	adds	r3, #4
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	4b2b      	ldr	r3, [pc, #172]	@ (800f0b8 <udp_input+0x24c>)
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	429a      	cmp	r2, r3
 800f010:	bf0c      	ite	eq
 800f012:	2301      	moveq	r3, #1
 800f014:	2300      	movne	r3, #0
 800f016:	b2db      	uxtb	r3, r3
 800f018:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f01a:	7efb      	ldrb	r3, [r7, #27]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d07f      	beq.n	800f120 <udp_input+0x2b4>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	88db      	ldrh	r3, [r3, #6]
 800f024:	b29b      	uxth	r3, r3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00b      	beq.n	800f042 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	891a      	ldrh	r2, [r3, #8]
 800f02e:	4b24      	ldr	r3, [pc, #144]	@ (800f0c0 <udp_input+0x254>)
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	4b24      	ldr	r3, [pc, #144]	@ (800f0c4 <udp_input+0x258>)
 800f034:	2111      	movs	r1, #17
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7f8 f831 	bl	800709e <ip_chksum_pseudo>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d173      	bne.n	800f12a <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f042:	2108      	movs	r1, #8
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7f8 ff4f 	bl	8007ee8 <pbuf_remove_header>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d012      	beq.n	800f076 <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f050:	4b14      	ldr	r3, [pc, #80]	@ (800f0a4 <udp_input+0x238>)
 800f052:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f056:	491c      	ldr	r1, [pc, #112]	@ (800f0c8 <udp_input+0x25c>)
 800f058:	4814      	ldr	r0, [pc, #80]	@ (800f0ac <udp_input+0x240>)
 800f05a:	f006 fd09 	bl	8015a70 <iprintf>
      UDP_STATS_INC(udp.drop);
 800f05e:	4b15      	ldr	r3, [pc, #84]	@ (800f0b4 <udp_input+0x248>)
 800f060:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f064:	3301      	adds	r3, #1
 800f066:	b29a      	uxth	r2, r3
 800f068:	4b12      	ldr	r3, [pc, #72]	@ (800f0b4 <udp_input+0x248>)
 800f06a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7f8 ffc0 	bl	8007ff4 <pbuf_free>
      goto end;
 800f074:	e058      	b.n	800f128 <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800f076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d027      	beq.n	800f0cc <udp_input+0x260>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f086:	699c      	ldr	r4, [r3, #24]
 800f088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f08a:	69d8      	ldr	r0, [r3, #28]
 800f08c:	8a3b      	ldrh	r3, [r7, #16]
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c4 <udp_input+0x258>)
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f096:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f098:	e05b      	b.n	800f152 <udp_input+0x2e6>
        pbuf_free(p);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7f8 ffaa 	bl	8007ff4 <pbuf_free>
        goto end;
 800f0a0:	e042      	b.n	800f128 <udp_input+0x2bc>
 800f0a2:	bf00      	nop
 800f0a4:	080187e0 	.word	0x080187e0
 800f0a8:	08018884 	.word	0x08018884
 800f0ac:	08018834 	.word	0x08018834
 800f0b0:	0801889c 	.word	0x0801889c
 800f0b4:	20003a9c 	.word	0x20003a9c
 800f0b8:	20000aa8 	.word	0x20000aa8
 800f0bc:	20003bc4 	.word	0x20003bc4
 800f0c0:	20000abc 	.word	0x20000abc
 800f0c4:	20000ab8 	.word	0x20000ab8
 800f0c8:	080188b8 	.word	0x080188b8
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f0cc:	7cfb      	ldrb	r3, [r7, #19]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d112      	bne.n	800f0f8 <udp_input+0x28c>
 800f0d2:	4b21      	ldr	r3, [pc, #132]	@ (800f158 <udp_input+0x2ec>)
 800f0d4:	695b      	ldr	r3, [r3, #20]
 800f0d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0da:	2be0      	cmp	r3, #224	@ 0xe0
 800f0dc:	d00c      	beq.n	800f0f8 <udp_input+0x28c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f0de:	4b1e      	ldr	r3, [pc, #120]	@ (800f158 <udp_input+0x2ec>)
 800f0e0:	899b      	ldrh	r3, [r3, #12]
 800f0e2:	3308      	adds	r3, #8
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	b21b      	sxth	r3, r3
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7f8 ff6f 	bl	8007fce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f0f0:	2103      	movs	r1, #3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f003 fb1e 	bl	8012734 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800f0f8:	4b18      	ldr	r3, [pc, #96]	@ (800f15c <udp_input+0x2f0>)
 800f0fa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f0fe:	3301      	adds	r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	4b16      	ldr	r3, [pc, #88]	@ (800f15c <udp_input+0x2f0>)
 800f104:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 800f108:	4b14      	ldr	r3, [pc, #80]	@ (800f15c <udp_input+0x2f0>)
 800f10a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f10e:	3301      	adds	r3, #1
 800f110:	b29a      	uxth	r2, r3
 800f112:	4b12      	ldr	r3, [pc, #72]	@ (800f15c <udp_input+0x2f0>)
 800f114:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7f8 ff6b 	bl	8007ff4 <pbuf_free>
  return;
 800f11e:	e018      	b.n	800f152 <udp_input+0x2e6>
    pbuf_free(p);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7f8 ff67 	bl	8007ff4 <pbuf_free>
  return;
 800f126:	e014      	b.n	800f152 <udp_input+0x2e6>
 800f128:	e013      	b.n	800f152 <udp_input+0x2e6>
            goto chkerr;
 800f12a:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800f12c:	4b0b      	ldr	r3, [pc, #44]	@ (800f15c <udp_input+0x2f0>)
 800f12e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800f132:	3301      	adds	r3, #1
 800f134:	b29a      	uxth	r2, r3
 800f136:	4b09      	ldr	r3, [pc, #36]	@ (800f15c <udp_input+0x2f0>)
 800f138:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
  UDP_STATS_INC(udp.drop);
 800f13c:	4b07      	ldr	r3, [pc, #28]	@ (800f15c <udp_input+0x2f0>)
 800f13e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800f142:	3301      	adds	r3, #1
 800f144:	b29a      	uxth	r2, r3
 800f146:	4b05      	ldr	r3, [pc, #20]	@ (800f15c <udp_input+0x2f0>)
 800f148:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7f8 ff51 	bl	8007ff4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f152:	372c      	adds	r7, #44	@ 0x2c
 800f154:	46bd      	mov	sp, r7
 800f156:	bd90      	pop	{r4, r7, pc}
 800f158:	20000aa8 	.word	0x20000aa8
 800f15c:	20003a9c 	.word	0x20003a9c

0800f160 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af02      	add	r7, sp, #8
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]
 800f16c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d109      	bne.n	800f188 <udp_sendto+0x28>
 800f174:	4b27      	ldr	r3, [pc, #156]	@ (800f214 <udp_sendto+0xb4>)
 800f176:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f17a:	4927      	ldr	r1, [pc, #156]	@ (800f218 <udp_sendto+0xb8>)
 800f17c:	4827      	ldr	r0, [pc, #156]	@ (800f21c <udp_sendto+0xbc>)
 800f17e:	f006 fc77 	bl	8015a70 <iprintf>
 800f182:	f06f 030f 	mvn.w	r3, #15
 800f186:	e040      	b.n	800f20a <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d109      	bne.n	800f1a2 <udp_sendto+0x42>
 800f18e:	4b21      	ldr	r3, [pc, #132]	@ (800f214 <udp_sendto+0xb4>)
 800f190:	f240 2219 	movw	r2, #537	@ 0x219
 800f194:	4922      	ldr	r1, [pc, #136]	@ (800f220 <udp_sendto+0xc0>)
 800f196:	4821      	ldr	r0, [pc, #132]	@ (800f21c <udp_sendto+0xbc>)
 800f198:	f006 fc6a 	bl	8015a70 <iprintf>
 800f19c:	f06f 030f 	mvn.w	r3, #15
 800f1a0:	e033      	b.n	800f20a <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d109      	bne.n	800f1bc <udp_sendto+0x5c>
 800f1a8:	4b1a      	ldr	r3, [pc, #104]	@ (800f214 <udp_sendto+0xb4>)
 800f1aa:	f240 221a 	movw	r2, #538	@ 0x21a
 800f1ae:	491d      	ldr	r1, [pc, #116]	@ (800f224 <udp_sendto+0xc4>)
 800f1b0:	481a      	ldr	r0, [pc, #104]	@ (800f21c <udp_sendto+0xbc>)
 800f1b2:	f006 fc5d 	bl	8015a70 <iprintf>
 800f1b6:	f06f 030f 	mvn.w	r3, #15
 800f1ba:	e026      	b.n	800f20a <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	7a1b      	ldrb	r3, [r3, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d006      	beq.n	800f1d2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	7a1b      	ldrb	r3, [r3, #8]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f8 fbcf 	bl	800796c <netif_get_by_index>
 800f1ce:	6178      	str	r0, [r7, #20]
 800f1d0:	e003      	b.n	800f1da <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f003 fb4c 	bl	8012870 <ip4_route>
 800f1d8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10a      	bne.n	800f1f6 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 800f1e0:	4b11      	ldr	r3, [pc, #68]	@ (800f228 <udp_sendto+0xc8>)
 800f1e2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f228 <udp_sendto+0xc8>)
 800f1ec:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 800f1f0:	f06f 0303 	mvn.w	r3, #3
 800f1f4:	e009      	b.n	800f20a <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f1f6:	887a      	ldrh	r2, [r7, #2]
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	68b9      	ldr	r1, [r7, #8]
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f000 f812 	bl	800f22c <udp_sendto_if>
 800f208:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	080187e0 	.word	0x080187e0
 800f218:	08018904 	.word	0x08018904
 800f21c:	08018834 	.word	0x08018834
 800f220:	0801891c 	.word	0x0801891c
 800f224:	08018938 	.word	0x08018938
 800f228:	20003a9c 	.word	0x20003a9c

0800f22c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af02      	add	r7, sp, #8
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	60b9      	str	r1, [r7, #8]
 800f236:	607a      	str	r2, [r7, #4]
 800f238:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d109      	bne.n	800f254 <udp_sendto_if+0x28>
 800f240:	4b2e      	ldr	r3, [pc, #184]	@ (800f2fc <udp_sendto_if+0xd0>)
 800f242:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f246:	492e      	ldr	r1, [pc, #184]	@ (800f300 <udp_sendto_if+0xd4>)
 800f248:	482e      	ldr	r0, [pc, #184]	@ (800f304 <udp_sendto_if+0xd8>)
 800f24a:	f006 fc11 	bl	8015a70 <iprintf>
 800f24e:	f06f 030f 	mvn.w	r3, #15
 800f252:	e04f      	b.n	800f2f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d109      	bne.n	800f26e <udp_sendto_if+0x42>
 800f25a:	4b28      	ldr	r3, [pc, #160]	@ (800f2fc <udp_sendto_if+0xd0>)
 800f25c:	f240 2281 	movw	r2, #641	@ 0x281
 800f260:	4929      	ldr	r1, [pc, #164]	@ (800f308 <udp_sendto_if+0xdc>)
 800f262:	4828      	ldr	r0, [pc, #160]	@ (800f304 <udp_sendto_if+0xd8>)
 800f264:	f006 fc04 	bl	8015a70 <iprintf>
 800f268:	f06f 030f 	mvn.w	r3, #15
 800f26c:	e042      	b.n	800f2f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d109      	bne.n	800f288 <udp_sendto_if+0x5c>
 800f274:	4b21      	ldr	r3, [pc, #132]	@ (800f2fc <udp_sendto_if+0xd0>)
 800f276:	f240 2282 	movw	r2, #642	@ 0x282
 800f27a:	4924      	ldr	r1, [pc, #144]	@ (800f30c <udp_sendto_if+0xe0>)
 800f27c:	4821      	ldr	r0, [pc, #132]	@ (800f304 <udp_sendto_if+0xd8>)
 800f27e:	f006 fbf7 	bl	8015a70 <iprintf>
 800f282:	f06f 030f 	mvn.w	r3, #15
 800f286:	e035      	b.n	800f2f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <udp_sendto_if+0x76>
 800f28e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2fc <udp_sendto_if+0xd0>)
 800f290:	f240 2283 	movw	r2, #643	@ 0x283
 800f294:	491e      	ldr	r1, [pc, #120]	@ (800f310 <udp_sendto_if+0xe4>)
 800f296:	481b      	ldr	r0, [pc, #108]	@ (800f304 <udp_sendto_if+0xd8>)
 800f298:	f006 fbea 	bl	8015a70 <iprintf>
 800f29c:	f06f 030f 	mvn.w	r3, #15
 800f2a0:	e028      	b.n	800f2f4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d009      	beq.n	800f2bc <udp_sendto_if+0x90>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2b8:	2be0      	cmp	r3, #224	@ 0xe0
 800f2ba:	d103      	bne.n	800f2c4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	617b      	str	r3, [r7, #20]
 800f2c2:	e00b      	b.n	800f2dc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d002      	beq.n	800f2d8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f2d2:	f06f 0303 	mvn.w	r3, #3
 800f2d6:	e00d      	b.n	800f2f4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f2dc:	887a      	ldrh	r2, [r7, #2]
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f811 	bl	800f314 <udp_sendto_if_src>
 800f2f2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	080187e0 	.word	0x080187e0
 800f300:	08018954 	.word	0x08018954
 800f304:	08018834 	.word	0x08018834
 800f308:	08018970 	.word	0x08018970
 800f30c:	0801898c 	.word	0x0801898c
 800f310:	080189ac 	.word	0x080189ac

0800f314 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b08c      	sub	sp, #48	@ 0x30
 800f318:	af04      	add	r7, sp, #16
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <udp_sendto_if_src+0x28>
 800f328:	4b76      	ldr	r3, [pc, #472]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f32a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f32e:	4976      	ldr	r1, [pc, #472]	@ (800f508 <udp_sendto_if_src+0x1f4>)
 800f330:	4876      	ldr	r0, [pc, #472]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f332:	f006 fb9d 	bl	8015a70 <iprintf>
 800f336:	f06f 030f 	mvn.w	r3, #15
 800f33a:	e0de      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d109      	bne.n	800f356 <udp_sendto_if_src+0x42>
 800f342:	4b70      	ldr	r3, [pc, #448]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f344:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f348:	4971      	ldr	r1, [pc, #452]	@ (800f510 <udp_sendto_if_src+0x1fc>)
 800f34a:	4870      	ldr	r0, [pc, #448]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f34c:	f006 fb90 	bl	8015a70 <iprintf>
 800f350:	f06f 030f 	mvn.w	r3, #15
 800f354:	e0d1      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d109      	bne.n	800f370 <udp_sendto_if_src+0x5c>
 800f35c:	4b69      	ldr	r3, [pc, #420]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f35e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f362:	496c      	ldr	r1, [pc, #432]	@ (800f514 <udp_sendto_if_src+0x200>)
 800f364:	4869      	ldr	r0, [pc, #420]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f366:	f006 fb83 	bl	8015a70 <iprintf>
 800f36a:	f06f 030f 	mvn.w	r3, #15
 800f36e:	e0c4      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f372:	2b00      	cmp	r3, #0
 800f374:	d109      	bne.n	800f38a <udp_sendto_if_src+0x76>
 800f376:	4b63      	ldr	r3, [pc, #396]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f378:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f37c:	4966      	ldr	r1, [pc, #408]	@ (800f518 <udp_sendto_if_src+0x204>)
 800f37e:	4863      	ldr	r0, [pc, #396]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f380:	f006 fb76 	bl	8015a70 <iprintf>
 800f384:	f06f 030f 	mvn.w	r3, #15
 800f388:	e0b7      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d109      	bne.n	800f3a4 <udp_sendto_if_src+0x90>
 800f390:	4b5c      	ldr	r3, [pc, #368]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f392:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f396:	4961      	ldr	r1, [pc, #388]	@ (800f51c <udp_sendto_if_src+0x208>)
 800f398:	485c      	ldr	r0, [pc, #368]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f39a:	f006 fb69 	bl	8015a70 <iprintf>
 800f39e:	f06f 030f 	mvn.w	r3, #15
 800f3a2:	e0aa      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	8a5b      	ldrh	r3, [r3, #18]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10f      	bne.n	800f3cc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f3ac:	68f9      	ldr	r1, [r7, #12]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	8a5b      	ldrh	r3, [r3, #18]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 f8b7 	bl	800f528 <udp_bind>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800f3be:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f3c6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f3ca:	e096      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	891b      	ldrh	r3, [r3, #8]
 800f3d0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d902      	bls.n	800f3de <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3dc:	e08d      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f3de:	2108      	movs	r1, #8
 800f3e0:	68b8      	ldr	r0, [r7, #8]
 800f3e2:	f7f8 fd71 	bl	8007ec8 <pbuf_add_header>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d015      	beq.n	800f418 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f3ec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f3f0:	2108      	movs	r1, #8
 800f3f2:	2022      	movs	r0, #34	@ 0x22
 800f3f4:	f7f8 fb1c 	bl	8007a30 <pbuf_alloc>
 800f3f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d102      	bne.n	800f406 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f404:	e079      	b.n	800f4fa <udp_sendto_if_src+0x1e6>
    }
    if (p->tot_len != 0) {
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	891b      	ldrh	r3, [r3, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d006      	beq.n	800f41c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f40e:	68b9      	ldr	r1, [r7, #8]
 800f410:	69f8      	ldr	r0, [r7, #28]
 800f412:	f7f8 ff13 	bl	800823c <pbuf_chain>
 800f416:	e001      	b.n	800f41c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	895b      	ldrh	r3, [r3, #10]
 800f420:	2b07      	cmp	r3, #7
 800f422:	d806      	bhi.n	800f432 <udp_sendto_if_src+0x11e>
 800f424:	4b37      	ldr	r3, [pc, #220]	@ (800f504 <udp_sendto_if_src+0x1f0>)
 800f426:	f240 320d 	movw	r2, #781	@ 0x30d
 800f42a:	493d      	ldr	r1, [pc, #244]	@ (800f520 <udp_sendto_if_src+0x20c>)
 800f42c:	4837      	ldr	r0, [pc, #220]	@ (800f50c <udp_sendto_if_src+0x1f8>)
 800f42e:	f006 fb1f 	bl	8015a70 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	8a5b      	ldrh	r3, [r3, #18]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7f7 f9d9 	bl	80067f4 <lwip_htons>
 800f442:	4603      	mov	r3, r0
 800f444:	461a      	mov	r2, r3
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f44a:	887b      	ldrh	r3, [r7, #2]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f7 f9d1 	bl	80067f4 <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	2200      	movs	r2, #0
 800f45e:	719a      	strb	r2, [r3, #6]
 800f460:	2200      	movs	r2, #0
 800f462:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	891b      	ldrh	r3, [r3, #8]
 800f468:	4618      	mov	r0, r3
 800f46a:	f7f7 f9c3 	bl	80067f4 <lwip_htons>
 800f46e:	4603      	mov	r3, r0
 800f470:	461a      	mov	r2, r3
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	7c1b      	ldrb	r3, [r3, #16]
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d113      	bne.n	800f4aa <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	891a      	ldrh	r2, [r3, #8]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f48c:	2111      	movs	r1, #17
 800f48e:	69f8      	ldr	r0, [r7, #28]
 800f490:	f7f7 fe05 	bl	800709e <ip_chksum_pseudo>
 800f494:	4603      	mov	r3, r0
 800f496:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800f498:	8b7b      	ldrh	r3, [r7, #26]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800f49e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4a2:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	8b7a      	ldrh	r2, [r7, #26]
 800f4a8:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f4aa:	2311      	movs	r3, #17
 800f4ac:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	7adb      	ldrb	r3, [r3, #11]
 800f4b2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	7a9b      	ldrb	r3, [r3, #10]
 800f4b8:	7cb9      	ldrb	r1, [r7, #18]
 800f4ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4bc:	9202      	str	r2, [sp, #8]
 800f4be:	7cfa      	ldrb	r2, [r7, #19]
 800f4c0:	9201      	str	r2, [sp, #4]
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4ca:	69f8      	ldr	r0, [r7, #28]
 800f4cc:	f003 fc4c 	bl	8012d68 <ip4_output_if_src>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f4d4:	69fa      	ldr	r2, [r7, #28]
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d004      	beq.n	800f4e6 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800f4dc:	69f8      	ldr	r0, [r7, #28]
 800f4de:	f7f8 fd89 	bl	8007ff4 <pbuf_free>
    q = NULL;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800f4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f524 <udp_sendto_if_src+0x210>)
 800f4e8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f524 <udp_sendto_if_src+0x210>)
 800f4f2:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 800f4f6:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	080187e0 	.word	0x080187e0
 800f508:	080189cc 	.word	0x080189cc
 800f50c:	08018834 	.word	0x08018834
 800f510:	080189ec 	.word	0x080189ec
 800f514:	08018a0c 	.word	0x08018a0c
 800f518:	08018a30 	.word	0x08018a30
 800f51c:	08018a54 	.word	0x08018a54
 800f520:	08018a78 	.word	0x08018a78
 800f524:	20003a9c 	.word	0x20003a9c

0800f528 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	4613      	mov	r3, r2
 800f534:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f53c:	4b39      	ldr	r3, [pc, #228]	@ (800f624 <udp_bind+0xfc>)
 800f53e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d109      	bne.n	800f55a <udp_bind+0x32>
 800f546:	4b38      	ldr	r3, [pc, #224]	@ (800f628 <udp_bind+0x100>)
 800f548:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f54c:	4937      	ldr	r1, [pc, #220]	@ (800f62c <udp_bind+0x104>)
 800f54e:	4838      	ldr	r0, [pc, #224]	@ (800f630 <udp_bind+0x108>)
 800f550:	f006 fa8e 	bl	8015a70 <iprintf>
 800f554:	f06f 030f 	mvn.w	r3, #15
 800f558:	e060      	b.n	800f61c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f55e:	4b35      	ldr	r3, [pc, #212]	@ (800f634 <udp_bind+0x10c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	617b      	str	r3, [r7, #20]
 800f564:	e009      	b.n	800f57a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d102      	bne.n	800f574 <udp_bind+0x4c>
      rebind = 1;
 800f56e:	2301      	movs	r3, #1
 800f570:	74fb      	strb	r3, [r7, #19]
      break;
 800f572:	e005      	b.n	800f580 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	617b      	str	r3, [r7, #20]
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1f2      	bne.n	800f566 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f580:	88fb      	ldrh	r3, [r7, #6]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d109      	bne.n	800f59a <udp_bind+0x72>
    port = udp_new_port();
 800f586:	f7ff fbd5 	bl	800ed34 <udp_new_port>
 800f58a:	4603      	mov	r3, r0
 800f58c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f58e:	88fb      	ldrh	r3, [r7, #6]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d12c      	bne.n	800f5ee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f594:	f06f 0307 	mvn.w	r3, #7
 800f598:	e040      	b.n	800f61c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f59a:	4b26      	ldr	r3, [pc, #152]	@ (800f634 <udp_bind+0x10c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	e022      	b.n	800f5e8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f5a2:	68fa      	ldr	r2, [r7, #12]
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d01b      	beq.n	800f5e2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	8a5b      	ldrh	r3, [r3, #18]
 800f5ae:	88fa      	ldrh	r2, [r7, #6]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d116      	bne.n	800f5e2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d00d      	beq.n	800f5dc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00a      	beq.n	800f5dc <udp_bind+0xb4>
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d006      	beq.n	800f5dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f5ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d102      	bne.n	800f5e2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f5dc:	f06f 0307 	mvn.w	r3, #7
 800f5e0:	e01c      	b.n	800f61c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1d9      	bne.n	800f5a2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <udp_bind+0xd2>
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	e000      	b.n	800f5fc <udp_bind+0xd4>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	88fa      	ldrh	r2, [r7, #6]
 800f604:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f606:	7cfb      	ldrb	r3, [r7, #19]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d106      	bne.n	800f61a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f60c:	4b09      	ldr	r3, [pc, #36]	@ (800f634 <udp_bind+0x10c>)
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f614:	4a07      	ldr	r2, [pc, #28]	@ (800f634 <udp_bind+0x10c>)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f61a:	2300      	movs	r3, #0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	08019884 	.word	0x08019884
 800f628:	080187e0 	.word	0x080187e0
 800f62c:	08018aa8 	.word	0x08018aa8
 800f630:	08018834 	.word	0x08018834
 800f634:	20003bc4 	.word	0x20003bc4

0800f638 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	4613      	mov	r3, r2
 800f644:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d109      	bne.n	800f660 <udp_connect+0x28>
 800f64c:	4b2c      	ldr	r3, [pc, #176]	@ (800f700 <udp_connect+0xc8>)
 800f64e:	f240 4235 	movw	r2, #1077	@ 0x435
 800f652:	492c      	ldr	r1, [pc, #176]	@ (800f704 <udp_connect+0xcc>)
 800f654:	482c      	ldr	r0, [pc, #176]	@ (800f708 <udp_connect+0xd0>)
 800f656:	f006 fa0b 	bl	8015a70 <iprintf>
 800f65a:	f06f 030f 	mvn.w	r3, #15
 800f65e:	e04b      	b.n	800f6f8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d109      	bne.n	800f67a <udp_connect+0x42>
 800f666:	4b26      	ldr	r3, [pc, #152]	@ (800f700 <udp_connect+0xc8>)
 800f668:	f240 4236 	movw	r2, #1078	@ 0x436
 800f66c:	4927      	ldr	r1, [pc, #156]	@ (800f70c <udp_connect+0xd4>)
 800f66e:	4826      	ldr	r0, [pc, #152]	@ (800f708 <udp_connect+0xd0>)
 800f670:	f006 f9fe 	bl	8015a70 <iprintf>
 800f674:	f06f 030f 	mvn.w	r3, #15
 800f678:	e03e      	b.n	800f6f8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	8a5b      	ldrh	r3, [r3, #18]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10f      	bne.n	800f6a2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f682:	68f9      	ldr	r1, [r7, #12]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	8a5b      	ldrh	r3, [r3, #18]
 800f688:	461a      	mov	r2, r3
 800f68a:	68f8      	ldr	r0, [r7, #12]
 800f68c:	f7ff ff4c 	bl	800f528 <udp_bind>
 800f690:	4603      	mov	r3, r0
 800f692:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f694:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d002      	beq.n	800f6a2 <udp_connect+0x6a>
      return err;
 800f69c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6a0:	e02a      	b.n	800f6f8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d002      	beq.n	800f6ae <udp_connect+0x76>
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	e000      	b.n	800f6b0 <udp_connect+0x78>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	88fa      	ldrh	r2, [r7, #6]
 800f6b8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7c1b      	ldrb	r3, [r3, #16]
 800f6be:	f043 0304 	orr.w	r3, r3, #4
 800f6c2:	b2da      	uxtb	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6c8:	4b11      	ldr	r3, [pc, #68]	@ (800f710 <udp_connect+0xd8>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	617b      	str	r3, [r7, #20]
 800f6ce:	e008      	b.n	800f6e2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d101      	bne.n	800f6dc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e00d      	b.n	800f6f8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	617b      	str	r3, [r7, #20]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1f3      	bne.n	800f6d0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f6e8:	4b09      	ldr	r3, [pc, #36]	@ (800f710 <udp_connect+0xd8>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f6f0:	4a07      	ldr	r2, [pc, #28]	@ (800f710 <udp_connect+0xd8>)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3718      	adds	r7, #24
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	080187e0 	.word	0x080187e0
 800f704:	08018ac0 	.word	0x08018ac0
 800f708:	08018834 	.word	0x08018834
 800f70c:	08018adc 	.word	0x08018adc
 800f710:	20003bc4 	.word	0x20003bc4

0800f714 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d107      	bne.n	800f736 <udp_recv+0x22>
 800f726:	4b08      	ldr	r3, [pc, #32]	@ (800f748 <udp_recv+0x34>)
 800f728:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f72c:	4907      	ldr	r1, [pc, #28]	@ (800f74c <udp_recv+0x38>)
 800f72e:	4808      	ldr	r0, [pc, #32]	@ (800f750 <udp_recv+0x3c>)
 800f730:	f006 f99e 	bl	8015a70 <iprintf>
 800f734:	e005      	b.n	800f742 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	61da      	str	r2, [r3, #28]
}
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	080187e0 	.word	0x080187e0
 800f74c:	08018b14 	.word	0x08018b14
 800f750:	08018834 	.word	0x08018834

0800f754 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d107      	bne.n	800f772 <udp_remove+0x1e>
 800f762:	4b19      	ldr	r3, [pc, #100]	@ (800f7c8 <udp_remove+0x74>)
 800f764:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f768:	4918      	ldr	r1, [pc, #96]	@ (800f7cc <udp_remove+0x78>)
 800f76a:	4819      	ldr	r0, [pc, #100]	@ (800f7d0 <udp_remove+0x7c>)
 800f76c:	f006 f980 	bl	8015a70 <iprintf>
 800f770:	e026      	b.n	800f7c0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f772:	4b18      	ldr	r3, [pc, #96]	@ (800f7d4 <udp_remove+0x80>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d105      	bne.n	800f788 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f77c:	4b15      	ldr	r3, [pc, #84]	@ (800f7d4 <udp_remove+0x80>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	4a14      	ldr	r2, [pc, #80]	@ (800f7d4 <udp_remove+0x80>)
 800f784:	6013      	str	r3, [r2, #0]
 800f786:	e017      	b.n	800f7b8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f788:	4b12      	ldr	r3, [pc, #72]	@ (800f7d4 <udp_remove+0x80>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e010      	b.n	800f7b2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d009      	beq.n	800f7ac <udp_remove+0x58>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d104      	bne.n	800f7ac <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	60da      	str	r2, [r3, #12]
        break;
 800f7aa:	e005      	b.n	800f7b8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	60fb      	str	r3, [r7, #12]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1eb      	bne.n	800f790 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f7f7 fe64 	bl	8007488 <memp_free>
}
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	080187e0 	.word	0x080187e0
 800f7cc:	08018b2c 	.word	0x08018b2c
 800f7d0:	08018834 	.word	0x08018834
 800f7d4:	20003bc4 	.word	0x20003bc4

0800f7d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f7de:	2000      	movs	r0, #0
 800f7e0:	f7f7 fdfa 	bl	80073d8 <memp_malloc>
 800f7e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d007      	beq.n	800f7fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f7ec:	2220      	movs	r2, #32
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f006 f9a2 	bl	8015b3a <memset>
    pcb->ttl = UDP_TTL;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	22ff      	movs	r2, #255	@ 0xff
 800f7fa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f7fc:	687b      	ldr	r3, [r7, #4]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d01e      	beq.n	800f856 <udp_netif_ip_addr_changed+0x4e>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d01a      	beq.n	800f856 <udp_netif_ip_addr_changed+0x4e>
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d017      	beq.n	800f856 <udp_netif_ip_addr_changed+0x4e>
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d013      	beq.n	800f856 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f82e:	4b0d      	ldr	r3, [pc, #52]	@ (800f864 <udp_netif_ip_addr_changed+0x5c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	e00c      	b.n	800f850 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d103      	bne.n	800f84a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	60fb      	str	r3, [r7, #12]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1ef      	bne.n	800f836 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f856:	bf00      	nop
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	20003bc4 	.word	0x20003bc4

0800f868 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f86c:	4b20      	ldr	r3, [pc, #128]	@ (800f8f0 <dhcp_inc_pcb_refcount+0x88>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d133      	bne.n	800f8dc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f874:	4b1f      	ldr	r3, [pc, #124]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d005      	beq.n	800f888 <dhcp_inc_pcb_refcount+0x20>
 800f87c:	4b1e      	ldr	r3, [pc, #120]	@ (800f8f8 <dhcp_inc_pcb_refcount+0x90>)
 800f87e:	22e5      	movs	r2, #229	@ 0xe5
 800f880:	491e      	ldr	r1, [pc, #120]	@ (800f8fc <dhcp_inc_pcb_refcount+0x94>)
 800f882:	481f      	ldr	r0, [pc, #124]	@ (800f900 <dhcp_inc_pcb_refcount+0x98>)
 800f884:	f006 f8f4 	bl	8015a70 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f888:	f7ff ffa6 	bl	800f7d8 <udp_new>
 800f88c:	4603      	mov	r3, r0
 800f88e:	4a19      	ldr	r2, [pc, #100]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f890:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f892:	4b18      	ldr	r3, [pc, #96]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d102      	bne.n	800f8a0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f89e:	e024      	b.n	800f8ea <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f8a0:	4b14      	ldr	r3, [pc, #80]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	7a5a      	ldrb	r2, [r3, #9]
 800f8a6:	4b13      	ldr	r3, [pc, #76]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f042 0220 	orr.w	r2, r2, #32
 800f8ae:	b2d2      	uxtb	r2, r2
 800f8b0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f8b2:	4b10      	ldr	r3, [pc, #64]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2244      	movs	r2, #68	@ 0x44
 800f8b8:	4912      	ldr	r1, [pc, #72]	@ (800f904 <dhcp_inc_pcb_refcount+0x9c>)
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fe34 	bl	800f528 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	2243      	movs	r2, #67	@ 0x43
 800f8c6:	490f      	ldr	r1, [pc, #60]	@ (800f904 <dhcp_inc_pcb_refcount+0x9c>)
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7ff feb5 	bl	800f638 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f8ce:	4b09      	ldr	r3, [pc, #36]	@ (800f8f4 <dhcp_inc_pcb_refcount+0x8c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	490c      	ldr	r1, [pc, #48]	@ (800f908 <dhcp_inc_pcb_refcount+0xa0>)
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff ff1c 	bl	800f714 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f8dc:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <dhcp_inc_pcb_refcount+0x88>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	4b02      	ldr	r3, [pc, #8]	@ (800f8f0 <dhcp_inc_pcb_refcount+0x88>)
 800f8e6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20003c00 	.word	0x20003c00
 800f8f4:	20003bfc 	.word	0x20003bfc
 800f8f8:	08018b44 	.word	0x08018b44
 800f8fc:	08018b7c 	.word	0x08018b7c
 800f900:	08018ba4 	.word	0x08018ba4
 800f904:	08019884 	.word	0x08019884
 800f908:	080111b9 	.word	0x080111b9

0800f90c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f910:	4b0e      	ldr	r3, [pc, #56]	@ (800f94c <dhcp_dec_pcb_refcount+0x40>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d105      	bne.n	800f924 <dhcp_dec_pcb_refcount+0x18>
 800f918:	4b0d      	ldr	r3, [pc, #52]	@ (800f950 <dhcp_dec_pcb_refcount+0x44>)
 800f91a:	22ff      	movs	r2, #255	@ 0xff
 800f91c:	490d      	ldr	r1, [pc, #52]	@ (800f954 <dhcp_dec_pcb_refcount+0x48>)
 800f91e:	480e      	ldr	r0, [pc, #56]	@ (800f958 <dhcp_dec_pcb_refcount+0x4c>)
 800f920:	f006 f8a6 	bl	8015a70 <iprintf>
  dhcp_pcb_refcount--;
 800f924:	4b09      	ldr	r3, [pc, #36]	@ (800f94c <dhcp_dec_pcb_refcount+0x40>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	3b01      	subs	r3, #1
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	4b07      	ldr	r3, [pc, #28]	@ (800f94c <dhcp_dec_pcb_refcount+0x40>)
 800f92e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f930:	4b06      	ldr	r3, [pc, #24]	@ (800f94c <dhcp_dec_pcb_refcount+0x40>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d107      	bne.n	800f948 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f938:	4b08      	ldr	r3, [pc, #32]	@ (800f95c <dhcp_dec_pcb_refcount+0x50>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7ff ff09 	bl	800f754 <udp_remove>
    dhcp_pcb = NULL;
 800f942:	4b06      	ldr	r3, [pc, #24]	@ (800f95c <dhcp_dec_pcb_refcount+0x50>)
 800f944:	2200      	movs	r2, #0
 800f946:	601a      	str	r2, [r3, #0]
  }
}
 800f948:	bf00      	nop
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20003c00 	.word	0x20003c00
 800f950:	08018b44 	.word	0x08018b44
 800f954:	08018bcc 	.word	0x08018bcc
 800f958:	08018ba4 	.word	0x08018ba4
 800f95c:	20003bfc 	.word	0x20003bfc

0800f960 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f96e:	210c      	movs	r1, #12
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f001 f833 	bl	80109dc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f976:	4b06      	ldr	r3, [pc, #24]	@ (800f990 <dhcp_handle_nak+0x30>)
 800f978:	4a05      	ldr	r2, [pc, #20]	@ (800f990 <dhcp_handle_nak+0x30>)
 800f97a:	4905      	ldr	r1, [pc, #20]	@ (800f990 <dhcp_handle_nak+0x30>)
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7f7 ff21 	bl	80077c4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fc2c 	bl	80101e0 <dhcp_discover>
}
 800f988:	bf00      	nop
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	08019884 	.word	0x08019884

0800f994 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6a1b      	ldr	r3, [r3, #32]
 800f9a0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f9a2:	2108      	movs	r1, #8
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f001 f819 	bl	80109dc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	331c      	adds	r3, #28
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f002 fb3e 	bl	8012034 <etharp_query>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	799b      	ldrb	r3, [r3, #6]
 800f9c0:	2bff      	cmp	r3, #255	@ 0xff
 800f9c2:	d005      	beq.n	800f9d0 <dhcp_check+0x3c>
    dhcp->tries++;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	799b      	ldrb	r3, [r3, #6]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f9d0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800f9d4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f9d6:	893b      	ldrh	r3, [r7, #8]
 800f9d8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f9dc:	4a06      	ldr	r2, [pc, #24]	@ (800f9f8 <dhcp_check+0x64>)
 800f9de:	fb82 1203 	smull	r1, r2, r2, r3
 800f9e2:	1152      	asrs	r2, r2, #5
 800f9e4:	17db      	asrs	r3, r3, #31
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f9ee:	bf00      	nop
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	10624dd3 	.word	0x10624dd3

0800f9fc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fa0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fa40 <dhcp_handle_offer+0x44>)
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d011      	beq.n	800fa38 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2200      	movs	r2, #0
 800fa18:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fa1a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa44 <dhcp_handle_offer+0x48>)
 800fa1c:	689b      	ldr	r3, [r3, #8]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f6 fefe 	bl	8006820 <lwip_htonl>
 800fa24:	4602      	mov	r2, r0
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	691a      	ldr	r2, [r3, #16]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f808 	bl	800fa48 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fa38:	bf00      	nop
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	20003bf0 	.word	0x20003bf0
 800fa44:	20003bc8 	.word	0x20003bc8

0800fa48 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fa48:	b5b0      	push	{r4, r5, r7, lr}
 800fa4a:	b08a      	sub	sp, #40	@ 0x28
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d109      	bne.n	800fa6a <dhcp_select+0x22>
 800fa56:	4b71      	ldr	r3, [pc, #452]	@ (800fc1c <dhcp_select+0x1d4>)
 800fa58:	f240 1277 	movw	r2, #375	@ 0x177
 800fa5c:	4970      	ldr	r1, [pc, #448]	@ (800fc20 <dhcp_select+0x1d8>)
 800fa5e:	4871      	ldr	r0, [pc, #452]	@ (800fc24 <dhcp_select+0x1dc>)
 800fa60:	f006 f806 	bl	8015a70 <iprintf>
 800fa64:	f06f 030f 	mvn.w	r3, #15
 800fa68:	e0d3      	b.n	800fc12 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6a1b      	ldr	r3, [r3, #32]
 800fa6e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d109      	bne.n	800fa8a <dhcp_select+0x42>
 800fa76:	4b69      	ldr	r3, [pc, #420]	@ (800fc1c <dhcp_select+0x1d4>)
 800fa78:	f240 1279 	movw	r2, #377	@ 0x179
 800fa7c:	496a      	ldr	r1, [pc, #424]	@ (800fc28 <dhcp_select+0x1e0>)
 800fa7e:	4869      	ldr	r0, [pc, #420]	@ (800fc24 <dhcp_select+0x1dc>)
 800fa80:	f005 fff6 	bl	8015a70 <iprintf>
 800fa84:	f06f 0305 	mvn.w	r3, #5
 800fa88:	e0c3      	b.n	800fc12 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	69b8      	ldr	r0, [r7, #24]
 800fa8e:	f000 ffa5 	bl	80109dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fa92:	f107 030c 	add.w	r3, r7, #12
 800fa96:	2203      	movs	r2, #3
 800fa98:	69b9      	ldr	r1, [r7, #24]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f001 fc5a 	bl	8011354 <dhcp_create_msg>
 800faa0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 8085 	beq.w	800fbb4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fab0:	89b8      	ldrh	r0, [r7, #12]
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fab8:	2302      	movs	r3, #2
 800faba:	2239      	movs	r2, #57	@ 0x39
 800fabc:	f000 ffa8 	bl	8010a10 <dhcp_option>
 800fac0:	4603      	mov	r3, r0
 800fac2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fac4:	89b8      	ldrh	r0, [r7, #12]
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fad0:	461a      	mov	r2, r3
 800fad2:	f000 fff7 	bl	8010ac4 <dhcp_option_short>
 800fad6:	4603      	mov	r3, r0
 800fad8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fada:	89b8      	ldrh	r0, [r7, #12]
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fae2:	2304      	movs	r3, #4
 800fae4:	2232      	movs	r2, #50	@ 0x32
 800fae6:	f000 ff93 	bl	8010a10 <dhcp_option>
 800faea:	4603      	mov	r3, r0
 800faec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800faee:	89bc      	ldrh	r4, [r7, #12]
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7f6 fe90 	bl	8006820 <lwip_htonl>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
 800fb04:	4629      	mov	r1, r5
 800fb06:	4620      	mov	r0, r4
 800fb08:	f001 f80e 	bl	8010b28 <dhcp_option_long>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fb10:	89b8      	ldrh	r0, [r7, #12]
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb18:	2304      	movs	r3, #4
 800fb1a:	2236      	movs	r2, #54	@ 0x36
 800fb1c:	f000 ff78 	bl	8010a10 <dhcp_option>
 800fb20:	4603      	mov	r3, r0
 800fb22:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fb24:	89bc      	ldrh	r4, [r7, #12]
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f6 fe75 	bl	8006820 <lwip_htonl>
 800fb36:	4603      	mov	r3, r0
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f000 fff3 	bl	8010b28 <dhcp_option_long>
 800fb42:	4603      	mov	r3, r0
 800fb44:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fb46:	89b8      	ldrh	r0, [r7, #12]
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb4e:	2304      	movs	r3, #4
 800fb50:	2237      	movs	r2, #55	@ 0x37
 800fb52:	f000 ff5d 	bl	8010a10 <dhcp_option>
 800fb56:	4603      	mov	r3, r0
 800fb58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	77bb      	strb	r3, [r7, #30]
 800fb5e:	e00e      	b.n	800fb7e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fb60:	89b8      	ldrh	r0, [r7, #12]
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb68:	7fbb      	ldrb	r3, [r7, #30]
 800fb6a:	4a30      	ldr	r2, [pc, #192]	@ (800fc2c <dhcp_select+0x1e4>)
 800fb6c:	5cd3      	ldrb	r3, [r2, r3]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	f000 ff82 	bl	8010a78 <dhcp_option_byte>
 800fb74:	4603      	mov	r3, r0
 800fb76:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb78:	7fbb      	ldrb	r3, [r7, #30]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	77bb      	strb	r3, [r7, #30]
 800fb7e:	7fbb      	ldrb	r3, [r7, #30]
 800fb80:	2b03      	cmp	r3, #3
 800fb82:	d9ed      	bls.n	800fb60 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fb84:	89b8      	ldrh	r0, [r7, #12]
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	33f0      	adds	r3, #240	@ 0xf0
 800fb8a:	697a      	ldr	r2, [r7, #20]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	f001 fcb7 	bl	8011500 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fb92:	4b27      	ldr	r3, [pc, #156]	@ (800fc30 <dhcp_select+0x1e8>)
 800fb94:	6818      	ldr	r0, [r3, #0]
 800fb96:	4b27      	ldr	r3, [pc, #156]	@ (800fc34 <dhcp_select+0x1ec>)
 800fb98:	9301      	str	r3, [sp, #4]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	2343      	movs	r3, #67	@ 0x43
 800fba0:	4a25      	ldr	r2, [pc, #148]	@ (800fc38 <dhcp_select+0x1f0>)
 800fba2:	6979      	ldr	r1, [r7, #20]
 800fba4:	f7ff fbb6 	bl	800f314 <udp_sendto_if_src>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fbac:	6978      	ldr	r0, [r7, #20]
 800fbae:	f7f8 fa21 	bl	8007ff4 <pbuf_free>
 800fbb2:	e001      	b.n	800fbb8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fbb4:	23ff      	movs	r3, #255	@ 0xff
 800fbb6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	799b      	ldrb	r3, [r3, #6]
 800fbbc:	2bff      	cmp	r3, #255	@ 0xff
 800fbbe:	d005      	beq.n	800fbcc <dhcp_select+0x184>
    dhcp->tries++;
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	799b      	ldrb	r3, [r3, #6]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	799b      	ldrb	r3, [r3, #6]
 800fbd0:	2b05      	cmp	r3, #5
 800fbd2:	d80d      	bhi.n	800fbf0 <dhcp_select+0x1a8>
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	799b      	ldrb	r3, [r3, #6]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	2301      	movs	r3, #1
 800fbdc:	4093      	lsls	r3, r2
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	0152      	lsls	r2, r2, #5
 800fbe4:	1ad2      	subs	r2, r2, r3
 800fbe6:	0092      	lsls	r2, r2, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	00db      	lsls	r3, r3, #3
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	e001      	b.n	800fbf4 <dhcp_select+0x1ac>
 800fbf0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fbf4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fbf6:	89fb      	ldrh	r3, [r7, #14]
 800fbf8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fbfc:	4a0f      	ldr	r2, [pc, #60]	@ (800fc3c <dhcp_select+0x1f4>)
 800fbfe:	fb82 1203 	smull	r1, r2, r2, r3
 800fc02:	1152      	asrs	r2, r2, #5
 800fc04:	17db      	asrs	r3, r3, #31
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fc0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3720      	adds	r7, #32
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bdb0      	pop	{r4, r5, r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	08018b44 	.word	0x08018b44
 800fc20:	08018bf0 	.word	0x08018bf0
 800fc24:	08018ba4 	.word	0x08018ba4
 800fc28:	08018c0c 	.word	0x08018c0c
 800fc2c:	20000014 	.word	0x20000014
 800fc30:	20003bfc 	.word	0x20003bfc
 800fc34:	08019884 	.word	0x08019884
 800fc38:	08019888 	.word	0x08019888
 800fc3c:	10624dd3 	.word	0x10624dd3

0800fc40 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fc46:	4b27      	ldr	r3, [pc, #156]	@ (800fce4 <dhcp_coarse_tmr+0xa4>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	607b      	str	r3, [r7, #4]
 800fc4c:	e042      	b.n	800fcd4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d039      	beq.n	800fcce <dhcp_coarse_tmr+0x8e>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	795b      	ldrb	r3, [r3, #5]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d035      	beq.n	800fcce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	8a9b      	ldrh	r3, [r3, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d012      	beq.n	800fc90 <dhcp_coarse_tmr+0x50>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	8a5b      	ldrh	r3, [r3, #18]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	825a      	strh	r2, [r3, #18]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	8a5a      	ldrh	r2, [r3, #18]
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	8a9b      	ldrh	r3, [r3, #20]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d106      	bne.n	800fc90 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fe10 	bl	80108a8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 f989 	bl	800ffa0 <dhcp_start>
 800fc8e:	e01e      	b.n	800fcce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	8a1b      	ldrh	r3, [r3, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d00b      	beq.n	800fcb0 <dhcp_coarse_tmr+0x70>
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	8a1b      	ldrh	r3, [r3, #16]
 800fc9c:	1e5a      	subs	r2, r3, #1
 800fc9e:	b291      	uxth	r1, r2
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	8211      	strh	r1, [r2, #16]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d103      	bne.n	800fcb0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f8c6 	bl	800fe3a <dhcp_t2_timeout>
 800fcae:	e00e      	b.n	800fcce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	89db      	ldrh	r3, [r3, #14]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00a      	beq.n	800fcce <dhcp_coarse_tmr+0x8e>
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	89db      	ldrh	r3, [r3, #14]
 800fcbc:	1e5a      	subs	r2, r3, #1
 800fcbe:	b291      	uxth	r1, r2
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	81d1      	strh	r1, [r2, #14]
 800fcc4:	2b01      	cmp	r3, #1
 800fcc6:	d102      	bne.n	800fcce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f888 	bl	800fdde <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	607b      	str	r3, [r7, #4]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1b9      	bne.n	800fc4e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fcda:	bf00      	nop
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20003a90 	.word	0x20003a90

0800fce8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fcee:	4b16      	ldr	r3, [pc, #88]	@ (800fd48 <dhcp_fine_tmr+0x60>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	607b      	str	r3, [r7, #4]
 800fcf4:	e020      	b.n	800fd38 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a1b      	ldr	r3, [r3, #32]
 800fcfa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d017      	beq.n	800fd32 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d906      	bls.n	800fd18 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	891b      	ldrh	r3, [r3, #8]
 800fd0e:	3b01      	subs	r3, #1
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	811a      	strh	r2, [r3, #8]
 800fd16:	e00c      	b.n	800fd32 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	891b      	ldrh	r3, [r3, #8]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d108      	bne.n	800fd32 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	891b      	ldrh	r3, [r3, #8]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f80d 	bl	800fd4c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	607b      	str	r3, [r7, #4]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1db      	bne.n	800fcf6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fd3e:	bf00      	nop
 800fd40:	bf00      	nop
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20003a90 	.word	0x20003a90

0800fd4c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a1b      	ldr	r3, [r3, #32]
 800fd58:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	795b      	ldrb	r3, [r3, #5]
 800fd5e:	2b0c      	cmp	r3, #12
 800fd60:	d003      	beq.n	800fd6a <dhcp_timeout+0x1e>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	795b      	ldrb	r3, [r3, #5]
 800fd66:	2b06      	cmp	r3, #6
 800fd68:	d103      	bne.n	800fd72 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 fa38 	bl	80101e0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fd70:	e031      	b.n	800fdd6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	795b      	ldrb	r3, [r3, #5]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d10e      	bne.n	800fd98 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	799b      	ldrb	r3, [r3, #6]
 800fd7e:	2b05      	cmp	r3, #5
 800fd80:	d803      	bhi.n	800fd8a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff fe60 	bl	800fa48 <dhcp_select>
}
 800fd88:	e025      	b.n	800fdd6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 fd8c 	bl	80108a8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 f905 	bl	800ffa0 <dhcp_start>
}
 800fd96:	e01e      	b.n	800fdd6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	795b      	ldrb	r3, [r3, #5]
 800fd9c:	2b08      	cmp	r3, #8
 800fd9e:	d10b      	bne.n	800fdb8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	799b      	ldrb	r3, [r3, #6]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d803      	bhi.n	800fdb0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f7ff fdf3 	bl	800f994 <dhcp_check>
}
 800fdae:	e012      	b.n	800fdd6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fab7 	bl	8010324 <dhcp_bind>
}
 800fdb6:	e00e      	b.n	800fdd6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	795b      	ldrb	r3, [r3, #5]
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	d10a      	bne.n	800fdd6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	799b      	ldrb	r3, [r3, #6]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d803      	bhi.n	800fdd0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 fcb9 	bl	8010740 <dhcp_reboot>
}
 800fdce:	e002      	b.n	800fdd6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fa05 	bl	80101e0 <dhcp_discover>
}
 800fdd6:	bf00      	nop
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	795b      	ldrb	r3, [r3, #5]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d007      	beq.n	800fe04 <dhcp_t1_timeout+0x26>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	795b      	ldrb	r3, [r3, #5]
 800fdf8:	2b0a      	cmp	r3, #10
 800fdfa:	d003      	beq.n	800fe04 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fe00:	2b05      	cmp	r3, #5
 800fe02:	d116      	bne.n	800fe32 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 fb67 	bl	80104d8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	899b      	ldrh	r3, [r3, #12]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	8a5b      	ldrh	r3, [r3, #18]
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	dd0b      	ble.n	800fe32 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	899b      	ldrh	r3, [r3, #12]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8a5b      	ldrh	r3, [r3, #18]
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	0fda      	lsrs	r2, r3, #31
 800fe28:	4413      	add	r3, r2
 800fe2a:	105b      	asrs	r3, r3, #1
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6a1b      	ldr	r3, [r3, #32]
 800fe46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	795b      	ldrb	r3, [r3, #5]
 800fe4c:	2b01      	cmp	r3, #1
 800fe4e:	d00b      	beq.n	800fe68 <dhcp_t2_timeout+0x2e>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	795b      	ldrb	r3, [r3, #5]
 800fe54:	2b0a      	cmp	r3, #10
 800fe56:	d007      	beq.n	800fe68 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fe5c:	2b05      	cmp	r3, #5
 800fe5e:	d003      	beq.n	800fe68 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	795b      	ldrb	r3, [r3, #5]
 800fe64:	2b04      	cmp	r3, #4
 800fe66:	d116      	bne.n	800fe96 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fbcf 	bl	801060c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	8a9b      	ldrh	r3, [r3, #20]
 800fe72:	461a      	mov	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	8a5b      	ldrh	r3, [r3, #18]
 800fe78:	1ad3      	subs	r3, r2, r3
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	dd0b      	ble.n	800fe96 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	8a9b      	ldrh	r3, [r3, #20]
 800fe82:	461a      	mov	r2, r3
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	8a5b      	ldrh	r3, [r3, #18]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	0fda      	lsrs	r2, r3, #31
 800fe8c:	4413      	add	r3, r2
 800fe8e:	105b      	asrs	r3, r3, #1
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fe96:	bf00      	nop
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
	...

0800fea0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a1b      	ldr	r3, [r3, #32]
 800feae:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	2200      	movs	r2, #0
 800feb4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	2200      	movs	r2, #0
 800feba:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800febc:	4b36      	ldr	r3, [pc, #216]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800febe:	78db      	ldrb	r3, [r3, #3]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d003      	beq.n	800fecc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800fec4:	4b35      	ldr	r3, [pc, #212]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800fec6:	68da      	ldr	r2, [r3, #12]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800fecc:	4b32      	ldr	r3, [pc, #200]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800fece:	791b      	ldrb	r3, [r3, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800fed4:	4b31      	ldr	r3, [pc, #196]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800fed6:	691a      	ldr	r2, [r3, #16]
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fedc:	e004      	b.n	800fee8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fee2:	085a      	lsrs	r2, r3, #1
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fee8:	4b2b      	ldr	r3, [pc, #172]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800feea:	795b      	ldrb	r3, [r3, #5]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d004      	beq.n	800fefa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fef0:	4b2a      	ldr	r3, [pc, #168]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800fef2:	695a      	ldr	r2, [r3, #20]
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	631a      	str	r2, [r3, #48]	@ 0x30
 800fef8:	e007      	b.n	800ff0a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fefe:	4613      	mov	r3, r2
 800ff00:	00db      	lsls	r3, r3, #3
 800ff02:	1a9b      	subs	r3, r3, r2
 800ff04:	08da      	lsrs	r2, r3, #3
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	691a      	ldr	r2, [r3, #16]
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ff12:	4b21      	ldr	r3, [pc, #132]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800ff14:	799b      	ldrb	r3, [r3, #6]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00b      	beq.n	800ff32 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ff1a:	4b20      	ldr	r3, [pc, #128]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f6 fc7e 	bl	8006820 <lwip_htonl>
 800ff24:	4602      	mov	r2, r0
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	71da      	strb	r2, [r3, #7]
 800ff30:	e002      	b.n	800ff38 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	2200      	movs	r2, #0
 800ff36:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ff38:	4b17      	ldr	r3, [pc, #92]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800ff3a:	79db      	ldrb	r3, [r3, #7]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d007      	beq.n	800ff50 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ff40:	4b16      	ldr	r3, [pc, #88]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800ff42:	69db      	ldr	r3, [r3, #28]
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7f6 fc6b 	bl	8006820 <lwip_htonl>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ff50:	2300      	movs	r3, #0
 800ff52:	75fb      	strb	r3, [r7, #23]
 800ff54:	e013      	b.n	800ff7e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	3308      	adds	r3, #8
 800ff5a:	4a10      	ldr	r2, [pc, #64]	@ (800ff9c <dhcp_handle_ack+0xfc>)
 800ff5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7f6 fc5d 	bl	8006820 <lwip_htonl>
 800ff66:	4603      	mov	r3, r0
 800ff68:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800ff6a:	f107 020c 	add.w	r2, r7, #12
 800ff6e:	7dfb      	ldrb	r3, [r7, #23]
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f6 fcaa 	bl	80068cc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ff78:	7dfb      	ldrb	r3, [r7, #23]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	75fb      	strb	r3, [r7, #23]
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d805      	bhi.n	800ff90 <dhcp_handle_ack+0xf0>
 800ff84:	7dfb      	ldrb	r3, [r7, #23]
 800ff86:	3308      	adds	r3, #8
 800ff88:	4a03      	ldr	r2, [pc, #12]	@ (800ff98 <dhcp_handle_ack+0xf8>)
 800ff8a:	5cd3      	ldrb	r3, [r2, r3]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e2      	bne.n	800ff56 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ff90:	bf00      	nop
 800ff92:	3718      	adds	r7, #24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20003bf0 	.word	0x20003bf0
 800ff9c:	20003bc8 	.word	0x20003bc8

0800ffa0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d109      	bne.n	800ffc2 <dhcp_start+0x22>
 800ffae:	4b37      	ldr	r3, [pc, #220]	@ (801008c <dhcp_start+0xec>)
 800ffb0:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800ffb4:	4936      	ldr	r1, [pc, #216]	@ (8010090 <dhcp_start+0xf0>)
 800ffb6:	4837      	ldr	r0, [pc, #220]	@ (8010094 <dhcp_start+0xf4>)
 800ffb8:	f005 fd5a 	bl	8015a70 <iprintf>
 800ffbc:	f06f 030f 	mvn.w	r3, #15
 800ffc0:	e060      	b.n	8010084 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffc8:	f003 0301 	and.w	r3, r3, #1
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d109      	bne.n	800ffe4 <dhcp_start+0x44>
 800ffd0:	4b2e      	ldr	r3, [pc, #184]	@ (801008c <dhcp_start+0xec>)
 800ffd2:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800ffd6:	4930      	ldr	r1, [pc, #192]	@ (8010098 <dhcp_start+0xf8>)
 800ffd8:	482e      	ldr	r0, [pc, #184]	@ (8010094 <dhcp_start+0xf4>)
 800ffda:	f005 fd49 	bl	8015a70 <iprintf>
 800ffde:	f06f 030f 	mvn.w	r3, #15
 800ffe2:	e04f      	b.n	8010084 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ffee:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800fff2:	d202      	bcs.n	800fffa <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800fff4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fff8:	e044      	b.n	8010084 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10d      	bne.n	801001c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010000:	2034      	movs	r0, #52	@ 0x34
 8010002:	f7f7 f8ed 	bl	80071e0 <mem_malloc>
 8010006:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d102      	bne.n	8010014 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801000e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010012:	e037      	b.n	8010084 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	621a      	str	r2, [r3, #32]
 801001a:	e005      	b.n	8010028 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	791b      	ldrb	r3, [r3, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010024:	f7ff fc72 	bl	800f90c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010028:	2234      	movs	r2, #52	@ 0x34
 801002a:	2100      	movs	r1, #0
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f005 fd84 	bl	8015b3a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010032:	f7ff fc19 	bl	800f868 <dhcp_inc_pcb_refcount>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <dhcp_start+0xa2>
    return ERR_MEM;
 801003c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010040:	e020      	b.n	8010084 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801004e:	f003 0304 	and.w	r3, r3, #4
 8010052:	2b00      	cmp	r3, #0
 8010054:	d105      	bne.n	8010062 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010056:	2102      	movs	r1, #2
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f000 fcbf 	bl	80109dc <dhcp_set_state>
    return ERR_OK;
 801005e:	2300      	movs	r3, #0
 8010060:	e010      	b.n	8010084 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f8bc 	bl	80101e0 <dhcp_discover>
 8010068:	4603      	mov	r3, r0
 801006a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801006c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 fc17 	bl	80108a8 <dhcp_release_and_stop>
    return ERR_MEM;
 801007a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801007e:	e001      	b.n	8010084 <dhcp_start+0xe4>
  }
  return result;
 8010080:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3710      	adds	r7, #16
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	08018b44 	.word	0x08018b44
 8010090:	08018c28 	.word	0x08018c28
 8010094:	08018ba4 	.word	0x08018ba4
 8010098:	08018c6c 	.word	0x08018c6c

0801009c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d107      	bne.n	80100bc <dhcp_arp_reply+0x20>
 80100ac:	4b0e      	ldr	r3, [pc, #56]	@ (80100e8 <dhcp_arp_reply+0x4c>)
 80100ae:	f240 328b 	movw	r2, #907	@ 0x38b
 80100b2:	490e      	ldr	r1, [pc, #56]	@ (80100ec <dhcp_arp_reply+0x50>)
 80100b4:	480e      	ldr	r0, [pc, #56]	@ (80100f0 <dhcp_arp_reply+0x54>)
 80100b6:	f005 fcdb 	bl	8015a70 <iprintf>
 80100ba:	e012      	b.n	80100e2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a1b      	ldr	r3, [r3, #32]
 80100c0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00c      	beq.n	80100e2 <dhcp_arp_reply+0x46>
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	795b      	ldrb	r3, [r3, #5]
 80100cc:	2b08      	cmp	r3, #8
 80100ce:	d108      	bne.n	80100e2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d102      	bne.n	80100e2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f809 	bl	80100f4 <dhcp_decline>
    }
  }
}
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	08018b44 	.word	0x08018b44
 80100ec:	08018c28 	.word	0x08018c28
 80100f0:	08018ba4 	.word	0x08018ba4

080100f4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80100f4:	b5b0      	push	{r4, r5, r7, lr}
 80100f6:	b08a      	sub	sp, #40	@ 0x28
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010102:	210c      	movs	r1, #12
 8010104:	69b8      	ldr	r0, [r7, #24]
 8010106:	f000 fc69 	bl	80109dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801010a:	f107 030c 	add.w	r3, r7, #12
 801010e:	2204      	movs	r2, #4
 8010110:	69b9      	ldr	r1, [r7, #24]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f001 f91e 	bl	8011354 <dhcp_create_msg>
 8010118:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d035      	beq.n	801018c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010126:	89b8      	ldrh	r0, [r7, #12]
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801012e:	2304      	movs	r3, #4
 8010130:	2232      	movs	r2, #50	@ 0x32
 8010132:	f000 fc6d 	bl	8010a10 <dhcp_option>
 8010136:	4603      	mov	r3, r0
 8010138:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801013a:	89bc      	ldrh	r4, [r7, #12]
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	69db      	ldr	r3, [r3, #28]
 8010146:	4618      	mov	r0, r3
 8010148:	f7f6 fb6a 	bl	8006820 <lwip_htonl>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	4629      	mov	r1, r5
 8010152:	4620      	mov	r0, r4
 8010154:	f000 fce8 	bl	8010b28 <dhcp_option_long>
 8010158:	4603      	mov	r3, r0
 801015a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801015c:	89b8      	ldrh	r0, [r7, #12]
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	33f0      	adds	r3, #240	@ 0xf0
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	4619      	mov	r1, r3
 8010166:	f001 f9cb 	bl	8011500 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801016a:	4b19      	ldr	r3, [pc, #100]	@ (80101d0 <dhcp_decline+0xdc>)
 801016c:	6818      	ldr	r0, [r3, #0]
 801016e:	4b19      	ldr	r3, [pc, #100]	@ (80101d4 <dhcp_decline+0xe0>)
 8010170:	9301      	str	r3, [sp, #4]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	2343      	movs	r3, #67	@ 0x43
 8010178:	4a17      	ldr	r2, [pc, #92]	@ (80101d8 <dhcp_decline+0xe4>)
 801017a:	6979      	ldr	r1, [r7, #20]
 801017c:	f7ff f8ca 	bl	800f314 <udp_sendto_if_src>
 8010180:	4603      	mov	r3, r0
 8010182:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010184:	6978      	ldr	r0, [r7, #20]
 8010186:	f7f7 ff35 	bl	8007ff4 <pbuf_free>
 801018a:	e001      	b.n	8010190 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801018c:	23ff      	movs	r3, #255	@ 0xff
 801018e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	799b      	ldrb	r3, [r3, #6]
 8010194:	2bff      	cmp	r3, #255	@ 0xff
 8010196:	d005      	beq.n	80101a4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	799b      	ldrb	r3, [r3, #6]
 801019c:	3301      	adds	r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80101a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80101a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80101aa:	89fb      	ldrh	r3, [r7, #14]
 80101ac:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80101b0:	4a0a      	ldr	r2, [pc, #40]	@ (80101dc <dhcp_decline+0xe8>)
 80101b2:	fb82 1203 	smull	r1, r2, r2, r3
 80101b6:	1152      	asrs	r2, r2, #5
 80101b8:	17db      	asrs	r3, r3, #31
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	b29a      	uxth	r2, r3
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80101c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3720      	adds	r7, #32
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bdb0      	pop	{r4, r5, r7, pc}
 80101ce:	bf00      	nop
 80101d0:	20003bfc 	.word	0x20003bfc
 80101d4:	08019884 	.word	0x08019884
 80101d8:	08019888 	.word	0x08019888
 80101dc:	10624dd3 	.word	0x10624dd3

080101e0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b08a      	sub	sp, #40	@ 0x28
 80101e4:	af02      	add	r7, sp, #8
 80101e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6a1b      	ldr	r3, [r3, #32]
 80101ec:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	2200      	movs	r2, #0
 80101f6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80101f8:	2106      	movs	r1, #6
 80101fa:	69b8      	ldr	r0, [r7, #24]
 80101fc:	f000 fbee 	bl	80109dc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010200:	f107 0308 	add.w	r3, r7, #8
 8010204:	2201      	movs	r2, #1
 8010206:	69b9      	ldr	r1, [r7, #24]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f001 f8a3 	bl	8011354 <dhcp_create_msg>
 801020e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d04b      	beq.n	80102ae <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801021c:	8938      	ldrh	r0, [r7, #8]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010224:	2302      	movs	r3, #2
 8010226:	2239      	movs	r2, #57	@ 0x39
 8010228:	f000 fbf2 	bl	8010a10 <dhcp_option>
 801022c:	4603      	mov	r3, r0
 801022e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010230:	8938      	ldrh	r0, [r7, #8]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801023c:	461a      	mov	r2, r3
 801023e:	f000 fc41 	bl	8010ac4 <dhcp_option_short>
 8010242:	4603      	mov	r3, r0
 8010244:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010246:	8938      	ldrh	r0, [r7, #8]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801024e:	2304      	movs	r3, #4
 8010250:	2237      	movs	r2, #55	@ 0x37
 8010252:	f000 fbdd 	bl	8010a10 <dhcp_option>
 8010256:	4603      	mov	r3, r0
 8010258:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801025a:	2300      	movs	r3, #0
 801025c:	77fb      	strb	r3, [r7, #31]
 801025e:	e00e      	b.n	801027e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010260:	8938      	ldrh	r0, [r7, #8]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010268:	7ffb      	ldrb	r3, [r7, #31]
 801026a:	4a29      	ldr	r2, [pc, #164]	@ (8010310 <dhcp_discover+0x130>)
 801026c:	5cd3      	ldrb	r3, [r2, r3]
 801026e:	461a      	mov	r2, r3
 8010270:	f000 fc02 	bl	8010a78 <dhcp_option_byte>
 8010274:	4603      	mov	r3, r0
 8010276:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010278:	7ffb      	ldrb	r3, [r7, #31]
 801027a:	3301      	adds	r3, #1
 801027c:	77fb      	strb	r3, [r7, #31]
 801027e:	7ffb      	ldrb	r3, [r7, #31]
 8010280:	2b03      	cmp	r3, #3
 8010282:	d9ed      	bls.n	8010260 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010284:	8938      	ldrh	r0, [r7, #8]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	33f0      	adds	r3, #240	@ 0xf0
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	4619      	mov	r1, r3
 801028e:	f001 f937 	bl	8011500 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010292:	4b20      	ldr	r3, [pc, #128]	@ (8010314 <dhcp_discover+0x134>)
 8010294:	6818      	ldr	r0, [r3, #0]
 8010296:	4b20      	ldr	r3, [pc, #128]	@ (8010318 <dhcp_discover+0x138>)
 8010298:	9301      	str	r3, [sp, #4]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	2343      	movs	r3, #67	@ 0x43
 80102a0:	4a1e      	ldr	r2, [pc, #120]	@ (801031c <dhcp_discover+0x13c>)
 80102a2:	6939      	ldr	r1, [r7, #16]
 80102a4:	f7ff f836 	bl	800f314 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80102a8:	6938      	ldr	r0, [r7, #16]
 80102aa:	f7f7 fea3 	bl	8007ff4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	799b      	ldrb	r3, [r3, #6]
 80102b2:	2bff      	cmp	r3, #255	@ 0xff
 80102b4:	d005      	beq.n	80102c2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	799b      	ldrb	r3, [r3, #6]
 80102ba:	3301      	adds	r3, #1
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	799b      	ldrb	r3, [r3, #6]
 80102c6:	2b05      	cmp	r3, #5
 80102c8:	d80d      	bhi.n	80102e6 <dhcp_discover+0x106>
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	799b      	ldrb	r3, [r3, #6]
 80102ce:	461a      	mov	r2, r3
 80102d0:	2301      	movs	r3, #1
 80102d2:	4093      	lsls	r3, r2
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	461a      	mov	r2, r3
 80102d8:	0152      	lsls	r2, r2, #5
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	0092      	lsls	r2, r2, #2
 80102de:	4413      	add	r3, r2
 80102e0:	00db      	lsls	r3, r3, #3
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	e001      	b.n	80102ea <dhcp_discover+0x10a>
 80102e6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80102ea:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102ec:	897b      	ldrh	r3, [r7, #10]
 80102ee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80102f2:	4a0b      	ldr	r2, [pc, #44]	@ (8010320 <dhcp_discover+0x140>)
 80102f4:	fb82 1203 	smull	r1, r2, r2, r3
 80102f8:	1152      	asrs	r2, r2, #5
 80102fa:	17db      	asrs	r3, r3, #31
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	b29a      	uxth	r2, r3
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3720      	adds	r7, #32
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	20000014 	.word	0x20000014
 8010314:	20003bfc 	.word	0x20003bfc
 8010318:	08019884 	.word	0x08019884
 801031c:	08019888 	.word	0x08019888
 8010320:	10624dd3 	.word	0x10624dd3

08010324 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b088      	sub	sp, #32
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d107      	bne.n	8010342 <dhcp_bind+0x1e>
 8010332:	4b64      	ldr	r3, [pc, #400]	@ (80104c4 <dhcp_bind+0x1a0>)
 8010334:	f240 4215 	movw	r2, #1045	@ 0x415
 8010338:	4963      	ldr	r1, [pc, #396]	@ (80104c8 <dhcp_bind+0x1a4>)
 801033a:	4864      	ldr	r0, [pc, #400]	@ (80104cc <dhcp_bind+0x1a8>)
 801033c:	f005 fb98 	bl	8015a70 <iprintf>
 8010340:	e0bc      	b.n	80104bc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6a1b      	ldr	r3, [r3, #32]
 8010346:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d107      	bne.n	801035e <dhcp_bind+0x3a>
 801034e:	4b5d      	ldr	r3, [pc, #372]	@ (80104c4 <dhcp_bind+0x1a0>)
 8010350:	f240 4217 	movw	r2, #1047	@ 0x417
 8010354:	495e      	ldr	r1, [pc, #376]	@ (80104d0 <dhcp_bind+0x1ac>)
 8010356:	485d      	ldr	r0, [pc, #372]	@ (80104cc <dhcp_bind+0x1a8>)
 8010358:	f005 fb8a 	bl	8015a70 <iprintf>
 801035c:	e0ae      	b.n	80104bc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	2200      	movs	r2, #0
 8010362:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801036c:	d019      	beq.n	80103a2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010372:	331e      	adds	r3, #30
 8010374:	4a57      	ldr	r2, [pc, #348]	@ (80104d4 <dhcp_bind+0x1b0>)
 8010376:	fba2 2303 	umull	r2, r3, r2, r3
 801037a:	095b      	lsrs	r3, r3, #5
 801037c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010384:	d302      	bcc.n	801038c <dhcp_bind+0x68>
      timeout = 0xffff;
 8010386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801038a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	b29a      	uxth	r2, r3
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	8a9b      	ldrh	r3, [r3, #20]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d102      	bne.n	80103a2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	2201      	movs	r2, #1
 80103a0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103aa:	d01d      	beq.n	80103e8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b0:	331e      	adds	r3, #30
 80103b2:	4a48      	ldr	r2, [pc, #288]	@ (80104d4 <dhcp_bind+0x1b0>)
 80103b4:	fba2 2303 	umull	r2, r3, r2, r3
 80103b8:	095b      	lsrs	r3, r3, #5
 80103ba:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103c2:	d302      	bcc.n	80103ca <dhcp_bind+0xa6>
      timeout = 0xffff;
 80103c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80103c8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	895b      	ldrh	r3, [r3, #10]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	2201      	movs	r2, #1
 80103de:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	895a      	ldrh	r2, [r3, #10]
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103f0:	d01d      	beq.n	801042e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f6:	331e      	adds	r3, #30
 80103f8:	4a36      	ldr	r2, [pc, #216]	@ (80104d4 <dhcp_bind+0x1b0>)
 80103fa:	fba2 2303 	umull	r2, r3, r2, r3
 80103fe:	095b      	lsrs	r3, r3, #5
 8010400:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010408:	d302      	bcc.n	8010410 <dhcp_bind+0xec>
      timeout = 0xffff;
 801040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801040e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	b29a      	uxth	r2, r3
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	899b      	ldrh	r3, [r3, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	2201      	movs	r2, #1
 8010424:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	899a      	ldrh	r2, [r3, #12]
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	895a      	ldrh	r2, [r3, #10]
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	899b      	ldrh	r3, [r3, #12]
 8010436:	429a      	cmp	r2, r3
 8010438:	d306      	bcc.n	8010448 <dhcp_bind+0x124>
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	899b      	ldrh	r3, [r3, #12]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d002      	beq.n	8010448 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	2200      	movs	r2, #0
 8010446:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	79db      	ldrb	r3, [r3, #7]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d003      	beq.n	8010458 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	6a1b      	ldr	r3, [r3, #32]
 8010454:	613b      	str	r3, [r7, #16]
 8010456:	e014      	b.n	8010482 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	331c      	adds	r3, #28
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010460:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010464:	2b00      	cmp	r3, #0
 8010466:	db02      	blt.n	801046e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010468:	23ff      	movs	r3, #255	@ 0xff
 801046a:	613b      	str	r3, [r7, #16]
 801046c:	e009      	b.n	8010482 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	2bbf      	cmp	r3, #191	@ 0xbf
 8010472:	d903      	bls.n	801047c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010474:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	e002      	b.n	8010482 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801047c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010480:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010486:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d108      	bne.n	80104a0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	69da      	ldr	r2, [r3, #28]
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	4013      	ands	r3, r2
 8010496:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801049e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80104a0:	210a      	movs	r1, #10
 80104a2:	69b8      	ldr	r0, [r7, #24]
 80104a4:	f000 fa9a 	bl	80109dc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	f103 011c 	add.w	r1, r3, #28
 80104ae:	f107 030c 	add.w	r3, r7, #12
 80104b2:	f107 0210 	add.w	r2, r7, #16
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7f7 f984 	bl	80077c4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80104bc:	3720      	adds	r7, #32
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	08018b44 	.word	0x08018b44
 80104c8:	08018ca4 	.word	0x08018ca4
 80104cc:	08018ba4 	.word	0x08018ba4
 80104d0:	08018cc0 	.word	0x08018cc0
 80104d4:	88888889 	.word	0x88888889

080104d8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08a      	sub	sp, #40	@ 0x28
 80104dc:	af02      	add	r7, sp, #8
 80104de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80104e6:	2105      	movs	r1, #5
 80104e8:	69b8      	ldr	r0, [r7, #24]
 80104ea:	f000 fa77 	bl	80109dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80104ee:	f107 030c 	add.w	r3, r7, #12
 80104f2:	2203      	movs	r2, #3
 80104f4:	69b9      	ldr	r1, [r7, #24]
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 ff2c 	bl	8011354 <dhcp_create_msg>
 80104fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d04e      	beq.n	80105a2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801050a:	89b8      	ldrh	r0, [r7, #12]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010512:	2302      	movs	r3, #2
 8010514:	2239      	movs	r2, #57	@ 0x39
 8010516:	f000 fa7b 	bl	8010a10 <dhcp_option>
 801051a:	4603      	mov	r3, r0
 801051c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801051e:	89b8      	ldrh	r0, [r7, #12]
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801052a:	461a      	mov	r2, r3
 801052c:	f000 faca 	bl	8010ac4 <dhcp_option_short>
 8010530:	4603      	mov	r3, r0
 8010532:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010534:	89b8      	ldrh	r0, [r7, #12]
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801053c:	2304      	movs	r3, #4
 801053e:	2237      	movs	r2, #55	@ 0x37
 8010540:	f000 fa66 	bl	8010a10 <dhcp_option>
 8010544:	4603      	mov	r3, r0
 8010546:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010548:	2300      	movs	r3, #0
 801054a:	77bb      	strb	r3, [r7, #30]
 801054c:	e00e      	b.n	801056c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801054e:	89b8      	ldrh	r0, [r7, #12]
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010556:	7fbb      	ldrb	r3, [r7, #30]
 8010558:	4a29      	ldr	r2, [pc, #164]	@ (8010600 <dhcp_renew+0x128>)
 801055a:	5cd3      	ldrb	r3, [r2, r3]
 801055c:	461a      	mov	r2, r3
 801055e:	f000 fa8b 	bl	8010a78 <dhcp_option_byte>
 8010562:	4603      	mov	r3, r0
 8010564:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010566:	7fbb      	ldrb	r3, [r7, #30]
 8010568:	3301      	adds	r3, #1
 801056a:	77bb      	strb	r3, [r7, #30]
 801056c:	7fbb      	ldrb	r3, [r7, #30]
 801056e:	2b03      	cmp	r3, #3
 8010570:	d9ed      	bls.n	801054e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010572:	89b8      	ldrh	r0, [r7, #12]
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	33f0      	adds	r3, #240	@ 0xf0
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	4619      	mov	r1, r3
 801057c:	f000 ffc0 	bl	8011500 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010580:	4b20      	ldr	r3, [pc, #128]	@ (8010604 <dhcp_renew+0x12c>)
 8010582:	6818      	ldr	r0, [r3, #0]
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	f103 0218 	add.w	r2, r3, #24
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	2343      	movs	r3, #67	@ 0x43
 8010590:	6979      	ldr	r1, [r7, #20]
 8010592:	f7fe fe4b 	bl	800f22c <udp_sendto_if>
 8010596:	4603      	mov	r3, r0
 8010598:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801059a:	6978      	ldr	r0, [r7, #20]
 801059c:	f7f7 fd2a 	bl	8007ff4 <pbuf_free>
 80105a0:	e001      	b.n	80105a6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80105a2:	23ff      	movs	r3, #255	@ 0xff
 80105a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	799b      	ldrb	r3, [r3, #6]
 80105aa:	2bff      	cmp	r3, #255	@ 0xff
 80105ac:	d005      	beq.n	80105ba <dhcp_renew+0xe2>
    dhcp->tries++;
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	799b      	ldrb	r3, [r3, #6]
 80105b2:	3301      	adds	r3, #1
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	799b      	ldrb	r3, [r3, #6]
 80105be:	2b09      	cmp	r3, #9
 80105c0:	d809      	bhi.n	80105d6 <dhcp_renew+0xfe>
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	799b      	ldrb	r3, [r3, #6]
 80105c6:	461a      	mov	r2, r3
 80105c8:	0152      	lsls	r2, r2, #5
 80105ca:	1ad2      	subs	r2, r2, r3
 80105cc:	0092      	lsls	r2, r2, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	011b      	lsls	r3, r3, #4
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	e001      	b.n	80105da <dhcp_renew+0x102>
 80105d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80105da:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80105dc:	89fb      	ldrh	r3, [r7, #14]
 80105de:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80105e2:	4a09      	ldr	r2, [pc, #36]	@ (8010608 <dhcp_renew+0x130>)
 80105e4:	fb82 1203 	smull	r1, r2, r2, r3
 80105e8:	1152      	asrs	r2, r2, #5
 80105ea:	17db      	asrs	r3, r3, #31
 80105ec:	1ad3      	subs	r3, r2, r3
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80105f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3720      	adds	r7, #32
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20000014 	.word	0x20000014
 8010604:	20003bfc 	.word	0x20003bfc
 8010608:	10624dd3 	.word	0x10624dd3

0801060c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b08a      	sub	sp, #40	@ 0x28
 8010610:	af02      	add	r7, sp, #8
 8010612:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6a1b      	ldr	r3, [r3, #32]
 8010618:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801061a:	2104      	movs	r1, #4
 801061c:	69b8      	ldr	r0, [r7, #24]
 801061e:	f000 f9dd 	bl	80109dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010622:	f107 030c 	add.w	r3, r7, #12
 8010626:	2203      	movs	r2, #3
 8010628:	69b9      	ldr	r1, [r7, #24]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fe92 	bl	8011354 <dhcp_create_msg>
 8010630:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d04c      	beq.n	80106d2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801063e:	89b8      	ldrh	r0, [r7, #12]
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010646:	2302      	movs	r3, #2
 8010648:	2239      	movs	r2, #57	@ 0x39
 801064a:	f000 f9e1 	bl	8010a10 <dhcp_option>
 801064e:	4603      	mov	r3, r0
 8010650:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010652:	89b8      	ldrh	r0, [r7, #12]
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801065e:	461a      	mov	r2, r3
 8010660:	f000 fa30 	bl	8010ac4 <dhcp_option_short>
 8010664:	4603      	mov	r3, r0
 8010666:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010668:	89b8      	ldrh	r0, [r7, #12]
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010670:	2304      	movs	r3, #4
 8010672:	2237      	movs	r2, #55	@ 0x37
 8010674:	f000 f9cc 	bl	8010a10 <dhcp_option>
 8010678:	4603      	mov	r3, r0
 801067a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801067c:	2300      	movs	r3, #0
 801067e:	77bb      	strb	r3, [r7, #30]
 8010680:	e00e      	b.n	80106a0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010682:	89b8      	ldrh	r0, [r7, #12]
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801068a:	7fbb      	ldrb	r3, [r7, #30]
 801068c:	4a28      	ldr	r2, [pc, #160]	@ (8010730 <dhcp_rebind+0x124>)
 801068e:	5cd3      	ldrb	r3, [r2, r3]
 8010690:	461a      	mov	r2, r3
 8010692:	f000 f9f1 	bl	8010a78 <dhcp_option_byte>
 8010696:	4603      	mov	r3, r0
 8010698:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801069a:	7fbb      	ldrb	r3, [r7, #30]
 801069c:	3301      	adds	r3, #1
 801069e:	77bb      	strb	r3, [r7, #30]
 80106a0:	7fbb      	ldrb	r3, [r7, #30]
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d9ed      	bls.n	8010682 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80106a6:	89b8      	ldrh	r0, [r7, #12]
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	33f0      	adds	r3, #240	@ 0xf0
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	4619      	mov	r1, r3
 80106b0:	f000 ff26 	bl	8011500 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80106b4:	4b1f      	ldr	r3, [pc, #124]	@ (8010734 <dhcp_rebind+0x128>)
 80106b6:	6818      	ldr	r0, [r3, #0]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	2343      	movs	r3, #67	@ 0x43
 80106be:	4a1e      	ldr	r2, [pc, #120]	@ (8010738 <dhcp_rebind+0x12c>)
 80106c0:	6979      	ldr	r1, [r7, #20]
 80106c2:	f7fe fdb3 	bl	800f22c <udp_sendto_if>
 80106c6:	4603      	mov	r3, r0
 80106c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80106ca:	6978      	ldr	r0, [r7, #20]
 80106cc:	f7f7 fc92 	bl	8007ff4 <pbuf_free>
 80106d0:	e001      	b.n	80106d6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80106d2:	23ff      	movs	r3, #255	@ 0xff
 80106d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	799b      	ldrb	r3, [r3, #6]
 80106da:	2bff      	cmp	r3, #255	@ 0xff
 80106dc:	d005      	beq.n	80106ea <dhcp_rebind+0xde>
    dhcp->tries++;
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	799b      	ldrb	r3, [r3, #6]
 80106e2:	3301      	adds	r3, #1
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	799b      	ldrb	r3, [r3, #6]
 80106ee:	2b09      	cmp	r3, #9
 80106f0:	d809      	bhi.n	8010706 <dhcp_rebind+0xfa>
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	799b      	ldrb	r3, [r3, #6]
 80106f6:	461a      	mov	r2, r3
 80106f8:	0152      	lsls	r2, r2, #5
 80106fa:	1ad2      	subs	r2, r2, r3
 80106fc:	0092      	lsls	r2, r2, #2
 80106fe:	4413      	add	r3, r2
 8010700:	00db      	lsls	r3, r3, #3
 8010702:	b29b      	uxth	r3, r3
 8010704:	e001      	b.n	801070a <dhcp_rebind+0xfe>
 8010706:	f242 7310 	movw	r3, #10000	@ 0x2710
 801070a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010712:	4a0a      	ldr	r2, [pc, #40]	@ (801073c <dhcp_rebind+0x130>)
 8010714:	fb82 1203 	smull	r1, r2, r2, r3
 8010718:	1152      	asrs	r2, r2, #5
 801071a:	17db      	asrs	r3, r3, #31
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	b29a      	uxth	r2, r3
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3720      	adds	r7, #32
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	20000014 	.word	0x20000014
 8010734:	20003bfc 	.word	0x20003bfc
 8010738:	08019888 	.word	0x08019888
 801073c:	10624dd3 	.word	0x10624dd3

08010740 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010740:	b5b0      	push	{r4, r5, r7, lr}
 8010742:	b08a      	sub	sp, #40	@ 0x28
 8010744:	af02      	add	r7, sp, #8
 8010746:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801074e:	2103      	movs	r1, #3
 8010750:	69b8      	ldr	r0, [r7, #24]
 8010752:	f000 f943 	bl	80109dc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010756:	f107 030c 	add.w	r3, r7, #12
 801075a:	2203      	movs	r2, #3
 801075c:	69b9      	ldr	r1, [r7, #24]
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 fdf8 	bl	8011354 <dhcp_create_msg>
 8010764:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d066      	beq.n	801083a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010772:	89b8      	ldrh	r0, [r7, #12]
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801077a:	2302      	movs	r3, #2
 801077c:	2239      	movs	r2, #57	@ 0x39
 801077e:	f000 f947 	bl	8010a10 <dhcp_option>
 8010782:	4603      	mov	r3, r0
 8010784:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010786:	89b8      	ldrh	r0, [r7, #12]
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	33f0      	adds	r3, #240	@ 0xf0
 801078c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010790:	4619      	mov	r1, r3
 8010792:	f000 f997 	bl	8010ac4 <dhcp_option_short>
 8010796:	4603      	mov	r3, r0
 8010798:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801079a:	89b8      	ldrh	r0, [r7, #12]
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80107a2:	2304      	movs	r3, #4
 80107a4:	2232      	movs	r2, #50	@ 0x32
 80107a6:	f000 f933 	bl	8010a10 <dhcp_option>
 80107aa:	4603      	mov	r3, r0
 80107ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80107ae:	89bc      	ldrh	r4, [r7, #12]
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	69db      	ldr	r3, [r3, #28]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f6 f830 	bl	8006820 <lwip_htonl>
 80107c0:	4603      	mov	r3, r0
 80107c2:	461a      	mov	r2, r3
 80107c4:	4629      	mov	r1, r5
 80107c6:	4620      	mov	r0, r4
 80107c8:	f000 f9ae 	bl	8010b28 <dhcp_option_long>
 80107cc:	4603      	mov	r3, r0
 80107ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80107d0:	89b8      	ldrh	r0, [r7, #12]
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80107d8:	2304      	movs	r3, #4
 80107da:	2237      	movs	r2, #55	@ 0x37
 80107dc:	f000 f918 	bl	8010a10 <dhcp_option>
 80107e0:	4603      	mov	r3, r0
 80107e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107e4:	2300      	movs	r3, #0
 80107e6:	77bb      	strb	r3, [r7, #30]
 80107e8:	e00e      	b.n	8010808 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107ea:	89b8      	ldrh	r0, [r7, #12]
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80107f2:	7fbb      	ldrb	r3, [r7, #30]
 80107f4:	4a28      	ldr	r2, [pc, #160]	@ (8010898 <dhcp_reboot+0x158>)
 80107f6:	5cd3      	ldrb	r3, [r2, r3]
 80107f8:	461a      	mov	r2, r3
 80107fa:	f000 f93d 	bl	8010a78 <dhcp_option_byte>
 80107fe:	4603      	mov	r3, r0
 8010800:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010802:	7fbb      	ldrb	r3, [r7, #30]
 8010804:	3301      	adds	r3, #1
 8010806:	77bb      	strb	r3, [r7, #30]
 8010808:	7fbb      	ldrb	r3, [r7, #30]
 801080a:	2b03      	cmp	r3, #3
 801080c:	d9ed      	bls.n	80107ea <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801080e:	89b8      	ldrh	r0, [r7, #12]
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	33f0      	adds	r3, #240	@ 0xf0
 8010814:	697a      	ldr	r2, [r7, #20]
 8010816:	4619      	mov	r1, r3
 8010818:	f000 fe72 	bl	8011500 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801081c:	4b1f      	ldr	r3, [pc, #124]	@ (801089c <dhcp_reboot+0x15c>)
 801081e:	6818      	ldr	r0, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	2343      	movs	r3, #67	@ 0x43
 8010826:	4a1e      	ldr	r2, [pc, #120]	@ (80108a0 <dhcp_reboot+0x160>)
 8010828:	6979      	ldr	r1, [r7, #20]
 801082a:	f7fe fcff 	bl	800f22c <udp_sendto_if>
 801082e:	4603      	mov	r3, r0
 8010830:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010832:	6978      	ldr	r0, [r7, #20]
 8010834:	f7f7 fbde 	bl	8007ff4 <pbuf_free>
 8010838:	e001      	b.n	801083e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801083a:	23ff      	movs	r3, #255	@ 0xff
 801083c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	799b      	ldrb	r3, [r3, #6]
 8010842:	2bff      	cmp	r3, #255	@ 0xff
 8010844:	d005      	beq.n	8010852 <dhcp_reboot+0x112>
    dhcp->tries++;
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	799b      	ldrb	r3, [r3, #6]
 801084a:	3301      	adds	r3, #1
 801084c:	b2da      	uxtb	r2, r3
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	799b      	ldrb	r3, [r3, #6]
 8010856:	2b09      	cmp	r3, #9
 8010858:	d809      	bhi.n	801086e <dhcp_reboot+0x12e>
 801085a:	69bb      	ldr	r3, [r7, #24]
 801085c:	799b      	ldrb	r3, [r3, #6]
 801085e:	461a      	mov	r2, r3
 8010860:	0152      	lsls	r2, r2, #5
 8010862:	1ad2      	subs	r2, r2, r3
 8010864:	0092      	lsls	r2, r2, #2
 8010866:	4413      	add	r3, r2
 8010868:	00db      	lsls	r3, r3, #3
 801086a:	b29b      	uxth	r3, r3
 801086c:	e001      	b.n	8010872 <dhcp_reboot+0x132>
 801086e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010872:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010874:	89fb      	ldrh	r3, [r7, #14]
 8010876:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801087a:	4a0a      	ldr	r2, [pc, #40]	@ (80108a4 <dhcp_reboot+0x164>)
 801087c:	fb82 1203 	smull	r1, r2, r2, r3
 8010880:	1152      	asrs	r2, r2, #5
 8010882:	17db      	asrs	r3, r3, #31
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	b29a      	uxth	r2, r3
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801088c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010890:	4618      	mov	r0, r3
 8010892:	3720      	adds	r7, #32
 8010894:	46bd      	mov	sp, r7
 8010896:	bdb0      	pop	{r4, r5, r7, pc}
 8010898:	20000014 	.word	0x20000014
 801089c:	20003bfc 	.word	0x20003bfc
 80108a0:	08019888 	.word	0x08019888
 80108a4:	10624dd3 	.word	0x10624dd3

080108a8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80108a8:	b5b0      	push	{r4, r5, r7, lr}
 80108aa:	b08a      	sub	sp, #40	@ 0x28
 80108ac:	af02      	add	r7, sp, #8
 80108ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a1b      	ldr	r3, [r3, #32]
 80108b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80108b6:	69fb      	ldr	r3, [r7, #28]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f000 8084 	beq.w	80109c6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	795b      	ldrb	r3, [r3, #5]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f000 8081 	beq.w	80109ca <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	699b      	ldr	r3, [r3, #24]
 80108cc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80108ce:	69fb      	ldr	r3, [r7, #28]
 80108d0:	2200      	movs	r2, #0
 80108d2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	2200      	movs	r2, #0
 80108d8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	2200      	movs	r2, #0
 80108de:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	2200      	movs	r2, #0
 80108e4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	2200      	movs	r2, #0
 80108ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108f0:	69fb      	ldr	r3, [r7, #28]
 80108f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80108fc:	69fb      	ldr	r3, [r7, #28]
 80108fe:	2200      	movs	r2, #0
 8010900:	829a      	strh	r2, [r3, #20]
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	8a9a      	ldrh	r2, [r3, #20]
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	825a      	strh	r2, [r3, #18]
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	8a5a      	ldrh	r2, [r3, #18]
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	821a      	strh	r2, [r3, #16]
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	8a1a      	ldrh	r2, [r3, #16]
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fe1e 	bl	801155c <dhcp_supplied_address>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d03b      	beq.n	801099e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010926:	f107 030e 	add.w	r3, r7, #14
 801092a:	2207      	movs	r2, #7
 801092c:	69f9      	ldr	r1, [r7, #28]
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 fd10 	bl	8011354 <dhcp_create_msg>
 8010934:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d030      	beq.n	801099e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010942:	89f8      	ldrh	r0, [r7, #14]
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801094a:	2304      	movs	r3, #4
 801094c:	2236      	movs	r2, #54	@ 0x36
 801094e:	f000 f85f 	bl	8010a10 <dhcp_option>
 8010952:	4603      	mov	r3, r0
 8010954:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010956:	89fc      	ldrh	r4, [r7, #14]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	4618      	mov	r0, r3
 8010962:	f7f5 ff5d 	bl	8006820 <lwip_htonl>
 8010966:	4603      	mov	r3, r0
 8010968:	461a      	mov	r2, r3
 801096a:	4629      	mov	r1, r5
 801096c:	4620      	mov	r0, r4
 801096e:	f000 f8db 	bl	8010b28 <dhcp_option_long>
 8010972:	4603      	mov	r3, r0
 8010974:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010976:	89f8      	ldrh	r0, [r7, #14]
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	33f0      	adds	r3, #240	@ 0xf0
 801097c:	69ba      	ldr	r2, [r7, #24]
 801097e:	4619      	mov	r1, r3
 8010980:	f000 fdbe 	bl	8011500 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010984:	4b13      	ldr	r3, [pc, #76]	@ (80109d4 <dhcp_release_and_stop+0x12c>)
 8010986:	6818      	ldr	r0, [r3, #0]
 8010988:	f107 0210 	add.w	r2, r7, #16
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	9300      	str	r3, [sp, #0]
 8010990:	2343      	movs	r3, #67	@ 0x43
 8010992:	69b9      	ldr	r1, [r7, #24]
 8010994:	f7fe fc4a 	bl	800f22c <udp_sendto_if>
      pbuf_free(p_out);
 8010998:	69b8      	ldr	r0, [r7, #24]
 801099a:	f7f7 fb2b 	bl	8007ff4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801099e:	4b0e      	ldr	r3, [pc, #56]	@ (80109d8 <dhcp_release_and_stop+0x130>)
 80109a0:	4a0d      	ldr	r2, [pc, #52]	@ (80109d8 <dhcp_release_and_stop+0x130>)
 80109a2:	490d      	ldr	r1, [pc, #52]	@ (80109d8 <dhcp_release_and_stop+0x130>)
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f6 ff0d 	bl	80077c4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80109aa:	2100      	movs	r1, #0
 80109ac:	69f8      	ldr	r0, [r7, #28]
 80109ae:	f000 f815 	bl	80109dc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	791b      	ldrb	r3, [r3, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d008      	beq.n	80109cc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80109ba:	f7fe ffa7 	bl	800f90c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	2200      	movs	r2, #0
 80109c2:	711a      	strb	r2, [r3, #4]
 80109c4:	e002      	b.n	80109cc <dhcp_release_and_stop+0x124>
    return;
 80109c6:	bf00      	nop
 80109c8:	e000      	b.n	80109cc <dhcp_release_and_stop+0x124>
    return;
 80109ca:	bf00      	nop
  }
}
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bdb0      	pop	{r4, r5, r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20003bfc 	.word	0x20003bfc
 80109d8:	08019884 	.word	0x08019884

080109dc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	460b      	mov	r3, r1
 80109e6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	795b      	ldrb	r3, [r3, #5]
 80109ec:	78fa      	ldrb	r2, [r7, #3]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d008      	beq.n	8010a04 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	78fa      	ldrb	r2, [r7, #3]
 80109f6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	811a      	strh	r2, [r3, #8]
  }
}
 8010a04:	bf00      	nop
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6039      	str	r1, [r7, #0]
 8010a18:	4611      	mov	r1, r2
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	80fb      	strh	r3, [r7, #6]
 8010a20:	460b      	mov	r3, r1
 8010a22:	717b      	strb	r3, [r7, #5]
 8010a24:	4613      	mov	r3, r2
 8010a26:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010a28:	88fa      	ldrh	r2, [r7, #6]
 8010a2a:	793b      	ldrb	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	3302      	adds	r3, #2
 8010a30:	2b44      	cmp	r3, #68	@ 0x44
 8010a32:	d906      	bls.n	8010a42 <dhcp_option+0x32>
 8010a34:	4b0d      	ldr	r3, [pc, #52]	@ (8010a6c <dhcp_option+0x5c>)
 8010a36:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010a3a:	490d      	ldr	r1, [pc, #52]	@ (8010a70 <dhcp_option+0x60>)
 8010a3c:	480d      	ldr	r0, [pc, #52]	@ (8010a74 <dhcp_option+0x64>)
 8010a3e:	f005 f817 	bl	8015a70 <iprintf>
  options[options_out_len++] = option_type;
 8010a42:	88fb      	ldrh	r3, [r7, #6]
 8010a44:	1c5a      	adds	r2, r3, #1
 8010a46:	80fa      	strh	r2, [r7, #6]
 8010a48:	461a      	mov	r2, r3
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	797a      	ldrb	r2, [r7, #5]
 8010a50:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010a52:	88fb      	ldrh	r3, [r7, #6]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	80fa      	strh	r2, [r7, #6]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	793a      	ldrb	r2, [r7, #4]
 8010a60:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a62:	88fb      	ldrh	r3, [r7, #6]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	08018b44 	.word	0x08018b44
 8010a70:	08018cd8 	.word	0x08018cd8
 8010a74:	08018ba4 	.word	0x08018ba4

08010a78 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	6039      	str	r1, [r7, #0]
 8010a82:	80fb      	strh	r3, [r7, #6]
 8010a84:	4613      	mov	r3, r2
 8010a86:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010a88:	88fb      	ldrh	r3, [r7, #6]
 8010a8a:	2b43      	cmp	r3, #67	@ 0x43
 8010a8c:	d906      	bls.n	8010a9c <dhcp_option_byte+0x24>
 8010a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8010ab8 <dhcp_option_byte+0x40>)
 8010a90:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010a94:	4909      	ldr	r1, [pc, #36]	@ (8010abc <dhcp_option_byte+0x44>)
 8010a96:	480a      	ldr	r0, [pc, #40]	@ (8010ac0 <dhcp_option_byte+0x48>)
 8010a98:	f004 ffea 	bl	8015a70 <iprintf>
  options[options_out_len++] = value;
 8010a9c:	88fb      	ldrh	r3, [r7, #6]
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	80fa      	strh	r2, [r7, #6]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	797a      	ldrb	r2, [r7, #5]
 8010aaa:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010aac:	88fb      	ldrh	r3, [r7, #6]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	08018b44 	.word	0x08018b44
 8010abc:	08018d1c 	.word	0x08018d1c
 8010ac0:	08018ba4 	.word	0x08018ba4

08010ac4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	6039      	str	r1, [r7, #0]
 8010ace:	80fb      	strh	r3, [r7, #6]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010ad4:	88fb      	ldrh	r3, [r7, #6]
 8010ad6:	3302      	adds	r3, #2
 8010ad8:	2b44      	cmp	r3, #68	@ 0x44
 8010ada:	d906      	bls.n	8010aea <dhcp_option_short+0x26>
 8010adc:	4b0f      	ldr	r3, [pc, #60]	@ (8010b1c <dhcp_option_short+0x58>)
 8010ade:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010ae2:	490f      	ldr	r1, [pc, #60]	@ (8010b20 <dhcp_option_short+0x5c>)
 8010ae4:	480f      	ldr	r0, [pc, #60]	@ (8010b24 <dhcp_option_short+0x60>)
 8010ae6:	f004 ffc3 	bl	8015a70 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010aea:	88bb      	ldrh	r3, [r7, #4]
 8010aec:	0a1b      	lsrs	r3, r3, #8
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	88fb      	ldrh	r3, [r7, #6]
 8010af2:	1c59      	adds	r1, r3, #1
 8010af4:	80f9      	strh	r1, [r7, #6]
 8010af6:	4619      	mov	r1, r3
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	440b      	add	r3, r1
 8010afc:	b2d2      	uxtb	r2, r2
 8010afe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010b00:	88fb      	ldrh	r3, [r7, #6]
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	80fa      	strh	r2, [r7, #6]
 8010b06:	461a      	mov	r2, r3
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	4413      	add	r3, r2
 8010b0c:	88ba      	ldrh	r2, [r7, #4]
 8010b0e:	b2d2      	uxtb	r2, r2
 8010b10:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b12:	88fb      	ldrh	r3, [r7, #6]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	08018b44 	.word	0x08018b44
 8010b20:	08018d54 	.word	0x08018d54
 8010b24:	08018ba4 	.word	0x08018ba4

08010b28 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	4603      	mov	r3, r0
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010b36:	89fb      	ldrh	r3, [r7, #14]
 8010b38:	3304      	adds	r3, #4
 8010b3a:	2b44      	cmp	r3, #68	@ 0x44
 8010b3c:	d906      	bls.n	8010b4c <dhcp_option_long+0x24>
 8010b3e:	4b19      	ldr	r3, [pc, #100]	@ (8010ba4 <dhcp_option_long+0x7c>)
 8010b40:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010b44:	4918      	ldr	r1, [pc, #96]	@ (8010ba8 <dhcp_option_long+0x80>)
 8010b46:	4819      	ldr	r0, [pc, #100]	@ (8010bac <dhcp_option_long+0x84>)
 8010b48:	f004 ff92 	bl	8015a70 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	0e1a      	lsrs	r2, r3, #24
 8010b50:	89fb      	ldrh	r3, [r7, #14]
 8010b52:	1c59      	adds	r1, r3, #1
 8010b54:	81f9      	strh	r1, [r7, #14]
 8010b56:	4619      	mov	r1, r3
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	440b      	add	r3, r1
 8010b5c:	b2d2      	uxtb	r2, r2
 8010b5e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	0c1a      	lsrs	r2, r3, #16
 8010b64:	89fb      	ldrh	r3, [r7, #14]
 8010b66:	1c59      	adds	r1, r3, #1
 8010b68:	81f9      	strh	r1, [r7, #14]
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	440b      	add	r3, r1
 8010b70:	b2d2      	uxtb	r2, r2
 8010b72:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	0a1a      	lsrs	r2, r3, #8
 8010b78:	89fb      	ldrh	r3, [r7, #14]
 8010b7a:	1c59      	adds	r1, r3, #1
 8010b7c:	81f9      	strh	r1, [r7, #14]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	440b      	add	r3, r1
 8010b84:	b2d2      	uxtb	r2, r2
 8010b86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010b88:	89fb      	ldrh	r3, [r7, #14]
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	81fa      	strh	r2, [r7, #14]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	4413      	add	r3, r2
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	b2d2      	uxtb	r2, r2
 8010b98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}
 8010ba4:	08018b44 	.word	0x08018b44
 8010ba8:	08018d90 	.word	0x08018d90
 8010bac:	08018ba4 	.word	0x08018ba4

08010bb0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b090      	sub	sp, #64	@ 0x40
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010bc2:	220a      	movs	r2, #10
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	48ba      	ldr	r0, [pc, #744]	@ (8010eb0 <dhcp_parse_reply+0x300>)
 8010bc8:	f004 ffb7 	bl	8015b3a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	895b      	ldrh	r3, [r3, #10]
 8010bd0:	2b2b      	cmp	r3, #43	@ 0x2b
 8010bd2:	d802      	bhi.n	8010bda <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010bd4:	f06f 0301 	mvn.w	r3, #1
 8010bd8:	e2ea      	b.n	80111b0 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010be0:	23f0      	movs	r3, #240	@ 0xf0
 8010be2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	891b      	ldrh	r3, [r3, #8]
 8010be8:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010bee:	e00c      	b.n	8010c0a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf2:	895b      	ldrh	r3, [r3, #10]
 8010bf4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfc:	895b      	ldrh	r3, [r3, #10]
 8010bfe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010c00:	1ad3      	subs	r3, r2, r3
 8010c02:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d004      	beq.n	8010c1a <dhcp_parse_reply+0x6a>
 8010c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c12:	895b      	ldrh	r3, [r3, #10]
 8010c14:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d2ea      	bcs.n	8010bf0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d102      	bne.n	8010c26 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010c20:	f06f 0301 	mvn.w	r3, #1
 8010c24:	e2c4      	b.n	80111b0 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8010c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010c28:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010c2a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010c2c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010c34:	e267      	b.n	8011106 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8010c36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c3a:	4413      	add	r3, r2
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010c40:	2300      	movs	r3, #0
 8010c42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c4a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010c4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c4e:	3302      	adds	r3, #2
 8010c50:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010c52:	8bfa      	ldrh	r2, [r7, #30]
 8010c54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d202      	bcs.n	8010c60 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010c5a:	f06f 0301 	mvn.w	r3, #1
 8010c5e:	e2a7      	b.n	80111b0 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010c60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c62:	3301      	adds	r3, #1
 8010c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c66:	8952      	ldrh	r2, [r2, #10]
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	da07      	bge.n	8010c7c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010c6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010c6e:	3301      	adds	r3, #1
 8010c70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c72:	4413      	add	r3, r2
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c7a:	e00b      	b.n	8010c94 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d004      	beq.n	8010c8e <dhcp_parse_reply+0xde>
 8010c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	e000      	b.n	8010c90 <dhcp_parse_reply+0xe0>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
 8010c9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8010ca0:	f200 815a 	bhi.w	8010f58 <dhcp_parse_reply+0x3a8>
 8010ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8010cac <dhcp_parse_reply+0xfc>)
 8010ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010caa:	bf00      	nop
 8010cac:	08010d9d 	.word	0x08010d9d
 8010cb0:	08010dad 	.word	0x08010dad
 8010cb4:	08010f59 	.word	0x08010f59
 8010cb8:	08010dcf 	.word	0x08010dcf
 8010cbc:	08010f59 	.word	0x08010f59
 8010cc0:	08010f59 	.word	0x08010f59
 8010cc4:	08010dfb 	.word	0x08010dfb
 8010cc8:	08010f59 	.word	0x08010f59
 8010ccc:	08010f59 	.word	0x08010f59
 8010cd0:	08010f59 	.word	0x08010f59
 8010cd4:	08010f59 	.word	0x08010f59
 8010cd8:	08010f59 	.word	0x08010f59
 8010cdc:	08010f59 	.word	0x08010f59
 8010ce0:	08010f59 	.word	0x08010f59
 8010ce4:	08010f59 	.word	0x08010f59
 8010ce8:	08010f59 	.word	0x08010f59
 8010cec:	08010f59 	.word	0x08010f59
 8010cf0:	08010f59 	.word	0x08010f59
 8010cf4:	08010f59 	.word	0x08010f59
 8010cf8:	08010f59 	.word	0x08010f59
 8010cfc:	08010f59 	.word	0x08010f59
 8010d00:	08010f59 	.word	0x08010f59
 8010d04:	08010f59 	.word	0x08010f59
 8010d08:	08010f59 	.word	0x08010f59
 8010d0c:	08010f59 	.word	0x08010f59
 8010d10:	08010f59 	.word	0x08010f59
 8010d14:	08010f59 	.word	0x08010f59
 8010d18:	08010f59 	.word	0x08010f59
 8010d1c:	08010f59 	.word	0x08010f59
 8010d20:	08010f59 	.word	0x08010f59
 8010d24:	08010f59 	.word	0x08010f59
 8010d28:	08010f59 	.word	0x08010f59
 8010d2c:	08010f59 	.word	0x08010f59
 8010d30:	08010f59 	.word	0x08010f59
 8010d34:	08010f59 	.word	0x08010f59
 8010d38:	08010f59 	.word	0x08010f59
 8010d3c:	08010f59 	.word	0x08010f59
 8010d40:	08010f59 	.word	0x08010f59
 8010d44:	08010f59 	.word	0x08010f59
 8010d48:	08010f59 	.word	0x08010f59
 8010d4c:	08010f59 	.word	0x08010f59
 8010d50:	08010f59 	.word	0x08010f59
 8010d54:	08010f59 	.word	0x08010f59
 8010d58:	08010f59 	.word	0x08010f59
 8010d5c:	08010f59 	.word	0x08010f59
 8010d60:	08010f59 	.word	0x08010f59
 8010d64:	08010f59 	.word	0x08010f59
 8010d68:	08010f59 	.word	0x08010f59
 8010d6c:	08010f59 	.word	0x08010f59
 8010d70:	08010f59 	.word	0x08010f59
 8010d74:	08010f59 	.word	0x08010f59
 8010d78:	08010e51 	.word	0x08010e51
 8010d7c:	08010e73 	.word	0x08010e73
 8010d80:	08010ed1 	.word	0x08010ed1
 8010d84:	08010ef3 	.word	0x08010ef3
 8010d88:	08010f59 	.word	0x08010f59
 8010d8c:	08010f59 	.word	0x08010f59
 8010d90:	08010f59 	.word	0x08010f59
 8010d94:	08010f15 	.word	0x08010f15
 8010d98:	08010f37 	.word	0x08010f37
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010da6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010daa:	e0d9      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010db0:	2b04      	cmp	r3, #4
 8010db2:	d009      	beq.n	8010dc8 <dhcp_parse_reply+0x218>
 8010db4:	4b3f      	ldr	r3, [pc, #252]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010db6:	f240 622e 	movw	r2, #1582	@ 0x62e
 8010dba:	493f      	ldr	r1, [pc, #252]	@ (8010eb8 <dhcp_parse_reply+0x308>)
 8010dbc:	483f      	ldr	r0, [pc, #252]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010dbe:	f004 fe57 	bl	8015a70 <iprintf>
 8010dc2:	f06f 0305 	mvn.w	r3, #5
 8010dc6:	e1f3      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010dc8:	2306      	movs	r3, #6
 8010dca:	623b      	str	r3, [r7, #32]
        break;
 8010dcc:	e0c8      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010dce:	2304      	movs	r3, #4
 8010dd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010dd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d209      	bcs.n	8010df4 <dhcp_parse_reply+0x244>
 8010de0:	4b34      	ldr	r3, [pc, #208]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010de2:	f240 6233 	movw	r2, #1587	@ 0x633
 8010de6:	4936      	ldr	r1, [pc, #216]	@ (8010ec0 <dhcp_parse_reply+0x310>)
 8010de8:	4834      	ldr	r0, [pc, #208]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010dea:	f004 fe41 	bl	8015a70 <iprintf>
 8010dee:	f06f 0305 	mvn.w	r3, #5
 8010df2:	e1dd      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010df4:	2307      	movs	r3, #7
 8010df6:	623b      	str	r3, [r7, #32]
        break;
 8010df8:	e0b2      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8010dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010dfe:	f003 0303 	and.w	r3, r3, #3
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d009      	beq.n	8010e1c <dhcp_parse_reply+0x26c>
 8010e08:	4b2a      	ldr	r3, [pc, #168]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010e0a:	f240 6239 	movw	r2, #1593	@ 0x639
 8010e0e:	492d      	ldr	r1, [pc, #180]	@ (8010ec4 <dhcp_parse_reply+0x314>)
 8010e10:	482a      	ldr	r0, [pc, #168]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010e12:	f004 fe2d 	bl	8015a70 <iprintf>
 8010e16:	f06f 0305 	mvn.w	r3, #5
 8010e1a:	e1c9      	b.n	80111b0 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8010e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e20:	2b08      	cmp	r3, #8
 8010e22:	bf28      	it	cs
 8010e24:	2308      	movcs	r3, #8
 8010e26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010e2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d209      	bcs.n	8010e4a <dhcp_parse_reply+0x29a>
 8010e36:	4b1f      	ldr	r3, [pc, #124]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010e38:	f240 623c 	movw	r2, #1596	@ 0x63c
 8010e3c:	4920      	ldr	r1, [pc, #128]	@ (8010ec0 <dhcp_parse_reply+0x310>)
 8010e3e:	481f      	ldr	r0, [pc, #124]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010e40:	f004 fe16 	bl	8015a70 <iprintf>
 8010e44:	f06f 0305 	mvn.w	r3, #5
 8010e48:	e1b2      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8010e4a:	2308      	movs	r3, #8
 8010e4c:	623b      	str	r3, [r7, #32]
        break;
 8010e4e:	e087      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e54:	2b04      	cmp	r3, #4
 8010e56:	d009      	beq.n	8010e6c <dhcp_parse_reply+0x2bc>
 8010e58:	4b16      	ldr	r3, [pc, #88]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010e5a:	f240 6241 	movw	r2, #1601	@ 0x641
 8010e5e:	4916      	ldr	r1, [pc, #88]	@ (8010eb8 <dhcp_parse_reply+0x308>)
 8010e60:	4816      	ldr	r0, [pc, #88]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010e62:	f004 fe05 	bl	8015a70 <iprintf>
 8010e66:	f06f 0305 	mvn.w	r3, #5
 8010e6a:	e1a1      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010e6c:	2303      	movs	r3, #3
 8010e6e:	623b      	str	r3, [r7, #32]
        break;
 8010e70:	e076      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d009      	beq.n	8010e8e <dhcp_parse_reply+0x2de>
 8010e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010e7c:	f240 624f 	movw	r2, #1615	@ 0x64f
 8010e80:	4911      	ldr	r1, [pc, #68]	@ (8010ec8 <dhcp_parse_reply+0x318>)
 8010e82:	480e      	ldr	r0, [pc, #56]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010e84:	f004 fdf4 	bl	8015a70 <iprintf>
 8010e88:	f06f 0305 	mvn.w	r3, #5
 8010e8c:	e190      	b.n	80111b0 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010e8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e90:	2bf0      	cmp	r3, #240	@ 0xf0
 8010e92:	d009      	beq.n	8010ea8 <dhcp_parse_reply+0x2f8>
 8010e94:	4b07      	ldr	r3, [pc, #28]	@ (8010eb4 <dhcp_parse_reply+0x304>)
 8010e96:	f240 6251 	movw	r2, #1617	@ 0x651
 8010e9a:	490c      	ldr	r1, [pc, #48]	@ (8010ecc <dhcp_parse_reply+0x31c>)
 8010e9c:	4807      	ldr	r0, [pc, #28]	@ (8010ebc <dhcp_parse_reply+0x30c>)
 8010e9e:	f004 fde7 	bl	8015a70 <iprintf>
 8010ea2:	f06f 0305 	mvn.w	r3, #5
 8010ea6:	e183      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	623b      	str	r3, [r7, #32]
        break;
 8010eac:	e058      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
 8010eae:	bf00      	nop
 8010eb0:	20003bf0 	.word	0x20003bf0
 8010eb4:	08018b44 	.word	0x08018b44
 8010eb8:	08018dcc 	.word	0x08018dcc
 8010ebc:	08018ba4 	.word	0x08018ba4
 8010ec0:	08018dd8 	.word	0x08018dd8
 8010ec4:	08018dec 	.word	0x08018dec
 8010ec8:	08018dfc 	.word	0x08018dfc
 8010ecc:	08018e08 	.word	0x08018e08
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d009      	beq.n	8010eec <dhcp_parse_reply+0x33c>
 8010ed8:	4b9d      	ldr	r3, [pc, #628]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8010eda:	f240 6255 	movw	r2, #1621	@ 0x655
 8010ede:	499d      	ldr	r1, [pc, #628]	@ (8011154 <dhcp_parse_reply+0x5a4>)
 8010ee0:	489d      	ldr	r0, [pc, #628]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8010ee2:	f004 fdc5 	bl	8015a70 <iprintf>
 8010ee6:	f06f 0305 	mvn.w	r3, #5
 8010eea:	e161      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010eec:	2301      	movs	r3, #1
 8010eee:	623b      	str	r3, [r7, #32]
        break;
 8010ef0:	e036      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	d009      	beq.n	8010f0e <dhcp_parse_reply+0x35e>
 8010efa:	4b95      	ldr	r3, [pc, #596]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8010efc:	f240 6259 	movw	r2, #1625	@ 0x659
 8010f00:	4996      	ldr	r1, [pc, #600]	@ (801115c <dhcp_parse_reply+0x5ac>)
 8010f02:	4895      	ldr	r0, [pc, #596]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8010f04:	f004 fdb4 	bl	8015a70 <iprintf>
 8010f08:	f06f 0305 	mvn.w	r3, #5
 8010f0c:	e150      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010f0e:	2302      	movs	r3, #2
 8010f10:	623b      	str	r3, [r7, #32]
        break;
 8010f12:	e025      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f18:	2b04      	cmp	r3, #4
 8010f1a:	d009      	beq.n	8010f30 <dhcp_parse_reply+0x380>
 8010f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8010f1e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8010f22:	498e      	ldr	r1, [pc, #568]	@ (801115c <dhcp_parse_reply+0x5ac>)
 8010f24:	488c      	ldr	r0, [pc, #560]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8010f26:	f004 fda3 	bl	8015a70 <iprintf>
 8010f2a:	f06f 0305 	mvn.w	r3, #5
 8010f2e:	e13f      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010f30:	2304      	movs	r3, #4
 8010f32:	623b      	str	r3, [r7, #32]
        break;
 8010f34:	e014      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f3a:	2b04      	cmp	r3, #4
 8010f3c:	d009      	beq.n	8010f52 <dhcp_parse_reply+0x3a2>
 8010f3e:	4b84      	ldr	r3, [pc, #528]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8010f40:	f240 6261 	movw	r2, #1633	@ 0x661
 8010f44:	4985      	ldr	r1, [pc, #532]	@ (801115c <dhcp_parse_reply+0x5ac>)
 8010f46:	4884      	ldr	r0, [pc, #528]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8010f48:	f004 fd92 	bl	8015a70 <iprintf>
 8010f4c:	f06f 0305 	mvn.w	r3, #5
 8010f50:	e12e      	b.n	80111b0 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010f52:	2305      	movs	r3, #5
 8010f54:	623b      	str	r3, [r7, #32]
        break;
 8010f56:	e003      	b.n	8010f60 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010f5e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d103      	bne.n	8010f6e <dhcp_parse_reply+0x3be>
      offset++;
 8010f66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f68:	3301      	adds	r3, #1
 8010f6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8010f6c:	e0a1      	b.n	80110b2 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010f6e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f74:	4413      	add	r3, r2
 8010f76:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	dd02      	ble.n	8010f84 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8010f7e:	f06f 0301 	mvn.w	r3, #1
 8010f82:	e115      	b.n	80111b0 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8010f84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f8c:	4413      	add	r3, r2
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	3302      	adds	r3, #2
 8010f92:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8010f94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 808a 	beq.w	80110b2 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	db02      	blt.n	8010fae <dhcp_parse_reply+0x3fe>
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	2b09      	cmp	r3, #9
 8010fac:	dd06      	ble.n	8010fbc <dhcp_parse_reply+0x40c>
 8010fae:	4b68      	ldr	r3, [pc, #416]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8010fb0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8010fb4:	496a      	ldr	r1, [pc, #424]	@ (8011160 <dhcp_parse_reply+0x5b0>)
 8010fb6:	4868      	ldr	r0, [pc, #416]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8010fb8:	f004 fd5a 	bl	8015a70 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010fbc:	4a69      	ldr	r2, [pc, #420]	@ (8011164 <dhcp_parse_reply+0x5b4>)
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d174      	bne.n	80110b2 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8010fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010fcc:	2b04      	cmp	r3, #4
 8010fce:	bf28      	it	cs
 8010fd0:	2304      	movcs	r3, #4
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010fd6:	8bfb      	ldrh	r3, [r7, #30]
 8010fd8:	8aba      	ldrh	r2, [r7, #20]
 8010fda:	f107 0108 	add.w	r1, r7, #8
 8010fde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010fe0:	f7f7 fa0e 	bl	8008400 <pbuf_copy_partial>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	8abb      	ldrh	r3, [r7, #20]
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d002      	beq.n	8010ff4 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8010fee:	f06f 0301 	mvn.w	r3, #1
 8010ff2:	e0dd      	b.n	80111b0 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8010ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ff8:	2b04      	cmp	r3, #4
 8010ffa:	d933      	bls.n	8011064 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011000:	f003 0303 	and.w	r3, r3, #3
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d009      	beq.n	801101e <dhcp_parse_reply+0x46e>
 801100a:	4b51      	ldr	r3, [pc, #324]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 801100c:	f240 6281 	movw	r2, #1665	@ 0x681
 8011010:	4955      	ldr	r1, [pc, #340]	@ (8011168 <dhcp_parse_reply+0x5b8>)
 8011012:	4851      	ldr	r0, [pc, #324]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 8011014:	f004 fd2c 	bl	8015a70 <iprintf>
 8011018:	f06f 0305 	mvn.w	r3, #5
 801101c:	e0c8      	b.n	80111b0 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801101e:	4a51      	ldr	r2, [pc, #324]	@ (8011164 <dhcp_parse_reply+0x5b4>)
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	4413      	add	r3, r2
 8011024:	2201      	movs	r2, #1
 8011026:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	4618      	mov	r0, r3
 801102c:	f7f5 fbf8 	bl	8006820 <lwip_htonl>
 8011030:	4602      	mov	r2, r0
 8011032:	494e      	ldr	r1, [pc, #312]	@ (801116c <dhcp_parse_reply+0x5bc>)
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801103a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801103e:	3b04      	subs	r3, #4
 8011040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011044:	8bfb      	ldrh	r3, [r7, #30]
 8011046:	3304      	adds	r3, #4
 8011048:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801104a:	8a7a      	ldrh	r2, [r7, #18]
 801104c:	8bfb      	ldrh	r3, [r7, #30]
 801104e:	429a      	cmp	r2, r3
 8011050:	d202      	bcs.n	8011058 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8011052:	f06f 0301 	mvn.w	r3, #1
 8011056:	e0ab      	b.n	80111b0 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 8011058:	8a7b      	ldrh	r3, [r7, #18]
 801105a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801105c:	6a3b      	ldr	r3, [r7, #32]
 801105e:	3301      	adds	r3, #1
 8011060:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011062:	e79e      	b.n	8010fa2 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8011064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011068:	2b04      	cmp	r3, #4
 801106a:	d106      	bne.n	801107a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	4618      	mov	r0, r3
 8011070:	f7f5 fbd6 	bl	8006820 <lwip_htonl>
 8011074:	4603      	mov	r3, r0
 8011076:	60bb      	str	r3, [r7, #8]
 8011078:	e011      	b.n	801109e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801107a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801107e:	2b01      	cmp	r3, #1
 8011080:	d009      	beq.n	8011096 <dhcp_parse_reply+0x4e6>
 8011082:	4b33      	ldr	r3, [pc, #204]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 8011084:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8011088:	4939      	ldr	r1, [pc, #228]	@ (8011170 <dhcp_parse_reply+0x5c0>)
 801108a:	4833      	ldr	r0, [pc, #204]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 801108c:	f004 fcf0 	bl	8015a70 <iprintf>
 8011090:	f06f 0305 	mvn.w	r3, #5
 8011094:	e08c      	b.n	80111b0 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 8011096:	f107 0308 	add.w	r3, r7, #8
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801109e:	4a31      	ldr	r2, [pc, #196]	@ (8011164 <dhcp_parse_reply+0x5b4>)
 80110a0:	6a3b      	ldr	r3, [r7, #32]
 80110a2:	4413      	add	r3, r2
 80110a4:	2201      	movs	r2, #1
 80110a6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	4930      	ldr	r1, [pc, #192]	@ (801116c <dhcp_parse_reply+0x5bc>)
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80110b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b4:	895b      	ldrh	r3, [r3, #10]
 80110b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d324      	bcc.n	8011106 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 80110bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110be:	895b      	ldrh	r3, [r3, #10]
 80110c0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80110c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c8:	895b      	ldrh	r3, [r3, #10]
 80110ca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80110d0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80110d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d213      	bcs.n	8011100 <dhcp_parse_reply+0x550>
        q = q->next;
 80110d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80110de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d109      	bne.n	80110f8 <dhcp_parse_reply+0x548>
 80110e4:	4b1a      	ldr	r3, [pc, #104]	@ (8011150 <dhcp_parse_reply+0x5a0>)
 80110e6:	f240 629d 	movw	r2, #1693	@ 0x69d
 80110ea:	4922      	ldr	r1, [pc, #136]	@ (8011174 <dhcp_parse_reply+0x5c4>)
 80110ec:	481a      	ldr	r0, [pc, #104]	@ (8011158 <dhcp_parse_reply+0x5a8>)
 80110ee:	f004 fcbf 	bl	8015a70 <iprintf>
 80110f2:	f06f 0305 	mvn.w	r3, #5
 80110f6:	e05b      	b.n	80111b0 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 80110f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80110fe:	e002      	b.n	8011106 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011100:	f06f 0301 	mvn.w	r3, #1
 8011104:	e054      	b.n	80111b0 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00a      	beq.n	8011122 <dhcp_parse_reply+0x572>
 801110c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801110e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011110:	429a      	cmp	r2, r3
 8011112:	d206      	bcs.n	8011122 <dhcp_parse_reply+0x572>
 8011114:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011116:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2bff      	cmp	r3, #255	@ 0xff
 801111e:	f47f ad8a 	bne.w	8010c36 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011122:	4b10      	ldr	r3, [pc, #64]	@ (8011164 <dhcp_parse_reply+0x5b4>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d02d      	beq.n	8011186 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801112a:	4b10      	ldr	r3, [pc, #64]	@ (801116c <dhcp_parse_reply+0x5bc>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011130:	4b0c      	ldr	r3, [pc, #48]	@ (8011164 <dhcp_parse_reply+0x5b4>)
 8011132:	2200      	movs	r2, #0
 8011134:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2b01      	cmp	r3, #1
 801113a:	d102      	bne.n	8011142 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801113c:	2301      	movs	r3, #1
 801113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011140:	e021      	b.n	8011186 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2b02      	cmp	r3, #2
 8011146:	d117      	bne.n	8011178 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8011148:	2301      	movs	r3, #1
 801114a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801114c:	e01b      	b.n	8011186 <dhcp_parse_reply+0x5d6>
 801114e:	bf00      	nop
 8011150:	08018b44 	.word	0x08018b44
 8011154:	08018dfc 	.word	0x08018dfc
 8011158:	08018ba4 	.word	0x08018ba4
 801115c:	08018dcc 	.word	0x08018dcc
 8011160:	08018e20 	.word	0x08018e20
 8011164:	20003bf0 	.word	0x20003bf0
 8011168:	08018e34 	.word	0x08018e34
 801116c:	20003bc8 	.word	0x20003bc8
 8011170:	08018e4c 	.word	0x08018e4c
 8011174:	08018e60 	.word	0x08018e60
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b03      	cmp	r3, #3
 801117c:	d103      	bne.n	8011186 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801117e:	2301      	movs	r3, #1
 8011180:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8011182:	2301      	movs	r3, #1
 8011184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8011186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011188:	2b00      	cmp	r3, #0
 801118a:	d006      	beq.n	801119a <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801118c:	2300      	movs	r3, #0
 801118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8011190:	236c      	movs	r3, #108	@ 0x6c
 8011192:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011194:	23ec      	movs	r3, #236	@ 0xec
 8011196:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8011198:	e527      	b.n	8010bea <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801119c:	2b00      	cmp	r3, #0
 801119e:	d006      	beq.n	80111ae <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80111a4:	232c      	movs	r3, #44	@ 0x2c
 80111a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80111a8:	236c      	movs	r3, #108	@ 0x6c
 80111aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80111ac:	e51d      	b.n	8010bea <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3740      	adds	r7, #64	@ 0x40
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b08a      	sub	sp, #40	@ 0x28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80111c6:	4b60      	ldr	r3, [pc, #384]	@ (8011348 <dhcp_recv+0x190>)
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80111cc:	6a3b      	ldr	r3, [r7, #32]
 80111ce:	6a1b      	ldr	r3, [r3, #32]
 80111d0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f000 809d 	beq.w	801131a <dhcp_recv+0x162>
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	791b      	ldrb	r3, [r3, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 8098 	beq.w	801131a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	895b      	ldrh	r3, [r3, #10]
 80111ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80111f0:	f240 8095 	bls.w	801131e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80111f4:	69bb      	ldr	r3, [r7, #24]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	f040 8092 	bne.w	8011322 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80111fe:	2300      	movs	r3, #0
 8011200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011204:	e012      	b.n	801122c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801120a:	6a3a      	ldr	r2, [r7, #32]
 801120c:	4413      	add	r3, r2
 801120e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8011212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011216:	69b9      	ldr	r1, [r7, #24]
 8011218:	440b      	add	r3, r1
 801121a:	7f1b      	ldrb	r3, [r3, #28]
 801121c:	429a      	cmp	r2, r3
 801121e:	f040 8082 	bne.w	8011326 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011226:	3301      	adds	r3, #1
 8011228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011232:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011236:	429a      	cmp	r2, r3
 8011238:	d203      	bcs.n	8011242 <dhcp_recv+0x8a>
 801123a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801123e:	2b05      	cmp	r3, #5
 8011240:	d9e1      	bls.n	8011206 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	f7f5 faea 	bl	8006820 <lwip_htonl>
 801124c:	4602      	mov	r2, r0
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	429a      	cmp	r2, r3
 8011254:	d169      	bne.n	801132a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011256:	69f9      	ldr	r1, [r7, #28]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff fca9 	bl	8010bb0 <dhcp_parse_reply>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d164      	bne.n	801132e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011264:	4b39      	ldr	r3, [pc, #228]	@ (801134c <dhcp_recv+0x194>)
 8011266:	785b      	ldrb	r3, [r3, #1]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d062      	beq.n	8011332 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8011272:	4b37      	ldr	r3, [pc, #220]	@ (8011350 <dhcp_recv+0x198>)
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011278:	7cfb      	ldrb	r3, [r7, #19]
 801127a:	2b05      	cmp	r3, #5
 801127c:	d12a      	bne.n	80112d4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	795b      	ldrb	r3, [r3, #5]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d112      	bne.n	80112ac <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011286:	6979      	ldr	r1, [r7, #20]
 8011288:	6a38      	ldr	r0, [r7, #32]
 801128a:	f7fe fe09 	bl	800fea0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011294:	f003 0308 	and.w	r3, r3, #8
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801129c:	6a38      	ldr	r0, [r7, #32]
 801129e:	f7fe fb79 	bl	800f994 <dhcp_check>
 80112a2:	e049      	b.n	8011338 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80112a4:	6a38      	ldr	r0, [r7, #32]
 80112a6:	f7ff f83d 	bl	8010324 <dhcp_bind>
 80112aa:	e045      	b.n	8011338 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	795b      	ldrb	r3, [r3, #5]
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d007      	beq.n	80112c4 <dhcp_recv+0x10c>
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	795b      	ldrb	r3, [r3, #5]
 80112b8:	2b04      	cmp	r3, #4
 80112ba:	d003      	beq.n	80112c4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80112c0:	2b05      	cmp	r3, #5
 80112c2:	d139      	bne.n	8011338 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80112c4:	6979      	ldr	r1, [r7, #20]
 80112c6:	6a38      	ldr	r0, [r7, #32]
 80112c8:	f7fe fdea 	bl	800fea0 <dhcp_handle_ack>
      dhcp_bind(netif);
 80112cc:	6a38      	ldr	r0, [r7, #32]
 80112ce:	f7ff f829 	bl	8010324 <dhcp_bind>
 80112d2:	e031      	b.n	8011338 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80112d4:	7cfb      	ldrb	r3, [r7, #19]
 80112d6:	2b06      	cmp	r3, #6
 80112d8:	d113      	bne.n	8011302 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d00b      	beq.n	80112fa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	795b      	ldrb	r3, [r3, #5]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d007      	beq.n	80112fa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80112ee:	2b04      	cmp	r3, #4
 80112f0:	d003      	beq.n	80112fa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	795b      	ldrb	r3, [r3, #5]
 80112f6:	2b05      	cmp	r3, #5
 80112f8:	d103      	bne.n	8011302 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80112fa:	6a38      	ldr	r0, [r7, #32]
 80112fc:	f7fe fb30 	bl	800f960 <dhcp_handle_nak>
 8011300:	e01a      	b.n	8011338 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011302:	7cfb      	ldrb	r3, [r7, #19]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d116      	bne.n	8011336 <dhcp_recv+0x17e>
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	795b      	ldrb	r3, [r3, #5]
 801130c:	2b06      	cmp	r3, #6
 801130e:	d112      	bne.n	8011336 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011310:	6979      	ldr	r1, [r7, #20]
 8011312:	6a38      	ldr	r0, [r7, #32]
 8011314:	f7fe fb72 	bl	800f9fc <dhcp_handle_offer>
 8011318:	e00e      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801131a:	bf00      	nop
 801131c:	e00c      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801131e:	bf00      	nop
 8011320:	e00a      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011322:	bf00      	nop
 8011324:	e008      	b.n	8011338 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8011326:	bf00      	nop
 8011328:	e006      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801132a:	bf00      	nop
 801132c:	e004      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801132e:	bf00      	nop
 8011330:	e002      	b.n	8011338 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011332:	bf00      	nop
 8011334:	e000      	b.n	8011338 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011336:	bf00      	nop
  pbuf_free(p);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f7f6 fe5b 	bl	8007ff4 <pbuf_free>
}
 801133e:	bf00      	nop
 8011340:	3728      	adds	r7, #40	@ 0x28
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	20000aa8 	.word	0x20000aa8
 801134c:	20003bf0 	.word	0x20003bf0
 8011350:	20003bc8 	.word	0x20003bc8

08011354 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b088      	sub	sp, #32
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	603b      	str	r3, [r7, #0]
 8011360:	4613      	mov	r3, r2
 8011362:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d108      	bne.n	801137c <dhcp_create_msg+0x28>
 801136a:	4b5f      	ldr	r3, [pc, #380]	@ (80114e8 <dhcp_create_msg+0x194>)
 801136c:	f240 7269 	movw	r2, #1897	@ 0x769
 8011370:	495e      	ldr	r1, [pc, #376]	@ (80114ec <dhcp_create_msg+0x198>)
 8011372:	485f      	ldr	r0, [pc, #380]	@ (80114f0 <dhcp_create_msg+0x19c>)
 8011374:	f004 fb7c 	bl	8015a70 <iprintf>
 8011378:	2300      	movs	r3, #0
 801137a:	e0b1      	b.n	80114e0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d108      	bne.n	8011394 <dhcp_create_msg+0x40>
 8011382:	4b59      	ldr	r3, [pc, #356]	@ (80114e8 <dhcp_create_msg+0x194>)
 8011384:	f240 726a 	movw	r2, #1898	@ 0x76a
 8011388:	495a      	ldr	r1, [pc, #360]	@ (80114f4 <dhcp_create_msg+0x1a0>)
 801138a:	4859      	ldr	r0, [pc, #356]	@ (80114f0 <dhcp_create_msg+0x19c>)
 801138c:	f004 fb70 	bl	8015a70 <iprintf>
 8011390:	2300      	movs	r3, #0
 8011392:	e0a5      	b.n	80114e0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011394:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011398:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801139c:	2036      	movs	r0, #54	@ 0x36
 801139e:	f7f6 fb47 	bl	8007a30 <pbuf_alloc>
 80113a2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e098      	b.n	80114e0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	895b      	ldrh	r3, [r3, #10]
 80113b2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80113b6:	d206      	bcs.n	80113c6 <dhcp_create_msg+0x72>
 80113b8:	4b4b      	ldr	r3, [pc, #300]	@ (80114e8 <dhcp_create_msg+0x194>)
 80113ba:	f240 7271 	movw	r2, #1905	@ 0x771
 80113be:	494e      	ldr	r1, [pc, #312]	@ (80114f8 <dhcp_create_msg+0x1a4>)
 80113c0:	484b      	ldr	r0, [pc, #300]	@ (80114f0 <dhcp_create_msg+0x19c>)
 80113c2:	f004 fb55 	bl	8015a70 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80113c6:	79fb      	ldrb	r3, [r7, #7]
 80113c8:	2b03      	cmp	r3, #3
 80113ca:	d103      	bne.n	80113d4 <dhcp_create_msg+0x80>
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	795b      	ldrb	r3, [r3, #5]
 80113d0:	2b03      	cmp	r3, #3
 80113d2:	d10d      	bne.n	80113f0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	799b      	ldrb	r3, [r3, #6]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d105      	bne.n	80113e8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80113dc:	f004 fa48 	bl	8015870 <rand>
 80113e0:	4603      	mov	r3, r0
 80113e2:	461a      	mov	r2, r3
 80113e4:	4b45      	ldr	r3, [pc, #276]	@ (80114fc <dhcp_create_msg+0x1a8>)
 80113e6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80113e8:	4b44      	ldr	r3, [pc, #272]	@ (80114fc <dhcp_create_msg+0x1a8>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80113f6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80113fa:	2100      	movs	r1, #0
 80113fc:	6978      	ldr	r0, [r7, #20]
 80113fe:	f004 fb9c 	bl	8015b3a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	2201      	movs	r2, #1
 8011406:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	2201      	movs	r2, #1
 801140c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4618      	mov	r0, r3
 801141e:	f7f5 f9ff 	bl	8006820 <lwip_htonl>
 8011422:	4602      	mov	r2, r0
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	2b08      	cmp	r3, #8
 801142c:	d010      	beq.n	8011450 <dhcp_create_msg+0xfc>
 801142e:	79fb      	ldrb	r3, [r7, #7]
 8011430:	2b04      	cmp	r3, #4
 8011432:	d00d      	beq.n	8011450 <dhcp_create_msg+0xfc>
 8011434:	79fb      	ldrb	r3, [r7, #7]
 8011436:	2b07      	cmp	r3, #7
 8011438:	d00a      	beq.n	8011450 <dhcp_create_msg+0xfc>
 801143a:	79fb      	ldrb	r3, [r7, #7]
 801143c:	2b03      	cmp	r3, #3
 801143e:	d10c      	bne.n	801145a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011444:	2b05      	cmp	r3, #5
 8011446:	d003      	beq.n	8011450 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	795b      	ldrb	r3, [r3, #5]
 801144c:	2b04      	cmp	r3, #4
 801144e:	d104      	bne.n	801145a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	3304      	adds	r3, #4
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801145a:	2300      	movs	r3, #0
 801145c:	83fb      	strh	r3, [r7, #30]
 801145e:	e00c      	b.n	801147a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011460:	8bfa      	ldrh	r2, [r7, #30]
 8011462:	8bfb      	ldrh	r3, [r7, #30]
 8011464:	68f9      	ldr	r1, [r7, #12]
 8011466:	440a      	add	r2, r1
 8011468:	f892 1026 	ldrb.w	r1, [r2, #38]	@ 0x26
 801146c:	697a      	ldr	r2, [r7, #20]
 801146e:	4413      	add	r3, r2
 8011470:	460a      	mov	r2, r1
 8011472:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011474:	8bfb      	ldrh	r3, [r7, #30]
 8011476:	3301      	adds	r3, #1
 8011478:	83fb      	strh	r3, [r7, #30]
 801147a:	8bfb      	ldrh	r3, [r7, #30]
 801147c:	2b05      	cmp	r3, #5
 801147e:	d9ef      	bls.n	8011460 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	2200      	movs	r2, #0
 8011484:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011488:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801148c:	2200      	movs	r2, #0
 801148e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8011492:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8011496:	2200      	movs	r2, #0
 8011498:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801149c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80114a0:	2200      	movs	r2, #0
 80114a2:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80114a6:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80114b0:	2301      	movs	r3, #1
 80114b2:	2235      	movs	r2, #53	@ 0x35
 80114b4:	2000      	movs	r0, #0
 80114b6:	f7ff faab 	bl	8010a10 <dhcp_option>
 80114ba:	4603      	mov	r3, r0
 80114bc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80114c4:	79fa      	ldrb	r2, [r7, #7]
 80114c6:	8a7b      	ldrh	r3, [r7, #18]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff fad5 	bl	8010a78 <dhcp_option_byte>
 80114ce:	4603      	mov	r3, r0
 80114d0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	8a7a      	ldrh	r2, [r7, #18]
 80114dc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80114de:	69bb      	ldr	r3, [r7, #24]
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3720      	adds	r7, #32
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	08018b44 	.word	0x08018b44
 80114ec:	08018e74 	.word	0x08018e74
 80114f0:	08018ba4 	.word	0x08018ba4
 80114f4:	08018e94 	.word	0x08018e94
 80114f8:	08018eb4 	.word	0x08018eb4
 80114fc:	20003c04 	.word	0x20003c04

08011500 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	4603      	mov	r3, r0
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
 801150c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801150e:	89fb      	ldrh	r3, [r7, #14]
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	81fa      	strh	r2, [r7, #14]
 8011514:	461a      	mov	r2, r3
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	4413      	add	r3, r2
 801151a:	22ff      	movs	r2, #255	@ 0xff
 801151c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801151e:	e007      	b.n	8011530 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011520:	89fb      	ldrh	r3, [r7, #14]
 8011522:	1c5a      	adds	r2, r3, #1
 8011524:	81fa      	strh	r2, [r7, #14]
 8011526:	461a      	mov	r2, r3
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	4413      	add	r3, r2
 801152c:	2200      	movs	r2, #0
 801152e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011530:	89fb      	ldrh	r3, [r7, #14]
 8011532:	2b43      	cmp	r3, #67	@ 0x43
 8011534:	d904      	bls.n	8011540 <dhcp_option_trailer+0x40>
 8011536:	89fb      	ldrh	r3, [r7, #14]
 8011538:	f003 0303 	and.w	r3, r3, #3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <dhcp_option_trailer+0x46>
 8011540:	89fb      	ldrh	r3, [r7, #14]
 8011542:	2b43      	cmp	r3, #67	@ 0x43
 8011544:	d9ec      	bls.n	8011520 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011546:	89fb      	ldrh	r3, [r7, #14]
 8011548:	33f0      	adds	r3, #240	@ 0xf0
 801154a:	b29b      	uxth	r3, r3
 801154c:	4619      	mov	r1, r3
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7f6 fbcc 	bl	8007cec <pbuf_realloc>
}
 8011554:	bf00      	nop
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d017      	beq.n	801159a <dhcp_supplied_address+0x3e>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a1b      	ldr	r3, [r3, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d013      	beq.n	801159a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6a1b      	ldr	r3, [r3, #32]
 8011576:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	795b      	ldrb	r3, [r3, #5]
 801157c:	2b0a      	cmp	r3, #10
 801157e:	d007      	beq.n	8011590 <dhcp_supplied_address+0x34>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	795b      	ldrb	r3, [r3, #5]
 8011584:	2b05      	cmp	r3, #5
 8011586:	d003      	beq.n	8011590 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801158c:	2b04      	cmp	r3, #4
 801158e:	d101      	bne.n	8011594 <dhcp_supplied_address+0x38>
 8011590:	2301      	movs	r3, #1
 8011592:	e000      	b.n	8011596 <dhcp_supplied_address+0x3a>
 8011594:	2300      	movs	r3, #0
 8011596:	b2db      	uxtb	r3, r3
 8011598:	e000      	b.n	801159c <dhcp_supplied_address+0x40>
  }
  return 0;
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3714      	adds	r7, #20
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80115b0:	4915      	ldr	r1, [pc, #84]	@ (8011608 <etharp_free_entry+0x60>)
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	4613      	mov	r3, r2
 80115b6:	005b      	lsls	r3, r3, #1
 80115b8:	4413      	add	r3, r2
 80115ba:	00db      	lsls	r3, r3, #3
 80115bc:	440b      	add	r3, r1
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d013      	beq.n	80115ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80115c4:	4910      	ldr	r1, [pc, #64]	@ (8011608 <etharp_free_entry+0x60>)
 80115c6:	687a      	ldr	r2, [r7, #4]
 80115c8:	4613      	mov	r3, r2
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	4413      	add	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	440b      	add	r3, r1
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f6 fd0d 	bl	8007ff4 <pbuf_free>
    arp_table[i].q = NULL;
 80115da:	490b      	ldr	r1, [pc, #44]	@ (8011608 <etharp_free_entry+0x60>)
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	4613      	mov	r3, r2
 80115e0:	005b      	lsls	r3, r3, #1
 80115e2:	4413      	add	r3, r2
 80115e4:	00db      	lsls	r3, r3, #3
 80115e6:	440b      	add	r3, r1
 80115e8:	2200      	movs	r2, #0
 80115ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80115ec:	4906      	ldr	r1, [pc, #24]	@ (8011608 <etharp_free_entry+0x60>)
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	4613      	mov	r3, r2
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	4413      	add	r3, r2
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	440b      	add	r3, r1
 80115fa:	3314      	adds	r3, #20
 80115fc:	2200      	movs	r2, #0
 80115fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011600:	bf00      	nop
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20003c08 	.word	0x20003c08

0801160c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011612:	2300      	movs	r3, #0
 8011614:	607b      	str	r3, [r7, #4]
 8011616:	e096      	b.n	8011746 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011618:	494f      	ldr	r1, [pc, #316]	@ (8011758 <etharp_tmr+0x14c>)
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	4613      	mov	r3, r2
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	4413      	add	r3, r2
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	440b      	add	r3, r1
 8011626:	3314      	adds	r3, #20
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801162c:	78fb      	ldrb	r3, [r7, #3]
 801162e:	2b00      	cmp	r3, #0
 8011630:	f000 8086 	beq.w	8011740 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011634:	4948      	ldr	r1, [pc, #288]	@ (8011758 <etharp_tmr+0x14c>)
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	4613      	mov	r3, r2
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	4413      	add	r3, r2
 801163e:	00db      	lsls	r3, r3, #3
 8011640:	440b      	add	r3, r1
 8011642:	3312      	adds	r3, #18
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	3301      	adds	r3, #1
 8011648:	b298      	uxth	r0, r3
 801164a:	4943      	ldr	r1, [pc, #268]	@ (8011758 <etharp_tmr+0x14c>)
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	4613      	mov	r3, r2
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	4413      	add	r3, r2
 8011654:	00db      	lsls	r3, r3, #3
 8011656:	440b      	add	r3, r1
 8011658:	3312      	adds	r3, #18
 801165a:	4602      	mov	r2, r0
 801165c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801165e:	493e      	ldr	r1, [pc, #248]	@ (8011758 <etharp_tmr+0x14c>)
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	4613      	mov	r3, r2
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	4413      	add	r3, r2
 8011668:	00db      	lsls	r3, r3, #3
 801166a:	440b      	add	r3, r1
 801166c:	3312      	adds	r3, #18
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011674:	d215      	bcs.n	80116a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011676:	4938      	ldr	r1, [pc, #224]	@ (8011758 <etharp_tmr+0x14c>)
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	440b      	add	r3, r1
 8011684:	3314      	adds	r3, #20
 8011686:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011688:	2b01      	cmp	r3, #1
 801168a:	d10e      	bne.n	80116aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801168c:	4932      	ldr	r1, [pc, #200]	@ (8011758 <etharp_tmr+0x14c>)
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	440b      	add	r3, r1
 801169a:	3312      	adds	r3, #18
 801169c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801169e:	2b04      	cmp	r3, #4
 80116a0:	d903      	bls.n	80116aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7ff ff80 	bl	80115a8 <etharp_free_entry>
 80116a8:	e04a      	b.n	8011740 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80116aa:	492b      	ldr	r1, [pc, #172]	@ (8011758 <etharp_tmr+0x14c>)
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	4613      	mov	r3, r2
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	440b      	add	r3, r1
 80116b8:	3314      	adds	r3, #20
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	2b03      	cmp	r3, #3
 80116be:	d10a      	bne.n	80116d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80116c0:	4925      	ldr	r1, [pc, #148]	@ (8011758 <etharp_tmr+0x14c>)
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	4613      	mov	r3, r2
 80116c6:	005b      	lsls	r3, r3, #1
 80116c8:	4413      	add	r3, r2
 80116ca:	00db      	lsls	r3, r3, #3
 80116cc:	440b      	add	r3, r1
 80116ce:	3314      	adds	r3, #20
 80116d0:	2204      	movs	r2, #4
 80116d2:	701a      	strb	r2, [r3, #0]
 80116d4:	e034      	b.n	8011740 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80116d6:	4920      	ldr	r1, [pc, #128]	@ (8011758 <etharp_tmr+0x14c>)
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	4613      	mov	r3, r2
 80116dc:	005b      	lsls	r3, r3, #1
 80116de:	4413      	add	r3, r2
 80116e0:	00db      	lsls	r3, r3, #3
 80116e2:	440b      	add	r3, r1
 80116e4:	3314      	adds	r3, #20
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b04      	cmp	r3, #4
 80116ea:	d10a      	bne.n	8011702 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80116ec:	491a      	ldr	r1, [pc, #104]	@ (8011758 <etharp_tmr+0x14c>)
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	4613      	mov	r3, r2
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	4413      	add	r3, r2
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	440b      	add	r3, r1
 80116fa:	3314      	adds	r3, #20
 80116fc:	2202      	movs	r2, #2
 80116fe:	701a      	strb	r2, [r3, #0]
 8011700:	e01e      	b.n	8011740 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011702:	4915      	ldr	r1, [pc, #84]	@ (8011758 <etharp_tmr+0x14c>)
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	4613      	mov	r3, r2
 8011708:	005b      	lsls	r3, r3, #1
 801170a:	4413      	add	r3, r2
 801170c:	00db      	lsls	r3, r3, #3
 801170e:	440b      	add	r3, r1
 8011710:	3314      	adds	r3, #20
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d113      	bne.n	8011740 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011718:	490f      	ldr	r1, [pc, #60]	@ (8011758 <etharp_tmr+0x14c>)
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	4613      	mov	r3, r2
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	4413      	add	r3, r2
 8011722:	00db      	lsls	r3, r3, #3
 8011724:	440b      	add	r3, r1
 8011726:	3308      	adds	r3, #8
 8011728:	6818      	ldr	r0, [r3, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	4613      	mov	r3, r2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	4413      	add	r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	4a08      	ldr	r2, [pc, #32]	@ (8011758 <etharp_tmr+0x14c>)
 8011736:	4413      	add	r3, r2
 8011738:	3304      	adds	r3, #4
 801173a:	4619      	mov	r1, r3
 801173c:	f000 fe84 	bl	8012448 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3301      	adds	r3, #1
 8011744:	607b      	str	r3, [r7, #4]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2b09      	cmp	r3, #9
 801174a:	f77f af65 	ble.w	8011618 <etharp_tmr+0xc>
      }
    }
  }
}
 801174e:	bf00      	nop
 8011750:	bf00      	nop
 8011752:	3708      	adds	r7, #8
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	20003c08 	.word	0x20003c08

0801175c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b08a      	sub	sp, #40	@ 0x28
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	460b      	mov	r3, r1
 8011766:	607a      	str	r2, [r7, #4]
 8011768:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801176a:	230a      	movs	r3, #10
 801176c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801176e:	230a      	movs	r3, #10
 8011770:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011772:	230a      	movs	r3, #10
 8011774:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801177a:	230a      	movs	r3, #10
 801177c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	83bb      	strh	r3, [r7, #28]
 8011782:	2300      	movs	r3, #0
 8011784:	837b      	strh	r3, [r7, #26]
 8011786:	2300      	movs	r3, #0
 8011788:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801178a:	2300      	movs	r3, #0
 801178c:	843b      	strh	r3, [r7, #32]
 801178e:	e0ae      	b.n	80118ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011794:	49a6      	ldr	r1, [pc, #664]	@ (8011a30 <etharp_find_entry+0x2d4>)
 8011796:	4613      	mov	r3, r2
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	4413      	add	r3, r2
 801179c:	00db      	lsls	r3, r3, #3
 801179e:	440b      	add	r3, r1
 80117a0:	3314      	adds	r3, #20
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80117a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80117aa:	2b0a      	cmp	r3, #10
 80117ac:	d105      	bne.n	80117ba <etharp_find_entry+0x5e>
 80117ae:	7dfb      	ldrb	r3, [r7, #23]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d102      	bne.n	80117ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80117b4:	8c3b      	ldrh	r3, [r7, #32]
 80117b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80117b8:	e095      	b.n	80118e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f000 8092 	beq.w	80118e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d009      	beq.n	80117dc <etharp_find_entry+0x80>
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d806      	bhi.n	80117dc <etharp_find_entry+0x80>
 80117ce:	4b99      	ldr	r3, [pc, #612]	@ (8011a34 <etharp_find_entry+0x2d8>)
 80117d0:	f240 1223 	movw	r2, #291	@ 0x123
 80117d4:	4998      	ldr	r1, [pc, #608]	@ (8011a38 <etharp_find_entry+0x2dc>)
 80117d6:	4899      	ldr	r0, [pc, #612]	@ (8011a3c <etharp_find_entry+0x2e0>)
 80117d8:	f004 f94a 	bl	8015a70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d020      	beq.n	8011824 <etharp_find_entry+0xc8>
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6819      	ldr	r1, [r3, #0]
 80117e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117ea:	4891      	ldr	r0, [pc, #580]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80117ec:	4613      	mov	r3, r2
 80117ee:	005b      	lsls	r3, r3, #1
 80117f0:	4413      	add	r3, r2
 80117f2:	00db      	lsls	r3, r3, #3
 80117f4:	4403      	add	r3, r0
 80117f6:	3304      	adds	r3, #4
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4299      	cmp	r1, r3
 80117fc:	d112      	bne.n	8011824 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00c      	beq.n	801181e <etharp_find_entry+0xc2>
 8011804:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011808:	4989      	ldr	r1, [pc, #548]	@ (8011a30 <etharp_find_entry+0x2d4>)
 801180a:	4613      	mov	r3, r2
 801180c:	005b      	lsls	r3, r3, #1
 801180e:	4413      	add	r3, r2
 8011810:	00db      	lsls	r3, r3, #3
 8011812:	440b      	add	r3, r1
 8011814:	3308      	adds	r3, #8
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	429a      	cmp	r2, r3
 801181c:	d102      	bne.n	8011824 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801181e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011822:	e100      	b.n	8011a26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011824:	7dfb      	ldrb	r3, [r7, #23]
 8011826:	2b01      	cmp	r3, #1
 8011828:	d140      	bne.n	80118ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801182a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801182e:	4980      	ldr	r1, [pc, #512]	@ (8011a30 <etharp_find_entry+0x2d4>)
 8011830:	4613      	mov	r3, r2
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	440b      	add	r3, r1
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d01a      	beq.n	8011876 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011844:	497a      	ldr	r1, [pc, #488]	@ (8011a30 <etharp_find_entry+0x2d4>)
 8011846:	4613      	mov	r3, r2
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	4413      	add	r3, r2
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	440b      	add	r3, r1
 8011850:	3312      	adds	r3, #18
 8011852:	881b      	ldrh	r3, [r3, #0]
 8011854:	8bba      	ldrh	r2, [r7, #28]
 8011856:	429a      	cmp	r2, r3
 8011858:	d845      	bhi.n	80118e6 <etharp_find_entry+0x18a>
            old_queue = i;
 801185a:	8c3b      	ldrh	r3, [r7, #32]
 801185c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801185e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011862:	4973      	ldr	r1, [pc, #460]	@ (8011a30 <etharp_find_entry+0x2d4>)
 8011864:	4613      	mov	r3, r2
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	4413      	add	r3, r2
 801186a:	00db      	lsls	r3, r3, #3
 801186c:	440b      	add	r3, r1
 801186e:	3312      	adds	r3, #18
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	83bb      	strh	r3, [r7, #28]
 8011874:	e037      	b.n	80118e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801187a:	496d      	ldr	r1, [pc, #436]	@ (8011a30 <etharp_find_entry+0x2d4>)
 801187c:	4613      	mov	r3, r2
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	4413      	add	r3, r2
 8011882:	00db      	lsls	r3, r3, #3
 8011884:	440b      	add	r3, r1
 8011886:	3312      	adds	r3, #18
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	8b7a      	ldrh	r2, [r7, #26]
 801188c:	429a      	cmp	r2, r3
 801188e:	d82a      	bhi.n	80118e6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011890:	8c3b      	ldrh	r3, [r7, #32]
 8011892:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011894:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011898:	4965      	ldr	r1, [pc, #404]	@ (8011a30 <etharp_find_entry+0x2d4>)
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	440b      	add	r3, r1
 80118a4:	3312      	adds	r3, #18
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	837b      	strh	r3, [r7, #26]
 80118aa:	e01c      	b.n	80118e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80118ac:	7dfb      	ldrb	r3, [r7, #23]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d919      	bls.n	80118e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80118b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118b6:	495e      	ldr	r1, [pc, #376]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80118b8:	4613      	mov	r3, r2
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	4413      	add	r3, r2
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	440b      	add	r3, r1
 80118c2:	3312      	adds	r3, #18
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	8b3a      	ldrh	r2, [r7, #24]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d80c      	bhi.n	80118e6 <etharp_find_entry+0x18a>
            old_stable = i;
 80118cc:	8c3b      	ldrh	r3, [r7, #32]
 80118ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80118d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118d4:	4956      	ldr	r1, [pc, #344]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80118d6:	4613      	mov	r3, r2
 80118d8:	005b      	lsls	r3, r3, #1
 80118da:	4413      	add	r3, r2
 80118dc:	00db      	lsls	r3, r3, #3
 80118de:	440b      	add	r3, r1
 80118e0:	3312      	adds	r3, #18
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118e6:	8c3b      	ldrh	r3, [r7, #32]
 80118e8:	3301      	adds	r3, #1
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	843b      	strh	r3, [r7, #32]
 80118ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118f2:	2b09      	cmp	r3, #9
 80118f4:	f77f af4c 	ble.w	8011790 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80118f8:	7afb      	ldrb	r3, [r7, #11]
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d108      	bne.n	8011914 <etharp_find_entry+0x1b8>
 8011902:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011906:	2b0a      	cmp	r3, #10
 8011908:	d107      	bne.n	801191a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801190a:	7afb      	ldrb	r3, [r7, #11]
 801190c:	f003 0301 	and.w	r3, r3, #1
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011918:	e085      	b.n	8011a26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801191a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801191e:	2b09      	cmp	r3, #9
 8011920:	dc02      	bgt.n	8011928 <etharp_find_entry+0x1cc>
    i = empty;
 8011922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011924:	843b      	strh	r3, [r7, #32]
 8011926:	e039      	b.n	801199c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011928:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801192c:	2b09      	cmp	r3, #9
 801192e:	dc14      	bgt.n	801195a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011932:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011938:	493d      	ldr	r1, [pc, #244]	@ (8011a30 <etharp_find_entry+0x2d4>)
 801193a:	4613      	mov	r3, r2
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	4413      	add	r3, r2
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	440b      	add	r3, r1
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d018      	beq.n	801197c <etharp_find_entry+0x220>
 801194a:	4b3a      	ldr	r3, [pc, #232]	@ (8011a34 <etharp_find_entry+0x2d8>)
 801194c:	f240 126d 	movw	r2, #365	@ 0x16d
 8011950:	493b      	ldr	r1, [pc, #236]	@ (8011a40 <etharp_find_entry+0x2e4>)
 8011952:	483a      	ldr	r0, [pc, #232]	@ (8011a3c <etharp_find_entry+0x2e0>)
 8011954:	f004 f88c 	bl	8015a70 <iprintf>
 8011958:	e010      	b.n	801197c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801195a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801195e:	2b09      	cmp	r3, #9
 8011960:	dc02      	bgt.n	8011968 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011964:	843b      	strh	r3, [r7, #32]
 8011966:	e009      	b.n	801197c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011968:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801196c:	2b09      	cmp	r3, #9
 801196e:	dc02      	bgt.n	8011976 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011970:	8bfb      	ldrh	r3, [r7, #30]
 8011972:	843b      	strh	r3, [r7, #32]
 8011974:	e002      	b.n	801197c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801197a:	e054      	b.n	8011a26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801197c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011980:	2b09      	cmp	r3, #9
 8011982:	dd06      	ble.n	8011992 <etharp_find_entry+0x236>
 8011984:	4b2b      	ldr	r3, [pc, #172]	@ (8011a34 <etharp_find_entry+0x2d8>)
 8011986:	f240 127f 	movw	r2, #383	@ 0x17f
 801198a:	492e      	ldr	r1, [pc, #184]	@ (8011a44 <etharp_find_entry+0x2e8>)
 801198c:	482b      	ldr	r0, [pc, #172]	@ (8011a3c <etharp_find_entry+0x2e0>)
 801198e:	f004 f86f 	bl	8015a70 <iprintf>
    etharp_free_entry(i);
 8011992:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011996:	4618      	mov	r0, r3
 8011998:	f7ff fe06 	bl	80115a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801199c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119a0:	2b09      	cmp	r3, #9
 80119a2:	dd06      	ble.n	80119b2 <etharp_find_entry+0x256>
 80119a4:	4b23      	ldr	r3, [pc, #140]	@ (8011a34 <etharp_find_entry+0x2d8>)
 80119a6:	f240 1283 	movw	r2, #387	@ 0x183
 80119aa:	4926      	ldr	r1, [pc, #152]	@ (8011a44 <etharp_find_entry+0x2e8>)
 80119ac:	4823      	ldr	r0, [pc, #140]	@ (8011a3c <etharp_find_entry+0x2e0>)
 80119ae:	f004 f85f 	bl	8015a70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80119b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119b6:	491e      	ldr	r1, [pc, #120]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80119b8:	4613      	mov	r3, r2
 80119ba:	005b      	lsls	r3, r3, #1
 80119bc:	4413      	add	r3, r2
 80119be:	00db      	lsls	r3, r3, #3
 80119c0:	440b      	add	r3, r1
 80119c2:	3314      	adds	r3, #20
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d006      	beq.n	80119d8 <etharp_find_entry+0x27c>
 80119ca:	4b1a      	ldr	r3, [pc, #104]	@ (8011a34 <etharp_find_entry+0x2d8>)
 80119cc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80119d0:	491d      	ldr	r1, [pc, #116]	@ (8011a48 <etharp_find_entry+0x2ec>)
 80119d2:	481a      	ldr	r0, [pc, #104]	@ (8011a3c <etharp_find_entry+0x2e0>)
 80119d4:	f004 f84c 	bl	8015a70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d00b      	beq.n	80119f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80119de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	6819      	ldr	r1, [r3, #0]
 80119e6:	4812      	ldr	r0, [pc, #72]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	4403      	add	r3, r0
 80119f2:	3304      	adds	r3, #4
 80119f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80119f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119fa:	490d      	ldr	r1, [pc, #52]	@ (8011a30 <etharp_find_entry+0x2d4>)
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	440b      	add	r3, r1
 8011a06:	3312      	adds	r3, #18
 8011a08:	2200      	movs	r2, #0
 8011a0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011a0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a10:	4907      	ldr	r1, [pc, #28]	@ (8011a30 <etharp_find_entry+0x2d4>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	440b      	add	r3, r1
 8011a1c:	3308      	adds	r3, #8
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011a22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3728      	adds	r7, #40	@ 0x28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	20003c08 	.word	0x20003c08
 8011a34:	08018ef4 	.word	0x08018ef4
 8011a38:	08018f2c 	.word	0x08018f2c
 8011a3c:	08018f6c 	.word	0x08018f6c
 8011a40:	08018f94 	.word	0x08018f94
 8011a44:	08018fac 	.word	0x08018fac
 8011a48:	08018fc0 	.word	0x08018fc0

08011a4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b088      	sub	sp, #32
 8011a50:	af02      	add	r7, sp, #8
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
 8011a58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011a60:	2b06      	cmp	r3, #6
 8011a62:	d006      	beq.n	8011a72 <etharp_update_arp_entry+0x26>
 8011a64:	4b48      	ldr	r3, [pc, #288]	@ (8011b88 <etharp_update_arp_entry+0x13c>)
 8011a66:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011a6a:	4948      	ldr	r1, [pc, #288]	@ (8011b8c <etharp_update_arp_entry+0x140>)
 8011a6c:	4848      	ldr	r0, [pc, #288]	@ (8011b90 <etharp_update_arp_entry+0x144>)
 8011a6e:	f003 ffff 	bl	8015a70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d012      	beq.n	8011a9e <etharp_update_arp_entry+0x52>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00e      	beq.n	8011a9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	68f9      	ldr	r1, [r7, #12]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f001 fa9e 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 8011a8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d105      	bne.n	8011a9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a9a:	2be0      	cmp	r3, #224	@ 0xe0
 8011a9c:	d102      	bne.n	8011aa4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011a9e:	f06f 030f 	mvn.w	r3, #15
 8011aa2:	e06c      	b.n	8011b7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011aa4:	78fb      	ldrb	r3, [r7, #3]
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	68b8      	ldr	r0, [r7, #8]
 8011aac:	f7ff fe56 	bl	801175c <etharp_find_entry>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011ab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	da02      	bge.n	8011ac2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011abc:	8afb      	ldrh	r3, [r7, #22]
 8011abe:	b25b      	sxtb	r3, r3
 8011ac0:	e05d      	b.n	8011b7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011ac2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ac6:	4933      	ldr	r1, [pc, #204]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011ac8:	4613      	mov	r3, r2
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	4413      	add	r3, r2
 8011ace:	00db      	lsls	r3, r3, #3
 8011ad0:	440b      	add	r3, r1
 8011ad2:	3314      	adds	r3, #20
 8011ad4:	2202      	movs	r2, #2
 8011ad6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ad8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011adc:	492d      	ldr	r1, [pc, #180]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011ade:	4613      	mov	r3, r2
 8011ae0:	005b      	lsls	r3, r3, #1
 8011ae2:	4413      	add	r3, r2
 8011ae4:	00db      	lsls	r3, r3, #3
 8011ae6:	440b      	add	r3, r1
 8011ae8:	3308      	adds	r3, #8
 8011aea:	68fa      	ldr	r2, [r7, #12]
 8011aec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011aee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011af2:	4613      	mov	r3, r2
 8011af4:	005b      	lsls	r3, r3, #1
 8011af6:	4413      	add	r3, r2
 8011af8:	00db      	lsls	r3, r3, #3
 8011afa:	3308      	adds	r3, #8
 8011afc:	4a25      	ldr	r2, [pc, #148]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011afe:	4413      	add	r3, r2
 8011b00:	3304      	adds	r3, #4
 8011b02:	2206      	movs	r2, #6
 8011b04:	6879      	ldr	r1, [r7, #4]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f004 f8bb 	bl	8015c82 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011b0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b10:	4920      	ldr	r1, [pc, #128]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	4413      	add	r3, r2
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	440b      	add	r3, r1
 8011b1c:	3312      	adds	r3, #18
 8011b1e:	2200      	movs	r2, #0
 8011b20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011b22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b26:	491b      	ldr	r1, [pc, #108]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011b28:	4613      	mov	r3, r2
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	4413      	add	r3, r2
 8011b2e:	00db      	lsls	r3, r3, #3
 8011b30:	440b      	add	r3, r1
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d021      	beq.n	8011b7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011b38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b3c:	4915      	ldr	r1, [pc, #84]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011b3e:	4613      	mov	r3, r2
 8011b40:	005b      	lsls	r3, r3, #1
 8011b42:	4413      	add	r3, r2
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	440b      	add	r3, r1
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011b4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b50:	4910      	ldr	r1, [pc, #64]	@ (8011b94 <etharp_update_arp_entry+0x148>)
 8011b52:	4613      	mov	r3, r2
 8011b54:	005b      	lsls	r3, r3, #1
 8011b56:	4413      	add	r3, r2
 8011b58:	00db      	lsls	r3, r3, #3
 8011b5a:	440b      	add	r3, r1
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011b66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011b6a:	9300      	str	r3, [sp, #0]
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6939      	ldr	r1, [r7, #16]
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f002 f999 	bl	8013ea8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011b76:	6938      	ldr	r0, [r7, #16]
 8011b78:	f7f6 fa3c 	bl	8007ff4 <pbuf_free>
  }
  return ERR_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	08018ef4 	.word	0x08018ef4
 8011b8c:	08018fec 	.word	0x08018fec
 8011b90:	08018f6c 	.word	0x08018f6c
 8011b94:	20003c08 	.word	0x20003c08

08011b98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011b98:	b5b0      	push	{r4, r5, r7, lr}
 8011b9a:	b08a      	sub	sp, #40	@ 0x28
 8011b9c:	af04      	add	r7, sp, #16
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d107      	bne.n	8011bb8 <etharp_input+0x20>
 8011ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8011cdc <etharp_input+0x144>)
 8011baa:	f240 228a 	movw	r2, #650	@ 0x28a
 8011bae:	494c      	ldr	r1, [pc, #304]	@ (8011ce0 <etharp_input+0x148>)
 8011bb0:	484c      	ldr	r0, [pc, #304]	@ (8011ce4 <etharp_input+0x14c>)
 8011bb2:	f003 ff5d 	bl	8015a70 <iprintf>
 8011bb6:	e08d      	b.n	8011cd4 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bc8:	d10c      	bne.n	8011be4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011bce:	2b06      	cmp	r3, #6
 8011bd0:	d108      	bne.n	8011be4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011bd6:	2b04      	cmp	r3, #4
 8011bd8:	d104      	bne.n	8011be4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	885b      	ldrh	r3, [r3, #2]
 8011bde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011be0:	2b08      	cmp	r3, #8
 8011be2:	d00f      	beq.n	8011c04 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8011be4:	4b40      	ldr	r3, [pc, #256]	@ (8011ce8 <etharp_input+0x150>)
 8011be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011be8:	3301      	adds	r3, #1
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	4b3e      	ldr	r3, [pc, #248]	@ (8011ce8 <etharp_input+0x150>)
 8011bee:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8011ce8 <etharp_input+0x150>)
 8011bf2:	8bdb      	ldrh	r3, [r3, #30]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8011ce8 <etharp_input+0x150>)
 8011bfa:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7f6 f9f9 	bl	8007ff4 <pbuf_free>
    return;
 8011c02:	e067      	b.n	8011cd4 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 8011c04:	4b38      	ldr	r3, [pc, #224]	@ (8011ce8 <etharp_input+0x150>)
 8011c06:	8b5b      	ldrh	r3, [r3, #26]
 8011c08:	3301      	adds	r3, #1
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	4b36      	ldr	r3, [pc, #216]	@ (8011ce8 <etharp_input+0x150>)
 8011c0e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	330e      	adds	r3, #14
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	3318      	adds	r3, #24
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	3304      	adds	r3, #4
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d102      	bne.n	8011c30 <etharp_input+0x98>
    for_us = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	75fb      	strb	r3, [r7, #23]
 8011c2e:	e009      	b.n	8011c44 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	3304      	adds	r3, #4
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	bf0c      	ite	eq
 8011c3c:	2301      	moveq	r3, #1
 8011c3e:	2300      	movne	r3, #0
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	f103 0208 	add.w	r2, r3, #8
 8011c4a:	7dfb      	ldrb	r3, [r7, #23]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <etharp_input+0xbc>
 8011c50:	2301      	movs	r3, #1
 8011c52:	e000      	b.n	8011c56 <etharp_input+0xbe>
 8011c54:	2302      	movs	r3, #2
 8011c56:	f107 010c 	add.w	r1, r7, #12
 8011c5a:	6838      	ldr	r0, [r7, #0]
 8011c5c:	f7ff fef6 	bl	8011a4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	88db      	ldrh	r3, [r3, #6]
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c6a:	d003      	beq.n	8011c74 <etharp_input+0xdc>
 8011c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c70:	d01e      	beq.n	8011cb0 <etharp_input+0x118>
 8011c72:	e024      	b.n	8011cbe <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d028      	beq.n	8011ccc <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011c90:	693a      	ldr	r2, [r7, #16]
 8011c92:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011c94:	2102      	movs	r1, #2
 8011c96:	9103      	str	r1, [sp, #12]
 8011c98:	f107 010c 	add.w	r1, r7, #12
 8011c9c:	9102      	str	r1, [sp, #8]
 8011c9e:	9201      	str	r2, [sp, #4]
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	462b      	mov	r3, r5
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	6838      	ldr	r0, [r7, #0]
 8011caa:	f000 fb11 	bl	80122d0 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8011cae:	e00d      	b.n	8011ccc <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8011cb0:	f107 030c 	add.w	r3, r7, #12
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6838      	ldr	r0, [r7, #0]
 8011cb8:	f7fe f9f0 	bl	801009c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8011cbc:	e007      	b.n	8011cce <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8011cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8011ce8 <etharp_input+0x150>)
 8011cc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	4b08      	ldr	r3, [pc, #32]	@ (8011ce8 <etharp_input+0x150>)
 8011cc8:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 8011cca:	e000      	b.n	8011cce <etharp_input+0x136>
      break;
 8011ccc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7f6 f990 	bl	8007ff4 <pbuf_free>
}
 8011cd4:	3718      	adds	r7, #24
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	08018ef4 	.word	0x08018ef4
 8011ce0:	08019044 	.word	0x08019044
 8011ce4:	08018f6c 	.word	0x08018f6c
 8011ce8:	20003a9c 	.word	0x20003a9c

08011cec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af02      	add	r7, sp, #8
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011cfa:	79fa      	ldrb	r2, [r7, #7]
 8011cfc:	4944      	ldr	r1, [pc, #272]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011cfe:	4613      	mov	r3, r2
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	4413      	add	r3, r2
 8011d04:	00db      	lsls	r3, r3, #3
 8011d06:	440b      	add	r3, r1
 8011d08:	3314      	adds	r3, #20
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d806      	bhi.n	8011d1e <etharp_output_to_arp_index+0x32>
 8011d10:	4b40      	ldr	r3, [pc, #256]	@ (8011e14 <etharp_output_to_arp_index+0x128>)
 8011d12:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011d16:	4940      	ldr	r1, [pc, #256]	@ (8011e18 <etharp_output_to_arp_index+0x12c>)
 8011d18:	4840      	ldr	r0, [pc, #256]	@ (8011e1c <etharp_output_to_arp_index+0x130>)
 8011d1a:	f003 fea9 	bl	8015a70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011d1e:	79fa      	ldrb	r2, [r7, #7]
 8011d20:	493b      	ldr	r1, [pc, #236]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011d22:	4613      	mov	r3, r2
 8011d24:	005b      	lsls	r3, r3, #1
 8011d26:	4413      	add	r3, r2
 8011d28:	00db      	lsls	r3, r3, #3
 8011d2a:	440b      	add	r3, r1
 8011d2c:	3314      	adds	r3, #20
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d153      	bne.n	8011ddc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011d34:	79fa      	ldrb	r2, [r7, #7]
 8011d36:	4936      	ldr	r1, [pc, #216]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011d38:	4613      	mov	r3, r2
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	440b      	add	r3, r1
 8011d42:	3312      	adds	r3, #18
 8011d44:	881b      	ldrh	r3, [r3, #0]
 8011d46:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011d4a:	d919      	bls.n	8011d80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011d4c:	79fa      	ldrb	r2, [r7, #7]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	4413      	add	r3, r2
 8011d54:	00db      	lsls	r3, r3, #3
 8011d56:	4a2e      	ldr	r2, [pc, #184]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011d58:	4413      	add	r3, r2
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f000 fb72 	bl	8012448 <etharp_request>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d138      	bne.n	8011ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d6a:	79fa      	ldrb	r2, [r7, #7]
 8011d6c:	4928      	ldr	r1, [pc, #160]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011d6e:	4613      	mov	r3, r2
 8011d70:	005b      	lsls	r3, r3, #1
 8011d72:	4413      	add	r3, r2
 8011d74:	00db      	lsls	r3, r3, #3
 8011d76:	440b      	add	r3, r1
 8011d78:	3314      	adds	r3, #20
 8011d7a:	2203      	movs	r2, #3
 8011d7c:	701a      	strb	r2, [r3, #0]
 8011d7e:	e02d      	b.n	8011ddc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011d80:	79fa      	ldrb	r2, [r7, #7]
 8011d82:	4923      	ldr	r1, [pc, #140]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011d84:	4613      	mov	r3, r2
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	4413      	add	r3, r2
 8011d8a:	00db      	lsls	r3, r3, #3
 8011d8c:	440b      	add	r3, r1
 8011d8e:	3312      	adds	r3, #18
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011d96:	d321      	bcc.n	8011ddc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011d98:	79fa      	ldrb	r2, [r7, #7]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	005b      	lsls	r3, r3, #1
 8011d9e:	4413      	add	r3, r2
 8011da0:	00db      	lsls	r3, r3, #3
 8011da2:	4a1b      	ldr	r2, [pc, #108]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011da4:	4413      	add	r3, r2
 8011da6:	1d19      	adds	r1, r3, #4
 8011da8:	79fa      	ldrb	r2, [r7, #7]
 8011daa:	4613      	mov	r3, r2
 8011dac:	005b      	lsls	r3, r3, #1
 8011dae:	4413      	add	r3, r2
 8011db0:	00db      	lsls	r3, r3, #3
 8011db2:	3308      	adds	r3, #8
 8011db4:	4a16      	ldr	r2, [pc, #88]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011db6:	4413      	add	r3, r2
 8011db8:	3304      	adds	r3, #4
 8011dba:	461a      	mov	r2, r3
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f000 fb21 	bl	8012404 <etharp_request_dst>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d109      	bne.n	8011ddc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011dc8:	79fa      	ldrb	r2, [r7, #7]
 8011dca:	4911      	ldr	r1, [pc, #68]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011dcc:	4613      	mov	r3, r2
 8011dce:	005b      	lsls	r3, r3, #1
 8011dd0:	4413      	add	r3, r2
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	440b      	add	r3, r1
 8011dd6:	3314      	adds	r3, #20
 8011dd8:	2203      	movs	r2, #3
 8011dda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8011de2:	79fa      	ldrb	r2, [r7, #7]
 8011de4:	4613      	mov	r3, r2
 8011de6:	005b      	lsls	r3, r3, #1
 8011de8:	4413      	add	r3, r2
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	3308      	adds	r3, #8
 8011dee:	4a08      	ldr	r2, [pc, #32]	@ (8011e10 <etharp_output_to_arp_index+0x124>)
 8011df0:	4413      	add	r3, r2
 8011df2:	3304      	adds	r3, #4
 8011df4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011df8:	9200      	str	r2, [sp, #0]
 8011dfa:	460a      	mov	r2, r1
 8011dfc:	68b9      	ldr	r1, [r7, #8]
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	f002 f852 	bl	8013ea8 <ethernet_output>
 8011e04:	4603      	mov	r3, r0
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	20003c08 	.word	0x20003c08
 8011e14:	08018ef4 	.word	0x08018ef4
 8011e18:	08019064 	.word	0x08019064
 8011e1c:	08018f6c 	.word	0x08018f6c

08011e20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08a      	sub	sp, #40	@ 0x28
 8011e24:	af02      	add	r7, sp, #8
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <etharp_output+0x24>
 8011e36:	4b76      	ldr	r3, [pc, #472]	@ (8012010 <etharp_output+0x1f0>)
 8011e38:	f240 321e 	movw	r2, #798	@ 0x31e
 8011e3c:	4975      	ldr	r1, [pc, #468]	@ (8012014 <etharp_output+0x1f4>)
 8011e3e:	4876      	ldr	r0, [pc, #472]	@ (8012018 <etharp_output+0x1f8>)
 8011e40:	f003 fe16 	bl	8015a70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d106      	bne.n	8011e58 <etharp_output+0x38>
 8011e4a:	4b71      	ldr	r3, [pc, #452]	@ (8012010 <etharp_output+0x1f0>)
 8011e4c:	f240 321f 	movw	r2, #799	@ 0x31f
 8011e50:	4972      	ldr	r1, [pc, #456]	@ (801201c <etharp_output+0x1fc>)
 8011e52:	4871      	ldr	r0, [pc, #452]	@ (8012018 <etharp_output+0x1f8>)
 8011e54:	f003 fe0c 	bl	8015a70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d106      	bne.n	8011e6c <etharp_output+0x4c>
 8011e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8012010 <etharp_output+0x1f0>)
 8011e60:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011e64:	496e      	ldr	r1, [pc, #440]	@ (8012020 <etharp_output+0x200>)
 8011e66:	486c      	ldr	r0, [pc, #432]	@ (8012018 <etharp_output+0x1f8>)
 8011e68:	f003 fe02 	bl	8015a70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	68f9      	ldr	r1, [r7, #12]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f001 f8a8 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011e7e:	4b69      	ldr	r3, [pc, #420]	@ (8012024 <etharp_output+0x204>)
 8011e80:	61fb      	str	r3, [r7, #28]
 8011e82:	e0b5      	b.n	8011ff0 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e8c:	2be0      	cmp	r3, #224	@ 0xe0
 8011e8e:	d118      	bne.n	8011ec2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011e90:	2301      	movs	r3, #1
 8011e92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011e94:	2300      	movs	r3, #0
 8011e96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011e98:	235e      	movs	r3, #94	@ 0x5e
 8011e9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	3302      	adds	r3, #2
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3303      	adds	r3, #3
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011eba:	f107 0310 	add.w	r3, r7, #16
 8011ebe:	61fb      	str	r3, [r7, #28]
 8011ec0:	e096      	b.n	8011ff0 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681a      	ldr	r2, [r3, #0]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	3304      	adds	r3, #4
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	405a      	eors	r2, r3
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d012      	beq.n	8011f00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ee0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d00b      	beq.n	8011f00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	330c      	adds	r3, #12
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d003      	beq.n	8011efa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	330c      	adds	r3, #12
 8011ef6:	61bb      	str	r3, [r7, #24]
 8011ef8:	e002      	b.n	8011f00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011efa:	f06f 0303 	mvn.w	r3, #3
 8011efe:	e083      	b.n	8012008 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f00:	4b49      	ldr	r3, [pc, #292]	@ (8012028 <etharp_output+0x208>)
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	4619      	mov	r1, r3
 8011f06:	4a49      	ldr	r2, [pc, #292]	@ (801202c <etharp_output+0x20c>)
 8011f08:	460b      	mov	r3, r1
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	440b      	add	r3, r1
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	4413      	add	r3, r2
 8011f12:	3314      	adds	r3, #20
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d92b      	bls.n	8011f72 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f1a:	4b43      	ldr	r3, [pc, #268]	@ (8012028 <etharp_output+0x208>)
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	4619      	mov	r1, r3
 8011f20:	4a42      	ldr	r2, [pc, #264]	@ (801202c <etharp_output+0x20c>)
 8011f22:	460b      	mov	r3, r1
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	440b      	add	r3, r1
 8011f28:	00db      	lsls	r3, r3, #3
 8011f2a:	4413      	add	r3, r2
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f30:	68fa      	ldr	r2, [r7, #12]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d11d      	bne.n	8011f72 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	681a      	ldr	r2, [r3, #0]
 8011f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8012028 <etharp_output+0x208>)
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	493a      	ldr	r1, [pc, #232]	@ (801202c <etharp_output+0x20c>)
 8011f42:	4603      	mov	r3, r0
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	4403      	add	r3, r0
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	440b      	add	r3, r1
 8011f4c:	3304      	adds	r3, #4
 8011f4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d10e      	bne.n	8011f72 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8011f54:	4b36      	ldr	r3, [pc, #216]	@ (8012030 <etharp_output+0x210>)
 8011f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011f58:	3301      	adds	r3, #1
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	4b34      	ldr	r3, [pc, #208]	@ (8012030 <etharp_output+0x210>)
 8011f5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011f60:	4b31      	ldr	r3, [pc, #196]	@ (8012028 <etharp_output+0x208>)
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	461a      	mov	r2, r3
 8011f66:	68b9      	ldr	r1, [r7, #8]
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f7ff febf 	bl	8011cec <etharp_output_to_arp_index>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	e04a      	b.n	8012008 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f72:	2300      	movs	r3, #0
 8011f74:	75fb      	strb	r3, [r7, #23]
 8011f76:	e031      	b.n	8011fdc <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f78:	7dfa      	ldrb	r2, [r7, #23]
 8011f7a:	492c      	ldr	r1, [pc, #176]	@ (801202c <etharp_output+0x20c>)
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	4413      	add	r3, r2
 8011f82:	00db      	lsls	r3, r3, #3
 8011f84:	440b      	add	r3, r1
 8011f86:	3314      	adds	r3, #20
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d923      	bls.n	8011fd6 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011f8e:	7dfa      	ldrb	r2, [r7, #23]
 8011f90:	4926      	ldr	r1, [pc, #152]	@ (801202c <etharp_output+0x20c>)
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	440b      	add	r3, r1
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d117      	bne.n	8011fd6 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	6819      	ldr	r1, [r3, #0]
 8011faa:	7dfa      	ldrb	r2, [r7, #23]
 8011fac:	481f      	ldr	r0, [pc, #124]	@ (801202c <etharp_output+0x20c>)
 8011fae:	4613      	mov	r3, r2
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	4413      	add	r3, r2
 8011fb4:	00db      	lsls	r3, r3, #3
 8011fb6:	4403      	add	r3, r0
 8011fb8:	3304      	adds	r3, #4
 8011fba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011fbc:	4299      	cmp	r1, r3
 8011fbe:	d10a      	bne.n	8011fd6 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011fc0:	4a19      	ldr	r2, [pc, #100]	@ (8012028 <etharp_output+0x208>)
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	461a      	mov	r2, r3
 8011fca:	68b9      	ldr	r1, [r7, #8]
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ff fe8d 	bl	8011cec <etharp_output_to_arp_index>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	e018      	b.n	8012008 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011fd6:	7dfb      	ldrb	r3, [r7, #23]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	75fb      	strb	r3, [r7, #23]
 8011fdc:	7dfb      	ldrb	r3, [r7, #23]
 8011fde:	2b09      	cmp	r3, #9
 8011fe0:	d9ca      	bls.n	8011f78 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	69b9      	ldr	r1, [r7, #24]
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f000 f824 	bl	8012034 <etharp_query>
 8011fec:	4603      	mov	r3, r0
 8011fee:	e00b      	b.n	8012008 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011ff6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	68b9      	ldr	r1, [r7, #8]
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	f001 ff51 	bl	8013ea8 <ethernet_output>
 8012006:	4603      	mov	r3, r0
}
 8012008:	4618      	mov	r0, r3
 801200a:	3720      	adds	r7, #32
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	08018ef4 	.word	0x08018ef4
 8012014:	08019044 	.word	0x08019044
 8012018:	08018f6c 	.word	0x08018f6c
 801201c:	08019094 	.word	0x08019094
 8012020:	08019034 	.word	0x08019034
 8012024:	0801988c 	.word	0x0801988c
 8012028:	20003cf8 	.word	0x20003cf8
 801202c:	20003c08 	.word	0x20003c08
 8012030:	20003a9c 	.word	0x20003a9c

08012034 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08c      	sub	sp, #48	@ 0x30
 8012038:	af02      	add	r7, sp, #8
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3326      	adds	r3, #38	@ 0x26
 8012044:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012046:	23ff      	movs	r3, #255	@ 0xff
 8012048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	68f9      	ldr	r1, [r7, #12]
 8012056:	4618      	mov	r0, r3
 8012058:	f000 ffb6 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10c      	bne.n	801207c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801206a:	2be0      	cmp	r3, #224	@ 0xe0
 801206c:	d006      	beq.n	801207c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d003      	beq.n	801207c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d102      	bne.n	8012082 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801207c:	f06f 030f 	mvn.w	r3, #15
 8012080:	e110      	b.n	80122a4 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	2101      	movs	r1, #1
 8012086:	68b8      	ldr	r0, [r7, #8]
 8012088:	f7ff fb68 	bl	801175c <etharp_find_entry>
 801208c:	4603      	mov	r3, r0
 801208e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012090:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012094:	2b00      	cmp	r3, #0
 8012096:	da0b      	bge.n	80120b0 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d005      	beq.n	80120aa <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801209e:	4b83      	ldr	r3, [pc, #524]	@ (80122ac <etharp_query+0x278>)
 80120a0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80120a2:	3301      	adds	r3, #1
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	4b81      	ldr	r3, [pc, #516]	@ (80122ac <etharp_query+0x278>)
 80120a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 80120aa:	8a7b      	ldrh	r3, [r7, #18]
 80120ac:	b25b      	sxtb	r3, r3
 80120ae:	e0f9      	b.n	80122a4 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80120b0:	8a7b      	ldrh	r3, [r7, #18]
 80120b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80120b4:	d906      	bls.n	80120c4 <etharp_query+0x90>
 80120b6:	4b7e      	ldr	r3, [pc, #504]	@ (80122b0 <etharp_query+0x27c>)
 80120b8:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80120bc:	497d      	ldr	r1, [pc, #500]	@ (80122b4 <etharp_query+0x280>)
 80120be:	487e      	ldr	r0, [pc, #504]	@ (80122b8 <etharp_query+0x284>)
 80120c0:	f003 fcd6 	bl	8015a70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80120c4:	8a7b      	ldrh	r3, [r7, #18]
 80120c6:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80120c8:	7c7a      	ldrb	r2, [r7, #17]
 80120ca:	497c      	ldr	r1, [pc, #496]	@ (80122bc <etharp_query+0x288>)
 80120cc:	4613      	mov	r3, r2
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	4413      	add	r3, r2
 80120d2:	00db      	lsls	r3, r3, #3
 80120d4:	440b      	add	r3, r1
 80120d6:	3314      	adds	r3, #20
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d115      	bne.n	801210a <etharp_query+0xd6>
    is_new_entry = 1;
 80120de:	2301      	movs	r3, #1
 80120e0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80120e2:	7c7a      	ldrb	r2, [r7, #17]
 80120e4:	4975      	ldr	r1, [pc, #468]	@ (80122bc <etharp_query+0x288>)
 80120e6:	4613      	mov	r3, r2
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4413      	add	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	440b      	add	r3, r1
 80120f0:	3314      	adds	r3, #20
 80120f2:	2201      	movs	r2, #1
 80120f4:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80120f6:	7c7a      	ldrb	r2, [r7, #17]
 80120f8:	4970      	ldr	r1, [pc, #448]	@ (80122bc <etharp_query+0x288>)
 80120fa:	4613      	mov	r3, r2
 80120fc:	005b      	lsls	r3, r3, #1
 80120fe:	4413      	add	r3, r2
 8012100:	00db      	lsls	r3, r3, #3
 8012102:	440b      	add	r3, r1
 8012104:	3308      	adds	r3, #8
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801210a:	7c7a      	ldrb	r2, [r7, #17]
 801210c:	496b      	ldr	r1, [pc, #428]	@ (80122bc <etharp_query+0x288>)
 801210e:	4613      	mov	r3, r2
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4413      	add	r3, r2
 8012114:	00db      	lsls	r3, r3, #3
 8012116:	440b      	add	r3, r1
 8012118:	3314      	adds	r3, #20
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	2b01      	cmp	r3, #1
 801211e:	d011      	beq.n	8012144 <etharp_query+0x110>
 8012120:	7c7a      	ldrb	r2, [r7, #17]
 8012122:	4966      	ldr	r1, [pc, #408]	@ (80122bc <etharp_query+0x288>)
 8012124:	4613      	mov	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	4413      	add	r3, r2
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	440b      	add	r3, r1
 801212e:	3314      	adds	r3, #20
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d806      	bhi.n	8012144 <etharp_query+0x110>
 8012136:	4b5e      	ldr	r3, [pc, #376]	@ (80122b0 <etharp_query+0x27c>)
 8012138:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801213c:	4960      	ldr	r1, [pc, #384]	@ (80122c0 <etharp_query+0x28c>)
 801213e:	485e      	ldr	r0, [pc, #376]	@ (80122b8 <etharp_query+0x284>)
 8012140:	f003 fc96 	bl	8015a70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d102      	bne.n	8012150 <etharp_query+0x11c>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10c      	bne.n	801216a <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012150:	68b9      	ldr	r1, [r7, #8]
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f000 f978 	bl	8012448 <etharp_request>
 8012158:	4603      	mov	r3, r0
 801215a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d102      	bne.n	801216a <etharp_query+0x136>
      return result;
 8012164:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012168:	e09c      	b.n	80122a4 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <etharp_query+0x14a>
 8012170:	4b4f      	ldr	r3, [pc, #316]	@ (80122b0 <etharp_query+0x27c>)
 8012172:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012176:	4953      	ldr	r1, [pc, #332]	@ (80122c4 <etharp_query+0x290>)
 8012178:	484f      	ldr	r0, [pc, #316]	@ (80122b8 <etharp_query+0x284>)
 801217a:	f003 fc79 	bl	8015a70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801217e:	7c7a      	ldrb	r2, [r7, #17]
 8012180:	494e      	ldr	r1, [pc, #312]	@ (80122bc <etharp_query+0x288>)
 8012182:	4613      	mov	r3, r2
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	4413      	add	r3, r2
 8012188:	00db      	lsls	r3, r3, #3
 801218a:	440b      	add	r3, r1
 801218c:	3314      	adds	r3, #20
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d917      	bls.n	80121c4 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012194:	4a4c      	ldr	r2, [pc, #304]	@ (80122c8 <etharp_query+0x294>)
 8012196:	7c7b      	ldrb	r3, [r7, #17]
 8012198:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801219a:	7c7a      	ldrb	r2, [r7, #17]
 801219c:	4613      	mov	r3, r2
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	4413      	add	r3, r2
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	3308      	adds	r3, #8
 80121a6:	4a45      	ldr	r2, [pc, #276]	@ (80122bc <etharp_query+0x288>)
 80121a8:	4413      	add	r3, r2
 80121aa:	3304      	adds	r3, #4
 80121ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80121b0:	9200      	str	r2, [sp, #0]
 80121b2:	697a      	ldr	r2, [r7, #20]
 80121b4:	6879      	ldr	r1, [r7, #4]
 80121b6:	68f8      	ldr	r0, [r7, #12]
 80121b8:	f001 fe76 	bl	8013ea8 <ethernet_output>
 80121bc:	4603      	mov	r3, r0
 80121be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80121c2:	e06d      	b.n	80122a0 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80121c4:	7c7a      	ldrb	r2, [r7, #17]
 80121c6:	493d      	ldr	r1, [pc, #244]	@ (80122bc <etharp_query+0x288>)
 80121c8:	4613      	mov	r3, r2
 80121ca:	005b      	lsls	r3, r3, #1
 80121cc:	4413      	add	r3, r2
 80121ce:	00db      	lsls	r3, r3, #3
 80121d0:	440b      	add	r3, r1
 80121d2:	3314      	adds	r3, #20
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d162      	bne.n	80122a0 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80121e2:	e01c      	b.n	801221e <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	895a      	ldrh	r2, [r3, #10]
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	891b      	ldrh	r3, [r3, #8]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d10a      	bne.n	8012206 <etharp_query+0x1d2>
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d006      	beq.n	8012206 <etharp_query+0x1d2>
 80121f8:	4b2d      	ldr	r3, [pc, #180]	@ (80122b0 <etharp_query+0x27c>)
 80121fa:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80121fe:	4933      	ldr	r1, [pc, #204]	@ (80122cc <etharp_query+0x298>)
 8012200:	482d      	ldr	r0, [pc, #180]	@ (80122b8 <etharp_query+0x284>)
 8012202:	f003 fc35 	bl	8015a70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	7b1b      	ldrb	r3, [r3, #12]
 801220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801220e:	2b00      	cmp	r3, #0
 8012210:	d002      	beq.n	8012218 <etharp_query+0x1e4>
        copy_needed = 1;
 8012212:	2301      	movs	r3, #1
 8012214:	61bb      	str	r3, [r7, #24]
        break;
 8012216:	e005      	b.n	8012224 <etharp_query+0x1f0>
      }
      p = p->next;
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d1df      	bne.n	80121e4 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d007      	beq.n	801223a <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012230:	200e      	movs	r0, #14
 8012232:	f7f6 fa8f 	bl	8008754 <pbuf_clone>
 8012236:	61f8      	str	r0, [r7, #28]
 8012238:	e004      	b.n	8012244 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801223e:	69f8      	ldr	r0, [r7, #28]
 8012240:	f7f5 ff7e 	bl	8008140 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d021      	beq.n	801228e <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801224a:	7c7a      	ldrb	r2, [r7, #17]
 801224c:	491b      	ldr	r1, [pc, #108]	@ (80122bc <etharp_query+0x288>)
 801224e:	4613      	mov	r3, r2
 8012250:	005b      	lsls	r3, r3, #1
 8012252:	4413      	add	r3, r2
 8012254:	00db      	lsls	r3, r3, #3
 8012256:	440b      	add	r3, r1
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00a      	beq.n	8012274 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801225e:	7c7a      	ldrb	r2, [r7, #17]
 8012260:	4916      	ldr	r1, [pc, #88]	@ (80122bc <etharp_query+0x288>)
 8012262:	4613      	mov	r3, r2
 8012264:	005b      	lsls	r3, r3, #1
 8012266:	4413      	add	r3, r2
 8012268:	00db      	lsls	r3, r3, #3
 801226a:	440b      	add	r3, r1
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4618      	mov	r0, r3
 8012270:	f7f5 fec0 	bl	8007ff4 <pbuf_free>
      }
      arp_table[i].q = p;
 8012274:	7c7a      	ldrb	r2, [r7, #17]
 8012276:	4911      	ldr	r1, [pc, #68]	@ (80122bc <etharp_query+0x288>)
 8012278:	4613      	mov	r3, r2
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	4413      	add	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	440b      	add	r3, r1
 8012282:	69fa      	ldr	r2, [r7, #28]
 8012284:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012286:	2300      	movs	r3, #0
 8012288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801228c:	e008      	b.n	80122a0 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801228e:	4b07      	ldr	r3, [pc, #28]	@ (80122ac <etharp_query+0x278>)
 8012290:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012292:	3301      	adds	r3, #1
 8012294:	b29a      	uxth	r2, r3
 8012296:	4b05      	ldr	r3, [pc, #20]	@ (80122ac <etharp_query+0x278>)
 8012298:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801229a:	23ff      	movs	r3, #255	@ 0xff
 801229c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80122a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3728      	adds	r7, #40	@ 0x28
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	20003a9c 	.word	0x20003a9c
 80122b0:	08018ef4 	.word	0x08018ef4
 80122b4:	080190a0 	.word	0x080190a0
 80122b8:	08018f6c 	.word	0x08018f6c
 80122bc:	20003c08 	.word	0x20003c08
 80122c0:	080190b0 	.word	0x080190b0
 80122c4:	08019094 	.word	0x08019094
 80122c8:	20003cf8 	.word	0x20003cf8
 80122cc:	080190d8 	.word	0x080190d8

080122d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08a      	sub	sp, #40	@ 0x28
 80122d4:	af02      	add	r7, sp, #8
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	607a      	str	r2, [r7, #4]
 80122dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80122de:	2300      	movs	r3, #0
 80122e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d106      	bne.n	80122f6 <etharp_raw+0x26>
 80122e8:	4b40      	ldr	r3, [pc, #256]	@ (80123ec <etharp_raw+0x11c>)
 80122ea:	f240 4257 	movw	r2, #1111	@ 0x457
 80122ee:	4940      	ldr	r1, [pc, #256]	@ (80123f0 <etharp_raw+0x120>)
 80122f0:	4840      	ldr	r0, [pc, #256]	@ (80123f4 <etharp_raw+0x124>)
 80122f2:	f003 fbbd 	bl	8015a70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80122f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80122fa:	211c      	movs	r1, #28
 80122fc:	200e      	movs	r0, #14
 80122fe:	f7f5 fb97 	bl	8007a30 <pbuf_alloc>
 8012302:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d108      	bne.n	801231c <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801230a:	4b3b      	ldr	r3, [pc, #236]	@ (80123f8 <etharp_raw+0x128>)
 801230c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801230e:	3301      	adds	r3, #1
 8012310:	b29a      	uxth	r2, r3
 8012312:	4b39      	ldr	r3, [pc, #228]	@ (80123f8 <etharp_raw+0x128>)
 8012314:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 8012316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801231a:	e063      	b.n	80123e4 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	895b      	ldrh	r3, [r3, #10]
 8012320:	2b1b      	cmp	r3, #27
 8012322:	d806      	bhi.n	8012332 <etharp_raw+0x62>
 8012324:	4b31      	ldr	r3, [pc, #196]	@ (80123ec <etharp_raw+0x11c>)
 8012326:	f240 4262 	movw	r2, #1122	@ 0x462
 801232a:	4934      	ldr	r1, [pc, #208]	@ (80123fc <etharp_raw+0x12c>)
 801232c:	4831      	ldr	r0, [pc, #196]	@ (80123f4 <etharp_raw+0x124>)
 801232e:	f003 fb9f 	bl	8015a70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012338:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801233a:	4618      	mov	r0, r3
 801233c:	f7f4 fa5a 	bl	80067f4 <lwip_htons>
 8012340:	4603      	mov	r3, r0
 8012342:	461a      	mov	r2, r3
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801234e:	2b06      	cmp	r3, #6
 8012350:	d006      	beq.n	8012360 <etharp_raw+0x90>
 8012352:	4b26      	ldr	r3, [pc, #152]	@ (80123ec <etharp_raw+0x11c>)
 8012354:	f240 4269 	movw	r2, #1129	@ 0x469
 8012358:	4929      	ldr	r1, [pc, #164]	@ (8012400 <etharp_raw+0x130>)
 801235a:	4826      	ldr	r0, [pc, #152]	@ (80123f4 <etharp_raw+0x124>)
 801235c:	f003 fb88 	bl	8015a70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	3308      	adds	r3, #8
 8012364:	2206      	movs	r2, #6
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	4618      	mov	r0, r3
 801236a:	f003 fc8a 	bl	8015c82 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	3312      	adds	r3, #18
 8012372:	2206      	movs	r2, #6
 8012374:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012376:	4618      	mov	r0, r3
 8012378:	f003 fc83 	bl	8015c82 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	330e      	adds	r3, #14
 8012380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012382:	6812      	ldr	r2, [r2, #0]
 8012384:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	3318      	adds	r3, #24
 801238a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801238c:	6812      	ldr	r2, [r2, #0]
 801238e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	2200      	movs	r2, #0
 8012394:	701a      	strb	r2, [r3, #0]
 8012396:	2200      	movs	r2, #0
 8012398:	f042 0201 	orr.w	r2, r2, #1
 801239c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f042 0208 	orr.w	r2, r2, #8
 80123a6:	709a      	strb	r2, [r3, #2]
 80123a8:	2200      	movs	r2, #0
 80123aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	2206      	movs	r2, #6
 80123b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	2204      	movs	r2, #4
 80123b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80123b8:	f640 0306 	movw	r3, #2054	@ 0x806
 80123bc:	9300      	str	r3, [sp, #0]
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	69b9      	ldr	r1, [r7, #24]
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	f001 fd6f 	bl	8013ea8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80123ca:	4b0b      	ldr	r3, [pc, #44]	@ (80123f8 <etharp_raw+0x128>)
 80123cc:	8b1b      	ldrh	r3, [r3, #24]
 80123ce:	3301      	adds	r3, #1
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	4b09      	ldr	r3, [pc, #36]	@ (80123f8 <etharp_raw+0x128>)
 80123d4:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80123d6:	69b8      	ldr	r0, [r7, #24]
 80123d8:	f7f5 fe0c 	bl	8007ff4 <pbuf_free>
  p = NULL;
 80123dc:	2300      	movs	r3, #0
 80123de:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80123e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3720      	adds	r7, #32
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	08018ef4 	.word	0x08018ef4
 80123f0:	08019044 	.word	0x08019044
 80123f4:	08018f6c 	.word	0x08018f6c
 80123f8:	20003a9c 	.word	0x20003a9c
 80123fc:	080190f4 	.word	0x080190f4
 8012400:	08019128 	.word	0x08019128

08012404 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b088      	sub	sp, #32
 8012408:	af04      	add	r7, sp, #16
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012420:	2201      	movs	r2, #1
 8012422:	9203      	str	r2, [sp, #12]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	9202      	str	r2, [sp, #8]
 8012428:	4a06      	ldr	r2, [pc, #24]	@ (8012444 <etharp_request_dst+0x40>)
 801242a:	9201      	str	r2, [sp, #4]
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	4603      	mov	r3, r0
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f7ff ff4c 	bl	80122d0 <etharp_raw>
 8012438:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801243a:	4618      	mov	r0, r3
 801243c:	3710      	adds	r7, #16
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	08019894 	.word	0x08019894

08012448 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012452:	4a05      	ldr	r2, [pc, #20]	@ (8012468 <etharp_request+0x20>)
 8012454:	6839      	ldr	r1, [r7, #0]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff ffd4 	bl	8012404 <etharp_request_dst>
 801245c:	4603      	mov	r3, r0
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	0801988c 	.word	0x0801988c

0801246c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b08e      	sub	sp, #56	@ 0x38
 8012470:	af04      	add	r7, sp, #16
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8012476:	4ba8      	ldr	r3, [pc, #672]	@ (8012718 <icmp_input+0x2ac>)
 8012478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801247c:	3301      	adds	r3, #1
 801247e:	b29a      	uxth	r2, r3
 8012480:	4ba5      	ldr	r3, [pc, #660]	@ (8012718 <icmp_input+0x2ac>)
 8012482:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012486:	4ba5      	ldr	r3, [pc, #660]	@ (801271c <icmp_input+0x2b0>)
 8012488:	689b      	ldr	r3, [r3, #8]
 801248a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	f003 030f 	and.w	r3, r3, #15
 8012494:	b2db      	uxtb	r3, r3
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	b2db      	uxtb	r3, r3
 801249a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801249c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801249e:	2b13      	cmp	r3, #19
 80124a0:	f240 8112 	bls.w	80126c8 <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	895b      	ldrh	r3, [r3, #10]
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	f240 810f 	bls.w	80126cc <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80124b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f000 80fc 	beq.w	80126ba <icmp_input+0x24e>
 80124c2:	2b08      	cmp	r3, #8
 80124c4:	f040 80e8 	bne.w	8012698 <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80124c8:	4b95      	ldr	r3, [pc, #596]	@ (8012720 <icmp_input+0x2b4>)
 80124ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80124cc:	4b93      	ldr	r3, [pc, #588]	@ (801271c <icmp_input+0x2b0>)
 80124ce:	695b      	ldr	r3, [r3, #20]
 80124d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124d4:	2be0      	cmp	r3, #224	@ 0xe0
 80124d6:	f000 8108 	beq.w	80126ea <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80124da:	4b90      	ldr	r3, [pc, #576]	@ (801271c <icmp_input+0x2b0>)
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	4a8f      	ldr	r2, [pc, #572]	@ (801271c <icmp_input+0x2b0>)
 80124e0:	6812      	ldr	r2, [r2, #0]
 80124e2:	4611      	mov	r1, r2
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 fd6f 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f040 80fe 	bne.w	80126ee <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	891b      	ldrh	r3, [r3, #8]
 80124f6:	2b07      	cmp	r3, #7
 80124f8:	f240 80ea 	bls.w	80126d0 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7f4 fdf6 	bl	80070ee <inet_chksum_pbuf>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00b      	beq.n	8012520 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7f5 fd73 	bl	8007ff4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801250e:	4b82      	ldr	r3, [pc, #520]	@ (8012718 <icmp_input+0x2ac>)
 8012510:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012514:	3301      	adds	r3, #1
 8012516:	b29a      	uxth	r2, r3
 8012518:	4b7f      	ldr	r3, [pc, #508]	@ (8012718 <icmp_input+0x2ac>)
 801251a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801251e:	e0f7      	b.n	8012710 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012520:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012522:	330e      	adds	r3, #14
 8012524:	4619      	mov	r1, r3
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7f5 fcce 	bl	8007ec8 <pbuf_add_header>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d04b      	beq.n	80125ca <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	891a      	ldrh	r2, [r3, #8]
 8012536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012538:	4413      	add	r3, r2
 801253a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	891b      	ldrh	r3, [r3, #8]
 8012540:	8b7a      	ldrh	r2, [r7, #26]
 8012542:	429a      	cmp	r2, r3
 8012544:	f0c0 80d5 	bcc.w	80126f2 <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012548:	8b7b      	ldrh	r3, [r7, #26]
 801254a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801254e:	4619      	mov	r1, r3
 8012550:	200e      	movs	r0, #14
 8012552:	f7f5 fa6d 	bl	8007a30 <pbuf_alloc>
 8012556:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 80cb 	beq.w	80126f6 <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	895b      	ldrh	r3, [r3, #10]
 8012564:	461a      	mov	r2, r3
 8012566:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012568:	3308      	adds	r3, #8
 801256a:	429a      	cmp	r2, r3
 801256c:	d203      	bcs.n	8012576 <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801256e:	6978      	ldr	r0, [r7, #20]
 8012570:	f7f5 fd40 	bl	8007ff4 <pbuf_free>
          goto icmperr;
 8012574:	e0c0      	b.n	80126f8 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801257c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801257e:	4618      	mov	r0, r3
 8012580:	f003 fb7f 	bl	8015c82 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012584:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012586:	4619      	mov	r1, r3
 8012588:	6978      	ldr	r0, [r7, #20]
 801258a:	f7f5 fcad 	bl	8007ee8 <pbuf_remove_header>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d009      	beq.n	80125a8 <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012594:	4b63      	ldr	r3, [pc, #396]	@ (8012724 <icmp_input+0x2b8>)
 8012596:	22b6      	movs	r2, #182	@ 0xb6
 8012598:	4963      	ldr	r1, [pc, #396]	@ (8012728 <icmp_input+0x2bc>)
 801259a:	4864      	ldr	r0, [pc, #400]	@ (801272c <icmp_input+0x2c0>)
 801259c:	f003 fa68 	bl	8015a70 <iprintf>
          pbuf_free(r);
 80125a0:	6978      	ldr	r0, [r7, #20]
 80125a2:	f7f5 fd27 	bl	8007ff4 <pbuf_free>
          goto icmperr;
 80125a6:	e0a7      	b.n	80126f8 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	6978      	ldr	r0, [r7, #20]
 80125ac:	f7f5 fe56 	bl	800825c <pbuf_copy>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d003      	beq.n	80125be <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80125b6:	6978      	ldr	r0, [r7, #20]
 80125b8:	f7f5 fd1c 	bl	8007ff4 <pbuf_free>
          goto icmperr;
 80125bc:	e09c      	b.n	80126f8 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f7f5 fd18 	bl	8007ff4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	607b      	str	r3, [r7, #4]
 80125c8:	e00f      	b.n	80125ea <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80125ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125cc:	330e      	adds	r3, #14
 80125ce:	4619      	mov	r1, r3
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7f5 fc89 	bl	8007ee8 <pbuf_remove_header>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d006      	beq.n	80125ea <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80125dc:	4b51      	ldr	r3, [pc, #324]	@ (8012724 <icmp_input+0x2b8>)
 80125de:	22c7      	movs	r2, #199	@ 0xc7
 80125e0:	4953      	ldr	r1, [pc, #332]	@ (8012730 <icmp_input+0x2c4>)
 80125e2:	4852      	ldr	r0, [pc, #328]	@ (801272c <icmp_input+0x2c0>)
 80125e4:	f003 fa44 	bl	8015a70 <iprintf>
          goto icmperr;
 80125e8:	e086      	b.n	80126f8 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80125f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125f2:	4619      	mov	r1, r3
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7f5 fc67 	bl	8007ec8 <pbuf_add_header>
 80125fa:	4603      	mov	r3, r0
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d15e      	bne.n	80126be <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801260e:	4b43      	ldr	r3, [pc, #268]	@ (801271c <icmp_input+0x2b0>)
 8012610:	691a      	ldr	r2, [r3, #16]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	2200      	movs	r2, #0
 801261a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	885b      	ldrh	r3, [r3, #2]
 8012620:	b29b      	uxth	r3, r3
 8012622:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012626:	4293      	cmp	r3, r2
 8012628:	d907      	bls.n	801263a <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	885b      	ldrh	r3, [r3, #2]
 801262e:	b29b      	uxth	r3, r3
 8012630:	3309      	adds	r3, #9
 8012632:	b29a      	uxth	r2, r3
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	805a      	strh	r2, [r3, #2]
 8012638:	e006      	b.n	8012648 <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	885b      	ldrh	r3, [r3, #2]
 801263e:	b29b      	uxth	r3, r3
 8012640:	3308      	adds	r3, #8
 8012642:	b29a      	uxth	r2, r3
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	22ff      	movs	r2, #255	@ 0xff
 801264c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2200      	movs	r2, #0
 8012652:	729a      	strb	r2, [r3, #10]
 8012654:	2200      	movs	r2, #0
 8012656:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8012658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801265a:	4619      	mov	r1, r3
 801265c:	68f8      	ldr	r0, [r7, #12]
 801265e:	f7f4 fd34 	bl	80070ca <inet_chksum>
 8012662:	4603      	mov	r3, r0
 8012664:	461a      	mov	r2, r3
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801266a:	4b2b      	ldr	r3, [pc, #172]	@ (8012718 <icmp_input+0x2ac>)
 801266c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012670:	3301      	adds	r3, #1
 8012672:	b29a      	uxth	r2, r3
 8012674:	4b28      	ldr	r3, [pc, #160]	@ (8012718 <icmp_input+0x2ac>)
 8012676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	9302      	str	r3, [sp, #8]
 801267e:	2301      	movs	r3, #1
 8012680:	9301      	str	r3, [sp, #4]
 8012682:	2300      	movs	r3, #0
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	23ff      	movs	r3, #255	@ 0xff
 8012688:	2200      	movs	r2, #0
 801268a:	69f9      	ldr	r1, [r7, #28]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 fb41 	bl	8012d14 <ip4_output_if>
 8012692:	4603      	mov	r3, r0
 8012694:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012696:	e012      	b.n	80126be <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8012698:	4b1f      	ldr	r3, [pc, #124]	@ (8012718 <icmp_input+0x2ac>)
 801269a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801269e:	3301      	adds	r3, #1
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	4b1d      	ldr	r3, [pc, #116]	@ (8012718 <icmp_input+0x2ac>)
 80126a4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 80126a8:	4b1b      	ldr	r3, [pc, #108]	@ (8012718 <icmp_input+0x2ac>)
 80126aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126ae:	3301      	adds	r3, #1
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	4b19      	ldr	r3, [pc, #100]	@ (8012718 <icmp_input+0x2ac>)
 80126b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 80126b8:	e002      	b.n	80126c0 <icmp_input+0x254>
      break;
 80126ba:	bf00      	nop
 80126bc:	e000      	b.n	80126c0 <icmp_input+0x254>
      break;
 80126be:	bf00      	nop
  }
  pbuf_free(p);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7f5 fc97 	bl	8007ff4 <pbuf_free>
  return;
 80126c6:	e023      	b.n	8012710 <icmp_input+0x2a4>
    goto lenerr;
 80126c8:	bf00      	nop
 80126ca:	e002      	b.n	80126d2 <icmp_input+0x266>
    goto lenerr;
 80126cc:	bf00      	nop
 80126ce:	e000      	b.n	80126d2 <icmp_input+0x266>
        goto lenerr;
 80126d0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f7f5 fc8e 	bl	8007ff4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 80126d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012718 <icmp_input+0x2ac>)
 80126da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80126de:	3301      	adds	r3, #1
 80126e0:	b29a      	uxth	r2, r3
 80126e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012718 <icmp_input+0x2ac>)
 80126e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80126e8:	e012      	b.n	8012710 <icmp_input+0x2a4>
        goto icmperr;
 80126ea:	bf00      	nop
 80126ec:	e004      	b.n	80126f8 <icmp_input+0x28c>
        goto icmperr;
 80126ee:	bf00      	nop
 80126f0:	e002      	b.n	80126f8 <icmp_input+0x28c>
          goto icmperr;
 80126f2:	bf00      	nop
 80126f4:	e000      	b.n	80126f8 <icmp_input+0x28c>
          goto icmperr;
 80126f6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7f5 fc7b 	bl	8007ff4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 80126fe:	4b06      	ldr	r3, [pc, #24]	@ (8012718 <icmp_input+0x2ac>)
 8012700:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012704:	3301      	adds	r3, #1
 8012706:	b29a      	uxth	r2, r3
 8012708:	4b03      	ldr	r3, [pc, #12]	@ (8012718 <icmp_input+0x2ac>)
 801270a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801270e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012710:	3728      	adds	r7, #40	@ 0x28
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	20003a9c 	.word	0x20003a9c
 801271c:	20000aa8 	.word	0x20000aa8
 8012720:	20000abc 	.word	0x20000abc
 8012724:	0801916c 	.word	0x0801916c
 8012728:	080191a4 	.word	0x080191a4
 801272c:	080191dc 	.word	0x080191dc
 8012730:	08019204 	.word	0x08019204

08012734 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	460b      	mov	r3, r1
 801273e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012740:	78fb      	ldrb	r3, [r7, #3]
 8012742:	461a      	mov	r2, r3
 8012744:	2103      	movs	r1, #3
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f000 f814 	bl	8012774 <icmp_send_response>
}
 801274c:	bf00      	nop
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	460b      	mov	r3, r1
 801275e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012760:	78fb      	ldrb	r3, [r7, #3]
 8012762:	461a      	mov	r2, r3
 8012764:	210b      	movs	r1, #11
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f000 f804 	bl	8012774 <icmp_send_response>
}
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b08c      	sub	sp, #48	@ 0x30
 8012778:	af04      	add	r7, sp, #16
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	460b      	mov	r3, r1
 801277e:	70fb      	strb	r3, [r7, #3]
 8012780:	4613      	mov	r3, r2
 8012782:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012784:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012788:	2124      	movs	r1, #36	@ 0x24
 801278a:	2022      	movs	r0, #34	@ 0x22
 801278c:	f7f5 f950 	bl	8007a30 <pbuf_alloc>
 8012790:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d05e      	beq.n	8012856 <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	895b      	ldrh	r3, [r3, #10]
 801279c:	2b23      	cmp	r3, #35	@ 0x23
 801279e:	d806      	bhi.n	80127ae <icmp_send_response+0x3a>
 80127a0:	4b2f      	ldr	r3, [pc, #188]	@ (8012860 <icmp_send_response+0xec>)
 80127a2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80127a6:	492f      	ldr	r1, [pc, #188]	@ (8012864 <icmp_send_response+0xf0>)
 80127a8:	482f      	ldr	r0, [pc, #188]	@ (8012868 <icmp_send_response+0xf4>)
 80127aa:	f003 f961 	bl	8015a70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	78fa      	ldrb	r2, [r7, #3]
 80127be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	78ba      	ldrb	r2, [r7, #2]
 80127c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2200      	movs	r2, #0
 80127ca:	711a      	strb	r2, [r3, #4]
 80127cc:	2200      	movs	r2, #0
 80127ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	2200      	movs	r2, #0
 80127d4:	719a      	strb	r2, [r3, #6]
 80127d6:	2200      	movs	r2, #0
 80127d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	685b      	ldr	r3, [r3, #4]
 80127de:	f103 0008 	add.w	r0, r3, #8
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	221c      	movs	r2, #28
 80127e8:	4619      	mov	r1, r3
 80127ea:	f003 fa4a 	bl	8015c82 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80127f4:	f107 030c 	add.w	r3, r7, #12
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 f839 	bl	8012870 <ip4_route>
 80127fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d023      	beq.n	801284e <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	2200      	movs	r2, #0
 801280a:	709a      	strb	r2, [r3, #2]
 801280c:	2200      	movs	r2, #0
 801280e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	895b      	ldrh	r3, [r3, #10]
 8012814:	4619      	mov	r1, r3
 8012816:	6978      	ldr	r0, [r7, #20]
 8012818:	f7f4 fc57 	bl	80070ca <inet_chksum>
 801281c:	4603      	mov	r3, r0
 801281e:	461a      	mov	r2, r3
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8012824:	4b11      	ldr	r3, [pc, #68]	@ (801286c <icmp_send_response+0xf8>)
 8012826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801282a:	3301      	adds	r3, #1
 801282c:	b29a      	uxth	r2, r3
 801282e:	4b0f      	ldr	r3, [pc, #60]	@ (801286c <icmp_send_response+0xf8>)
 8012830:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012834:	f107 020c 	add.w	r2, r7, #12
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	9302      	str	r3, [sp, #8]
 801283c:	2301      	movs	r3, #1
 801283e:	9301      	str	r3, [sp, #4]
 8012840:	2300      	movs	r3, #0
 8012842:	9300      	str	r3, [sp, #0]
 8012844:	23ff      	movs	r3, #255	@ 0xff
 8012846:	2100      	movs	r1, #0
 8012848:	69f8      	ldr	r0, [r7, #28]
 801284a:	f000 fa63 	bl	8012d14 <ip4_output_if>
  }
  pbuf_free(q);
 801284e:	69f8      	ldr	r0, [r7, #28]
 8012850:	f7f5 fbd0 	bl	8007ff4 <pbuf_free>
 8012854:	e000      	b.n	8012858 <icmp_send_response+0xe4>
    return;
 8012856:	bf00      	nop
}
 8012858:	3720      	adds	r7, #32
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	0801916c 	.word	0x0801916c
 8012864:	08019238 	.word	0x08019238
 8012868:	080191dc 	.word	0x080191dc
 801286c:	20003a9c 	.word	0x20003a9c

08012870 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012870:	b480      	push	{r7}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012878:	4b37      	ldr	r3, [pc, #220]	@ (8012958 <ip4_route+0xe8>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	60fb      	str	r3, [r7, #12]
 801287e:	e036      	b.n	80128ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012886:	f003 0301 	and.w	r3, r3, #1
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b00      	cmp	r3, #0
 801288e:	d02b      	beq.n	80128e8 <ip4_route+0x78>
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012896:	089b      	lsrs	r3, r3, #2
 8012898:	f003 0301 	and.w	r3, r3, #1
 801289c:	b2db      	uxtb	r3, r3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d022      	beq.n	80128e8 <ip4_route+0x78>
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	3304      	adds	r3, #4
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d01d      	beq.n	80128e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	3304      	adds	r3, #4
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	405a      	eors	r2, r3
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3308      	adds	r3, #8
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4013      	ands	r3, r2
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	e040      	b.n	801294a <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80128ce:	f003 0302 	and.w	r3, r3, #2
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d108      	bne.n	80128e8 <ip4_route+0x78>
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	330c      	adds	r3, #12
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d101      	bne.n	80128e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	e030      	b.n	801294a <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	60fb      	str	r3, [r7, #12]
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1c5      	bne.n	8012880 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80128f4:	4b19      	ldr	r3, [pc, #100]	@ (801295c <ip4_route+0xec>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d01a      	beq.n	8012932 <ip4_route+0xc2>
 80128fc:	4b17      	ldr	r3, [pc, #92]	@ (801295c <ip4_route+0xec>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012904:	f003 0301 	and.w	r3, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d012      	beq.n	8012932 <ip4_route+0xc2>
 801290c:	4b13      	ldr	r3, [pc, #76]	@ (801295c <ip4_route+0xec>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012914:	f003 0304 	and.w	r3, r3, #4
 8012918:	2b00      	cmp	r3, #0
 801291a:	d00a      	beq.n	8012932 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801291c:	4b0f      	ldr	r3, [pc, #60]	@ (801295c <ip4_route+0xec>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	3304      	adds	r3, #4
 8012922:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012924:	2b00      	cmp	r3, #0
 8012926:	d004      	beq.n	8012932 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012930:	d109      	bne.n	8012946 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8012932:	4b0b      	ldr	r3, [pc, #44]	@ (8012960 <ip4_route+0xf0>)
 8012934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012938:	3301      	adds	r3, #1
 801293a:	b29a      	uxth	r2, r3
 801293c:	4b08      	ldr	r3, [pc, #32]	@ (8012960 <ip4_route+0xf0>)
 801293e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012942:	2300      	movs	r3, #0
 8012944:	e001      	b.n	801294a <ip4_route+0xda>
  }

  return netif_default;
 8012946:	4b05      	ldr	r3, [pc, #20]	@ (801295c <ip4_route+0xec>)
 8012948:	681b      	ldr	r3, [r3, #0]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	20003a90 	.word	0x20003a90
 801295c:	20003a94 	.word	0x20003a94
 8012960:	20003a9c 	.word	0x20003a9c

08012964 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012972:	f003 0301 	and.w	r3, r3, #1
 8012976:	b2db      	uxtb	r3, r3
 8012978:	2b00      	cmp	r3, #0
 801297a:	d016      	beq.n	80129aa <ip4_input_accept+0x46>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	3304      	adds	r3, #4
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d011      	beq.n	80129aa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012986:	4b0b      	ldr	r3, [pc, #44]	@ (80129b4 <ip4_input_accept+0x50>)
 8012988:	695a      	ldr	r2, [r3, #20]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3304      	adds	r3, #4
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	429a      	cmp	r2, r3
 8012992:	d008      	beq.n	80129a6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012994:	4b07      	ldr	r3, [pc, #28]	@ (80129b4 <ip4_input_accept+0x50>)
 8012996:	695b      	ldr	r3, [r3, #20]
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	4618      	mov	r0, r3
 801299c:	f000 fb14 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 80129a0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d001      	beq.n	80129aa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80129a6:	2301      	movs	r3, #1
 80129a8:	e000      	b.n	80129ac <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80129aa:	2300      	movs	r3, #0
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	20000aa8 	.word	0x20000aa8

080129b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80129c2:	2301      	movs	r3, #1
 80129c4:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80129c6:	4b91      	ldr	r3, [pc, #580]	@ (8012c0c <ip4_input+0x254>)
 80129c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80129cc:	3301      	adds	r3, #1
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	4b8e      	ldr	r3, [pc, #568]	@ (8012c0c <ip4_input+0x254>)
 80129d2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	091b      	lsrs	r3, r3, #4
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	2b04      	cmp	r3, #4
 80129e6:	d014      	beq.n	8012a12 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7f5 fb03 	bl	8007ff4 <pbuf_free>
    IP_STATS_INC(ip.err);
 80129ee:	4b87      	ldr	r3, [pc, #540]	@ (8012c0c <ip4_input+0x254>)
 80129f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80129f4:	3301      	adds	r3, #1
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	4b84      	ldr	r3, [pc, #528]	@ (8012c0c <ip4_input+0x254>)
 80129fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 80129fe:	4b83      	ldr	r3, [pc, #524]	@ (8012c0c <ip4_input+0x254>)
 8012a00:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012a04:	3301      	adds	r3, #1
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	4b80      	ldr	r3, [pc, #512]	@ (8012c0c <ip4_input+0x254>)
 8012a0a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	e177      	b.n	8012d02 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	f003 030f 	and.w	r3, r3, #15
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	b2db      	uxtb	r3, r3
 8012a20:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012a22:	69fb      	ldr	r3, [r7, #28]
 8012a24:	885b      	ldrh	r3, [r3, #2]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7f3 fee3 	bl	80067f4 <lwip_htons>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	891b      	ldrh	r3, [r3, #8]
 8012a36:	8a3a      	ldrh	r2, [r7, #16]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d204      	bcs.n	8012a46 <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8012a3c:	8a3b      	ldrh	r3, [r7, #16]
 8012a3e:	4619      	mov	r1, r3
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7f5 f953 	bl	8007cec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	895b      	ldrh	r3, [r3, #10]
 8012a4a:	8a7a      	ldrh	r2, [r7, #18]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d807      	bhi.n	8012a60 <ip4_input+0xa8>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	891b      	ldrh	r3, [r3, #8]
 8012a54:	8a3a      	ldrh	r2, [r7, #16]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d802      	bhi.n	8012a60 <ip4_input+0xa8>
 8012a5a:	8a7b      	ldrh	r3, [r7, #18]
 8012a5c:	2b13      	cmp	r3, #19
 8012a5e:	d814      	bhi.n	8012a8a <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7f5 fac7 	bl	8007ff4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8012a66:	4b69      	ldr	r3, [pc, #420]	@ (8012c0c <ip4_input+0x254>)
 8012a68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	b29a      	uxth	r2, r3
 8012a70:	4b66      	ldr	r3, [pc, #408]	@ (8012c0c <ip4_input+0x254>)
 8012a72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 8012a76:	4b65      	ldr	r3, [pc, #404]	@ (8012c0c <ip4_input+0x254>)
 8012a78:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	4b62      	ldr	r3, [pc, #392]	@ (8012c0c <ip4_input+0x254>)
 8012a82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012a86:	2300      	movs	r3, #0
 8012a88:	e13b      	b.n	8012d02 <ip4_input+0x34a>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8012a8a:	8a7b      	ldrh	r3, [r7, #18]
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	69f8      	ldr	r0, [r7, #28]
 8012a90:	f7f4 fb1b 	bl	80070ca <inet_chksum>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d014      	beq.n	8012ac4 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7f5 faaa 	bl	8007ff4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8012aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8012c0c <ip4_input+0x254>)
 8012aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	4b58      	ldr	r3, [pc, #352]	@ (8012c0c <ip4_input+0x254>)
 8012aac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      IP_STATS_INC(ip.drop);
 8012ab0:	4b56      	ldr	r3, [pc, #344]	@ (8012c0c <ip4_input+0x254>)
 8012ab2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	4b54      	ldr	r3, [pc, #336]	@ (8012c0c <ip4_input+0x254>)
 8012abc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	e11e      	b.n	8012d02 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	4a51      	ldr	r2, [pc, #324]	@ (8012c10 <ip4_input+0x258>)
 8012aca:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8012c10 <ip4_input+0x258>)
 8012ad2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8012c10 <ip4_input+0x258>)
 8012ad6:	695b      	ldr	r3, [r3, #20]
 8012ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012adc:	2be0      	cmp	r3, #224	@ 0xe0
 8012ade:	d112      	bne.n	8012b06 <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012ae6:	f003 0301 	and.w	r3, r3, #1
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d007      	beq.n	8012b00 <ip4_input+0x148>
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	3304      	adds	r3, #4
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d002      	beq.n	8012b00 <ip4_input+0x148>
      netif = inp;
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	61bb      	str	r3, [r7, #24]
 8012afe:	e02a      	b.n	8012b56 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8012b00:	2300      	movs	r3, #0
 8012b02:	61bb      	str	r3, [r7, #24]
 8012b04:	e027      	b.n	8012b56 <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012b06:	6838      	ldr	r0, [r7, #0]
 8012b08:	f7ff ff2c 	bl	8012964 <ip4_input_accept>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d002      	beq.n	8012b18 <ip4_input+0x160>
      netif = inp;
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	61bb      	str	r3, [r7, #24]
 8012b16:	e01e      	b.n	8012b56 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8012c10 <ip4_input+0x258>)
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b24:	d017      	beq.n	8012b56 <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012b26:	4b3b      	ldr	r3, [pc, #236]	@ (8012c14 <ip4_input+0x25c>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	61bb      	str	r3, [r7, #24]
 8012b2c:	e00e      	b.n	8012b4c <ip4_input+0x194>
          if (netif == inp) {
 8012b2e:	69ba      	ldr	r2, [r7, #24]
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d006      	beq.n	8012b44 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012b36:	69b8      	ldr	r0, [r7, #24]
 8012b38:	f7ff ff14 	bl	8012964 <ip4_input_accept>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d108      	bne.n	8012b54 <ip4_input+0x19c>
 8012b42:	e000      	b.n	8012b46 <ip4_input+0x18e>
            continue;
 8012b44:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	61bb      	str	r3, [r7, #24]
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1ed      	bne.n	8012b2e <ip4_input+0x176>
 8012b52:	e000      	b.n	8012b56 <ip4_input+0x19e>
            break;
 8012b54:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012b56:	69bb      	ldr	r3, [r7, #24]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d111      	bne.n	8012b80 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	7a5b      	ldrb	r3, [r3, #9]
 8012b60:	2b11      	cmp	r3, #17
 8012b62:	d10d      	bne.n	8012b80 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012b64:	8a7b      	ldrh	r3, [r7, #18]
 8012b66:	69fa      	ldr	r2, [r7, #28]
 8012b68:	4413      	add	r3, r2
 8012b6a:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	885b      	ldrh	r3, [r3, #2]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012b76:	d103      	bne.n	8012b80 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d01f      	beq.n	8012bc6 <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012b86:	4b22      	ldr	r3, [pc, #136]	@ (8012c10 <ip4_input+0x258>)
 8012b88:	691b      	ldr	r3, [r3, #16]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d01b      	beq.n	8012bc6 <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012b8e:	4b20      	ldr	r3, [pc, #128]	@ (8012c10 <ip4_input+0x258>)
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	6839      	ldr	r1, [r7, #0]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 fa17 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d105      	bne.n	8012bac <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8012c10 <ip4_input+0x258>)
 8012ba2:	691b      	ldr	r3, [r3, #16]
 8012ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ba8:	2be0      	cmp	r3, #224	@ 0xe0
 8012baa:	d10c      	bne.n	8012bc6 <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7f5 fa21 	bl	8007ff4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8012bb2:	4b16      	ldr	r3, [pc, #88]	@ (8012c0c <ip4_input+0x254>)
 8012bb4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012bb8:	3301      	adds	r3, #1
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	4b13      	ldr	r3, [pc, #76]	@ (8012c0c <ip4_input+0x254>)
 8012bbe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	e09d      	b.n	8012d02 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10c      	bne.n	8012be6 <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8012bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8012c0c <ip4_input+0x254>)
 8012bce:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8012c0c <ip4_input+0x254>)
 8012bd8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7f5 fa09 	bl	8007ff4 <pbuf_free>
    return ERR_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e08d      	b.n	8012d02 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	88db      	ldrh	r3, [r3, #6]
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	461a      	mov	r2, r3
 8012bee:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d012      	beq.n	8012c1e <ip4_input+0x266>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 fd33 	bl	8013664 <ip4_reass>
 8012bfe:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d108      	bne.n	8012c18 <ip4_input+0x260>
      return ERR_OK;
 8012c06:	2300      	movs	r3, #0
 8012c08:	e07b      	b.n	8012d02 <ip4_input+0x34a>
 8012c0a:	bf00      	nop
 8012c0c:	20003a9c 	.word	0x20003a9c
 8012c10:	20000aa8 	.word	0x20000aa8
 8012c14:	20003a90 	.word	0x20003a90
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8012d0c <ip4_input+0x354>)
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c24:	4a39      	ldr	r2, [pc, #228]	@ (8012d0c <ip4_input+0x354>)
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c2a:	4a38      	ldr	r2, [pc, #224]	@ (8012d0c <ip4_input+0x354>)
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 030f 	and.w	r3, r3, #15
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	461a      	mov	r2, r3
 8012c40:	4b32      	ldr	r3, [pc, #200]	@ (8012d0c <ip4_input+0x354>)
 8012c42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012c44:	8a7b      	ldrh	r3, [r7, #18]
 8012c46:	4619      	mov	r1, r3
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7f5 f94d 	bl	8007ee8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	7a5b      	ldrb	r3, [r3, #9]
 8012c52:	2b11      	cmp	r3, #17
 8012c54:	d006      	beq.n	8012c64 <ip4_input+0x2ac>
 8012c56:	2b11      	cmp	r3, #17
 8012c58:	dc13      	bgt.n	8012c82 <ip4_input+0x2ca>
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d00c      	beq.n	8012c78 <ip4_input+0x2c0>
 8012c5e:	2b06      	cmp	r3, #6
 8012c60:	d005      	beq.n	8012c6e <ip4_input+0x2b6>
 8012c62:	e00e      	b.n	8012c82 <ip4_input+0x2ca>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012c64:	6839      	ldr	r1, [r7, #0]
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7fc f900 	bl	800ee6c <udp_input>
        break;
 8012c6c:	e036      	b.n	8012cdc <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012c6e:	6839      	ldr	r1, [r7, #0]
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7f7 fc37 	bl	800a4e4 <tcp_input>
        break;
 8012c76:	e031      	b.n	8012cdc <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012c78:	6839      	ldr	r1, [r7, #0]
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7ff fbf6 	bl	801246c <icmp_input>
        break;
 8012c80:	e02c      	b.n	8012cdc <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c82:	4b22      	ldr	r3, [pc, #136]	@ (8012d0c <ip4_input+0x354>)
 8012c84:	695b      	ldr	r3, [r3, #20]
 8012c86:	69b9      	ldr	r1, [r7, #24]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 f99d 	bl	8012fc8 <ip4_addr_isbroadcast_u32>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d10f      	bne.n	8012cb4 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012c94:	4b1d      	ldr	r3, [pc, #116]	@ (8012d0c <ip4_input+0x354>)
 8012c96:	695b      	ldr	r3, [r3, #20]
 8012c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012c9c:	2be0      	cmp	r3, #224	@ 0xe0
 8012c9e:	d009      	beq.n	8012cb4 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f7f5 f991 	bl	8007fce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012cac:	2102      	movs	r1, #2
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f7ff fd40 	bl	8012734 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8012cb4:	4b16      	ldr	r3, [pc, #88]	@ (8012d10 <ip4_input+0x358>)
 8012cb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012cba:	3301      	adds	r3, #1
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	4b14      	ldr	r3, [pc, #80]	@ (8012d10 <ip4_input+0x358>)
 8012cc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 8012cc4:	4b12      	ldr	r3, [pc, #72]	@ (8012d10 <ip4_input+0x358>)
 8012cc6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8012cca:	3301      	adds	r3, #1
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	4b10      	ldr	r3, [pc, #64]	@ (8012d10 <ip4_input+0x358>)
 8012cd0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7f5 f98d 	bl	8007ff4 <pbuf_free>
        break;
 8012cda:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8012d0c <ip4_input+0x354>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8012d0c <ip4_input+0x354>)
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012ce8:	4b08      	ldr	r3, [pc, #32]	@ (8012d0c <ip4_input+0x354>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012cee:	4b07      	ldr	r3, [pc, #28]	@ (8012d0c <ip4_input+0x354>)
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012cf4:	4b05      	ldr	r3, [pc, #20]	@ (8012d0c <ip4_input+0x354>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012cfa:	4b04      	ldr	r3, [pc, #16]	@ (8012d0c <ip4_input+0x354>)
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3720      	adds	r7, #32
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	20000aa8 	.word	0x20000aa8
 8012d10:	20003a9c 	.word	0x20003a9c

08012d14 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08a      	sub	sp, #40	@ 0x28
 8012d18:	af04      	add	r7, sp, #16
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d009      	beq.n	8012d40 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d003      	beq.n	8012d3a <ip4_output_if+0x26>
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d102      	bne.n	8012d40 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d3c:	3304      	adds	r3, #4
 8012d3e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d40:	78fa      	ldrb	r2, [r7, #3]
 8012d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d44:	9302      	str	r3, [sp, #8]
 8012d46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012d4a:	9301      	str	r3, [sp, #4]
 8012d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	4613      	mov	r3, r2
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	6979      	ldr	r1, [r7, #20]
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f000 f805 	bl	8012d68 <ip4_output_if_src>
 8012d5e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3718      	adds	r7, #24
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b088      	sub	sp, #32
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	607a      	str	r2, [r7, #4]
 8012d74:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	7b9b      	ldrb	r3, [r3, #14]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d006      	beq.n	8012d90 <ip4_output_if_src+0x28>
 8012d82:	4b8a      	ldr	r3, [pc, #552]	@ (8012fac <ip4_output_if_src+0x244>)
 8012d84:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012d88:	4989      	ldr	r1, [pc, #548]	@ (8012fb0 <ip4_output_if_src+0x248>)
 8012d8a:	488a      	ldr	r0, [pc, #552]	@ (8012fb4 <ip4_output_if_src+0x24c>)
 8012d8c:	f002 fe70 	bl	8015a70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f000 80ce 	beq.w	8012f34 <ip4_output_if_src+0x1cc>
    u16_t ip_hlen = IP_HLEN;
 8012d98:	2314      	movs	r3, #20
 8012d9a:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012d9c:	2114      	movs	r1, #20
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f7f5 f892 	bl	8007ec8 <pbuf_add_header>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00a      	beq.n	8012dc0 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8012daa:	4b83      	ldr	r3, [pc, #524]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012dac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012db0:	3301      	adds	r3, #1
 8012db2:	b29a      	uxth	r2, r3
 8012db4:	4b80      	ldr	r3, [pc, #512]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012db6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012dba:	f06f 0301 	mvn.w	r3, #1
 8012dbe:	e0f1      	b.n	8012fa4 <ip4_output_if_src+0x23c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	895b      	ldrh	r3, [r3, #10]
 8012dca:	2b13      	cmp	r3, #19
 8012dcc:	d806      	bhi.n	8012ddc <ip4_output_if_src+0x74>
 8012dce:	4b77      	ldr	r3, [pc, #476]	@ (8012fac <ip4_output_if_src+0x244>)
 8012dd0:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012dd4:	4979      	ldr	r1, [pc, #484]	@ (8012fbc <ip4_output_if_src+0x254>)
 8012dd6:	4877      	ldr	r0, [pc, #476]	@ (8012fb4 <ip4_output_if_src+0x24c>)
 8012dd8:	f002 fe4a 	bl	8015a70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	78fa      	ldrb	r2, [r7, #3]
 8012de0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012de8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8012dea:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012dee:	78fb      	ldrb	r3, [r7, #3]
 8012df0:	021b      	lsls	r3, r3, #8
 8012df2:	4313      	orrs	r3, r2
 8012df4:	b21b      	sxth	r3, r3
 8012df6:	021b      	lsls	r3, r3, #8
 8012df8:	b21a      	sxth	r2, r3
 8012dfa:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8012dfe:	78fb      	ldrb	r3, [r7, #3]
 8012e00:	021b      	lsls	r3, r3, #8
 8012e02:	430b      	orrs	r3, r1
 8012e04:	121b      	asrs	r3, r3, #8
 8012e06:	b21b      	sxth	r3, r3
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	b21b      	sxth	r3, r3
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	b21b      	sxth	r3, r3
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	461a      	mov	r2, r3
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	4413      	add	r3, r2
 8012e18:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	691b      	ldr	r3, [r3, #16]
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	69fa      	ldr	r2, [r7, #28]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	0c1b      	lsrs	r3, r3, #16
 8012e34:	69fa      	ldr	r2, [r7, #28]
 8012e36:	4413      	add	r3, r2
 8012e38:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012e3a:	8afb      	ldrh	r3, [r7, #22]
 8012e3c:	089b      	lsrs	r3, r3, #2
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e46:	b2da      	uxtb	r2, r3
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012e4c:	69bb      	ldr	r3, [r7, #24]
 8012e4e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012e52:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8012e54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	021b      	lsls	r3, r3, #8
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	b21b      	sxth	r3, r3
 8012e62:	021b      	lsls	r3, r3, #8
 8012e64:	b21a      	sxth	r2, r3
 8012e66:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	021b      	lsls	r3, r3, #8
 8012e70:	430b      	orrs	r3, r1
 8012e72:	121b      	asrs	r3, r3, #8
 8012e74:	b21b      	sxth	r3, r3
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	b21b      	sxth	r3, r3
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	b21b      	sxth	r3, r3
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	461a      	mov	r2, r3
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	4413      	add	r3, r2
 8012e86:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	891b      	ldrh	r3, [r3, #8]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7f3 fcb1 	bl	80067f4 <lwip_htons>
 8012e92:	4603      	mov	r3, r0
 8012e94:	461a      	mov	r2, r3
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	885b      	ldrh	r3, [r3, #2]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	719a      	strb	r2, [r3, #6]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012eb2:	4b43      	ldr	r3, [pc, #268]	@ (8012fc0 <ip4_output_if_src+0x258>)
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7f3 fc9c 	bl	80067f4 <lwip_htons>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	889b      	ldrh	r3, [r3, #4]
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	461a      	mov	r2, r3
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	4413      	add	r3, r2
 8012ed0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8012fc0 <ip4_output_if_src+0x258>)
 8012ed4:	881b      	ldrh	r3, [r3, #0]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	4b39      	ldr	r3, [pc, #228]	@ (8012fc0 <ip4_output_if_src+0x258>)
 8012edc:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d104      	bne.n	8012eee <ip4_output_if_src+0x186>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012ee4:	4b37      	ldr	r3, [pc, #220]	@ (8012fc4 <ip4_output_if_src+0x25c>)
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	60da      	str	r2, [r3, #12]
 8012eec:	e003      	b.n	8012ef6 <ip4_output_if_src+0x18e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	69fa      	ldr	r2, [r7, #28]
 8012efe:	4413      	add	r3, r2
 8012f00:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	0c1b      	lsrs	r3, r3, #16
 8012f08:	69fa      	ldr	r2, [r7, #28]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	0c1a      	lsrs	r2, r3, #16
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	4413      	add	r3, r2
 8012f18:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	0c1b      	lsrs	r3, r3, #16
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	4413      	add	r3, r2
 8012f22:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	43db      	mvns	r3, r3
 8012f28:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	815a      	strh	r2, [r3, #10]
 8012f32:	e017      	b.n	8012f64 <ip4_output_if_src+0x1fc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	895b      	ldrh	r3, [r3, #10]
 8012f38:	2b13      	cmp	r3, #19
 8012f3a:	d80a      	bhi.n	8012f52 <ip4_output_if_src+0x1ea>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8012f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012f42:	3301      	adds	r3, #1
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	4b1c      	ldr	r3, [pc, #112]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012f48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012f4c:	f06f 0301 	mvn.w	r3, #1
 8012f50:	e028      	b.n	8012fa4 <ip4_output_if_src+0x23c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	691b      	ldr	r3, [r3, #16]
 8012f5c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8012f5e:	f107 0310 	add.w	r3, r7, #16
 8012f62:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8012f64:	4b14      	ldr	r3, [pc, #80]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012f66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	4b12      	ldr	r3, [pc, #72]	@ (8012fb8 <ip4_output_if_src+0x250>)
 8012f70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d00c      	beq.n	8012f96 <ip4_output_if_src+0x22e>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	891a      	ldrh	r2, [r3, #8]
 8012f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d906      	bls.n	8012f96 <ip4_output_if_src+0x22e>
    return ip4_frag(p, netif, dest);
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	f000 fd83 	bl	8013a98 <ip4_frag>
 8012f92:	4603      	mov	r3, r0
 8012f94:	e006      	b.n	8012fa4 <ip4_output_if_src+0x23c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f98:	695b      	ldr	r3, [r3, #20]
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	68f9      	ldr	r1, [r7, #12]
 8012f9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fa0:	4798      	blx	r3
 8012fa2:	4603      	mov	r3, r0
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3720      	adds	r7, #32
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	08019264 	.word	0x08019264
 8012fb0:	08019298 	.word	0x08019298
 8012fb4:	080192a4 	.word	0x080192a4
 8012fb8:	20003a9c 	.word	0x20003a9c
 8012fbc:	080192cc 	.word	0x080192cc
 8012fc0:	20003cfa 	.word	0x20003cfa
 8012fc4:	08019884 	.word	0x08019884

08012fc8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b085      	sub	sp, #20
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012fdc:	d002      	beq.n	8012fe4 <ip4_addr_isbroadcast_u32+0x1c>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d101      	bne.n	8012fe8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e02a      	b.n	801303e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012fee:	f003 0302 	and.w	r3, r3, #2
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e021      	b.n	801303e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	429a      	cmp	r2, r3
 8013004:	d101      	bne.n	801300a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013006:	2300      	movs	r3, #0
 8013008:	e019      	b.n	801303e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	3304      	adds	r3, #4
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	405a      	eors	r2, r3
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	3308      	adds	r3, #8
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4013      	ands	r3, r2
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10d      	bne.n	801303c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	3308      	adds	r3, #8
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	43da      	mvns	r2, r3
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	3308      	adds	r3, #8
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013034:	429a      	cmp	r2, r3
 8013036:	d101      	bne.n	801303c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013038:	2301      	movs	r3, #1
 801303a:	e000      	b.n	801303e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801303c:	2300      	movs	r3, #0
  }
}
 801303e:	4618      	mov	r0, r3
 8013040:	3714      	adds	r7, #20
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
	...

0801304c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013052:	2300      	movs	r3, #0
 8013054:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013056:	4b12      	ldr	r3, [pc, #72]	@ (80130a0 <ip_reass_tmr+0x54>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801305c:	e018      	b.n	8013090 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	7fdb      	ldrb	r3, [r3, #31]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00b      	beq.n	801307e <ip_reass_tmr+0x32>
      r->timer--;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	7fdb      	ldrb	r3, [r3, #31]
 801306a:	3b01      	subs	r3, #1
 801306c:	b2da      	uxtb	r2, r3
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	60fb      	str	r3, [r7, #12]
 801307c:	e008      	b.n	8013090 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 f80a 	bl	80130a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d1e3      	bne.n	801305e <ip_reass_tmr+0x12>
    }
  }
}
 8013096:	bf00      	nop
 8013098:	bf00      	nop
 801309a:	3710      	adds	r7, #16
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	20003cfc 	.word	0x20003cfc

080130a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b088      	sub	sp, #32
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80130b2:	683a      	ldr	r2, [r7, #0]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d105      	bne.n	80130c6 <ip_reass_free_complete_datagram+0x22>
 80130ba:	4b45      	ldr	r3, [pc, #276]	@ (80131d0 <ip_reass_free_complete_datagram+0x12c>)
 80130bc:	22ab      	movs	r2, #171	@ 0xab
 80130be:	4945      	ldr	r1, [pc, #276]	@ (80131d4 <ip_reass_free_complete_datagram+0x130>)
 80130c0:	4845      	ldr	r0, [pc, #276]	@ (80131d8 <ip_reass_free_complete_datagram+0x134>)
 80130c2:	f002 fcd5 	bl	8015a70 <iprintf>
  if (prev != NULL) {
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00a      	beq.n	80130e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d005      	beq.n	80130e2 <ip_reass_free_complete_datagram+0x3e>
 80130d6:	4b3e      	ldr	r3, [pc, #248]	@ (80131d0 <ip_reass_free_complete_datagram+0x12c>)
 80130d8:	22ad      	movs	r2, #173	@ 0xad
 80130da:	4940      	ldr	r1, [pc, #256]	@ (80131dc <ip_reass_free_complete_datagram+0x138>)
 80130dc:	483e      	ldr	r0, [pc, #248]	@ (80131d8 <ip_reass_free_complete_datagram+0x134>)
 80130de:	f002 fcc7 	bl	8015a70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	889b      	ldrh	r3, [r3, #4]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d12a      	bne.n	801314a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	6858      	ldr	r0, [r3, #4]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3308      	adds	r3, #8
 801310a:	2214      	movs	r2, #20
 801310c:	4619      	mov	r1, r3
 801310e:	f002 fdb8 	bl	8015c82 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013112:	2101      	movs	r1, #1
 8013114:	69b8      	ldr	r0, [r7, #24]
 8013116:	f7ff fb1d 	bl	8012754 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801311a:	69b8      	ldr	r0, [r7, #24]
 801311c:	f7f4 fff8 	bl	8008110 <pbuf_clen>
 8013120:	4603      	mov	r3, r0
 8013122:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013124:	8bfa      	ldrh	r2, [r7, #30]
 8013126:	8a7b      	ldrh	r3, [r7, #18]
 8013128:	4413      	add	r3, r2
 801312a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801312e:	db05      	blt.n	801313c <ip_reass_free_complete_datagram+0x98>
 8013130:	4b27      	ldr	r3, [pc, #156]	@ (80131d0 <ip_reass_free_complete_datagram+0x12c>)
 8013132:	22bc      	movs	r2, #188	@ 0xbc
 8013134:	492a      	ldr	r1, [pc, #168]	@ (80131e0 <ip_reass_free_complete_datagram+0x13c>)
 8013136:	4828      	ldr	r0, [pc, #160]	@ (80131d8 <ip_reass_free_complete_datagram+0x134>)
 8013138:	f002 fc9a 	bl	8015a70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801313c:	8bfa      	ldrh	r2, [r7, #30]
 801313e:	8a7b      	ldrh	r3, [r7, #18]
 8013140:	4413      	add	r3, r2
 8013142:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013144:	69b8      	ldr	r0, [r7, #24]
 8013146:	f7f4 ff55 	bl	8007ff4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013150:	e01f      	b.n	8013192 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f7f4 ffd4 	bl	8008110 <pbuf_clen>
 8013168:	4603      	mov	r3, r0
 801316a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801316c:	8bfa      	ldrh	r2, [r7, #30]
 801316e:	8a7b      	ldrh	r3, [r7, #18]
 8013170:	4413      	add	r3, r2
 8013172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013176:	db05      	blt.n	8013184 <ip_reass_free_complete_datagram+0xe0>
 8013178:	4b15      	ldr	r3, [pc, #84]	@ (80131d0 <ip_reass_free_complete_datagram+0x12c>)
 801317a:	22cc      	movs	r2, #204	@ 0xcc
 801317c:	4918      	ldr	r1, [pc, #96]	@ (80131e0 <ip_reass_free_complete_datagram+0x13c>)
 801317e:	4816      	ldr	r0, [pc, #88]	@ (80131d8 <ip_reass_free_complete_datagram+0x134>)
 8013180:	f002 fc76 	bl	8015a70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013184:	8bfa      	ldrh	r2, [r7, #30]
 8013186:	8a7b      	ldrh	r3, [r7, #18]
 8013188:	4413      	add	r3, r2
 801318a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801318c:	68f8      	ldr	r0, [r7, #12]
 801318e:	f7f4 ff31 	bl	8007ff4 <pbuf_free>
  while (p != NULL) {
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d1dc      	bne.n	8013152 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 f8ca 	bl	8013334 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80131a0:	4b10      	ldr	r3, [pc, #64]	@ (80131e4 <ip_reass_free_complete_datagram+0x140>)
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	8bfa      	ldrh	r2, [r7, #30]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d905      	bls.n	80131b6 <ip_reass_free_complete_datagram+0x112>
 80131aa:	4b09      	ldr	r3, [pc, #36]	@ (80131d0 <ip_reass_free_complete_datagram+0x12c>)
 80131ac:	22d2      	movs	r2, #210	@ 0xd2
 80131ae:	490e      	ldr	r1, [pc, #56]	@ (80131e8 <ip_reass_free_complete_datagram+0x144>)
 80131b0:	4809      	ldr	r0, [pc, #36]	@ (80131d8 <ip_reass_free_complete_datagram+0x134>)
 80131b2:	f002 fc5d 	bl	8015a70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80131b6:	4b0b      	ldr	r3, [pc, #44]	@ (80131e4 <ip_reass_free_complete_datagram+0x140>)
 80131b8:	881a      	ldrh	r2, [r3, #0]
 80131ba:	8bfb      	ldrh	r3, [r7, #30]
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	b29a      	uxth	r2, r3
 80131c0:	4b08      	ldr	r3, [pc, #32]	@ (80131e4 <ip_reass_free_complete_datagram+0x140>)
 80131c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80131c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3720      	adds	r7, #32
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	080192fc 	.word	0x080192fc
 80131d4:	08019338 	.word	0x08019338
 80131d8:	08019344 	.word	0x08019344
 80131dc:	0801936c 	.word	0x0801936c
 80131e0:	08019380 	.word	0x08019380
 80131e4:	20003d00 	.word	0x20003d00
 80131e8:	080193a0 	.word	0x080193a0

080131ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b08a      	sub	sp, #40	@ 0x28
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80131f6:	2300      	movs	r3, #0
 80131f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80131fe:	2300      	movs	r3, #0
 8013200:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013202:	2300      	movs	r3, #0
 8013204:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801320a:	4b28      	ldr	r3, [pc, #160]	@ (80132ac <ip_reass_remove_oldest_datagram+0xc0>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013210:	e030      	b.n	8013274 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013214:	695a      	ldr	r2, [r3, #20]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	429a      	cmp	r2, r3
 801321c:	d10c      	bne.n	8013238 <ip_reass_remove_oldest_datagram+0x4c>
 801321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013220:	699a      	ldr	r2, [r3, #24]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	429a      	cmp	r2, r3
 8013228:	d106      	bne.n	8013238 <ip_reass_remove_oldest_datagram+0x4c>
 801322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801322c:	899a      	ldrh	r2, [r3, #12]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	889b      	ldrh	r3, [r3, #4]
 8013232:	b29b      	uxth	r3, r3
 8013234:	429a      	cmp	r2, r3
 8013236:	d014      	beq.n	8013262 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	3301      	adds	r3, #1
 801323c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801323e:	6a3b      	ldr	r3, [r7, #32]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d104      	bne.n	801324e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013246:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	61bb      	str	r3, [r7, #24]
 801324c:	e009      	b.n	8013262 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013250:	7fda      	ldrb	r2, [r3, #31]
 8013252:	6a3b      	ldr	r3, [r7, #32]
 8013254:	7fdb      	ldrb	r3, [r3, #31]
 8013256:	429a      	cmp	r2, r3
 8013258:	d803      	bhi.n	8013262 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801325e:	69fb      	ldr	r3, [r7, #28]
 8013260:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d001      	beq.n	801326e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801326c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1cb      	bne.n	8013212 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801327a:	6a3b      	ldr	r3, [r7, #32]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d008      	beq.n	8013292 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013280:	69b9      	ldr	r1, [r7, #24]
 8013282:	6a38      	ldr	r0, [r7, #32]
 8013284:	f7ff ff0e 	bl	80130a4 <ip_reass_free_complete_datagram>
 8013288:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801328a:	697a      	ldr	r2, [r7, #20]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	4413      	add	r3, r2
 8013290:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013292:	697a      	ldr	r2, [r7, #20]
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	429a      	cmp	r2, r3
 8013298:	da02      	bge.n	80132a0 <ip_reass_remove_oldest_datagram+0xb4>
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	2b01      	cmp	r3, #1
 801329e:	dcac      	bgt.n	80131fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80132a0:	697b      	ldr	r3, [r7, #20]
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3728      	adds	r7, #40	@ 0x28
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
 80132aa:	bf00      	nop
 80132ac:	20003cfc 	.word	0x20003cfc

080132b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132ba:	2004      	movs	r0, #4
 80132bc:	f7f4 f88c 	bl	80073d8 <memp_malloc>
 80132c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d116      	bne.n	80132f6 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80132c8:	6839      	ldr	r1, [r7, #0]
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f7ff ff8e 	bl	80131ec <ip_reass_remove_oldest_datagram>
 80132d0:	4602      	mov	r2, r0
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	4293      	cmp	r3, r2
 80132d6:	dc03      	bgt.n	80132e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80132d8:	2004      	movs	r0, #4
 80132da:	f7f4 f87d 	bl	80073d8 <memp_malloc>
 80132de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d107      	bne.n	80132f6 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 80132e6:	4b11      	ldr	r3, [pc, #68]	@ (801332c <ip_reass_enqueue_new_datagram+0x7c>)
 80132e8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80132ea:	3301      	adds	r3, #1
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	4b0f      	ldr	r3, [pc, #60]	@ (801332c <ip_reass_enqueue_new_datagram+0x7c>)
 80132f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80132f2:	2300      	movs	r3, #0
 80132f4:	e016      	b.n	8013324 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80132f6:	2220      	movs	r2, #32
 80132f8:	2100      	movs	r1, #0
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f002 fc1d 	bl	8015b3a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	220f      	movs	r2, #15
 8013304:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013306:	4b0a      	ldr	r3, [pc, #40]	@ (8013330 <ip_reass_enqueue_new_datagram+0x80>)
 8013308:	681a      	ldr	r2, [r3, #0]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801330e:	4a08      	ldr	r2, [pc, #32]	@ (8013330 <ip_reass_enqueue_new_datagram+0x80>)
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	3308      	adds	r3, #8
 8013318:	2214      	movs	r2, #20
 801331a:	6879      	ldr	r1, [r7, #4]
 801331c:	4618      	mov	r0, r3
 801331e:	f002 fcb0 	bl	8015c82 <memcpy>
  return ipr;
 8013322:	68fb      	ldr	r3, [r7, #12]
}
 8013324:	4618      	mov	r0, r3
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	20003a9c 	.word	0x20003a9c
 8013330:	20003cfc 	.word	0x20003cfc

08013334 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801333e:	4b10      	ldr	r3, [pc, #64]	@ (8013380 <ip_reass_dequeue_datagram+0x4c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	429a      	cmp	r2, r3
 8013346:	d104      	bne.n	8013352 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	4a0c      	ldr	r2, [pc, #48]	@ (8013380 <ip_reass_dequeue_datagram+0x4c>)
 801334e:	6013      	str	r3, [r2, #0]
 8013350:	e00d      	b.n	801336e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d106      	bne.n	8013366 <ip_reass_dequeue_datagram+0x32>
 8013358:	4b0a      	ldr	r3, [pc, #40]	@ (8013384 <ip_reass_dequeue_datagram+0x50>)
 801335a:	f240 1245 	movw	r2, #325	@ 0x145
 801335e:	490a      	ldr	r1, [pc, #40]	@ (8013388 <ip_reass_dequeue_datagram+0x54>)
 8013360:	480a      	ldr	r0, [pc, #40]	@ (801338c <ip_reass_dequeue_datagram+0x58>)
 8013362:	f002 fb85 	bl	8015a70 <iprintf>
    prev->next = ipr->next;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	2004      	movs	r0, #4
 8013372:	f7f4 f889 	bl	8007488 <memp_free>
}
 8013376:	bf00      	nop
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	20003cfc 	.word	0x20003cfc
 8013384:	080192fc 	.word	0x080192fc
 8013388:	080193c4 	.word	0x080193c4
 801338c:	08019344 	.word	0x08019344

08013390 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b08c      	sub	sp, #48	@ 0x30
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801339c:	2300      	movs	r3, #0
 801339e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80133a0:	2301      	movs	r3, #1
 80133a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	885b      	ldrh	r3, [r3, #2]
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f3 fa1f 	bl	80067f4 <lwip_htons>
 80133b6:	4603      	mov	r3, r0
 80133b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80133ba:	69fb      	ldr	r3, [r7, #28]
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f003 030f 	and.w	r3, r3, #15
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80133c8:	7e7b      	ldrb	r3, [r7, #25]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	8b7a      	ldrh	r2, [r7, #26]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d202      	bcs.n	80133d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133d6:	e135      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80133d8:	7e7b      	ldrb	r3, [r7, #25]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	8b7a      	ldrh	r2, [r7, #26]
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	88db      	ldrh	r3, [r3, #6]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7f3 fa03 	bl	80067f4 <lwip_htons>
 80133ee:	4603      	mov	r3, r0
 80133f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013402:	2200      	movs	r2, #0
 8013404:	701a      	strb	r2, [r3, #0]
 8013406:	2200      	movs	r2, #0
 8013408:	705a      	strb	r2, [r3, #1]
 801340a:	2200      	movs	r2, #0
 801340c:	709a      	strb	r2, [r3, #2]
 801340e:	2200      	movs	r2, #0
 8013410:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013414:	8afa      	ldrh	r2, [r7, #22]
 8013416:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013418:	8afa      	ldrh	r2, [r7, #22]
 801341a:	8b7b      	ldrh	r3, [r7, #26]
 801341c:	4413      	add	r3, r2
 801341e:	b29a      	uxth	r2, r3
 8013420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013422:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013426:	88db      	ldrh	r3, [r3, #6]
 8013428:	b29b      	uxth	r3, r3
 801342a:	8afa      	ldrh	r2, [r7, #22]
 801342c:	429a      	cmp	r2, r3
 801342e:	d902      	bls.n	8013436 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013434:	e106      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	685b      	ldr	r3, [r3, #4]
 801343a:	627b      	str	r3, [r7, #36]	@ 0x24
 801343c:	e068      	b.n	8013510 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013446:	889b      	ldrh	r3, [r3, #4]
 8013448:	b29a      	uxth	r2, r3
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	889b      	ldrh	r3, [r3, #4]
 801344e:	b29b      	uxth	r3, r3
 8013450:	429a      	cmp	r2, r3
 8013452:	d235      	bcs.n	80134c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013458:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801345c:	2b00      	cmp	r3, #0
 801345e:	d020      	beq.n	80134a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013462:	889b      	ldrh	r3, [r3, #4]
 8013464:	b29a      	uxth	r2, r3
 8013466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013468:	88db      	ldrh	r3, [r3, #6]
 801346a:	b29b      	uxth	r3, r3
 801346c:	429a      	cmp	r2, r3
 801346e:	d307      	bcc.n	8013480 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013472:	88db      	ldrh	r3, [r3, #6]
 8013474:	b29a      	uxth	r2, r3
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	889b      	ldrh	r3, [r3, #4]
 801347a:	b29b      	uxth	r3, r3
 801347c:	429a      	cmp	r2, r3
 801347e:	d902      	bls.n	8013486 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013484:	e0de      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013488:	68ba      	ldr	r2, [r7, #8]
 801348a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348e:	88db      	ldrh	r3, [r3, #6]
 8013490:	b29a      	uxth	r2, r3
 8013492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013494:	889b      	ldrh	r3, [r3, #4]
 8013496:	b29b      	uxth	r3, r3
 8013498:	429a      	cmp	r2, r3
 801349a:	d03d      	beq.n	8013518 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80134a0:	e03a      	b.n	8013518 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	88db      	ldrh	r3, [r3, #6]
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	889b      	ldrh	r3, [r3, #4]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d902      	bls.n	80134b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134b6:	e0c5      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	68ba      	ldr	r2, [r7, #8]
 80134bc:	605a      	str	r2, [r3, #4]
      break;
 80134be:	e02b      	b.n	8013518 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80134c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c2:	889b      	ldrh	r3, [r3, #4]
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	889b      	ldrh	r3, [r3, #4]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d102      	bne.n	80134d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134d4:	e0b6      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80134d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d8:	889b      	ldrh	r3, [r3, #4]
 80134da:	b29a      	uxth	r2, r3
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	88db      	ldrh	r3, [r3, #6]
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d202      	bcs.n	80134ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80134ea:	e0ab      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80134ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d009      	beq.n	8013506 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80134f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f4:	88db      	ldrh	r3, [r3, #6]
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	889b      	ldrh	r3, [r3, #4]
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	429a      	cmp	r2, r3
 8013500:	d001      	beq.n	8013506 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013512:	2b00      	cmp	r3, #0
 8013514:	d193      	bne.n	801343e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013516:	e000      	b.n	801351a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013518:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	2b00      	cmp	r3, #0
 801351e:	d12d      	bne.n	801357c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013522:	2b00      	cmp	r3, #0
 8013524:	d01c      	beq.n	8013560 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013528:	88db      	ldrh	r3, [r3, #6]
 801352a:	b29a      	uxth	r2, r3
 801352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352e:	889b      	ldrh	r3, [r3, #4]
 8013530:	b29b      	uxth	r3, r3
 8013532:	429a      	cmp	r2, r3
 8013534:	d906      	bls.n	8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013536:	4b45      	ldr	r3, [pc, #276]	@ (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013538:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801353c:	4944      	ldr	r1, [pc, #272]	@ (8013650 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801353e:	4845      	ldr	r0, [pc, #276]	@ (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013540:	f002 fa96 	bl	8015a70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013546:	68ba      	ldr	r2, [r7, #8]
 8013548:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801354c:	88db      	ldrh	r3, [r3, #6]
 801354e:	b29a      	uxth	r2, r3
 8013550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013552:	889b      	ldrh	r3, [r3, #4]
 8013554:	b29b      	uxth	r3, r3
 8013556:	429a      	cmp	r2, r3
 8013558:	d010      	beq.n	801357c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801355a:	2300      	movs	r3, #0
 801355c:	623b      	str	r3, [r7, #32]
 801355e:	e00d      	b.n	801357c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d006      	beq.n	8013576 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013568:	4b38      	ldr	r3, [pc, #224]	@ (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801356a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801356e:	493a      	ldr	r1, [pc, #232]	@ (8013658 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013570:	4838      	ldr	r0, [pc, #224]	@ (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013572:	f002 fa7d 	bl	8015a70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	68ba      	ldr	r2, [r7, #8]
 801357a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d105      	bne.n	801358e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	7f9b      	ldrb	r3, [r3, #30]
 8013586:	f003 0301 	and.w	r3, r3, #1
 801358a:	2b00      	cmp	r3, #0
 801358c:	d059      	beq.n	8013642 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801358e:	6a3b      	ldr	r3, [r7, #32]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d04f      	beq.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d006      	beq.n	80135aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	889b      	ldrh	r3, [r3, #4]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d002      	beq.n	80135b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80135aa:	2300      	movs	r3, #0
 80135ac:	623b      	str	r3, [r7, #32]
 80135ae:	e041      	b.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80135b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80135b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80135ba:	e012      	b.n	80135e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80135bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80135c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c4:	88db      	ldrh	r3, [r3, #6]
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ca:	889b      	ldrh	r3, [r3, #4]
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d002      	beq.n	80135d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80135d2:	2300      	movs	r3, #0
 80135d4:	623b      	str	r3, [r7, #32]
            break;
 80135d6:	e007      	b.n	80135e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80135d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135da:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80135dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80135e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1e9      	bne.n	80135bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80135e8:	6a3b      	ldr	r3, [r7, #32]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d022      	beq.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80135f6:	4b15      	ldr	r3, [pc, #84]	@ (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135f8:	f240 12df 	movw	r2, #479	@ 0x1df
 80135fc:	4917      	ldr	r1, [pc, #92]	@ (801365c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80135fe:	4815      	ldr	r0, [pc, #84]	@ (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013600:	f002 fa36 	bl	8015a70 <iprintf>
          LWIP_ASSERT("sanity check",
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801360c:	429a      	cmp	r2, r3
 801360e:	d106      	bne.n	801361e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013610:	4b0e      	ldr	r3, [pc, #56]	@ (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013612:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013616:	4911      	ldr	r1, [pc, #68]	@ (801365c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013618:	480e      	ldr	r0, [pc, #56]	@ (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801361a:	f002 fa29 	bl	8015a70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d006      	beq.n	8013634 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013626:	4b09      	ldr	r3, [pc, #36]	@ (801364c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013628:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801362c:	490c      	ldr	r1, [pc, #48]	@ (8013660 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801362e:	4809      	ldr	r0, [pc, #36]	@ (8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013630:	f002 fa1e 	bl	8015a70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	2b00      	cmp	r3, #0
 8013638:	bf14      	ite	ne
 801363a:	2301      	movne	r3, #1
 801363c:	2300      	moveq	r3, #0
 801363e:	b2db      	uxtb	r3, r3
 8013640:	e000      	b.n	8013644 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3730      	adds	r7, #48	@ 0x30
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	080192fc 	.word	0x080192fc
 8013650:	080193e0 	.word	0x080193e0
 8013654:	08019344 	.word	0x08019344
 8013658:	08019400 	.word	0x08019400
 801365c:	08019438 	.word	0x08019438
 8013660:	08019448 	.word	0x08019448

08013664 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b08e      	sub	sp, #56	@ 0x38
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801366c:	4b94      	ldr	r3, [pc, #592]	@ (80138c0 <ip4_reass+0x25c>)
 801366e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013670:	3301      	adds	r3, #1
 8013672:	b29a      	uxth	r2, r3
 8013674:	4b92      	ldr	r3, [pc, #584]	@ (80138c0 <ip4_reass+0x25c>)
 8013676:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	f003 030f 	and.w	r3, r3, #15
 8013686:	b2db      	uxtb	r3, r3
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	b2db      	uxtb	r3, r3
 801368c:	2b14      	cmp	r3, #20
 801368e:	d008      	beq.n	80136a2 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8013690:	4b8b      	ldr	r3, [pc, #556]	@ (80138c0 <ip4_reass+0x25c>)
 8013692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8013696:	3301      	adds	r3, #1
 8013698:	b29a      	uxth	r2, r3
 801369a:	4b89      	ldr	r3, [pc, #548]	@ (80138c0 <ip4_reass+0x25c>)
 801369c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 80136a0:	e183      	b.n	80139aa <ip4_reass+0x346>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80136a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136a4:	88db      	ldrh	r3, [r3, #6]
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f3 f8a3 	bl	80067f4 <lwip_htons>
 80136ae:	4603      	mov	r3, r0
 80136b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	00db      	lsls	r3, r3, #3
 80136b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80136ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136bc:	885b      	ldrh	r3, [r3, #2]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7f3 f897 	bl	80067f4 <lwip_htons>
 80136c6:	4603      	mov	r3, r0
 80136c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80136ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	f003 030f 	and.w	r3, r3, #15
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80136da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80136de:	b29b      	uxth	r3, r3
 80136e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80136e2:	429a      	cmp	r2, r3
 80136e4:	f0c0 815e 	bcc.w	80139a4 <ip4_reass+0x340>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80136e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80136f0:	1ad3      	subs	r3, r2, r3
 80136f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7f4 fd0b 	bl	8008110 <pbuf_clen>
 80136fa:	4603      	mov	r3, r0
 80136fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80136fe:	4b71      	ldr	r3, [pc, #452]	@ (80138c4 <ip4_reass+0x260>)
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	461a      	mov	r2, r3
 8013704:	8c3b      	ldrh	r3, [r7, #32]
 8013706:	4413      	add	r3, r2
 8013708:	2b0a      	cmp	r3, #10
 801370a:	dd15      	ble.n	8013738 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801370c:	8c3b      	ldrh	r3, [r7, #32]
 801370e:	4619      	mov	r1, r3
 8013710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013712:	f7ff fd6b 	bl	80131ec <ip_reass_remove_oldest_datagram>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d006      	beq.n	801372a <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801371c:	4b69      	ldr	r3, [pc, #420]	@ (80138c4 <ip4_reass+0x260>)
 801371e:	881b      	ldrh	r3, [r3, #0]
 8013720:	461a      	mov	r2, r3
 8013722:	8c3b      	ldrh	r3, [r7, #32]
 8013724:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013726:	2b0a      	cmp	r3, #10
 8013728:	dd06      	ble.n	8013738 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801372a:	4b65      	ldr	r3, [pc, #404]	@ (80138c0 <ip4_reass+0x25c>)
 801372c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801372e:	3301      	adds	r3, #1
 8013730:	b29a      	uxth	r2, r3
 8013732:	4b63      	ldr	r3, [pc, #396]	@ (80138c0 <ip4_reass+0x25c>)
 8013734:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8013736:	e138      	b.n	80139aa <ip4_reass+0x346>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013738:	4b63      	ldr	r3, [pc, #396]	@ (80138c8 <ip4_reass+0x264>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	633b      	str	r3, [r7, #48]	@ 0x30
 801373e:	e01e      	b.n	801377e <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013742:	695a      	ldr	r2, [r3, #20]
 8013744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	429a      	cmp	r2, r3
 801374a:	d115      	bne.n	8013778 <ip4_reass+0x114>
 801374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374e:	699a      	ldr	r2, [r3, #24]
 8013750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013752:	691b      	ldr	r3, [r3, #16]
 8013754:	429a      	cmp	r2, r3
 8013756:	d10f      	bne.n	8013778 <ip4_reass+0x114>
 8013758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801375a:	899a      	ldrh	r2, [r3, #12]
 801375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801375e:	889b      	ldrh	r3, [r3, #4]
 8013760:	b29b      	uxth	r3, r3
 8013762:	429a      	cmp	r2, r3
 8013764:	d108      	bne.n	8013778 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8013766:	4b56      	ldr	r3, [pc, #344]	@ (80138c0 <ip4_reass+0x25c>)
 8013768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801376c:	3301      	adds	r3, #1
 801376e:	b29a      	uxth	r2, r3
 8013770:	4b53      	ldr	r3, [pc, #332]	@ (80138c0 <ip4_reass+0x25c>)
 8013772:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8013776:	e005      	b.n	8013784 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	633b      	str	r3, [r7, #48]	@ 0x30
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	2b00      	cmp	r3, #0
 8013782:	d1dd      	bne.n	8013740 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8013784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013786:	2b00      	cmp	r3, #0
 8013788:	d109      	bne.n	801379e <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801378a:	8c3b      	ldrh	r3, [r7, #32]
 801378c:	4619      	mov	r1, r3
 801378e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013790:	f7ff fd8e 	bl	80132b0 <ip_reass_enqueue_new_datagram>
 8013794:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013798:	2b00      	cmp	r3, #0
 801379a:	d11c      	bne.n	80137d6 <ip4_reass+0x172>
      goto nullreturn;
 801379c:	e105      	b.n	80139aa <ip4_reass+0x346>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a0:	88db      	ldrh	r3, [r3, #6]
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7f3 f825 	bl	80067f4 <lwip_htons>
 80137aa:	4603      	mov	r3, r0
 80137ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d110      	bne.n	80137d6 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80137b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137b6:	89db      	ldrh	r3, [r3, #14]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f3 f81b 	bl	80067f4 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d006      	beq.n	80137d6 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80137c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ca:	3308      	adds	r3, #8
 80137cc:	2214      	movs	r2, #20
 80137ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80137d0:	4618      	mov	r0, r3
 80137d2:	f002 fa56 	bl	8015c82 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80137d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d8:	88db      	ldrh	r3, [r3, #6]
 80137da:	b29b      	uxth	r3, r3
 80137dc:	f003 0320 	and.w	r3, r3, #32
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	bf0c      	ite	eq
 80137e4:	2301      	moveq	r3, #1
 80137e6:	2300      	movne	r3, #0
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d00e      	beq.n	8013810 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 80137f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80137f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80137f6:	4413      	add	r3, r2
 80137f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80137fa:	8b7a      	ldrh	r2, [r7, #26]
 80137fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80137fe:	429a      	cmp	r2, r3
 8013800:	f0c0 80ae 	bcc.w	8013960 <ip4_reass+0x2fc>
 8013804:	8b7b      	ldrh	r3, [r7, #26]
 8013806:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801380a:	4293      	cmp	r3, r2
 801380c:	f200 80a8 	bhi.w	8013960 <ip4_reass+0x2fc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013810:	69fa      	ldr	r2, [r7, #28]
 8013812:	6879      	ldr	r1, [r7, #4]
 8013814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013816:	f7ff fdbb 	bl	8013390 <ip_reass_chain_frag_into_datagram_and_validate>
 801381a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013822:	f000 809f 	beq.w	8013964 <ip4_reass+0x300>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013826:	4b27      	ldr	r3, [pc, #156]	@ (80138c4 <ip4_reass+0x260>)
 8013828:	881a      	ldrh	r2, [r3, #0]
 801382a:	8c3b      	ldrh	r3, [r7, #32]
 801382c:	4413      	add	r3, r2
 801382e:	b29a      	uxth	r2, r3
 8013830:	4b24      	ldr	r3, [pc, #144]	@ (80138c4 <ip4_reass+0x260>)
 8013832:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00d      	beq.n	8013856 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801383a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801383c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801383e:	4413      	add	r3, r2
 8013840:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013844:	8a7a      	ldrh	r2, [r7, #18]
 8013846:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801384a:	7f9b      	ldrb	r3, [r3, #30]
 801384c:	f043 0301 	orr.w	r3, r3, #1
 8013850:	b2da      	uxtb	r2, r3
 8013852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013854:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d17f      	bne.n	801395c <ip4_reass+0x2f8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801385e:	8b9b      	ldrh	r3, [r3, #28]
 8013860:	3314      	adds	r3, #20
 8013862:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013878:	3308      	adds	r3, #8
 801387a:	2214      	movs	r2, #20
 801387c:	4619      	mov	r1, r3
 801387e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013880:	f002 f9ff 	bl	8015c82 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013884:	8a3b      	ldrh	r3, [r7, #16]
 8013886:	4618      	mov	r0, r3
 8013888:	f7f2 ffb4 	bl	80067f4 <lwip_htons>
 801388c:	4603      	mov	r3, r0
 801388e:	461a      	mov	r2, r3
 8013890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013892:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013896:	2200      	movs	r2, #0
 8013898:	719a      	strb	r2, [r3, #6]
 801389a:	2200      	movs	r2, #0
 801389c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a0:	2200      	movs	r2, #0
 80138a2:	729a      	strb	r2, [r3, #10]
 80138a4:	2200      	movs	r2, #0
 80138a6:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80138a8:	2114      	movs	r1, #20
 80138aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138ac:	f7f3 fc0d 	bl	80070ca <inet_chksum>
 80138b0:	4603      	mov	r3, r0
 80138b2:	461a      	mov	r2, r3
 80138b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b6:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80138b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80138be:	e013      	b.n	80138e8 <ip4_reass+0x284>
 80138c0:	20003a9c 	.word	0x20003a9c
 80138c4:	20003d00 	.word	0x20003d00
 80138c8:	20003cfc 	.word	0x20003cfc
      iprh = (struct ip_reass_helper *)r->payload;
 80138cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80138d2:	2114      	movs	r1, #20
 80138d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80138d6:	f7f4 fb07 	bl	8007ee8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80138da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f7f4 fc57 	bl	8008190 <pbuf_cat>
      r = iprh->next_pbuf;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80138e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d1ee      	bne.n	80138cc <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80138ee:	4b36      	ldr	r3, [pc, #216]	@ (80139c8 <ip4_reass+0x364>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d102      	bne.n	80138fe <ip4_reass+0x29a>
      ipr_prev = NULL;
 80138f8:	2300      	movs	r3, #0
 80138fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80138fc:	e010      	b.n	8013920 <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80138fe:	4b32      	ldr	r3, [pc, #200]	@ (80139c8 <ip4_reass+0x364>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013904:	e007      	b.n	8013916 <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 8013906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801390c:	429a      	cmp	r2, r3
 801390e:	d006      	beq.n	801391e <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d1f4      	bne.n	8013906 <ip4_reass+0x2a2>
 801391c:	e000      	b.n	8013920 <ip4_reass+0x2bc>
          break;
 801391e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013922:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013924:	f7ff fd06 	bl	8013334 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7f4 fbf1 	bl	8008110 <pbuf_clen>
 801392e:	4603      	mov	r3, r0
 8013930:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013932:	4b26      	ldr	r3, [pc, #152]	@ (80139cc <ip4_reass+0x368>)
 8013934:	881b      	ldrh	r3, [r3, #0]
 8013936:	8c3a      	ldrh	r2, [r7, #32]
 8013938:	429a      	cmp	r2, r3
 801393a:	d906      	bls.n	801394a <ip4_reass+0x2e6>
 801393c:	4b24      	ldr	r3, [pc, #144]	@ (80139d0 <ip4_reass+0x36c>)
 801393e:	f240 229b 	movw	r2, #667	@ 0x29b
 8013942:	4924      	ldr	r1, [pc, #144]	@ (80139d4 <ip4_reass+0x370>)
 8013944:	4824      	ldr	r0, [pc, #144]	@ (80139d8 <ip4_reass+0x374>)
 8013946:	f002 f893 	bl	8015a70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801394a:	4b20      	ldr	r3, [pc, #128]	@ (80139cc <ip4_reass+0x368>)
 801394c:	881a      	ldrh	r2, [r3, #0]
 801394e:	8c3b      	ldrh	r3, [r7, #32]
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	b29a      	uxth	r2, r3
 8013954:	4b1d      	ldr	r3, [pc, #116]	@ (80139cc <ip4_reass+0x368>)
 8013956:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	e030      	b.n	80139be <ip4_reass+0x35a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801395c:	2300      	movs	r3, #0
 801395e:	e02e      	b.n	80139be <ip4_reass+0x35a>
      goto nullreturn_ipr;
 8013960:	bf00      	nop
 8013962:	e000      	b.n	8013966 <ip4_reass+0x302>
    goto nullreturn_ipr;
 8013964:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013968:	2b00      	cmp	r3, #0
 801396a:	d106      	bne.n	801397a <ip4_reass+0x316>
 801396c:	4b18      	ldr	r3, [pc, #96]	@ (80139d0 <ip4_reass+0x36c>)
 801396e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013972:	491a      	ldr	r1, [pc, #104]	@ (80139dc <ip4_reass+0x378>)
 8013974:	4818      	ldr	r0, [pc, #96]	@ (80139d8 <ip4_reass+0x374>)
 8013976:	f002 f87b 	bl	8015a70 <iprintf>
  if (ipr->p == NULL) {
 801397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d112      	bne.n	80139a8 <ip4_reass+0x344>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013982:	4b11      	ldr	r3, [pc, #68]	@ (80139c8 <ip4_reass+0x364>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013988:	429a      	cmp	r2, r3
 801398a:	d006      	beq.n	801399a <ip4_reass+0x336>
 801398c:	4b10      	ldr	r3, [pc, #64]	@ (80139d0 <ip4_reass+0x36c>)
 801398e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013992:	4913      	ldr	r1, [pc, #76]	@ (80139e0 <ip4_reass+0x37c>)
 8013994:	4810      	ldr	r0, [pc, #64]	@ (80139d8 <ip4_reass+0x374>)
 8013996:	f002 f86b 	bl	8015a70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801399a:	2100      	movs	r1, #0
 801399c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801399e:	f7ff fcc9 	bl	8013334 <ip_reass_dequeue_datagram>
 80139a2:	e002      	b.n	80139aa <ip4_reass+0x346>
    goto nullreturn;
 80139a4:	bf00      	nop
 80139a6:	e000      	b.n	80139aa <ip4_reass+0x346>
  }

nullreturn:
 80139a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 80139aa:	4b0e      	ldr	r3, [pc, #56]	@ (80139e4 <ip4_reass+0x380>)
 80139ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80139ae:	3301      	adds	r3, #1
 80139b0:	b29a      	uxth	r2, r3
 80139b2:	4b0c      	ldr	r3, [pc, #48]	@ (80139e4 <ip4_reass+0x380>)
 80139b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7f4 fb1c 	bl	8007ff4 <pbuf_free>
  return NULL;
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3738      	adds	r7, #56	@ 0x38
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	20003cfc 	.word	0x20003cfc
 80139cc:	20003d00 	.word	0x20003d00
 80139d0:	080192fc 	.word	0x080192fc
 80139d4:	0801946c 	.word	0x0801946c
 80139d8:	08019344 	.word	0x08019344
 80139dc:	08019488 	.word	0x08019488
 80139e0:	08019494 	.word	0x08019494
 80139e4:	20003a9c 	.word	0x20003a9c

080139e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80139ec:	2005      	movs	r0, #5
 80139ee:	f7f3 fcf3 	bl	80073d8 <memp_malloc>
 80139f2:	4603      	mov	r3, r0
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d106      	bne.n	8013a14 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013a06:	4b07      	ldr	r3, [pc, #28]	@ (8013a24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013a08:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013a0c:	4906      	ldr	r1, [pc, #24]	@ (8013a28 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013a0e:	4807      	ldr	r0, [pc, #28]	@ (8013a2c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013a10:	f002 f82e 	bl	8015a70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013a14:	6879      	ldr	r1, [r7, #4]
 8013a16:	2005      	movs	r0, #5
 8013a18:	f7f3 fd36 	bl	8007488 <memp_free>
}
 8013a1c:	bf00      	nop
 8013a1e:	3708      	adds	r7, #8
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	080192fc 	.word	0x080192fc
 8013a28:	080194b4 	.word	0x080194b4
 8013a2c:	08019344 	.word	0x08019344

08013a30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d106      	bne.n	8013a50 <ipfrag_free_pbuf_custom+0x20>
 8013a42:	4b11      	ldr	r3, [pc, #68]	@ (8013a88 <ipfrag_free_pbuf_custom+0x58>)
 8013a44:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013a48:	4910      	ldr	r1, [pc, #64]	@ (8013a8c <ipfrag_free_pbuf_custom+0x5c>)
 8013a4a:	4811      	ldr	r0, [pc, #68]	@ (8013a90 <ipfrag_free_pbuf_custom+0x60>)
 8013a4c:	f002 f810 	bl	8015a70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013a50:	68fa      	ldr	r2, [r7, #12]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d006      	beq.n	8013a66 <ipfrag_free_pbuf_custom+0x36>
 8013a58:	4b0b      	ldr	r3, [pc, #44]	@ (8013a88 <ipfrag_free_pbuf_custom+0x58>)
 8013a5a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013a5e:	490d      	ldr	r1, [pc, #52]	@ (8013a94 <ipfrag_free_pbuf_custom+0x64>)
 8013a60:	480b      	ldr	r0, [pc, #44]	@ (8013a90 <ipfrag_free_pbuf_custom+0x60>)
 8013a62:	f002 f805 	bl	8015a70 <iprintf>
  if (pcr->original != NULL) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	695b      	ldr	r3, [r3, #20]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d004      	beq.n	8013a78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	695b      	ldr	r3, [r3, #20]
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f4 fabe 	bl	8007ff4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013a78:	68f8      	ldr	r0, [r7, #12]
 8013a7a:	f7ff ffbd 	bl	80139f8 <ip_frag_free_pbuf_custom_ref>
}
 8013a7e:	bf00      	nop
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	080192fc 	.word	0x080192fc
 8013a8c:	080194c0 	.word	0x080194c0
 8013a90:	08019344 	.word	0x08019344
 8013a94:	080194cc 	.word	0x080194cc

08013a98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b094      	sub	sp, #80	@ 0x50
 8013a9c:	af02      	add	r7, sp, #8
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013aae:	3b14      	subs	r3, #20
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	da00      	bge.n	8013ab6 <ip4_frag+0x1e>
 8013ab4:	3307      	adds	r3, #7
 8013ab6:	10db      	asrs	r3, r3, #3
 8013ab8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013aba:	2314      	movs	r3, #20
 8013abc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	f003 030f 	and.w	r3, r3, #15
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	2b14      	cmp	r3, #20
 8013ad8:	d002      	beq.n	8013ae0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013ada:	f06f 0305 	mvn.w	r3, #5
 8013ade:	e11e      	b.n	8013d1e <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	895b      	ldrh	r3, [r3, #10]
 8013ae4:	2b13      	cmp	r3, #19
 8013ae6:	d809      	bhi.n	8013afc <ip4_frag+0x64>
 8013ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8013d28 <ip4_frag+0x290>)
 8013aea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013aee:	498f      	ldr	r1, [pc, #572]	@ (8013d2c <ip4_frag+0x294>)
 8013af0:	488f      	ldr	r0, [pc, #572]	@ (8013d30 <ip4_frag+0x298>)
 8013af2:	f001 ffbd 	bl	8015a70 <iprintf>
 8013af6:	f06f 0305 	mvn.w	r3, #5
 8013afa:	e110      	b.n	8013d1e <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013afe:	88db      	ldrh	r3, [r3, #6]
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7f2 fe76 	bl	80067f4 <lwip_htons>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013b0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013b16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	891b      	ldrh	r3, [r3, #8]
 8013b22:	3b14      	subs	r3, #20
 8013b24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013b28:	e0ef      	b.n	8013d0a <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013b2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013b2c:	00db      	lsls	r3, r3, #3
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013b34:	4293      	cmp	r3, r2
 8013b36:	bf28      	it	cs
 8013b38:	4613      	movcs	r3, r2
 8013b3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013b3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b40:	2114      	movs	r1, #20
 8013b42:	200e      	movs	r0, #14
 8013b44:	f7f3 ff74 	bl	8007a30 <pbuf_alloc>
 8013b48:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f000 80e3 	beq.w	8013d18 <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b54:	895b      	ldrh	r3, [r3, #10]
 8013b56:	2b13      	cmp	r3, #19
 8013b58:	d806      	bhi.n	8013b68 <ip4_frag+0xd0>
 8013b5a:	4b73      	ldr	r3, [pc, #460]	@ (8013d28 <ip4_frag+0x290>)
 8013b5c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013b60:	4974      	ldr	r1, [pc, #464]	@ (8013d34 <ip4_frag+0x29c>)
 8013b62:	4873      	ldr	r0, [pc, #460]	@ (8013d30 <ip4_frag+0x298>)
 8013b64:	f001 ff84 	bl	8015a70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	2214      	movs	r2, #20
 8013b6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013b70:	4618      	mov	r0, r3
 8013b72:	f002 f886 	bl	8015c82 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013b7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013b7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013b82:	e064      	b.n	8013c4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	895a      	ldrh	r2, [r3, #10]
 8013b88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	895b      	ldrh	r3, [r3, #10]
 8013b92:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d906      	bls.n	8013ba6 <ip4_frag+0x10e>
 8013b98:	4b63      	ldr	r3, [pc, #396]	@ (8013d28 <ip4_frag+0x290>)
 8013b9a:	f240 322d 	movw	r2, #813	@ 0x32d
 8013b9e:	4966      	ldr	r1, [pc, #408]	@ (8013d38 <ip4_frag+0x2a0>)
 8013ba0:	4863      	ldr	r0, [pc, #396]	@ (8013d30 <ip4_frag+0x298>)
 8013ba2:	f001 ff65 	bl	8015a70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013ba6:	8bfa      	ldrh	r2, [r7, #30]
 8013ba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013bac:	4293      	cmp	r3, r2
 8013bae:	bf28      	it	cs
 8013bb0:	4613      	movcs	r3, r2
 8013bb2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013bb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d105      	bne.n	8013bca <ip4_frag+0x132>
        poff = 0;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	60fb      	str	r3, [r7, #12]
        continue;
 8013bc8:	e041      	b.n	8013c4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013bca:	f7ff ff0d 	bl	80139e8 <ip_frag_alloc_pbuf_custom_ref>
 8013bce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d103      	bne.n	8013bde <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bd8:	f7f4 fa0c 	bl	8007ff4 <pbuf_free>
        goto memerr;
 8013bdc:	e09d      	b.n	8013d1a <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013bde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013be4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013be6:	4413      	add	r3, r2
 8013be8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013bec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013bf0:	9201      	str	r2, [sp, #4]
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2241      	movs	r2, #65	@ 0x41
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	f7f4 f843 	bl	8007c84 <pbuf_alloced_custom>
 8013bfe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d106      	bne.n	8013c14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013c06:	69b8      	ldr	r0, [r7, #24]
 8013c08:	f7ff fef6 	bl	80139f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013c0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c0e:	f7f4 f9f1 	bl	8007ff4 <pbuf_free>
        goto memerr;
 8013c12:	e082      	b.n	8013d1a <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8013c14:	68f8      	ldr	r0, [r7, #12]
 8013c16:	f7f4 fa93 	bl	8008140 <pbuf_ref>
      pcr->original = p;
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	4a46      	ldr	r2, [pc, #280]	@ (8013d3c <ip4_frag+0x2a4>)
 8013c24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013c26:	6979      	ldr	r1, [r7, #20]
 8013c28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c2a:	f7f4 fab1 	bl	8008190 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013c2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c36:	1ad3      	subs	r3, r2, r3
 8013c38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d004      	beq.n	8013c4e <ip4_frag+0x1b6>
        poff = 0;
 8013c44:	2300      	movs	r3, #0
 8013c46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013c4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d196      	bne.n	8013b84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013c56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013c58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c5c:	4413      	add	r3, r2
 8013c5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013c64:	f1a3 0213 	sub.w	r2, r3, #19
 8013c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	bfcc      	ite	gt
 8013c70:	2301      	movgt	r3, #1
 8013c72:	2300      	movle	r3, #0
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013c82:	6a3b      	ldr	r3, [r7, #32]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d002      	beq.n	8013c8e <ip4_frag+0x1f6>
 8013c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d003      	beq.n	8013c96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013c8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013c90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013c94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013c96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7f2 fdab 	bl	80067f4 <lwip_htons>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ca4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013ca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013ca8:	3314      	adds	r3, #20
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7f2 fda1 	bl	80067f4 <lwip_htons>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	729a      	strb	r2, [r3, #10]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013cc4:	2114      	movs	r1, #20
 8013cc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cc8:	f7f3 f9ff 	bl	80070ca <inet_chksum>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	461a      	mov	r2, r3
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	695b      	ldr	r3, [r3, #20]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013cdc:	68b8      	ldr	r0, [r7, #8]
 8013cde:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8013ce0:	4b17      	ldr	r3, [pc, #92]	@ (8013d40 <ip4_frag+0x2a8>)
 8013ce2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	b29a      	uxth	r2, r3
 8013ce8:	4b15      	ldr	r3, [pc, #84]	@ (8013d40 <ip4_frag+0x2a8>)
 8013cea:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013cec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013cee:	f7f4 f981 	bl	8007ff4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013cf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013cf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013cfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013d02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013d04:	4413      	add	r3, r2
 8013d06:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f47f af0b 	bne.w	8013b2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013d14:	2300      	movs	r3, #0
 8013d16:	e002      	b.n	8013d1e <ip4_frag+0x286>
      goto memerr;
 8013d18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3748      	adds	r7, #72	@ 0x48
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	080192fc 	.word	0x080192fc
 8013d2c:	080194d8 	.word	0x080194d8
 8013d30:	08019344 	.word	0x08019344
 8013d34:	080194f4 	.word	0x080194f4
 8013d38:	08019514 	.word	0x08019514
 8013d3c:	08013a31 	.word	0x08013a31
 8013d40:	20003a9c 	.word	0x20003a9c

08013d44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b086      	sub	sp, #24
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013d4e:	230e      	movs	r3, #14
 8013d50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	895b      	ldrh	r3, [r3, #10]
 8013d56:	2b0e      	cmp	r3, #14
 8013d58:	d80c      	bhi.n	8013d74 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8013d5a:	4b51      	ldr	r3, [pc, #324]	@ (8013ea0 <ethernet_input+0x15c>)
 8013d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d5e:	3301      	adds	r3, #1
 8013d60:	b29a      	uxth	r2, r3
 8013d62:	4b4f      	ldr	r3, [pc, #316]	@ (8013ea0 <ethernet_input+0x15c>)
 8013d64:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8013d66:	4b4e      	ldr	r3, [pc, #312]	@ (8013ea0 <ethernet_input+0x15c>)
 8013d68:	8bdb      	ldrh	r3, [r3, #30]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8013ea0 <ethernet_input+0x15c>)
 8013d70:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8013d72:	e08d      	b.n	8013e90 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	7bdb      	ldrb	r3, [r3, #15]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d106      	bne.n	8013d8a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d82:	3301      	adds	r3, #1
 8013d84:	b2da      	uxtb	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	7b1a      	ldrb	r2, [r3, #12]
 8013d94:	7b5b      	ldrb	r3, [r3, #13]
 8013d96:	021b      	lsls	r3, r3, #8
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	f003 0301 	and.w	r3, r3, #1
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d023      	beq.n	8013df0 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d10f      	bne.n	8013dd0 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	785b      	ldrb	r3, [r3, #1]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d11b      	bne.n	8013df0 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013dbc:	2b5e      	cmp	r3, #94	@ 0x5e
 8013dbe:	d117      	bne.n	8013df0 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	7b5b      	ldrb	r3, [r3, #13]
 8013dc4:	f043 0310 	orr.w	r3, r3, #16
 8013dc8:	b2da      	uxtb	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	735a      	strb	r2, [r3, #13]
 8013dce:	e00f      	b.n	8013df0 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	2206      	movs	r2, #6
 8013dd4:	4933      	ldr	r1, [pc, #204]	@ (8013ea4 <ethernet_input+0x160>)
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f001 fe9f 	bl	8015b1a <memcmp>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d106      	bne.n	8013df0 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	7b5b      	ldrb	r3, [r3, #13]
 8013de6:	f043 0308 	orr.w	r3, r3, #8
 8013dea:	b2da      	uxtb	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013df0:	89fb      	ldrh	r3, [r7, #14]
 8013df2:	2b08      	cmp	r3, #8
 8013df4:	d003      	beq.n	8013dfe <ethernet_input+0xba>
 8013df6:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013dfa:	d014      	beq.n	8013e26 <ethernet_input+0xe2>
 8013dfc:	e034      	b.n	8013e68 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e04:	f003 0308 	and.w	r3, r3, #8
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d03c      	beq.n	8013e86 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e0c:	8afb      	ldrh	r3, [r7, #22]
 8013e0e:	4619      	mov	r1, r3
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f7f4 f869 	bl	8007ee8 <pbuf_remove_header>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d136      	bne.n	8013e8a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8013e1c:	6839      	ldr	r1, [r7, #0]
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7fe fdca 	bl	80129b8 <ip4_input>
      }
      break;
 8013e24:	e02d      	b.n	8013e82 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e2c:	f003 0308 	and.w	r3, r3, #8
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d02c      	beq.n	8013e8e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e34:	8afb      	ldrh	r3, [r7, #22]
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7f4 f855 	bl	8007ee8 <pbuf_remove_header>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d00c      	beq.n	8013e5e <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8013e44:	4b16      	ldr	r3, [pc, #88]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e46:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013e48:	3301      	adds	r3, #1
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	4b14      	ldr	r3, [pc, #80]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e4e:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013e50:	4b13      	ldr	r3, [pc, #76]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e52:	8bdb      	ldrh	r3, [r3, #30]
 8013e54:	3301      	adds	r3, #1
 8013e56:	b29a      	uxth	r2, r3
 8013e58:	4b11      	ldr	r3, [pc, #68]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e5a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8013e5c:	e018      	b.n	8013e90 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f7fd fe99 	bl	8011b98 <etharp_input>
      }
      break;
 8013e66:	e00c      	b.n	8013e82 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8013e68:	4b0d      	ldr	r3, [pc, #52]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	4b0b      	ldr	r3, [pc, #44]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8013e74:	4b0a      	ldr	r3, [pc, #40]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e76:	8bdb      	ldrh	r3, [r3, #30]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	4b08      	ldr	r3, [pc, #32]	@ (8013ea0 <ethernet_input+0x15c>)
 8013e7e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013e80:	e006      	b.n	8013e90 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013e82:	2300      	movs	r3, #0
 8013e84:	e008      	b.n	8013e98 <ethernet_input+0x154>
        goto free_and_return;
 8013e86:	bf00      	nop
 8013e88:	e002      	b.n	8013e90 <ethernet_input+0x14c>
        goto free_and_return;
 8013e8a:	bf00      	nop
 8013e8c:	e000      	b.n	8013e90 <ethernet_input+0x14c>
        goto free_and_return;
 8013e8e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7f4 f8af 	bl	8007ff4 <pbuf_free>
  return ERR_OK;
 8013e96:	2300      	movs	r3, #0
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3718      	adds	r7, #24
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20003a9c 	.word	0x20003a9c
 8013ea4:	0801988c 	.word	0x0801988c

08013ea8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	607a      	str	r2, [r7, #4]
 8013eb4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013eb6:	8c3b      	ldrh	r3, [r7, #32]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f2 fc9b 	bl	80067f4 <lwip_htons>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013ec2:	210e      	movs	r1, #14
 8013ec4:	68b8      	ldr	r0, [r7, #8]
 8013ec6:	f7f3 ffff 	bl	8007ec8 <pbuf_add_header>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d125      	bne.n	8013f1c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	8afa      	ldrh	r2, [r7, #22]
 8013eda:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	2206      	movs	r2, #6
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f001 fecd 	bl	8015c82 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	3306      	adds	r3, #6
 8013eec:	2206      	movs	r2, #6
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f001 fec6 	bl	8015c82 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013efc:	2b06      	cmp	r3, #6
 8013efe:	d006      	beq.n	8013f0e <ethernet_output+0x66>
 8013f00:	4b0d      	ldr	r3, [pc, #52]	@ (8013f38 <ethernet_output+0x90>)
 8013f02:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013f06:	490d      	ldr	r1, [pc, #52]	@ (8013f3c <ethernet_output+0x94>)
 8013f08:	480d      	ldr	r0, [pc, #52]	@ (8013f40 <ethernet_output+0x98>)
 8013f0a:	f001 fdb1 	bl	8015a70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	699b      	ldr	r3, [r3, #24]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	4798      	blx	r3
 8013f18:	4603      	mov	r3, r0
 8013f1a:	e008      	b.n	8013f2e <ethernet_output+0x86>
      goto pbuf_header_failed;
 8013f1c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8013f1e:	4b09      	ldr	r3, [pc, #36]	@ (8013f44 <ethernet_output+0x9c>)
 8013f20:	895b      	ldrh	r3, [r3, #10]
 8013f22:	3301      	adds	r3, #1
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	4b07      	ldr	r3, [pc, #28]	@ (8013f44 <ethernet_output+0x9c>)
 8013f28:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8013f2a:	f06f 0301 	mvn.w	r3, #1
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3718      	adds	r7, #24
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	08019524 	.word	0x08019524
 8013f3c:	0801955c 	.word	0x0801955c
 8013f40:	08019590 	.word	0x08019590
 8013f44:	20003a9c 	.word	0x20003a9c

08013f48 <sys_now>:
#include "lwip/arch.h"
#include "stm32f4xx_hal.h"

u32_t sys_now(void)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();  // returns system time in ms
 8013f4c:	f7ec fe1a 	bl	8000b84 <HAL_GetTick>
 8013f50:	4603      	mov	r3, r0
}
 8013f52:	4618      	mov	r0, r3
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
 8013f56:	b480      	push	{r7}
 8013f58:	af00      	add	r7, sp, #0
  return 1; // no real protection, just dummy
 8013f5a:	2301      	movs	r3, #1
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr

08013f66 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
 8013f66:	b480      	push	{r7}
 8013f68:	b083      	sub	sp, #12
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]
  (void)pval; // no real unprotection
}
 8013f6e:	bf00      	nop
 8013f70:	370c      	adds	r7, #12
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr
	...

08013f7c <cdc_ecm_netif_init>:
#include "lwip/netif.h"

extern USBD_HandleTypeDef hUsbDeviceFS;

err_t cdc_ecm_netif_init(struct netif *netif)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
    netif->name[0] = 'u';  // usb ethernet
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2275      	movs	r2, #117	@ 0x75
 8013f88:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    netif->name[1] = 's';
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2273      	movs	r2, #115	@ 0x73
 8013f90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    netif->output = etharp_output;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4a18      	ldr	r2, [pc, #96]	@ (8013ff8 <cdc_ecm_netif_init+0x7c>)
 8013f98:	615a      	str	r2, [r3, #20]
    netif->linkoutput = cdc_ecm_low_level_output;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4a17      	ldr	r2, [pc, #92]	@ (8013ffc <cdc_ecm_netif_init+0x80>)
 8013f9e:	619a      	str	r2, [r3, #24]

    netif->hwaddr_len = ETH_HWADDR_LEN;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2206      	movs	r2, #6
 8013fa4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    netif->hwaddr[0] = 0x02;  // 02:A1:B2:C3:D4:E5
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2202      	movs	r2, #2
 8013fac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    netif->hwaddr[1] = 0xA1;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	22a1      	movs	r2, #161	@ 0xa1
 8013fb4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    netif->hwaddr[2] = 0xB2;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	22b2      	movs	r2, #178	@ 0xb2
 8013fbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    netif->hwaddr[3] = 0xC3;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	22c3      	movs	r2, #195	@ 0xc3
 8013fc4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    netif->hwaddr[4] = 0xD4;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	22d4      	movs	r2, #212	@ 0xd4
 8013fcc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    netif->hwaddr[5] = 0xE5;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	22e5      	movs	r2, #229	@ 0xe5
 8013fd4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

    netif->mtu = 1500;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8013fde:	849a      	strh	r2, [r3, #36]	@ 0x24
    netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	220e      	movs	r2, #14
 8013fe4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    return ERR_OK;
 8013fe8:	2300      	movs	r3, #0
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr
 8013ff6:	bf00      	nop
 8013ff8:	08011e21 	.word	0x08011e21
 8013ffc:	08014001 	.word	0x08014001

08014000 <cdc_ecm_low_level_output>:

err_t cdc_ecm_low_level_output(struct netif *netif, struct pbuf *p)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b086      	sub	sp, #24
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
    struct pbuf *q;
    uint8_t *buffer;
    uint32_t len = 0;
 801400a:	2300      	movs	r3, #0
 801400c:	613b      	str	r3, [r7, #16]

    buffer = malloc(p->tot_len);
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	891b      	ldrh	r3, [r3, #8]
 8014012:	4618      	mov	r0, r3
 8014014:	f001 fb6e 	bl	80156f4 <malloc>
 8014018:	4603      	mov	r3, r0
 801401a:	60fb      	str	r3, [r7, #12]
    if (buffer == NULL)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d102      	bne.n	8014028 <cdc_ecm_low_level_output+0x28>
    {
        return ERR_MEM;
 8014022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014026:	e03f      	b.n	80140a8 <cdc_ecm_low_level_output+0xa8>
    }

    /* Copy packet into buffer */
    for (q = p; q != NULL; q = q->next)
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	617b      	str	r3, [r7, #20]
 801402c:	e012      	b.n	8014054 <cdc_ecm_low_level_output+0x54>
    {
        memcpy(buffer + len, q->payload, q->len);
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	18d0      	adds	r0, r2, r3
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	6859      	ldr	r1, [r3, #4]
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	895b      	ldrh	r3, [r3, #10]
 801403c:	461a      	mov	r2, r3
 801403e:	f001 fe20 	bl	8015c82 <memcpy>
        len += q->len;
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	895b      	ldrh	r3, [r3, #10]
 8014046:	461a      	mov	r2, r3
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	4413      	add	r3, r2
 801404c:	613b      	str	r3, [r7, #16]
    for (q = p; q != NULL; q = q->next)
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	617b      	str	r3, [r7, #20]
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d1e9      	bne.n	801402e <cdc_ecm_low_level_output+0x2e>
    }

    /* Check if USB CDC ECM is ready */
    USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)(hUsbDeviceFS.pClassData);
 801405a:	4b15      	ldr	r3, [pc, #84]	@ (80140b0 <cdc_ecm_low_level_output+0xb0>)
 801405c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014060:	60bb      	str	r3, [r7, #8]
    if (hcdc == NULL || hcdc->TxState != 0)
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d004      	beq.n	8014072 <cdc_ecm_low_level_output+0x72>
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 801406e:	2b00      	cmp	r3, #0
 8014070:	d005      	beq.n	801407e <cdc_ecm_low_level_output+0x7e>
    {
        free(buffer);
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f001 fb46 	bl	8015704 <free>
        return ERR_IF; // Interface busy
 8014078:	f06f 030b 	mvn.w	r3, #11
 801407c:	e014      	b.n	80140a8 <cdc_ecm_low_level_output+0xa8>
    }

    /* Send it through CDC ECM */
    USBD_CDC_ECM_SetTxBuffer(&hUsbDeviceFS, buffer, len);
 801407e:	693a      	ldr	r2, [r7, #16]
 8014080:	68f9      	ldr	r1, [r7, #12]
 8014082:	480b      	ldr	r0, [pc, #44]	@ (80140b0 <cdc_ecm_low_level_output+0xb0>)
 8014084:	f000 fce0 	bl	8014a48 <USBD_CDC_ECM_SetTxBuffer>
    if (USBD_CDC_ECM_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 8014088:	4809      	ldr	r0, [pc, #36]	@ (80140b0 <cdc_ecm_low_level_output+0xb0>)
 801408a:	f000 fd1d 	bl	8014ac8 <USBD_CDC_ECM_TransmitPacket>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d005      	beq.n	80140a0 <cdc_ecm_low_level_output+0xa0>
    {
        free(buffer);
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	f001 fb35 	bl	8015704 <free>
        return ERR_IF;
 801409a:	f06f 030b 	mvn.w	r3, #11
 801409e:	e003      	b.n	80140a8 <cdc_ecm_low_level_output+0xa8>
    }

    free(buffer);
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	f001 fb2f 	bl	8015704 <free>
    return ERR_OK;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3718      	adds	r7, #24
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	20003d04 	.word	0x20003d04

080140b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80140b8:	2200      	movs	r2, #0
 80140ba:	4912      	ldr	r1, [pc, #72]	@ (8014104 <MX_USB_DEVICE_Init+0x50>)
 80140bc:	4812      	ldr	r0, [pc, #72]	@ (8014108 <MX_USB_DEVICE_Init+0x54>)
 80140be:	f7f0 fa62 	bl	8004586 <USBD_Init>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d001      	beq.n	80140cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80140c8:	f7ec fb88 	bl	80007dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC_ECM) != USBD_OK)
 80140cc:	490f      	ldr	r1, [pc, #60]	@ (801410c <MX_USB_DEVICE_Init+0x58>)
 80140ce:	480e      	ldr	r0, [pc, #56]	@ (8014108 <MX_USB_DEVICE_Init+0x54>)
 80140d0:	f7f0 fa89 	bl	80045e6 <USBD_RegisterClass>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d001      	beq.n	80140de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80140da:	f7ec fb7f 	bl	80007dc <Error_Handler>
  }
  if (USBD_CDC_ECM_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_ECM_fops) != USBD_OK)
 80140de:	490c      	ldr	r1, [pc, #48]	@ (8014110 <MX_USB_DEVICE_Init+0x5c>)
 80140e0:	4809      	ldr	r0, [pc, #36]	@ (8014108 <MX_USB_DEVICE_Init+0x54>)
 80140e2:	f000 fc75 	bl	80149d0 <USBD_CDC_ECM_RegisterInterface>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d001      	beq.n	80140f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80140ec:	f7ec fb76 	bl	80007dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80140f0:	4805      	ldr	r0, [pc, #20]	@ (8014108 <MX_USB_DEVICE_Init+0x54>)
 80140f2:	f7f0 faae 	bl	8004652 <USBD_Start>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d001      	beq.n	8014100 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80140fc:	f7ec fb6e 	bl	80007dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014100:	bf00      	nop
 8014102:	bd80      	pop	{r7, pc}
 8014104:	200000d8 	.word	0x200000d8
 8014108:	20003d04 	.word	0x20003d04
 801410c:	2000002c 	.word	0x2000002c
 8014110:	200000bc 	.word	0x200000bc

08014114 <USBD_CDC_ECM_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_ECM_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	460b      	mov	r3, r1
 801411e:	70fb      	strb	r3, [r7, #3]
  ECMInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hcdc = (USBD_CDC_ECM_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_ECM_HandleTypeDef));
 8014120:	f640 0008 	movw	r0, #2056	@ 0x808
 8014124:	f001 faa2 	bl	801566c <USBD_static_malloc>
 8014128:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d109      	bne.n	8014144 <USBD_CDC_ECM_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	32b0      	adds	r2, #176	@ 0xb0
 801413a:	2100      	movs	r1, #0
 801413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014140:	2302      	movs	r3, #2
 8014142:	e0e2      	b.n	801430a <USBD_CDC_ECM_Init+0x1f6>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_ECM_HandleTypeDef));
 8014144:	f640 0208 	movw	r2, #2056	@ 0x808
 8014148:	2100      	movs	r1, #0
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f001 fcf5 	bl	8015b3a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	32b0      	adds	r2, #176	@ 0xb0
 801415a:	68f9      	ldr	r1, [r7, #12]
 801415c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	32b0      	adds	r2, #176	@ 0xb0
 801416a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	7c1b      	ldrb	r3, [r3, #16]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d138      	bne.n	80141ee <USBD_CDC_ECM_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, ECMInEpAdd, USBD_EP_TYPE_BULK,
 801417c:	4b65      	ldr	r3, [pc, #404]	@ (8014314 <USBD_CDC_ECM_Init+0x200>)
 801417e:	7819      	ldrb	r1, [r3, #0]
 8014180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014184:	2202      	movs	r2, #2
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f001 f94d 	bl	8015426 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 1U;
 801418c:	4b61      	ldr	r3, [pc, #388]	@ (8014314 <USBD_CDC_ECM_Init+0x200>)
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 020f 	and.w	r2, r3, #15
 8014194:	6879      	ldr	r1, [r7, #4]
 8014196:	4613      	mov	r3, r2
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	4413      	add	r3, r2
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	440b      	add	r3, r1
 80141a0:	3324      	adds	r3, #36	@ 0x24
 80141a2:	2201      	movs	r2, #1
 80141a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, ECMOutEpAdd, USBD_EP_TYPE_BULK,
 80141a6:	4b5c      	ldr	r3, [pc, #368]	@ (8014318 <USBD_CDC_ECM_Init+0x204>)
 80141a8:	7819      	ldrb	r1, [r3, #0]
 80141aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80141ae:	2202      	movs	r2, #2
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f001 f938 	bl	8015426 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 1U;
 80141b6:	4b58      	ldr	r3, [pc, #352]	@ (8014318 <USBD_CDC_ECM_Init+0x204>)
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f003 020f 	and.w	r2, r3, #15
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	4613      	mov	r3, r2
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	4413      	add	r3, r2
 80141c6:	009b      	lsls	r3, r3, #2
 80141c8:	440b      	add	r3, r1
 80141ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80141ce:	2201      	movs	r2, #1
 80141d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC ECM CMD Endpoint */
    pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = CDC_ECM_HS_BINTERVAL;
 80141d2:	4b52      	ldr	r3, [pc, #328]	@ (801431c <USBD_CDC_ECM_Init+0x208>)
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	f003 020f 	and.w	r2, r3, #15
 80141da:	6879      	ldr	r1, [r7, #4]
 80141dc:	4613      	mov	r3, r2
 80141de:	009b      	lsls	r3, r3, #2
 80141e0:	4413      	add	r3, r2
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	440b      	add	r3, r1
 80141e6:	3326      	adds	r3, #38	@ 0x26
 80141e8:	2210      	movs	r2, #16
 80141ea:	801a      	strh	r2, [r3, #0]
 80141ec:	e035      	b.n	801425a <USBD_CDC_ECM_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, ECMInEpAdd, USBD_EP_TYPE_BULK,
 80141ee:	4b49      	ldr	r3, [pc, #292]	@ (8014314 <USBD_CDC_ECM_Init+0x200>)
 80141f0:	7819      	ldrb	r1, [r3, #0]
 80141f2:	2340      	movs	r3, #64	@ 0x40
 80141f4:	2202      	movs	r2, #2
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f001 f915 	bl	8015426 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 1U;
 80141fc:	4b45      	ldr	r3, [pc, #276]	@ (8014314 <USBD_CDC_ECM_Init+0x200>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	f003 020f 	and.w	r2, r3, #15
 8014204:	6879      	ldr	r1, [r7, #4]
 8014206:	4613      	mov	r3, r2
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	4413      	add	r3, r2
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	440b      	add	r3, r1
 8014210:	3324      	adds	r3, #36	@ 0x24
 8014212:	2201      	movs	r2, #1
 8014214:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, ECMOutEpAdd, USBD_EP_TYPE_BULK,
 8014216:	4b40      	ldr	r3, [pc, #256]	@ (8014318 <USBD_CDC_ECM_Init+0x204>)
 8014218:	7819      	ldrb	r1, [r3, #0]
 801421a:	2340      	movs	r3, #64	@ 0x40
 801421c:	2202      	movs	r2, #2
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f001 f901 	bl	8015426 <USBD_LL_OpenEP>
                         CDC_ECM_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 1U;
 8014224:	4b3c      	ldr	r3, [pc, #240]	@ (8014318 <USBD_CDC_ECM_Init+0x204>)
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	f003 020f 	and.w	r2, r3, #15
 801422c:	6879      	ldr	r1, [r7, #4]
 801422e:	4613      	mov	r3, r2
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	4413      	add	r3, r2
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	440b      	add	r3, r1
 8014238:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801423c:	2201      	movs	r2, #1
 801423e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC ECM CMD Endpoint */
    pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = CDC_ECM_FS_BINTERVAL;
 8014240:	4b36      	ldr	r3, [pc, #216]	@ (801431c <USBD_CDC_ECM_Init+0x208>)
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	f003 020f 	and.w	r2, r3, #15
 8014248:	6879      	ldr	r1, [r7, #4]
 801424a:	4613      	mov	r3, r2
 801424c:	009b      	lsls	r3, r3, #2
 801424e:	4413      	add	r3, r2
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	440b      	add	r3, r1
 8014254:	3326      	adds	r3, #38	@ 0x26
 8014256:	2210      	movs	r2, #16
 8014258:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, ECMCmdEpAdd, USBD_EP_TYPE_INTR, CDC_ECM_CMD_PACKET_SIZE);
 801425a:	4b30      	ldr	r3, [pc, #192]	@ (801431c <USBD_CDC_ECM_Init+0x208>)
 801425c:	7819      	ldrb	r1, [r3, #0]
 801425e:	2310      	movs	r3, #16
 8014260:	2203      	movs	r2, #3
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f001 f8df 	bl	8015426 <USBD_LL_OpenEP>
  pdev->ep_in[ECMCmdEpAdd & 0xFU].is_used = 1U;
 8014268:	4b2c      	ldr	r3, [pc, #176]	@ (801431c <USBD_CDC_ECM_Init+0x208>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 020f 	and.w	r2, r3, #15
 8014270:	6879      	ldr	r1, [r7, #4]
 8014272:	4613      	mov	r3, r2
 8014274:	009b      	lsls	r3, r3, #2
 8014276:	4413      	add	r3, r2
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	440b      	add	r3, r1
 801427c:	3324      	adds	r3, #36	@ 0x24
 801427e:	2201      	movs	r2, #1
 8014280:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	2200      	movs	r2, #0
 8014286:	f8c3 27d4 	str.w	r2, [r3, #2004]	@ 0x7d4

  /* Init  physical Interface components */
  ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	33b0      	adds	r3, #176	@ 0xb0
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	4413      	add	r3, r2
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2200      	movs	r2, #0
 80142a2:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
  hcdc->RxState = 0U;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	2200      	movs	r2, #0
 80142aa:	f8c3 27e8 	str.w	r2, [r3, #2024]	@ 0x7e8
  hcdc->RxLength = 0U;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
  hcdc->TxLength = 0U;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2200      	movs	r2, #0
 80142ba:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
  hcdc->LinkStatus = 0U;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2200      	movs	r2, #0
 80142c2:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0
  hcdc->NotificationStatus = 0U;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2200      	movs	r2, #0
 80142ca:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
  hcdc->MaxPcktLen = (pdev->dev_speed == USBD_SPEED_HIGH) ? CDC_ECM_DATA_HS_MAX_PACKET_SIZE : \
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	7c1b      	ldrb	r3, [r3, #16]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <USBD_CDC_ECM_Init+0x1c8>
 80142d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80142da:	e000      	b.n	80142de <USBD_CDC_ECM_Init+0x1ca>
 80142dc:	2240      	movs	r2, #64	@ 0x40
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f8c3 27ec 	str.w	r2, [r3, #2028]	@ 0x7ec
                     CDC_ECM_DATA_FS_MAX_PACKET_SIZE;

  if (hcdc->RxBuffer == NULL)
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	f8d3 37d4 	ldr.w	r3, [r3, #2004]	@ 0x7d4
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d101      	bne.n	80142f2 <USBD_CDC_ECM_Init+0x1de>
  {
    return (uint8_t)USBD_EMEM;
 80142ee:	2302      	movs	r3, #2
 80142f0:	e00b      	b.n	801430a <USBD_CDC_ECM_Init+0x1f6>
  }

  /* Prepare Out endpoint to receive next packet */
  (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd, hcdc->RxBuffer, hcdc->MaxPcktLen);
 80142f2:	4b09      	ldr	r3, [pc, #36]	@ (8014318 <USBD_CDC_ECM_Init+0x204>)
 80142f4:	7819      	ldrb	r1, [r3, #0]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f001 f97e 	bl	8015604 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3710      	adds	r7, #16
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	200000b7 	.word	0x200000b7
 8014318:	200000b8 	.word	0x200000b8
 801431c:	200000b9 	.word	0x200000b9

08014320 <USBD_CDC_ECM_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	460b      	mov	r3, r1
 801432a:	70fb      	strb	r3, [r7, #3]
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, ECMInEpAdd);
 801432c:	4b3a      	ldr	r3, [pc, #232]	@ (8014418 <USBD_CDC_ECM_DeInit+0xf8>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	4619      	mov	r1, r3
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f001 f89d 	bl	8015472 <USBD_LL_CloseEP>
  pdev->ep_in[ECMInEpAdd & 0xFU].is_used = 0U;
 8014338:	4b37      	ldr	r3, [pc, #220]	@ (8014418 <USBD_CDC_ECM_DeInit+0xf8>)
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f003 020f 	and.w	r2, r3, #15
 8014340:	6879      	ldr	r1, [r7, #4]
 8014342:	4613      	mov	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	4413      	add	r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	440b      	add	r3, r1
 801434c:	3324      	adds	r3, #36	@ 0x24
 801434e:	2200      	movs	r2, #0
 8014350:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, ECMOutEpAdd);
 8014352:	4b32      	ldr	r3, [pc, #200]	@ (801441c <USBD_CDC_ECM_DeInit+0xfc>)
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	4619      	mov	r1, r3
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f001 f88a 	bl	8015472 <USBD_LL_CloseEP>
  pdev->ep_out[ECMOutEpAdd & 0xFU].is_used = 0U;
 801435e:	4b2f      	ldr	r3, [pc, #188]	@ (801441c <USBD_CDC_ECM_DeInit+0xfc>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	f003 020f 	and.w	r2, r3, #15
 8014366:	6879      	ldr	r1, [r7, #4]
 8014368:	4613      	mov	r3, r2
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	4413      	add	r3, r2
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	440b      	add	r3, r1
 8014372:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014376:	2200      	movs	r2, #0
 8014378:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, ECMCmdEpAdd);
 801437a:	4b29      	ldr	r3, [pc, #164]	@ (8014420 <USBD_CDC_ECM_DeInit+0x100>)
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	4619      	mov	r1, r3
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f001 f876 	bl	8015472 <USBD_LL_CloseEP>
  pdev->ep_in[ECMCmdEpAdd & 0xFU].is_used = 0U;
 8014386:	4b26      	ldr	r3, [pc, #152]	@ (8014420 <USBD_CDC_ECM_DeInit+0x100>)
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	f003 020f 	and.w	r2, r3, #15
 801438e:	6879      	ldr	r1, [r7, #4]
 8014390:	4613      	mov	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	440b      	add	r3, r1
 801439a:	3324      	adds	r3, #36	@ 0x24
 801439c:	2200      	movs	r2, #0
 801439e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[ECMCmdEpAdd & 0xFU].bInterval = 0U;
 80143a0:	4b1f      	ldr	r3, [pc, #124]	@ (8014420 <USBD_CDC_ECM_DeInit+0x100>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	f003 020f 	and.w	r2, r3, #15
 80143a8:	6879      	ldr	r1, [r7, #4]
 80143aa:	4613      	mov	r3, r2
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	4413      	add	r3, r2
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	440b      	add	r3, r1
 80143b4:	3326      	adds	r3, #38	@ 0x26
 80143b6:	2200      	movs	r2, #0
 80143b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	32b0      	adds	r2, #176	@ 0xb0
 80143c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d01f      	beq.n	801440c <USBD_CDC_ECM_DeInit+0xec>
  {
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80143d2:	687a      	ldr	r2, [r7, #4]
 80143d4:	33b0      	adds	r3, #176	@ 0xb0
 80143d6:	009b      	lsls	r3, r3, #2
 80143d8:	4413      	add	r3, r2
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	32b0      	adds	r2, #176	@ 0xb0
 80143ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f001 f94a 	bl	8015688 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	32b0      	adds	r2, #176	@ 0xb0
 80143fe:	2100      	movs	r1, #0
 8014400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2200      	movs	r2, #0
 8014408:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801440c:	2300      	movs	r3, #0
}
 801440e:	4618      	mov	r0, r3
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	200000b7 	.word	0x200000b7
 801441c:	200000b8 	.word	0x200000b8
 8014420:	200000b9 	.word	0x200000b9

08014424 <USBD_CDC_ECM_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_ECM_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b088      	sub	sp, #32
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *) pdev->pClassDataCmsit[pdev->classId];
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	32b0      	adds	r2, #176	@ 0xb0
 8014438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801443c:	61bb      	str	r3, [r7, #24]
  USBD_CDC_ECM_ItfTypeDef *EcmInterface = (USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId];
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014444:	687a      	ldr	r2, [r7, #4]
 8014446:	33b0      	adds	r3, #176	@ 0xb0
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	4413      	add	r3, r2
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	617b      	str	r3, [r7, #20]
  USBD_StatusTypeDef ret = USBD_OK;
 8014450:	2300      	movs	r3, #0
 8014452:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint16_t status_info = 0U;
 8014454:	2300      	movs	r3, #0
 8014456:	823b      	strh	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014458:	2300      	movs	r3, #0
 801445a:	73fb      	strb	r3, [r7, #15]

  if (hcdc == NULL)
 801445c:	69bb      	ldr	r3, [r7, #24]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d101      	bne.n	8014466 <USBD_CDC_ECM_Setup+0x42>
  {
    return (uint8_t)USBD_FAIL;
 8014462:	2303      	movs	r3, #3
 8014464:	e0b4      	b.n	80145d0 <USBD_CDC_ECM_Setup+0x1ac>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801446e:	2b00      	cmp	r3, #0
 8014470:	d044      	beq.n	80144fc <USBD_CDC_ECM_Setup+0xd8>
 8014472:	2b20      	cmp	r3, #32
 8014474:	f040 80a4 	bne.w	80145c0 <USBD_CDC_ECM_Setup+0x19c>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength != 0U)
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	88db      	ldrh	r3, [r3, #6]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d035      	beq.n	80144ec <USBD_CDC_ECM_Setup+0xc8>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	b25b      	sxtb	r3, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	da16      	bge.n	80144b8 <USBD_CDC_ECM_Setup+0x94>
        {
          EcmInterface->Control(req->bRequest, (uint8_t *)hcdc->data, req->wLength);
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	689b      	ldr	r3, [r3, #8]
 801448e:	683a      	ldr	r2, [r7, #0]
 8014490:	7850      	ldrb	r0, [r2, #1]
 8014492:	69b9      	ldr	r1, [r7, #24]
 8014494:	683a      	ldr	r2, [r7, #0]
 8014496:	88d2      	ldrh	r2, [r2, #6]
 8014498:	4798      	blx	r3

          len = MIN(CDC_ECM_DATA_BUFFER_SIZE, req->wLength);
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	88db      	ldrh	r3, [r3, #6]
 801449e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80144a2:	bf28      	it	cs
 80144a4:	f44f 63fa 	movcs.w	r3, #2000	@ 0x7d0
 80144a8:	827b      	strh	r3, [r7, #18]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	8a7a      	ldrh	r2, [r7, #18]
 80144ae:	4619      	mov	r1, r3
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7f1 fb11 	bl	8005ad8 <USBD_CtlSendData>
      }
      else
      {
        EcmInterface->Control(req->bRequest, (uint8_t *)req, 0U);
      }
      break;
 80144b6:	e08a      	b.n	80145ce <USBD_CDC_ECM_Setup+0x1aa>
          hcdc->CmdOpCode = req->bRequest;
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	785a      	ldrb	r2, [r3, #1]
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	88db      	ldrh	r3, [r3, #6]
 80144c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80144c8:	d803      	bhi.n	80144d2 <USBD_CDC_ECM_Setup+0xae>
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	88db      	ldrh	r3, [r3, #6]
 80144ce:	b2da      	uxtb	r2, r3
 80144d0:	e000      	b.n	80144d4 <USBD_CDC_ECM_Setup+0xb0>
 80144d2:	2240      	movs	r2, #64	@ 0x40
 80144d4:	69bb      	ldr	r3, [r7, #24]
 80144d6:	f883 27d1 	strb.w	r2, [r3, #2001]	@ 0x7d1
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80144da:	69b9      	ldr	r1, [r7, #24]
 80144dc:	69bb      	ldr	r3, [r7, #24]
 80144de:	f893 37d1 	ldrb.w	r3, [r3, #2001]	@ 0x7d1
 80144e2:	461a      	mov	r2, r3
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7f1 fb23 	bl	8005b30 <USBD_CtlPrepareRx>
      break;
 80144ea:	e070      	b.n	80145ce <USBD_CDC_ECM_Setup+0x1aa>
        EcmInterface->Control(req->bRequest, (uint8_t *)req, 0U);
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	7850      	ldrb	r0, [r2, #1]
 80144f4:	2200      	movs	r2, #0
 80144f6:	6839      	ldr	r1, [r7, #0]
 80144f8:	4798      	blx	r3
      break;
 80144fa:	e068      	b.n	80145ce <USBD_CDC_ECM_Setup+0x1aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	785b      	ldrb	r3, [r3, #1]
 8014500:	2b0b      	cmp	r3, #11
 8014502:	d852      	bhi.n	80145aa <USBD_CDC_ECM_Setup+0x186>
 8014504:	a201      	add	r2, pc, #4	@ (adr r2, 801450c <USBD_CDC_ECM_Setup+0xe8>)
 8014506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801450a:	bf00      	nop
 801450c:	0801453d 	.word	0x0801453d
 8014510:	080145b9 	.word	0x080145b9
 8014514:	080145ab 	.word	0x080145ab
 8014518:	080145ab 	.word	0x080145ab
 801451c:	080145ab 	.word	0x080145ab
 8014520:	080145ab 	.word	0x080145ab
 8014524:	080145ab 	.word	0x080145ab
 8014528:	080145ab 	.word	0x080145ab
 801452c:	080145ab 	.word	0x080145ab
 8014530:	080145ab 	.word	0x080145ab
 8014534:	08014567 	.word	0x08014567
 8014538:	08014591 	.word	0x08014591
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014542:	b2db      	uxtb	r3, r3
 8014544:	2b03      	cmp	r3, #3
 8014546:	d107      	bne.n	8014558 <USBD_CDC_ECM_Setup+0x134>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014548:	f107 0310 	add.w	r3, r7, #16
 801454c:	2202      	movs	r2, #2
 801454e:	4619      	mov	r1, r3
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f7f1 fac1 	bl	8005ad8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014556:	e032      	b.n	80145be <USBD_CDC_ECM_Setup+0x19a>
            USBD_CtlError(pdev, req);
 8014558:	6839      	ldr	r1, [r7, #0]
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f7f1 fa3f 	bl	80059de <USBD_CtlError>
            ret = USBD_FAIL;
 8014560:	2303      	movs	r3, #3
 8014562:	77fb      	strb	r3, [r7, #31]
          break;
 8014564:	e02b      	b.n	80145be <USBD_CDC_ECM_Setup+0x19a>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801456c:	b2db      	uxtb	r3, r3
 801456e:	2b03      	cmp	r3, #3
 8014570:	d107      	bne.n	8014582 <USBD_CDC_ECM_Setup+0x15e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014572:	f107 030f 	add.w	r3, r7, #15
 8014576:	2201      	movs	r2, #1
 8014578:	4619      	mov	r1, r3
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7f1 faac 	bl	8005ad8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014580:	e01d      	b.n	80145be <USBD_CDC_ECM_Setup+0x19a>
            USBD_CtlError(pdev, req);
 8014582:	6839      	ldr	r1, [r7, #0]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7f1 fa2a 	bl	80059de <USBD_CtlError>
            ret = USBD_FAIL;
 801458a:	2303      	movs	r3, #3
 801458c:	77fb      	strb	r3, [r7, #31]
          break;
 801458e:	e016      	b.n	80145be <USBD_CDC_ECM_Setup+0x19a>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014596:	b2db      	uxtb	r3, r3
 8014598:	2b03      	cmp	r3, #3
 801459a:	d00f      	beq.n	80145bc <USBD_CDC_ECM_Setup+0x198>
          {
            USBD_CtlError(pdev, req);
 801459c:	6839      	ldr	r1, [r7, #0]
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7f1 fa1d 	bl	80059de <USBD_CtlError>
            ret = USBD_FAIL;
 80145a4:	2303      	movs	r3, #3
 80145a6:	77fb      	strb	r3, [r7, #31]
          }
          break;
 80145a8:	e008      	b.n	80145bc <USBD_CDC_ECM_Setup+0x198>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7f1 fa16 	bl	80059de <USBD_CtlError>
          ret = USBD_FAIL;
 80145b2:	2303      	movs	r3, #3
 80145b4:	77fb      	strb	r3, [r7, #31]
          break;
 80145b6:	e002      	b.n	80145be <USBD_CDC_ECM_Setup+0x19a>
          break;
 80145b8:	bf00      	nop
 80145ba:	e008      	b.n	80145ce <USBD_CDC_ECM_Setup+0x1aa>
          break;
 80145bc:	bf00      	nop
      }
      break;
 80145be:	e006      	b.n	80145ce <USBD_CDC_ECM_Setup+0x1aa>

    default:
      USBD_CtlError(pdev, req);
 80145c0:	6839      	ldr	r1, [r7, #0]
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7f1 fa0b 	bl	80059de <USBD_CtlError>
      ret = USBD_FAIL;
 80145c8:	2303      	movs	r3, #3
 80145ca:	77fb      	strb	r3, [r7, #31]
      break;
 80145cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80145ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	3720      	adds	r7, #32
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <USBD_CDC_ECM_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	460b      	mov	r3, r1
 80145e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	32b0      	adds	r2, #176	@ 0xb0
 80145ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80145fa:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	32b0      	adds	r2, #176	@ 0xb0
 8014606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d101      	bne.n	8014612 <USBD_CDC_ECM_DataIn+0x3a>
  {
    return (uint8_t)USBD_FAIL;
 801460e:	2303      	movs	r3, #3
 8014610:	e07e      	b.n	8014710 <USBD_CDC_ECM_DataIn+0x138>
  }

  if (epnum == (ECMInEpAdd & 0x7FU))
 8014612:	78fa      	ldrb	r2, [r7, #3]
 8014614:	4b40      	ldr	r3, [pc, #256]	@ (8014718 <USBD_CDC_ECM_DataIn+0x140>)
 8014616:	781b      	ldrb	r3, [r3, #0]
 8014618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801461c:	429a      	cmp	r2, r3
 801461e:	d15d      	bne.n	80146dc <USBD_CDC_ECM_DataIn+0x104>
  {
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014620:	78fb      	ldrb	r3, [r7, #3]
 8014622:	f003 020f 	and.w	r2, r3, #15
 8014626:	6879      	ldr	r1, [r7, #4]
 8014628:	4613      	mov	r3, r2
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4413      	add	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	440b      	add	r3, r1
 8014632:	3318      	adds	r3, #24
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d02f      	beq.n	801469a <USBD_CDC_ECM_DataIn+0xc2>
        ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801463a:	78fb      	ldrb	r3, [r7, #3]
 801463c:	f003 020f 	and.w	r2, r3, #15
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	4613      	mov	r3, r2
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	4413      	add	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	440b      	add	r3, r1
 801464c:	3318      	adds	r3, #24
 801464e:	681a      	ldr	r2, [r3, #0]
 8014650:	78fb      	ldrb	r3, [r7, #3]
 8014652:	f003 010f 	and.w	r1, r3, #15
 8014656:	68b8      	ldr	r0, [r7, #8]
 8014658:	460b      	mov	r3, r1
 801465a:	00db      	lsls	r3, r3, #3
 801465c:	440b      	add	r3, r1
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	4403      	add	r3, r0
 8014662:	331c      	adds	r3, #28
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	fbb2 f1f3 	udiv	r1, r2, r3
 801466a:	fb01 f303 	mul.w	r3, r1, r3
 801466e:	1ad3      	subs	r3, r2, r3
    if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014670:	2b00      	cmp	r3, #0
 8014672:	d112      	bne.n	801469a <USBD_CDC_ECM_DataIn+0xc2>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014674:	78fb      	ldrb	r3, [r7, #3]
 8014676:	f003 020f 	and.w	r2, r3, #15
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	4613      	mov	r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	4413      	add	r3, r2
 8014682:	009b      	lsls	r3, r3, #2
 8014684:	440b      	add	r3, r1
 8014686:	3318      	adds	r3, #24
 8014688:	2200      	movs	r2, #0
 801468a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801468c:	78f9      	ldrb	r1, [r7, #3]
 801468e:	2300      	movs	r3, #0
 8014690:	2200      	movs	r2, #0
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 ff95 	bl	80155c2 <USBD_LL_Transmit>
 8014698:	e039      	b.n	801470e <USBD_CDC_ECM_DataIn+0x136>
    }
    else
    {
      hcdc->TxState = 0U;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2200      	movs	r2, #0
 801469e:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
      if (((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	33b0      	adds	r3, #176	@ 0xb0
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	4413      	add	r3, r2
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	691b      	ldr	r3, [r3, #16]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d02a      	beq.n	801470e <USBD_CDC_ECM_DataIn+0x136>
      {
        ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer,
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	33b0      	adds	r3, #176	@ 0xb0
 80146c2:	009b      	lsls	r3, r3, #2
 80146c4:	4413      	add	r3, r2
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	691b      	ldr	r3, [r3, #16]
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	f8d2 07d8 	ldr.w	r0, [r2, #2008]	@ 0x7d8
 80146d0:	68fa      	ldr	r2, [r7, #12]
 80146d2:	f502 61fc 	add.w	r1, r2, #2016	@ 0x7e0
 80146d6:	78fa      	ldrb	r2, [r7, #3]
 80146d8:	4798      	blx	r3
 80146da:	e018      	b.n	801470e <USBD_CDC_ECM_DataIn+0x136>
                                                                                  &hcdc->TxLength, epnum);
      }
    }
  }
  else if (epnum == (ECMCmdEpAdd & 0x7FU))
 80146dc:	78fa      	ldrb	r2, [r7, #3]
 80146de:	4b0f      	ldr	r3, [pc, #60]	@ (801471c <USBD_CDC_ECM_DataIn+0x144>)
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d10f      	bne.n	801470a <USBD_CDC_ECM_DataIn+0x132>
  {
    if (hcdc->NotificationStatus != 0U)
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	@ 0x7f4
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00c      	beq.n	801470e <USBD_CDC_ECM_DataIn+0x136>
    {
      (void)USBD_CDC_ECM_SendNotification(pdev, CONNECTION_SPEED_CHANGE, 0U, (uint8_t *)ConnSpeedTab);
 80146f4:	4b0a      	ldr	r3, [pc, #40]	@ (8014720 <USBD_CDC_ECM_DataIn+0x148>)
 80146f6:	2200      	movs	r2, #0
 80146f8:	212a      	movs	r1, #42	@ 0x2a
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 fa4e 	bl	8014b9c <USBD_CDC_ECM_SendNotification>

      hcdc->NotificationStatus = 0U;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2200      	movs	r2, #0
 8014704:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
 8014708:	e001      	b.n	801470e <USBD_CDC_ECM_DataIn+0x136>
    }
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 801470a:	2303      	movs	r3, #3
 801470c:	e000      	b.n	8014710 <USBD_CDC_ECM_DataIn+0x138>
  }

  return (uint8_t)USBD_OK;
 801470e:	2300      	movs	r3, #0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	200000b7 	.word	0x200000b7
 801471c:	200000b9 	.word	0x200000b9
 8014720:	20000024 	.word	0x20000024

08014724 <USBD_CDC_ECM_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_ECM_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	460b      	mov	r3, r1
 801472e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	32b0      	adds	r2, #176	@ 0xb0
 801473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801473e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	32b0      	adds	r2, #176	@ 0xb0
 801474a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <USBD_CDC_ECM_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014752:	2303      	movs	r3, #3
 8014754:	e044      	b.n	80147e0 <USBD_CDC_ECM_DataOut+0xbc>
  }

  if (epnum == ECMOutEpAdd)
 8014756:	4b24      	ldr	r3, [pc, #144]	@ (80147e8 <USBD_CDC_ECM_DataOut+0xc4>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	78fa      	ldrb	r2, [r7, #3]
 801475c:	429a      	cmp	r2, r3
 801475e:	d13c      	bne.n	80147da <USBD_CDC_ECM_DataOut+0xb6>
  {
    /* Get the received data length */
    CurrPcktLen = USBD_LL_GetRxDataSize(pdev, epnum);
 8014760:	78fb      	ldrb	r3, [r7, #3]
 8014762:	4619      	mov	r1, r3
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 ff6e 	bl	8015646 <USBD_LL_GetRxDataSize>
 801476a:	60b8      	str	r0, [r7, #8]

    /* Increment the frame length */
    hcdc->RxLength += CurrPcktLen;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	@ 0x7dc
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	441a      	add	r2, r3
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc

    /* If the buffer size is less than max packet size: it is the last packet in current frame */
    if ((CurrPcktLen < hcdc->MaxPcktLen) || (hcdc->RxLength >= CDC_ECM_ETH_MAX_SEGSZE))
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014782:	68ba      	ldr	r2, [r7, #8]
 8014784:	429a      	cmp	r2, r3
 8014786:	d306      	bcc.n	8014796 <USBD_CDC_ECM_DataOut+0x72>
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
 801478e:	f240 52e9 	movw	r2, #1513	@ 0x5e9
 8014792:	4293      	cmp	r3, r2
 8014794:	d911      	bls.n	80147ba <USBD_CDC_ECM_DataOut+0x96>
      /* USB data will be immediately processed, this allow next USB traffic being
      NAKed till the end of the application Xfer */

      /* Process data by application (ie. copy to app buffer or notify user)
      hcdc->RxLength must be reset to zero at the end of the call of this function */
      ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	33b0      	adds	r3, #176	@ 0xb0
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	4413      	add	r3, r2
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	f8d2 07d4 	ldr.w	r0, [r2, #2004]	@ 0x7d4
 80147ae:	68fa      	ldr	r2, [r7, #12]
 80147b0:	f202 72dc 	addw	r2, r2, #2012	@ 0x7dc
 80147b4:	4611      	mov	r1, r2
 80147b6:	4798      	blx	r3
 80147b8:	e011      	b.n	80147de <USBD_CDC_ECM_DataOut+0xba>
    }
    else
    {
      /* Prepare Out endpoint to receive next packet in current/new frame */
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80147ba:	4b0b      	ldr	r3, [pc, #44]	@ (80147e8 <USBD_CDC_ECM_DataOut+0xc4>)
 80147bc:	7819      	ldrb	r1, [r3, #0]
                                   (uint8_t *)(hcdc->RxBuffer + hcdc->RxLength),
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	@ 0x7dc
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80147ca:	441a      	add	r2, r3
                                   hcdc->MaxPcktLen);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
      (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd,
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 ff16 	bl	8015604 <USBD_LL_PrepareReceive>
 80147d8:	e001      	b.n	80147de <USBD_CDC_ECM_DataOut+0xba>
    }
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80147da:	2303      	movs	r3, #3
 80147dc:	e000      	b.n	80147e0 <USBD_CDC_ECM_DataOut+0xbc>
  }

  return (uint8_t)USBD_OK;
 80147de:	2300      	movs	r3, #0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3710      	adds	r7, #16
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	200000b8 	.word	0x200000b8

080147ec <USBD_CDC_ECM_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_ECM_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	32b0      	adds	r2, #176	@ 0xb0
 80147fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014802:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d101      	bne.n	801480e <USBD_CDC_ECM_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801480a:	2303      	movs	r3, #3
 801480c:	e024      	b.n	8014858 <USBD_CDC_ECM_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	33b0      	adds	r3, #176	@ 0xb0
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	4413      	add	r3, r2
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d019      	beq.n	8014856 <USBD_CDC_ECM_EP0_RxReady+0x6a>
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f893 37d0 	ldrb.w	r3, [r3, #2000]	@ 0x7d0
 8014828:	2bff      	cmp	r3, #255	@ 0xff
 801482a:	d014      	beq.n	8014856 <USBD_CDC_ECM_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	33b0      	adds	r3, #176	@ 0xb0
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4413      	add	r3, r2
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	689b      	ldr	r3, [r3, #8]
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	f892 07d0 	ldrb.w	r0, [r2, #2000]	@ 0x7d0
                                                                         (uint8_t *)hcdc->data,
 8014844:	68f9      	ldr	r1, [r7, #12]
                                                                         (uint16_t)hcdc->CmdLength);
 8014846:	68fa      	ldr	r2, [r7, #12]
 8014848:	f892 27d1 	ldrb.w	r2, [r2, #2001]	@ 0x7d1
    ((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801484c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	22ff      	movs	r2, #255	@ 0xff
 8014852:	f883 27d0 	strb.w	r2, [r3, #2000]	@ 0x7d0

  }
  return (uint8_t)USBD_OK;
 8014856:	2300      	movs	r3, #0
}
 8014858:	4618      	mov	r0, r3
 801485a:	3710      	adds	r7, #16
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <USBD_CDC_ECM_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetFSCfgDesc(uint16_t *length)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b086      	sub	sp, #24
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 8014868:	2182      	movs	r1, #130	@ 0x82
 801486a:	4818      	ldr	r0, [pc, #96]	@ (80148cc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 801486c:	f7f0 fa5a 	bl	8004d24 <USBD_GetEpDesc>
 8014870:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 8014872:	2101      	movs	r1, #1
 8014874:	4815      	ldr	r0, [pc, #84]	@ (80148cc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 8014876:	f7f0 fa55 	bl	8004d24 <USBD_GetEpDesc>
 801487a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 801487c:	2181      	movs	r1, #129	@ 0x81
 801487e:	4813      	ldr	r0, [pc, #76]	@ (80148cc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
 8014880:	f7f0 fa50 	bl	8004d24 <USBD_GetEpDesc>
 8014884:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d002      	beq.n	8014892 <USBD_CDC_ECM_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_FS_BINTERVAL;
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	2210      	movs	r2, #16
 8014890:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d006      	beq.n	80148a6 <USBD_CDC_ECM_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	2200      	movs	r2, #0
 801489c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80148a0:	711a      	strb	r2, [r3, #4]
 80148a2:	2200      	movs	r2, #0
 80148a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d006      	beq.n	80148ba <USBD_CDC_ECM_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80148b4:	711a      	strb	r2, [r3, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	224f      	movs	r2, #79	@ 0x4f
 80148be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 80148c0:	4b02      	ldr	r3, [pc, #8]	@ (80148cc <USBD_CDC_ECM_GetFSCfgDesc+0x6c>)
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3718      	adds	r7, #24
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	20000068 	.word	0x20000068

080148d0 <USBD_CDC_ECM_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetHSCfgDesc(uint16_t *length)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b086      	sub	sp, #24
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 80148d8:	2182      	movs	r1, #130	@ 0x82
 80148da:	4818      	ldr	r0, [pc, #96]	@ (801493c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 80148dc:	f7f0 fa22 	bl	8004d24 <USBD_GetEpDesc>
 80148e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 80148e2:	2101      	movs	r1, #1
 80148e4:	4815      	ldr	r0, [pc, #84]	@ (801493c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 80148e6:	f7f0 fa1d 	bl	8004d24 <USBD_GetEpDesc>
 80148ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 80148ec:	2181      	movs	r1, #129	@ 0x81
 80148ee:	4813      	ldr	r0, [pc, #76]	@ (801493c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
 80148f0:	f7f0 fa18 	bl	8004d24 <USBD_GetEpDesc>
 80148f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d002      	beq.n	8014902 <USBD_CDC_ECM_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_HS_BINTERVAL;
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	2210      	movs	r2, #16
 8014900:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d006      	beq.n	8014916 <USBD_CDC_ECM_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_HS_MAX_PACKET_SIZE;
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	2200      	movs	r2, #0
 801490c:	711a      	strb	r2, [r3, #4]
 801490e:	2200      	movs	r2, #0
 8014910:	f042 0202 	orr.w	r2, r2, #2
 8014914:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d006      	beq.n	801492a <USBD_CDC_ECM_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_HS_MAX_PACKET_SIZE;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2200      	movs	r2, #0
 8014920:	711a      	strb	r2, [r3, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	f042 0202 	orr.w	r2, r2, #2
 8014928:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	224f      	movs	r2, #79	@ 0x4f
 801492e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 8014930:	4b02      	ldr	r3, [pc, #8]	@ (801493c <USBD_CDC_ECM_GetHSCfgDesc+0x6c>)
}
 8014932:	4618      	mov	r0, r3
 8014934:	3718      	adds	r7, #24
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	20000068 	.word	0x20000068

08014940 <USBD_CDC_ECM_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_ECM_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_CMD_EP);
 8014948:	2182      	movs	r1, #130	@ 0x82
 801494a:	4818      	ldr	r0, [pc, #96]	@ (80149ac <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 801494c:	f7f0 f9ea 	bl	8004d24 <USBD_GetEpDesc>
 8014950:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_OUT_EP);
 8014952:	2101      	movs	r1, #1
 8014954:	4815      	ldr	r0, [pc, #84]	@ (80149ac <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 8014956:	f7f0 f9e5 	bl	8004d24 <USBD_GetEpDesc>
 801495a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_ECM_CfgDesc, CDC_ECM_IN_EP);
 801495c:	2181      	movs	r1, #129	@ 0x81
 801495e:	4813      	ldr	r0, [pc, #76]	@ (80149ac <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
 8014960:	f7f0 f9e0 	bl	8004d24 <USBD_GetEpDesc>
 8014964:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d002      	beq.n	8014972 <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_ECM_FS_BINTERVAL;
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	2210      	movs	r2, #16
 8014970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d006      	beq.n	8014986 <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	2200      	movs	r2, #0
 801497c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014980:	711a      	strb	r2, [r3, #4]
 8014982:	2200      	movs	r2, #0
 8014984:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d006      	beq.n	801499a <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_ECM_DATA_FS_MAX_PACKET_SIZE;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	2200      	movs	r2, #0
 8014990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014994:	711a      	strb	r2, [r3, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t) sizeof(USBD_CDC_ECM_CfgDesc);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	224f      	movs	r2, #79	@ 0x4f
 801499e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_ECM_CfgDesc;
 80149a0:	4b02      	ldr	r3, [pc, #8]	@ (80149ac <USBD_CDC_ECM_GetOtherSpeedCfgDesc+0x6c>)
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3718      	adds	r7, #24
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	20000068 	.word	0x20000068

080149b0 <USBD_CDC_ECM_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_ECM_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80149b0:	b480      	push	{r7}
 80149b2:	b083      	sub	sp, #12
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_ECM_DeviceQualifierDesc);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	220a      	movs	r2, #10
 80149bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_ECM_DeviceQualifierDesc;
 80149be:	4b03      	ldr	r3, [pc, #12]	@ (80149cc <USBD_CDC_ECM_GetDeviceQualifierDescriptor+0x1c>)
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr
 80149cc:	20000018 	.word	0x20000018

080149d0 <USBD_CDC_ECM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ECM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ECM_ItfTypeDef *fops)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d101      	bne.n	80149e4 <USBD_CDC_ECM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80149e0:	2303      	movs	r3, #3
 80149e2:	e009      	b.n	80149f8 <USBD_CDC_ECM_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	33b0      	adds	r3, #176	@ 0xb0
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	4413      	add	r3, r2
 80149f2:	683a      	ldr	r2, [r7, #0]
 80149f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80149f6:	2300      	movs	r3, #0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	370c      	adds	r7, #12
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <USBD_CDC_ECM_USRStringDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_CDC_ECM_USRStringDescriptor(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	607a      	str	r2, [r7, #4]
 8014a10:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];

  /* Check if the requested string interface is supported */
  if (index == CDC_ECM_MAC_STRING_INDEX)
 8014a12:	7afb      	ldrb	r3, [r7, #11]
 8014a14:	2b06      	cmp	r3, #6
 8014a16:	d10f      	bne.n	8014a38 <USBD_CDC_ECM_USRStringDescriptor+0x34>
  {
    USBD_GetString((uint8_t *)((USBD_CDC_ECM_ItfTypeDef *)pdev->pUserData[pdev->classId])->pStrDesc,
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	33b0      	adds	r3, #176	@ 0xb0
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	4413      	add	r3, r2
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	699b      	ldr	r3, [r3, #24]
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	4905      	ldr	r1, [pc, #20]	@ (8014a44 <USBD_CDC_ECM_USRStringDescriptor+0x40>)
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7f0 ffe6 	bl	8005a00 <USBD_GetString>
                   USBD_StrDesc,
                   length);

    return USBD_StrDesc;
 8014a34:	4b03      	ldr	r3, [pc, #12]	@ (8014a44 <USBD_CDC_ECM_USRStringDescriptor+0x40>)
 8014a36:	e000      	b.n	8014a3a <USBD_CDC_ECM_USRStringDescriptor+0x36>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 8014a38:	2300      	movs	r3, #0
  }
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	20003fe0 	.word	0x20003fe0

08014a48 <USBD_CDC_ECM_SetTxBuffer>:
uint8_t USBD_CDC_ECM_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_ECM_SetTxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff, uint32_t length)
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b087      	sub	sp, #28
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	32b0      	adds	r2, #176	@ 0xb0
 8014a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d101      	bne.n	8014a6e <USBD_CDC_ECM_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014a6a:	2303      	movs	r3, #3
 8014a6c:	e008      	b.n	8014a80 <USBD_CDC_ECM_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014a6e:	697b      	ldr	r3, [r7, #20]
 8014a70:	68ba      	ldr	r2, [r7, #8]
 8014a72:	f8c3 27d8 	str.w	r2, [r3, #2008]	@ 0x7d8
  hcdc->TxLength = length;
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0

  return (uint8_t)USBD_OK;
 8014a7e:	2300      	movs	r3, #0
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	371c      	adds	r7, #28
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <USBD_CDC_ECM_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_ECM_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b085      	sub	sp, #20
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	32b0      	adds	r2, #176	@ 0xb0
 8014aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d101      	bne.n	8014ab0 <USBD_CDC_ECM_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014aac:	2303      	movs	r3, #3
 8014aae:	e004      	b.n	8014aba <USBD_CDC_ECM_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	f8c3 27d4 	str.w	r2, [r3, #2004]	@ 0x7d4

  return (uint8_t)USBD_OK;
 8014ab8:	2300      	movs	r3, #0
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
	...

08014ac8 <USBD_CDC_ECM_TransmitPacket>:
uint8_t USBD_CDC_ECM_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_ECM_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	32b0      	adds	r2, #176	@ 0xb0
 8014ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ade:	60bb      	str	r3, [r7, #8]
#endif /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d101      	bne.n	8014aee <USBD_CDC_ECM_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014aea:	2303      	movs	r3, #3
 8014aec:	e025      	b.n	8014b3a <USBD_CDC_ECM_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d11f      	bne.n	8014b38 <USBD_CDC_ECM_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	2201      	movs	r2, #1
 8014afc:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4

    /* Update the packet total length */
    pdev->ep_in[ECMInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014b00:	4b10      	ldr	r3, [pc, #64]	@ (8014b44 <USBD_CDC_ECM_TransmitPacket+0x7c>)
 8014b02:	781b      	ldrb	r3, [r3, #0]
 8014b04:	f003 020f 	and.w	r2, r3, #15
 8014b08:	68bb      	ldr	r3, [r7, #8]
 8014b0a:	f8d3 17e0 	ldr.w	r1, [r3, #2016]	@ 0x7e0
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	4613      	mov	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	4413      	add	r3, r2
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	4403      	add	r3, r0
 8014b1a:	3318      	adds	r3, #24
 8014b1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, ECMInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014b1e:	4b09      	ldr	r3, [pc, #36]	@ (8014b44 <USBD_CDC_ECM_TransmitPacket+0x7c>)
 8014b20:	7819      	ldrb	r1, [r3, #0]
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	@ 0x7d8
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	f8d3 37e0 	ldr.w	r3, [r3, #2016]	@ 0x7e0
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fd47 	bl	80155c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014b34:	2300      	movs	r3, #0
 8014b36:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	200000b7 	.word	0x200000b7

08014b48 <USBD_CDC_ECM_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ECM_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b084      	sub	sp, #16
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	32b0      	adds	r2, #176	@ 0xb0
 8014b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  ECMOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	32b0      	adds	r2, #176	@ 0xb0
 8014b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d101      	bne.n	8014b76 <USBD_CDC_ECM_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014b72:	2303      	movs	r3, #3
 8014b74:	e00b      	b.n	8014b8e <USBD_CDC_ECM_ReceivePacket+0x46>
  }

  /* Prepare Out endpoint to receive next packet */
  (void)USBD_LL_PrepareReceive(pdev, ECMOutEpAdd, hcdc->RxBuffer, hcdc->MaxPcktLen);
 8014b76:	4b08      	ldr	r3, [pc, #32]	@ (8014b98 <USBD_CDC_ECM_ReceivePacket+0x50>)
 8014b78:	7819      	ldrb	r1, [r3, #0]
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f8d3 27d4 	ldr.w	r2, [r3, #2004]	@ 0x7d4
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f000 fd3c 	bl	8015604 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8014b8c:	2300      	movs	r3, #0
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	200000b8 	.word	0x200000b8

08014b9c <USBD_CDC_ECM_SendNotification>:
  * @retval status
  */
uint8_t USBD_CDC_ECM_SendNotification(USBD_HandleTypeDef *pdev,
                                      USBD_CDC_NotifCodeTypeDef Notif,
                                      uint16_t bVal, uint8_t *pData)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b088      	sub	sp, #32
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	607b      	str	r3, [r7, #4]
 8014ba6:	460b      	mov	r3, r1
 8014ba8:	72fb      	strb	r3, [r7, #11]
 8014baa:	4613      	mov	r3, r2
 8014bac:	813b      	strh	r3, [r7, #8]
  uint32_t Idx;
  uint32_t ReqSize = 0U;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	61bb      	str	r3, [r7, #24]
  USBD_CDC_ECM_HandleTypeDef *hcdc = (USBD_CDC_ECM_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	32b0      	adds	r2, #176	@ 0xb0
 8014bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bc0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <USBD_CDC_ECM_SendNotification+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	e088      	b.n	8014ce2 <USBD_CDC_ECM_SendNotification+0x146>
  /* Get the Endpoints addresses allocated for this class instance */
  ECMCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Initialize the request fields */
  (hcdc->Req).bmRequest = CDC_ECM_BMREQUEST_TYPE_ECM;
 8014bd0:	693b      	ldr	r3, [r7, #16]
 8014bd2:	22a1      	movs	r2, #161	@ 0xa1
 8014bd4:	f883 27f8 	strb.w	r2, [r3, #2040]	@ 0x7f8
  (hcdc->Req).bRequest = (uint8_t)Notif;
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	7afa      	ldrb	r2, [r7, #11]
 8014bdc:	f883 27f9 	strb.w	r2, [r3, #2041]	@ 0x7f9

  switch ((hcdc->Req).bRequest)
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	f893 37f9 	ldrb.w	r3, [r3, #2041]	@ 0x7f9
 8014be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014be8:	d044      	beq.n	8014c74 <USBD_CDC_ECM_SendNotification+0xd8>
 8014bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bec:	dc68      	bgt.n	8014cc0 <USBD_CDC_ECM_SendNotification+0x124>
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d002      	beq.n	8014bf8 <USBD_CDC_ECM_SendNotification+0x5c>
 8014bf2:	2b01      	cmp	r3, #1
 8014bf4:	d01f      	beq.n	8014c36 <USBD_CDC_ECM_SendNotification+0x9a>
 8014bf6:	e063      	b.n	8014cc0 <USBD_CDC_ECM_SendNotification+0x124>
  {
    case NETWORK_CONNECTION:
      (hcdc->Req).wValue = bVal;
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	893a      	ldrh	r2, [r7, #8]
 8014bfc:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	2200      	movs	r2, #0
 8014c04:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0U;
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe

      for (Idx = 0U; Idx < 8U; Idx++)
 8014c10:	2300      	movs	r3, #0
 8014c12:	61fb      	str	r3, [r7, #28]
 8014c14:	e009      	b.n	8014c2a <USBD_CDC_ECM_SendNotification+0x8e>
      {
        (hcdc->Req).data[Idx] = 0U;
 8014c16:	693a      	ldr	r2, [r7, #16]
 8014c18:	69fb      	ldr	r3, [r7, #28]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c20:	2200      	movs	r2, #0
 8014c22:	701a      	strb	r2, [r3, #0]
      for (Idx = 0U; Idx < 8U; Idx++)
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	3301      	adds	r3, #1
 8014c28:	61fb      	str	r3, [r7, #28]
 8014c2a:	69fb      	ldr	r3, [r7, #28]
 8014c2c:	2b07      	cmp	r3, #7
 8014c2e:	d9f2      	bls.n	8014c16 <USBD_CDC_ECM_SendNotification+0x7a>
      }
      ReqSize = 8U;
 8014c30:	2308      	movs	r3, #8
 8014c32:	61bb      	str	r3, [r7, #24]
      break;
 8014c34:	e048      	b.n	8014cc8 <USBD_CDC_ECM_SendNotification+0x12c>

    case RESPONSE_AVAILABLE:
      (hcdc->Req).wValue = 0U;
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014c3e:	693b      	ldr	r3, [r7, #16]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0U;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe
      for (Idx = 0U; Idx < 8U; Idx++)
 8014c4e:	2300      	movs	r3, #0
 8014c50:	61fb      	str	r3, [r7, #28]
 8014c52:	e009      	b.n	8014c68 <USBD_CDC_ECM_SendNotification+0xcc>
      {
        (hcdc->Req).data[Idx] = 0U;
 8014c54:	693a      	ldr	r2, [r7, #16]
 8014c56:	69fb      	ldr	r3, [r7, #28]
 8014c58:	4413      	add	r3, r2
 8014c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c5e:	2200      	movs	r2, #0
 8014c60:	701a      	strb	r2, [r3, #0]
      for (Idx = 0U; Idx < 8U; Idx++)
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	3301      	adds	r3, #1
 8014c66:	61fb      	str	r3, [r7, #28]
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	2b07      	cmp	r3, #7
 8014c6c:	d9f2      	bls.n	8014c54 <USBD_CDC_ECM_SendNotification+0xb8>
      }
      ReqSize = 8U;
 8014c6e:	2308      	movs	r3, #8
 8014c70:	61bb      	str	r3, [r7, #24]
      break;
 8014c72:	e029      	b.n	8014cc8 <USBD_CDC_ECM_SendNotification+0x12c>

    case CONNECTION_SPEED_CHANGE:
      (hcdc->Req).wValue = 0U;
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	2200      	movs	r2, #0
 8014c78:	f8a3 27fa 	strh.w	r2, [r3, #2042]	@ 0x7fa
      (hcdc->Req).wIndex = CDC_ECM_CMD_ITF_NBR;
 8014c7c:	693b      	ldr	r3, [r7, #16]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	f8a3 27fc 	strh.w	r2, [r3, #2044]	@ 0x7fc
      (hcdc->Req).wLength = 0x0008U;
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	2208      	movs	r2, #8
 8014c88:	f8a3 27fe 	strh.w	r2, [r3, #2046]	@ 0x7fe
      ReqSize = 16U;
 8014c8c:	2310      	movs	r3, #16
 8014c8e:	61bb      	str	r3, [r7, #24]

      /* Check pointer to data buffer */
      if (pData != NULL)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d017      	beq.n	8014cc6 <USBD_CDC_ECM_SendNotification+0x12a>
      {
        for (Idx = 0U; Idx < 8U; Idx++)
 8014c96:	2300      	movs	r3, #0
 8014c98:	61fb      	str	r3, [r7, #28]
 8014c9a:	e00d      	b.n	8014cb8 <USBD_CDC_ECM_SendNotification+0x11c>
        {
          (hcdc->Req).data[Idx] = pData[Idx];
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	7819      	ldrb	r1, [r3, #0]
 8014ca4:	693a      	ldr	r2, [r7, #16]
 8014ca6:	69fb      	ldr	r3, [r7, #28]
 8014ca8:	4413      	add	r3, r2
 8014caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cae:	460a      	mov	r2, r1
 8014cb0:	701a      	strb	r2, [r3, #0]
        for (Idx = 0U; Idx < 8U; Idx++)
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	61fb      	str	r3, [r7, #28]
 8014cb8:	69fb      	ldr	r3, [r7, #28]
 8014cba:	2b07      	cmp	r3, #7
 8014cbc:	d9ee      	bls.n	8014c9c <USBD_CDC_ECM_SendNotification+0x100>
        }
      }
      break;
 8014cbe:	e002      	b.n	8014cc6 <USBD_CDC_ECM_SendNotification+0x12a>

    default:
      ret = USBD_FAIL;
 8014cc0:	2303      	movs	r3, #3
 8014cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8014cc4:	e000      	b.n	8014cc8 <USBD_CDC_ECM_SendNotification+0x12c>
      break;
 8014cc6:	bf00      	nop
  }

  /* Transmit notification packet */
  if (ReqSize != 0U)
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d008      	beq.n	8014ce0 <USBD_CDC_ECM_SendNotification+0x144>
  {
    (void)USBD_LL_Transmit(pdev, ECMCmdEpAdd, (uint8_t *)&hcdc->Req, ReqSize);
 8014cce:	4b07      	ldr	r3, [pc, #28]	@ (8014cec <USBD_CDC_ECM_SendNotification+0x150>)
 8014cd0:	7819      	ldrb	r1, [r3, #0]
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	f503 62ff 	add.w	r2, r3, #2040	@ 0x7f8
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f000 fc71 	bl	80155c2 <USBD_LL_Transmit>
  }

  return (uint8_t)ret;
 8014ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3720      	adds	r7, #32
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	200000b9 	.word	0x200000b9

08014cf0 <CDC_ECM_Itf_Init>:
  *         Initializes the CDC_ECM media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Init(void)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	af00      	add	r7, sp, #0
  if (CDC_ECMInitialized == 0U)
 8014cf4:	4b09      	ldr	r3, [pc, #36]	@ (8014d1c <CDC_ECM_Itf_Init+0x2c>)
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d102      	bne.n	8014d02 <CDC_ECM_Itf_Init+0x12>
  {
    /*
      Initialize the TCP/IP stack here
    */

    CDC_ECMInitialized = 1U;
 8014cfc:	4b07      	ldr	r3, [pc, #28]	@ (8014d1c <CDC_ECM_Itf_Init+0x2c>)
 8014cfe:	2201      	movs	r2, #1
 8014d00:	701a      	strb	r2, [r3, #0]

  /* Set Application Buffers */
#ifdef USE_USBD_COMPOSITE
  (void)USBD_CDC_ECM_SetTxBuffer(&USBD_Device, UserTxBuffer, 0U, 0U);
#else
  (void)USBD_CDC_ECM_SetTxBuffer(&USBD_Device, UserTxBuffer, 0U);
 8014d02:	2200      	movs	r2, #0
 8014d04:	4906      	ldr	r1, [pc, #24]	@ (8014d20 <CDC_ECM_Itf_Init+0x30>)
 8014d06:	4807      	ldr	r0, [pc, #28]	@ (8014d24 <CDC_ECM_Itf_Init+0x34>)
 8014d08:	f7ff fe9e 	bl	8014a48 <USBD_CDC_ECM_SetTxBuffer>
#endif /* USE_USBD_COMPOSITE */
  (void)USBD_CDC_ECM_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8014d0c:	4906      	ldr	r1, [pc, #24]	@ (8014d28 <CDC_ECM_Itf_Init+0x38>)
 8014d0e:	4805      	ldr	r0, [pc, #20]	@ (8014d24 <CDC_ECM_Itf_Init+0x34>)
 8014d10:	f7ff febc 	bl	8014a8c <USBD_CDC_ECM_SetRxBuffer>

  return (0);
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	20004d7e 	.word	0x20004d7e
 8014d20:	20004730 	.word	0x20004730
 8014d24:	20003d04 	.word	0x20003d04
 8014d28:	200040e0 	.word	0x200040e0

08014d2c <CDC_ECM_Itf_DeInit>:
  *         DeInitializes the CDC_ECM media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_DeInit(void)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *) \
                                             (USBD_Device.pClassDataCmsit[USBD_Device.classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(USBD_Device.pClassData);
 8014d32:	4b07      	ldr	r3, [pc, #28]	@ (8014d50 <CDC_ECM_Itf_DeInit+0x24>)
 8014d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014d38:	607b      	str	r3, [r7, #4]
#endif /* USE_USBD_COMPOSITE */

  /* Notify application layer that link is down */
  hcdc_cdc_ecm->LinkStatus = 0U;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0

  return (0);
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	370c      	adds	r7, #12
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4e:	4770      	bx	lr
 8014d50:	20003d04 	.word	0x20003d04

08014d54 <CDC_ECM_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b084      	sub	sp, #16
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	6039      	str	r1, [r7, #0]
 8014d5e:	71fb      	strb	r3, [r7, #7]
 8014d60:	4613      	mov	r3, r2
 8014d62:	80bb      	strh	r3, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *) \
                                             (USBD_Device.pClassDataCmsit[USBD_Device.classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(USBD_Device.pClassData);
 8014d64:	4b24      	ldr	r3, [pc, #144]	@ (8014df8 <CDC_ECM_Itf_Control+0xa4>)
 8014d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014d6a:	60fb      	str	r3, [r7, #12]
#endif /* USE_USBD_COMPOSITE */

  switch (cmd)
 8014d6c:	79fb      	ldrb	r3, [r7, #7]
 8014d6e:	2b44      	cmp	r3, #68	@ 0x44
 8014d70:	dc35      	bgt.n	8014dde <CDC_ECM_Itf_Control+0x8a>
 8014d72:	2b40      	cmp	r3, #64	@ 0x40
 8014d74:	da04      	bge.n	8014d80 <CDC_ECM_Itf_Control+0x2c>
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d033      	beq.n	8014de2 <CDC_ECM_Itf_Control+0x8e>
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d033      	beq.n	8014de6 <CDC_ECM_Itf_Control+0x92>
    case CDC_ECM_GET_ETH_STATISTIC:
      /* Add your code here */
      break;

    default:
      break;
 8014d7e:	e02e      	b.n	8014dde <CDC_ECM_Itf_Control+0x8a>
  switch (cmd)
 8014d80:	3b40      	subs	r3, #64	@ 0x40
 8014d82:	2b04      	cmp	r3, #4
 8014d84:	d82b      	bhi.n	8014dde <CDC_ECM_Itf_Control+0x8a>
 8014d86:	a201      	add	r2, pc, #4	@ (adr r2, 8014d8c <CDC_ECM_Itf_Control+0x38>)
 8014d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d8c:	08014ddf 	.word	0x08014ddf
 8014d90:	08014ddf 	.word	0x08014ddf
 8014d94:	08014ddf 	.word	0x08014ddf
 8014d98:	08014da1 	.word	0x08014da1
 8014d9c:	08014ddf 	.word	0x08014ddf
      if (hcdc_cdc_ecm->LinkStatus == 0U)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d11f      	bne.n	8014dea <CDC_ECM_Itf_Control+0x96>
        hcdc_cdc_ecm->LinkStatus = 1U;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2201      	movs	r2, #1
 8014dae:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0
        if (hcdc_cdc_ecm->NotificationStatus == 0U)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f8d3 37f4 	ldr.w	r3, [r3, #2036]	@ 0x7f4
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d116      	bne.n	8014dea <CDC_ECM_Itf_Control+0x96>
          (void)USBD_CDC_ECM_SendNotification(&USBD_Device, NETWORK_CONNECTION,
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	480d      	ldr	r0, [pc, #52]	@ (8014df8 <CDC_ECM_Itf_Control+0xa4>)
 8014dc4:	f7ff feea 	bl	8014b9c <USBD_CDC_ECM_SendNotification>
          (void)USBD_CDC_ECM_SendNotification(&USBD_Device, CONNECTION_SPEED_CHANGE, 0, NULL);
 8014dc8:	2300      	movs	r3, #0
 8014dca:	2200      	movs	r2, #0
 8014dcc:	212a      	movs	r1, #42	@ 0x2a
 8014dce:	480a      	ldr	r0, [pc, #40]	@ (8014df8 <CDC_ECM_Itf_Control+0xa4>)
 8014dd0:	f7ff fee4 	bl	8014b9c <USBD_CDC_ECM_SendNotification>
          hcdc_cdc_ecm->NotificationStatus = 1U;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
      break;
 8014ddc:	e005      	b.n	8014dea <CDC_ECM_Itf_Control+0x96>
      break;
 8014dde:	bf00      	nop
 8014de0:	e004      	b.n	8014dec <CDC_ECM_Itf_Control+0x98>
      break;
 8014de2:	bf00      	nop
 8014de4:	e002      	b.n	8014dec <CDC_ECM_Itf_Control+0x98>
      break;
 8014de6:	bf00      	nop
 8014de8:	e000      	b.n	8014dec <CDC_ECM_Itf_Control+0x98>
      break;
 8014dea:	bf00      	nop
  }
  UNUSED(length);
  UNUSED(pbuf);

  return (0);
 8014dec:	2300      	movs	r3, #0
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	20003d04 	.word	0x20003d04

08014dfc <CDC_ECM_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Receive(uint8_t *Buf, uint32_t *Len)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b084      	sub	sp, #16
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
    struct pbuf *p;

    /* Allocate a pbuf */
    p = pbuf_alloc(PBUF_RAW, *Len, PBUF_POOL);
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8014e10:	4619      	mov	r1, r3
 8014e12:	2000      	movs	r0, #0
 8014e14:	f7f2 fe0c 	bl	8007a30 <pbuf_alloc>
 8014e18:	60f8      	str	r0, [r7, #12]

    if (p != NULL)
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d012      	beq.n	8014e46 <CDC_ECM_Itf_Receive+0x4a>
    {
        /* Copy data into pbuf */
        pbuf_take(p, Buf, *Len);
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	461a      	mov	r2, r3
 8014e28:	6879      	ldr	r1, [r7, #4]
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	f7f3 fb96 	bl	800855c <pbuf_take>

        /* Pass the packet to the LwIP stack */
        if (gnetif.input(p, &gnetif) != ERR_OK)
 8014e30:	4b09      	ldr	r3, [pc, #36]	@ (8014e58 <CDC_ECM_Itf_Receive+0x5c>)
 8014e32:	691b      	ldr	r3, [r3, #16]
 8014e34:	4908      	ldr	r1, [pc, #32]	@ (8014e58 <CDC_ECM_Itf_Receive+0x5c>)
 8014e36:	68f8      	ldr	r0, [r7, #12]
 8014e38:	4798      	blx	r3
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d002      	beq.n	8014e46 <CDC_ECM_Itf_Receive+0x4a>
        {
            pbuf_free(p);
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f7f3 f8d7 	bl	8007ff4 <pbuf_free>
        }
    }

    /* Prepare OUT endpoint to receive next packet */
    USBD_CDC_ECM_ReceivePacket(&hUsbDeviceFS);
 8014e46:	4805      	ldr	r0, [pc, #20]	@ (8014e5c <CDC_ECM_Itf_Receive+0x60>)
 8014e48:	f7ff fe7e 	bl	8014b48 <USBD_CDC_ECM_ReceivePacket>

    return (USBD_OK);
 8014e4c:	2300      	movs	r3, #0
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3710      	adds	r7, #16
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	200001a0 	.word	0x200001a0
 8014e5c:	20003d04 	.word	0x20003d04

08014e60 <CDC_ECM_Itf_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b085      	sub	sp, #20
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 8014e6e:	2300      	movs	r3, #0
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3714      	adds	r7, #20
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <CDC_ECM_Itf_Process>:
  *         through this function.
  * @param  pdef: pointer to the USB Device Handle
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_ECM_Itf_Process(USBD_HandleTypeDef *pdev)
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b085      	sub	sp, #20
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  /* Get the CDC_ECM handler pointer */
#ifdef USE_USBD_COMPOSITE
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(pdev->pClassDataCmsit[pdev->classId]);
#else
  USBD_CDC_ECM_HandleTypeDef *hcdc_cdc_ecm = (USBD_CDC_ECM_HandleTypeDef *)(pdev->pClassData);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014e8a:	60fb      	str	r3, [r7, #12]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc_cdc_ecm == NULL)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d102      	bne.n	8014e98 <CDC_ECM_Itf_Process+0x1c>
  {
    return (-1);
 8014e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014e96:	e003      	b.n	8014ea0 <CDC_ECM_Itf_Process+0x24>
  }

  if (hcdc_cdc_ecm->LinkStatus != 0U)
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
      to the lwIP for handling
      Call here the TCP/IP background tasks.
    */
  }

  return (0);
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3714      	adds	r7, #20
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr

08014eac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	6039      	str	r1, [r7, #0]
 8014eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2212      	movs	r2, #18
 8014ebc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014ebe:	4b03      	ldr	r3, [pc, #12]	@ (8014ecc <USBD_FS_DeviceDescriptor+0x20>)
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	200000f4 	.word	0x200000f4

08014ed0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	6039      	str	r1, [r7, #0]
 8014eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	2204      	movs	r2, #4
 8014ee0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014ee2:	4b03      	ldr	r3, [pc, #12]	@ (8014ef0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr
 8014ef0:	20000108 	.word	0x20000108

08014ef4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	4603      	mov	r3, r0
 8014efc:	6039      	str	r1, [r7, #0]
 8014efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014f00:	79fb      	ldrb	r3, [r7, #7]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d105      	bne.n	8014f12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	4907      	ldr	r1, [pc, #28]	@ (8014f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8014f0a:	4808      	ldr	r0, [pc, #32]	@ (8014f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8014f0c:	f7f0 fd78 	bl	8005a00 <USBD_GetString>
 8014f10:	e004      	b.n	8014f1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014f12:	683a      	ldr	r2, [r7, #0]
 8014f14:	4904      	ldr	r1, [pc, #16]	@ (8014f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8014f16:	4805      	ldr	r0, [pc, #20]	@ (8014f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8014f18:	f7f0 fd72 	bl	8005a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014f1c:	4b02      	ldr	r3, [pc, #8]	@ (8014f28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	20004d80 	.word	0x20004d80
 8014f2c:	080195c8 	.word	0x080195c8

08014f30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	4603      	mov	r3, r0
 8014f38:	6039      	str	r1, [r7, #0]
 8014f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014f3c:	683a      	ldr	r2, [r7, #0]
 8014f3e:	4904      	ldr	r1, [pc, #16]	@ (8014f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014f40:	4804      	ldr	r0, [pc, #16]	@ (8014f54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014f42:	f7f0 fd5d 	bl	8005a00 <USBD_GetString>
  return USBD_StrDesc;
 8014f46:	4b02      	ldr	r3, [pc, #8]	@ (8014f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	20004d80 	.word	0x20004d80
 8014f54:	080195e0 	.word	0x080195e0

08014f58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	4603      	mov	r3, r0
 8014f60:	6039      	str	r1, [r7, #0]
 8014f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	221a      	movs	r2, #26
 8014f68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014f6a:	f000 f843 	bl	8014ff4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014f6e:	4b02      	ldr	r3, [pc, #8]	@ (8014f78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	2000010c 	.word	0x2000010c

08014f7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	4603      	mov	r3, r0
 8014f84:	6039      	str	r1, [r7, #0]
 8014f86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014f88:	79fb      	ldrb	r3, [r7, #7]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d105      	bne.n	8014f9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014f8e:	683a      	ldr	r2, [r7, #0]
 8014f90:	4907      	ldr	r1, [pc, #28]	@ (8014fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014f92:	4808      	ldr	r0, [pc, #32]	@ (8014fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014f94:	f7f0 fd34 	bl	8005a00 <USBD_GetString>
 8014f98:	e004      	b.n	8014fa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014f9a:	683a      	ldr	r2, [r7, #0]
 8014f9c:	4904      	ldr	r1, [pc, #16]	@ (8014fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014f9e:	4805      	ldr	r0, [pc, #20]	@ (8014fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014fa0:	f7f0 fd2e 	bl	8005a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014fa4:	4b02      	ldr	r3, [pc, #8]	@ (8014fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3708      	adds	r7, #8
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	20004d80 	.word	0x20004d80
 8014fb4:	080195f4 	.word	0x080195f4

08014fb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	6039      	str	r1, [r7, #0]
 8014fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014fc4:	79fb      	ldrb	r3, [r7, #7]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d105      	bne.n	8014fd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014fca:	683a      	ldr	r2, [r7, #0]
 8014fcc:	4907      	ldr	r1, [pc, #28]	@ (8014fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014fce:	4808      	ldr	r0, [pc, #32]	@ (8014ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014fd0:	f7f0 fd16 	bl	8005a00 <USBD_GetString>
 8014fd4:	e004      	b.n	8014fe0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	4904      	ldr	r1, [pc, #16]	@ (8014fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014fda:	4805      	ldr	r0, [pc, #20]	@ (8014ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014fdc:	f7f0 fd10 	bl	8005a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014fe0:	4b02      	ldr	r3, [pc, #8]	@ (8014fec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3708      	adds	r7, #8
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	20004d80 	.word	0x20004d80
 8014ff0:	08019600 	.word	0x08019600

08014ff4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8015038 <Get_SerialNum+0x44>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015000:	4b0e      	ldr	r3, [pc, #56]	@ (801503c <Get_SerialNum+0x48>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015006:	4b0e      	ldr	r3, [pc, #56]	@ (8015040 <Get_SerialNum+0x4c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4413      	add	r3, r2
 8015012:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d009      	beq.n	801502e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801501a:	2208      	movs	r2, #8
 801501c:	4909      	ldr	r1, [pc, #36]	@ (8015044 <Get_SerialNum+0x50>)
 801501e:	68f8      	ldr	r0, [r7, #12]
 8015020:	f000 f814 	bl	801504c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015024:	2204      	movs	r2, #4
 8015026:	4908      	ldr	r1, [pc, #32]	@ (8015048 <Get_SerialNum+0x54>)
 8015028:	68b8      	ldr	r0, [r7, #8]
 801502a:	f000 f80f 	bl	801504c <IntToUnicode>
  }
}
 801502e:	bf00      	nop
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	1fff7a10 	.word	0x1fff7a10
 801503c:	1fff7a14 	.word	0x1fff7a14
 8015040:	1fff7a18 	.word	0x1fff7a18
 8015044:	2000010e 	.word	0x2000010e
 8015048:	2000011e 	.word	0x2000011e

0801504c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801504c:	b480      	push	{r7}
 801504e:	b087      	sub	sp, #28
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	4613      	mov	r3, r2
 8015058:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801505a:	2300      	movs	r3, #0
 801505c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801505e:	2300      	movs	r3, #0
 8015060:	75fb      	strb	r3, [r7, #23]
 8015062:	e027      	b.n	80150b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	0f1b      	lsrs	r3, r3, #28
 8015068:	2b09      	cmp	r3, #9
 801506a:	d80b      	bhi.n	8015084 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	0f1b      	lsrs	r3, r3, #28
 8015070:	b2da      	uxtb	r2, r3
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	005b      	lsls	r3, r3, #1
 8015076:	4619      	mov	r1, r3
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	440b      	add	r3, r1
 801507c:	3230      	adds	r2, #48	@ 0x30
 801507e:	b2d2      	uxtb	r2, r2
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	e00a      	b.n	801509a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	0f1b      	lsrs	r3, r3, #28
 8015088:	b2da      	uxtb	r2, r3
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	005b      	lsls	r3, r3, #1
 801508e:	4619      	mov	r1, r3
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	440b      	add	r3, r1
 8015094:	3237      	adds	r2, #55	@ 0x37
 8015096:	b2d2      	uxtb	r2, r2
 8015098:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	011b      	lsls	r3, r3, #4
 801509e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80150a0:	7dfb      	ldrb	r3, [r7, #23]
 80150a2:	005b      	lsls	r3, r3, #1
 80150a4:	3301      	adds	r3, #1
 80150a6:	68ba      	ldr	r2, [r7, #8]
 80150a8:	4413      	add	r3, r2
 80150aa:	2200      	movs	r2, #0
 80150ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80150ae:	7dfb      	ldrb	r3, [r7, #23]
 80150b0:	3301      	adds	r3, #1
 80150b2:	75fb      	strb	r3, [r7, #23]
 80150b4:	7dfa      	ldrb	r2, [r7, #23]
 80150b6:	79fb      	ldrb	r3, [r7, #7]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d3d3      	bcc.n	8015064 <IntToUnicode+0x18>
  }
}
 80150bc:	bf00      	nop
 80150be:	bf00      	nop
 80150c0:	371c      	adds	r7, #28
 80150c2:	46bd      	mov	sp, r7
 80150c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c8:	4770      	bx	lr
	...

080150cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b08a      	sub	sp, #40	@ 0x28
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80150d4:	f107 0314 	add.w	r3, r7, #20
 80150d8:	2200      	movs	r2, #0
 80150da:	601a      	str	r2, [r3, #0]
 80150dc:	605a      	str	r2, [r3, #4]
 80150de:	609a      	str	r2, [r3, #8]
 80150e0:	60da      	str	r2, [r3, #12]
 80150e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80150ec:	d13a      	bne.n	8015164 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80150ee:	2300      	movs	r3, #0
 80150f0:	613b      	str	r3, [r7, #16]
 80150f2:	4b1e      	ldr	r3, [pc, #120]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 80150f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80150f6:	4a1d      	ldr	r2, [pc, #116]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 80150f8:	f043 0301 	orr.w	r3, r3, #1
 80150fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80150fe:	4b1b      	ldr	r3, [pc, #108]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 8015100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015102:	f003 0301 	and.w	r3, r3, #1
 8015106:	613b      	str	r3, [r7, #16]
 8015108:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801510a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801510e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015110:	2302      	movs	r3, #2
 8015112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015114:	2300      	movs	r3, #0
 8015116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015118:	2303      	movs	r3, #3
 801511a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801511c:	230a      	movs	r3, #10
 801511e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015120:	f107 0314 	add.w	r3, r7, #20
 8015124:	4619      	mov	r1, r3
 8015126:	4812      	ldr	r0, [pc, #72]	@ (8015170 <HAL_PCD_MspInit+0xa4>)
 8015128:	f7eb fe6e 	bl	8000e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801512c:	4b0f      	ldr	r3, [pc, #60]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 801512e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015130:	4a0e      	ldr	r2, [pc, #56]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 8015132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015136:	6353      	str	r3, [r2, #52]	@ 0x34
 8015138:	2300      	movs	r3, #0
 801513a:	60fb      	str	r3, [r7, #12]
 801513c:	4b0b      	ldr	r3, [pc, #44]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 801513e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015140:	4a0a      	ldr	r2, [pc, #40]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 8015142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015146:	6453      	str	r3, [r2, #68]	@ 0x44
 8015148:	4b08      	ldr	r3, [pc, #32]	@ (801516c <HAL_PCD_MspInit+0xa0>)
 801514a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801514c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015150:	60fb      	str	r3, [r7, #12]
 8015152:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015154:	2200      	movs	r2, #0
 8015156:	2100      	movs	r1, #0
 8015158:	2043      	movs	r0, #67	@ 0x43
 801515a:	f7eb fe1e 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801515e:	2043      	movs	r0, #67	@ 0x43
 8015160:	f7eb fe37 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015164:	bf00      	nop
 8015166:	3728      	adds	r7, #40	@ 0x28
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	40023800 	.word	0x40023800
 8015170:	40020000 	.word	0x40020000

08015174 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015188:	4619      	mov	r1, r3
 801518a:	4610      	mov	r0, r2
 801518c:	f7ef faae 	bl	80046ec <USBD_LL_SetupStage>
}
 8015190:	bf00      	nop
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	460b      	mov	r3, r1
 80151a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80151aa:	78fa      	ldrb	r2, [r7, #3]
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	4613      	mov	r3, r2
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	4413      	add	r3, r2
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	440b      	add	r3, r1
 80151b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	78fb      	ldrb	r3, [r7, #3]
 80151c0:	4619      	mov	r1, r3
 80151c2:	f7ef fae8 	bl	8004796 <USBD_LL_DataOutStage>
}
 80151c6:	bf00      	nop
 80151c8:	3708      	adds	r7, #8
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}

080151ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
 80151d6:	460b      	mov	r3, r1
 80151d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80151e0:	78fa      	ldrb	r2, [r7, #3]
 80151e2:	6879      	ldr	r1, [r7, #4]
 80151e4:	4613      	mov	r3, r2
 80151e6:	00db      	lsls	r3, r3, #3
 80151e8:	4413      	add	r3, r2
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	440b      	add	r3, r1
 80151ee:	3320      	adds	r3, #32
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	78fb      	ldrb	r3, [r7, #3]
 80151f4:	4619      	mov	r1, r3
 80151f6:	f7ef fb81 	bl	80048fc <USBD_LL_DataInStage>
}
 80151fa:	bf00      	nop
 80151fc:	3708      	adds	r7, #8
 80151fe:	46bd      	mov	sp, r7
 8015200:	bd80      	pop	{r7, pc}

08015202 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015202:	b580      	push	{r7, lr}
 8015204:	b082      	sub	sp, #8
 8015206:	af00      	add	r7, sp, #0
 8015208:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015210:	4618      	mov	r0, r3
 8015212:	f7ef fcbb 	bl	8004b8c <USBD_LL_SOF>
}
 8015216:	bf00      	nop
 8015218:	3708      	adds	r7, #8
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}

0801521e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801521e:	b580      	push	{r7, lr}
 8015220:	b084      	sub	sp, #16
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015226:	2301      	movs	r3, #1
 8015228:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	79db      	ldrb	r3, [r3, #7]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d102      	bne.n	8015238 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015232:	2300      	movs	r3, #0
 8015234:	73fb      	strb	r3, [r7, #15]
 8015236:	e008      	b.n	801524a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	79db      	ldrb	r3, [r3, #7]
 801523c:	2b02      	cmp	r3, #2
 801523e:	d102      	bne.n	8015246 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015240:	2301      	movs	r3, #1
 8015242:	73fb      	strb	r3, [r7, #15]
 8015244:	e001      	b.n	801524a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015246:	f7eb fac9 	bl	80007dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015250:	7bfa      	ldrb	r2, [r7, #15]
 8015252:	4611      	mov	r1, r2
 8015254:	4618      	mov	r0, r3
 8015256:	f7ef fc55 	bl	8004b04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015260:	4618      	mov	r0, r3
 8015262:	f7ef fbfd 	bl	8004a60 <USBD_LL_Reset>
}
 8015266:	bf00      	nop
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
	...

08015270 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801527e:	4618      	mov	r0, r3
 8015280:	f7ef fc50 	bl	8004b24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	6812      	ldr	r2, [r2, #0]
 8015292:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015296:	f043 0301 	orr.w	r3, r3, #1
 801529a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	7adb      	ldrb	r3, [r3, #11]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d005      	beq.n	80152b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80152a4:	4b04      	ldr	r3, [pc, #16]	@ (80152b8 <HAL_PCD_SuspendCallback+0x48>)
 80152a6:	691b      	ldr	r3, [r3, #16]
 80152a8:	4a03      	ldr	r2, [pc, #12]	@ (80152b8 <HAL_PCD_SuspendCallback+0x48>)
 80152aa:	f043 0306 	orr.w	r3, r3, #6
 80152ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80152b0:	bf00      	nop
 80152b2:	3708      	adds	r7, #8
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}
 80152b8:	e000ed00 	.word	0xe000ed00

080152bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7ef fc46 	bl	8004b5c <USBD_LL_Resume>
}
 80152d0:	bf00      	nop
 80152d2:	3708      	adds	r7, #8
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}

080152d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	460b      	mov	r3, r1
 80152e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80152ea:	78fa      	ldrb	r2, [r7, #3]
 80152ec:	4611      	mov	r1, r2
 80152ee:	4618      	mov	r0, r3
 80152f0:	f7ef fc9e 	bl	8004c30 <USBD_LL_IsoOUTIncomplete>
}
 80152f4:	bf00      	nop
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}

080152fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	460b      	mov	r3, r1
 8015306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801530e:	78fa      	ldrb	r2, [r7, #3]
 8015310:	4611      	mov	r1, r2
 8015312:	4618      	mov	r0, r3
 8015314:	f7ef fc5a 	bl	8004bcc <USBD_LL_IsoINIncomplete>
}
 8015318:	bf00      	nop
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801532e:	4618      	mov	r0, r3
 8015330:	f7ef fcb0 	bl	8004c94 <USBD_LL_DevConnected>
}
 8015334:	bf00      	nop
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801534a:	4618      	mov	r0, r3
 801534c:	f7ef fcad 	bl	8004caa <USBD_LL_DevDisconnected>
}
 8015350:	bf00      	nop
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d13c      	bne.n	80153e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015368:	4a20      	ldr	r2, [pc, #128]	@ (80153ec <USBD_LL_Init+0x94>)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	4a1e      	ldr	r2, [pc, #120]	@ (80153ec <USBD_LL_Init+0x94>)
 8015374:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015378:	4b1c      	ldr	r3, [pc, #112]	@ (80153ec <USBD_LL_Init+0x94>)
 801537a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801537e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015380:	4b1a      	ldr	r3, [pc, #104]	@ (80153ec <USBD_LL_Init+0x94>)
 8015382:	2204      	movs	r2, #4
 8015384:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015386:	4b19      	ldr	r3, [pc, #100]	@ (80153ec <USBD_LL_Init+0x94>)
 8015388:	2202      	movs	r2, #2
 801538a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801538c:	4b17      	ldr	r3, [pc, #92]	@ (80153ec <USBD_LL_Init+0x94>)
 801538e:	2200      	movs	r2, #0
 8015390:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015392:	4b16      	ldr	r3, [pc, #88]	@ (80153ec <USBD_LL_Init+0x94>)
 8015394:	2202      	movs	r2, #2
 8015396:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015398:	4b14      	ldr	r3, [pc, #80]	@ (80153ec <USBD_LL_Init+0x94>)
 801539a:	2200      	movs	r2, #0
 801539c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801539e:	4b13      	ldr	r3, [pc, #76]	@ (80153ec <USBD_LL_Init+0x94>)
 80153a0:	2200      	movs	r2, #0
 80153a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80153a4:	4b11      	ldr	r3, [pc, #68]	@ (80153ec <USBD_LL_Init+0x94>)
 80153a6:	2200      	movs	r2, #0
 80153a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80153aa:	4b10      	ldr	r3, [pc, #64]	@ (80153ec <USBD_LL_Init+0x94>)
 80153ac:	2200      	movs	r2, #0
 80153ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80153b0:	4b0e      	ldr	r3, [pc, #56]	@ (80153ec <USBD_LL_Init+0x94>)
 80153b2:	2200      	movs	r2, #0
 80153b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80153b6:	480d      	ldr	r0, [pc, #52]	@ (80153ec <USBD_LL_Init+0x94>)
 80153b8:	f7eb fedb 	bl	8001172 <HAL_PCD_Init>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80153c2:	f7eb fa0b 	bl	80007dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80153c6:	2180      	movs	r1, #128	@ 0x80
 80153c8:	4808      	ldr	r0, [pc, #32]	@ (80153ec <USBD_LL_Init+0x94>)
 80153ca:	f7ed f908 	bl	80025de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80153ce:	2240      	movs	r2, #64	@ 0x40
 80153d0:	2100      	movs	r1, #0
 80153d2:	4806      	ldr	r0, [pc, #24]	@ (80153ec <USBD_LL_Init+0x94>)
 80153d4:	f7ed f8bc 	bl	8002550 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80153d8:	2280      	movs	r2, #128	@ 0x80
 80153da:	2101      	movs	r1, #1
 80153dc:	4803      	ldr	r0, [pc, #12]	@ (80153ec <USBD_LL_Init+0x94>)
 80153de:	f7ed f8b7 	bl	8002550 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80153e2:	2300      	movs	r3, #0
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	20004f80 	.word	0x20004f80

080153f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153f8:	2300      	movs	r3, #0
 80153fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153fc:	2300      	movs	r3, #0
 80153fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015406:	4618      	mov	r0, r3
 8015408:	f7eb ffc2 	bl	8001390 <HAL_PCD_Start>
 801540c:	4603      	mov	r3, r0
 801540e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015410:	7bfb      	ldrb	r3, [r7, #15]
 8015412:	4618      	mov	r0, r3
 8015414:	f000 f942 	bl	801569c <USBD_Get_USB_Status>
 8015418:	4603      	mov	r3, r0
 801541a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801541c:	7bbb      	ldrb	r3, [r7, #14]
}
 801541e:	4618      	mov	r0, r3
 8015420:	3710      	adds	r7, #16
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b084      	sub	sp, #16
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
 801542e:	4608      	mov	r0, r1
 8015430:	4611      	mov	r1, r2
 8015432:	461a      	mov	r2, r3
 8015434:	4603      	mov	r3, r0
 8015436:	70fb      	strb	r3, [r7, #3]
 8015438:	460b      	mov	r3, r1
 801543a:	70bb      	strb	r3, [r7, #2]
 801543c:	4613      	mov	r3, r2
 801543e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015440:	2300      	movs	r3, #0
 8015442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015444:	2300      	movs	r3, #0
 8015446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801544e:	78bb      	ldrb	r3, [r7, #2]
 8015450:	883a      	ldrh	r2, [r7, #0]
 8015452:	78f9      	ldrb	r1, [r7, #3]
 8015454:	f7ec fc96 	bl	8001d84 <HAL_PCD_EP_Open>
 8015458:	4603      	mov	r3, r0
 801545a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801545c:	7bfb      	ldrb	r3, [r7, #15]
 801545e:	4618      	mov	r0, r3
 8015460:	f000 f91c 	bl	801569c <USBD_Get_USB_Status>
 8015464:	4603      	mov	r3, r0
 8015466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015468:	7bbb      	ldrb	r3, [r7, #14]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015472:	b580      	push	{r7, lr}
 8015474:	b084      	sub	sp, #16
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	460b      	mov	r3, r1
 801547c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801547e:	2300      	movs	r3, #0
 8015480:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015482:	2300      	movs	r3, #0
 8015484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801548c:	78fa      	ldrb	r2, [r7, #3]
 801548e:	4611      	mov	r1, r2
 8015490:	4618      	mov	r0, r3
 8015492:	f7ec fce1 	bl	8001e58 <HAL_PCD_EP_Close>
 8015496:	4603      	mov	r3, r0
 8015498:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801549a:	7bfb      	ldrb	r3, [r7, #15]
 801549c:	4618      	mov	r0, r3
 801549e:	f000 f8fd 	bl	801569c <USBD_Get_USB_Status>
 80154a2:	4603      	mov	r3, r0
 80154a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	460b      	mov	r3, r1
 80154ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154bc:	2300      	movs	r3, #0
 80154be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154c0:	2300      	movs	r3, #0
 80154c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80154ca:	78fa      	ldrb	r2, [r7, #3]
 80154cc:	4611      	mov	r1, r2
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7ec fd99 	bl	8002006 <HAL_PCD_EP_SetStall>
 80154d4:	4603      	mov	r3, r0
 80154d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	4618      	mov	r0, r3
 80154dc:	f000 f8de 	bl	801569c <USBD_Get_USB_Status>
 80154e0:	4603      	mov	r3, r0
 80154e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3710      	adds	r7, #16
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}

080154ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154ee:	b580      	push	{r7, lr}
 80154f0:	b084      	sub	sp, #16
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	6078      	str	r0, [r7, #4]
 80154f6:	460b      	mov	r3, r1
 80154f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154fe:	2300      	movs	r3, #0
 8015500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015508:	78fa      	ldrb	r2, [r7, #3]
 801550a:	4611      	mov	r1, r2
 801550c:	4618      	mov	r0, r3
 801550e:	f7ec fddd 	bl	80020cc <HAL_PCD_EP_ClrStall>
 8015512:	4603      	mov	r3, r0
 8015514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015516:	7bfb      	ldrb	r3, [r7, #15]
 8015518:	4618      	mov	r0, r3
 801551a:	f000 f8bf 	bl	801569c <USBD_Get_USB_Status>
 801551e:	4603      	mov	r3, r0
 8015520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015522:	7bbb      	ldrb	r3, [r7, #14]
}
 8015524:	4618      	mov	r0, r3
 8015526:	3710      	adds	r7, #16
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	460b      	mov	r3, r1
 8015536:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801553e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015544:	2b00      	cmp	r3, #0
 8015546:	da0b      	bge.n	8015560 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015548:	78fb      	ldrb	r3, [r7, #3]
 801554a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801554e:	68f9      	ldr	r1, [r7, #12]
 8015550:	4613      	mov	r3, r2
 8015552:	00db      	lsls	r3, r3, #3
 8015554:	4413      	add	r3, r2
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	440b      	add	r3, r1
 801555a:	3316      	adds	r3, #22
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	e00b      	b.n	8015578 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015560:	78fb      	ldrb	r3, [r7, #3]
 8015562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015566:	68f9      	ldr	r1, [r7, #12]
 8015568:	4613      	mov	r3, r2
 801556a:	00db      	lsls	r3, r3, #3
 801556c:	4413      	add	r3, r2
 801556e:	009b      	lsls	r3, r3, #2
 8015570:	440b      	add	r3, r1
 8015572:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015576:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015582:	4770      	bx	lr

08015584 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	460b      	mov	r3, r1
 801558e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015590:	2300      	movs	r3, #0
 8015592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801559e:	78fa      	ldrb	r2, [r7, #3]
 80155a0:	4611      	mov	r1, r2
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7ec fbca 	bl	8001d3c <HAL_PCD_SetAddress>
 80155a8:	4603      	mov	r3, r0
 80155aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155ac:	7bfb      	ldrb	r3, [r7, #15]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 f874 	bl	801569c <USBD_Get_USB_Status>
 80155b4:	4603      	mov	r3, r0
 80155b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3710      	adds	r7, #16
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b086      	sub	sp, #24
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	60f8      	str	r0, [r7, #12]
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	603b      	str	r3, [r7, #0]
 80155ce:	460b      	mov	r3, r1
 80155d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155d2:	2300      	movs	r3, #0
 80155d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155d6:	2300      	movs	r3, #0
 80155d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80155e0:	7af9      	ldrb	r1, [r7, #11]
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	f7ec fcd4 	bl	8001f92 <HAL_PCD_EP_Transmit>
 80155ea:	4603      	mov	r3, r0
 80155ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155ee:	7dfb      	ldrb	r3, [r7, #23]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 f853 	bl	801569c <USBD_Get_USB_Status>
 80155f6:	4603      	mov	r3, r0
 80155f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80155fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3718      	adds	r7, #24
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af00      	add	r7, sp, #0
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	607a      	str	r2, [r7, #4]
 801560e:	603b      	str	r3, [r7, #0]
 8015610:	460b      	mov	r3, r1
 8015612:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015614:	2300      	movs	r3, #0
 8015616:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015618:	2300      	movs	r3, #0
 801561a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015622:	7af9      	ldrb	r1, [r7, #11]
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	f7ec fc60 	bl	8001eec <HAL_PCD_EP_Receive>
 801562c:	4603      	mov	r3, r0
 801562e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	4618      	mov	r0, r3
 8015634:	f000 f832 	bl	801569c <USBD_Get_USB_Status>
 8015638:	4603      	mov	r3, r0
 801563a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801563c:	7dbb      	ldrb	r3, [r7, #22]
}
 801563e:	4618      	mov	r0, r3
 8015640:	3718      	adds	r7, #24
 8015642:	46bd      	mov	sp, r7
 8015644:	bd80      	pop	{r7, pc}

08015646 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015646:	b580      	push	{r7, lr}
 8015648:	b082      	sub	sp, #8
 801564a:	af00      	add	r7, sp, #0
 801564c:	6078      	str	r0, [r7, #4]
 801564e:	460b      	mov	r3, r1
 8015650:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015658:	78fa      	ldrb	r2, [r7, #3]
 801565a:	4611      	mov	r1, r2
 801565c:	4618      	mov	r0, r3
 801565e:	f7ec fc80 	bl	8001f62 <HAL_PCD_EP_GetRxCount>
 8015662:	4603      	mov	r3, r0
}
 8015664:	4618      	mov	r0, r3
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015674:	4b03      	ldr	r3, [pc, #12]	@ (8015684 <USBD_static_malloc+0x18>)
}
 8015676:	4618      	mov	r0, r3
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	20005464 	.word	0x20005464

08015688 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015688:	b480      	push	{r7}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]

}
 8015690:	bf00      	nop
 8015692:	370c      	adds	r7, #12
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr

0801569c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801569c:	b480      	push	{r7}
 801569e:	b085      	sub	sp, #20
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	4603      	mov	r3, r0
 80156a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156a6:	2300      	movs	r3, #0
 80156a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80156aa:	79fb      	ldrb	r3, [r7, #7]
 80156ac:	2b03      	cmp	r3, #3
 80156ae:	d817      	bhi.n	80156e0 <USBD_Get_USB_Status+0x44>
 80156b0:	a201      	add	r2, pc, #4	@ (adr r2, 80156b8 <USBD_Get_USB_Status+0x1c>)
 80156b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156b6:	bf00      	nop
 80156b8:	080156c9 	.word	0x080156c9
 80156bc:	080156cf 	.word	0x080156cf
 80156c0:	080156d5 	.word	0x080156d5
 80156c4:	080156db 	.word	0x080156db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80156c8:	2300      	movs	r3, #0
 80156ca:	73fb      	strb	r3, [r7, #15]
    break;
 80156cc:	e00b      	b.n	80156e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80156ce:	2303      	movs	r3, #3
 80156d0:	73fb      	strb	r3, [r7, #15]
    break;
 80156d2:	e008      	b.n	80156e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80156d4:	2301      	movs	r3, #1
 80156d6:	73fb      	strb	r3, [r7, #15]
    break;
 80156d8:	e005      	b.n	80156e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80156da:	2303      	movs	r3, #3
 80156dc:	73fb      	strb	r3, [r7, #15]
    break;
 80156de:	e002      	b.n	80156e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80156e0:	2303      	movs	r3, #3
 80156e2:	73fb      	strb	r3, [r7, #15]
    break;
 80156e4:	bf00      	nop
  }
  return usb_status;
 80156e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3714      	adds	r7, #20
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <malloc>:
 80156f4:	4b02      	ldr	r3, [pc, #8]	@ (8015700 <malloc+0xc>)
 80156f6:	4601      	mov	r1, r0
 80156f8:	6818      	ldr	r0, [r3, #0]
 80156fa:	f000 b82d 	b.w	8015758 <_malloc_r>
 80156fe:	bf00      	nop
 8015700:	20000134 	.word	0x20000134

08015704 <free>:
 8015704:	4b02      	ldr	r3, [pc, #8]	@ (8015710 <free+0xc>)
 8015706:	4601      	mov	r1, r0
 8015708:	6818      	ldr	r0, [r3, #0]
 801570a:	f000 bae7 	b.w	8015cdc <_free_r>
 801570e:	bf00      	nop
 8015710:	20000134 	.word	0x20000134

08015714 <sbrk_aligned>:
 8015714:	b570      	push	{r4, r5, r6, lr}
 8015716:	4e0f      	ldr	r6, [pc, #60]	@ (8015754 <sbrk_aligned+0x40>)
 8015718:	460c      	mov	r4, r1
 801571a:	6831      	ldr	r1, [r6, #0]
 801571c:	4605      	mov	r5, r0
 801571e:	b911      	cbnz	r1, 8015726 <sbrk_aligned+0x12>
 8015720:	f000 fa66 	bl	8015bf0 <_sbrk_r>
 8015724:	6030      	str	r0, [r6, #0]
 8015726:	4621      	mov	r1, r4
 8015728:	4628      	mov	r0, r5
 801572a:	f000 fa61 	bl	8015bf0 <_sbrk_r>
 801572e:	1c43      	adds	r3, r0, #1
 8015730:	d103      	bne.n	801573a <sbrk_aligned+0x26>
 8015732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015736:	4620      	mov	r0, r4
 8015738:	bd70      	pop	{r4, r5, r6, pc}
 801573a:	1cc4      	adds	r4, r0, #3
 801573c:	f024 0403 	bic.w	r4, r4, #3
 8015740:	42a0      	cmp	r0, r4
 8015742:	d0f8      	beq.n	8015736 <sbrk_aligned+0x22>
 8015744:	1a21      	subs	r1, r4, r0
 8015746:	4628      	mov	r0, r5
 8015748:	f000 fa52 	bl	8015bf0 <_sbrk_r>
 801574c:	3001      	adds	r0, #1
 801574e:	d1f2      	bne.n	8015736 <sbrk_aligned+0x22>
 8015750:	e7ef      	b.n	8015732 <sbrk_aligned+0x1e>
 8015752:	bf00      	nop
 8015754:	20005684 	.word	0x20005684

08015758 <_malloc_r>:
 8015758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801575c:	1ccd      	adds	r5, r1, #3
 801575e:	f025 0503 	bic.w	r5, r5, #3
 8015762:	3508      	adds	r5, #8
 8015764:	2d0c      	cmp	r5, #12
 8015766:	bf38      	it	cc
 8015768:	250c      	movcc	r5, #12
 801576a:	2d00      	cmp	r5, #0
 801576c:	4606      	mov	r6, r0
 801576e:	db01      	blt.n	8015774 <_malloc_r+0x1c>
 8015770:	42a9      	cmp	r1, r5
 8015772:	d904      	bls.n	801577e <_malloc_r+0x26>
 8015774:	230c      	movs	r3, #12
 8015776:	6033      	str	r3, [r6, #0]
 8015778:	2000      	movs	r0, #0
 801577a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801577e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015854 <_malloc_r+0xfc>
 8015782:	f000 f869 	bl	8015858 <__malloc_lock>
 8015786:	f8d8 3000 	ldr.w	r3, [r8]
 801578a:	461c      	mov	r4, r3
 801578c:	bb44      	cbnz	r4, 80157e0 <_malloc_r+0x88>
 801578e:	4629      	mov	r1, r5
 8015790:	4630      	mov	r0, r6
 8015792:	f7ff ffbf 	bl	8015714 <sbrk_aligned>
 8015796:	1c43      	adds	r3, r0, #1
 8015798:	4604      	mov	r4, r0
 801579a:	d158      	bne.n	801584e <_malloc_r+0xf6>
 801579c:	f8d8 4000 	ldr.w	r4, [r8]
 80157a0:	4627      	mov	r7, r4
 80157a2:	2f00      	cmp	r7, #0
 80157a4:	d143      	bne.n	801582e <_malloc_r+0xd6>
 80157a6:	2c00      	cmp	r4, #0
 80157a8:	d04b      	beq.n	8015842 <_malloc_r+0xea>
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	4639      	mov	r1, r7
 80157ae:	4630      	mov	r0, r6
 80157b0:	eb04 0903 	add.w	r9, r4, r3
 80157b4:	f000 fa1c 	bl	8015bf0 <_sbrk_r>
 80157b8:	4581      	cmp	r9, r0
 80157ba:	d142      	bne.n	8015842 <_malloc_r+0xea>
 80157bc:	6821      	ldr	r1, [r4, #0]
 80157be:	1a6d      	subs	r5, r5, r1
 80157c0:	4629      	mov	r1, r5
 80157c2:	4630      	mov	r0, r6
 80157c4:	f7ff ffa6 	bl	8015714 <sbrk_aligned>
 80157c8:	3001      	adds	r0, #1
 80157ca:	d03a      	beq.n	8015842 <_malloc_r+0xea>
 80157cc:	6823      	ldr	r3, [r4, #0]
 80157ce:	442b      	add	r3, r5
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	f8d8 3000 	ldr.w	r3, [r8]
 80157d6:	685a      	ldr	r2, [r3, #4]
 80157d8:	bb62      	cbnz	r2, 8015834 <_malloc_r+0xdc>
 80157da:	f8c8 7000 	str.w	r7, [r8]
 80157de:	e00f      	b.n	8015800 <_malloc_r+0xa8>
 80157e0:	6822      	ldr	r2, [r4, #0]
 80157e2:	1b52      	subs	r2, r2, r5
 80157e4:	d420      	bmi.n	8015828 <_malloc_r+0xd0>
 80157e6:	2a0b      	cmp	r2, #11
 80157e8:	d917      	bls.n	801581a <_malloc_r+0xc2>
 80157ea:	1961      	adds	r1, r4, r5
 80157ec:	42a3      	cmp	r3, r4
 80157ee:	6025      	str	r5, [r4, #0]
 80157f0:	bf18      	it	ne
 80157f2:	6059      	strne	r1, [r3, #4]
 80157f4:	6863      	ldr	r3, [r4, #4]
 80157f6:	bf08      	it	eq
 80157f8:	f8c8 1000 	streq.w	r1, [r8]
 80157fc:	5162      	str	r2, [r4, r5]
 80157fe:	604b      	str	r3, [r1, #4]
 8015800:	4630      	mov	r0, r6
 8015802:	f000 f82f 	bl	8015864 <__malloc_unlock>
 8015806:	f104 000b 	add.w	r0, r4, #11
 801580a:	1d23      	adds	r3, r4, #4
 801580c:	f020 0007 	bic.w	r0, r0, #7
 8015810:	1ac2      	subs	r2, r0, r3
 8015812:	bf1c      	itt	ne
 8015814:	1a1b      	subne	r3, r3, r0
 8015816:	50a3      	strne	r3, [r4, r2]
 8015818:	e7af      	b.n	801577a <_malloc_r+0x22>
 801581a:	6862      	ldr	r2, [r4, #4]
 801581c:	42a3      	cmp	r3, r4
 801581e:	bf0c      	ite	eq
 8015820:	f8c8 2000 	streq.w	r2, [r8]
 8015824:	605a      	strne	r2, [r3, #4]
 8015826:	e7eb      	b.n	8015800 <_malloc_r+0xa8>
 8015828:	4623      	mov	r3, r4
 801582a:	6864      	ldr	r4, [r4, #4]
 801582c:	e7ae      	b.n	801578c <_malloc_r+0x34>
 801582e:	463c      	mov	r4, r7
 8015830:	687f      	ldr	r7, [r7, #4]
 8015832:	e7b6      	b.n	80157a2 <_malloc_r+0x4a>
 8015834:	461a      	mov	r2, r3
 8015836:	685b      	ldr	r3, [r3, #4]
 8015838:	42a3      	cmp	r3, r4
 801583a:	d1fb      	bne.n	8015834 <_malloc_r+0xdc>
 801583c:	2300      	movs	r3, #0
 801583e:	6053      	str	r3, [r2, #4]
 8015840:	e7de      	b.n	8015800 <_malloc_r+0xa8>
 8015842:	230c      	movs	r3, #12
 8015844:	6033      	str	r3, [r6, #0]
 8015846:	4630      	mov	r0, r6
 8015848:	f000 f80c 	bl	8015864 <__malloc_unlock>
 801584c:	e794      	b.n	8015778 <_malloc_r+0x20>
 801584e:	6005      	str	r5, [r0, #0]
 8015850:	e7d6      	b.n	8015800 <_malloc_r+0xa8>
 8015852:	bf00      	nop
 8015854:	20005688 	.word	0x20005688

08015858 <__malloc_lock>:
 8015858:	4801      	ldr	r0, [pc, #4]	@ (8015860 <__malloc_lock+0x8>)
 801585a:	f000 ba10 	b.w	8015c7e <__retarget_lock_acquire_recursive>
 801585e:	bf00      	nop
 8015860:	200057cc 	.word	0x200057cc

08015864 <__malloc_unlock>:
 8015864:	4801      	ldr	r0, [pc, #4]	@ (801586c <__malloc_unlock+0x8>)
 8015866:	f000 ba0b 	b.w	8015c80 <__retarget_lock_release_recursive>
 801586a:	bf00      	nop
 801586c:	200057cc 	.word	0x200057cc

08015870 <rand>:
 8015870:	4b16      	ldr	r3, [pc, #88]	@ (80158cc <rand+0x5c>)
 8015872:	b510      	push	{r4, lr}
 8015874:	681c      	ldr	r4, [r3, #0]
 8015876:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015878:	b9b3      	cbnz	r3, 80158a8 <rand+0x38>
 801587a:	2018      	movs	r0, #24
 801587c:	f7ff ff3a 	bl	80156f4 <malloc>
 8015880:	4602      	mov	r2, r0
 8015882:	6320      	str	r0, [r4, #48]	@ 0x30
 8015884:	b920      	cbnz	r0, 8015890 <rand+0x20>
 8015886:	4b12      	ldr	r3, [pc, #72]	@ (80158d0 <rand+0x60>)
 8015888:	4812      	ldr	r0, [pc, #72]	@ (80158d4 <rand+0x64>)
 801588a:	2152      	movs	r1, #82	@ 0x52
 801588c:	f000 fa08 	bl	8015ca0 <__assert_func>
 8015890:	4911      	ldr	r1, [pc, #68]	@ (80158d8 <rand+0x68>)
 8015892:	4b12      	ldr	r3, [pc, #72]	@ (80158dc <rand+0x6c>)
 8015894:	e9c0 1300 	strd	r1, r3, [r0]
 8015898:	4b11      	ldr	r3, [pc, #68]	@ (80158e0 <rand+0x70>)
 801589a:	6083      	str	r3, [r0, #8]
 801589c:	230b      	movs	r3, #11
 801589e:	8183      	strh	r3, [r0, #12]
 80158a0:	2100      	movs	r1, #0
 80158a2:	2001      	movs	r0, #1
 80158a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80158a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80158aa:	480e      	ldr	r0, [pc, #56]	@ (80158e4 <rand+0x74>)
 80158ac:	690b      	ldr	r3, [r1, #16]
 80158ae:	694c      	ldr	r4, [r1, #20]
 80158b0:	4a0d      	ldr	r2, [pc, #52]	@ (80158e8 <rand+0x78>)
 80158b2:	4358      	muls	r0, r3
 80158b4:	fb02 0004 	mla	r0, r2, r4, r0
 80158b8:	fba3 3202 	umull	r3, r2, r3, r2
 80158bc:	3301      	adds	r3, #1
 80158be:	eb40 0002 	adc.w	r0, r0, r2
 80158c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80158c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80158ca:	bd10      	pop	{r4, pc}
 80158cc:	20000134 	.word	0x20000134
 80158d0:	0801989a 	.word	0x0801989a
 80158d4:	080198b1 	.word	0x080198b1
 80158d8:	abcd330e 	.word	0xabcd330e
 80158dc:	e66d1234 	.word	0xe66d1234
 80158e0:	0005deec 	.word	0x0005deec
 80158e4:	5851f42d 	.word	0x5851f42d
 80158e8:	4c957f2d 	.word	0x4c957f2d

080158ec <std>:
 80158ec:	2300      	movs	r3, #0
 80158ee:	b510      	push	{r4, lr}
 80158f0:	4604      	mov	r4, r0
 80158f2:	e9c0 3300 	strd	r3, r3, [r0]
 80158f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158fa:	6083      	str	r3, [r0, #8]
 80158fc:	8181      	strh	r1, [r0, #12]
 80158fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8015900:	81c2      	strh	r2, [r0, #14]
 8015902:	6183      	str	r3, [r0, #24]
 8015904:	4619      	mov	r1, r3
 8015906:	2208      	movs	r2, #8
 8015908:	305c      	adds	r0, #92	@ 0x5c
 801590a:	f000 f916 	bl	8015b3a <memset>
 801590e:	4b0d      	ldr	r3, [pc, #52]	@ (8015944 <std+0x58>)
 8015910:	6263      	str	r3, [r4, #36]	@ 0x24
 8015912:	4b0d      	ldr	r3, [pc, #52]	@ (8015948 <std+0x5c>)
 8015914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015916:	4b0d      	ldr	r3, [pc, #52]	@ (801594c <std+0x60>)
 8015918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801591a:	4b0d      	ldr	r3, [pc, #52]	@ (8015950 <std+0x64>)
 801591c:	6323      	str	r3, [r4, #48]	@ 0x30
 801591e:	4b0d      	ldr	r3, [pc, #52]	@ (8015954 <std+0x68>)
 8015920:	6224      	str	r4, [r4, #32]
 8015922:	429c      	cmp	r4, r3
 8015924:	d006      	beq.n	8015934 <std+0x48>
 8015926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801592a:	4294      	cmp	r4, r2
 801592c:	d002      	beq.n	8015934 <std+0x48>
 801592e:	33d0      	adds	r3, #208	@ 0xd0
 8015930:	429c      	cmp	r4, r3
 8015932:	d105      	bne.n	8015940 <std+0x54>
 8015934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801593c:	f000 b99e 	b.w	8015c7c <__retarget_lock_init_recursive>
 8015940:	bd10      	pop	{r4, pc}
 8015942:	bf00      	nop
 8015944:	08015a95 	.word	0x08015a95
 8015948:	08015ab7 	.word	0x08015ab7
 801594c:	08015aef 	.word	0x08015aef
 8015950:	08015b13 	.word	0x08015b13
 8015954:	2000568c 	.word	0x2000568c

08015958 <stdio_exit_handler>:
 8015958:	4a02      	ldr	r2, [pc, #8]	@ (8015964 <stdio_exit_handler+0xc>)
 801595a:	4903      	ldr	r1, [pc, #12]	@ (8015968 <stdio_exit_handler+0x10>)
 801595c:	4803      	ldr	r0, [pc, #12]	@ (801596c <stdio_exit_handler+0x14>)
 801595e:	f000 b869 	b.w	8015a34 <_fwalk_sglue>
 8015962:	bf00      	nop
 8015964:	20000128 	.word	0x20000128
 8015968:	08016415 	.word	0x08016415
 801596c:	20000138 	.word	0x20000138

08015970 <cleanup_stdio>:
 8015970:	6841      	ldr	r1, [r0, #4]
 8015972:	4b0c      	ldr	r3, [pc, #48]	@ (80159a4 <cleanup_stdio+0x34>)
 8015974:	4299      	cmp	r1, r3
 8015976:	b510      	push	{r4, lr}
 8015978:	4604      	mov	r4, r0
 801597a:	d001      	beq.n	8015980 <cleanup_stdio+0x10>
 801597c:	f000 fd4a 	bl	8016414 <_fflush_r>
 8015980:	68a1      	ldr	r1, [r4, #8]
 8015982:	4b09      	ldr	r3, [pc, #36]	@ (80159a8 <cleanup_stdio+0x38>)
 8015984:	4299      	cmp	r1, r3
 8015986:	d002      	beq.n	801598e <cleanup_stdio+0x1e>
 8015988:	4620      	mov	r0, r4
 801598a:	f000 fd43 	bl	8016414 <_fflush_r>
 801598e:	68e1      	ldr	r1, [r4, #12]
 8015990:	4b06      	ldr	r3, [pc, #24]	@ (80159ac <cleanup_stdio+0x3c>)
 8015992:	4299      	cmp	r1, r3
 8015994:	d004      	beq.n	80159a0 <cleanup_stdio+0x30>
 8015996:	4620      	mov	r0, r4
 8015998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801599c:	f000 bd3a 	b.w	8016414 <_fflush_r>
 80159a0:	bd10      	pop	{r4, pc}
 80159a2:	bf00      	nop
 80159a4:	2000568c 	.word	0x2000568c
 80159a8:	200056f4 	.word	0x200056f4
 80159ac:	2000575c 	.word	0x2000575c

080159b0 <global_stdio_init.part.0>:
 80159b0:	b510      	push	{r4, lr}
 80159b2:	4b0b      	ldr	r3, [pc, #44]	@ (80159e0 <global_stdio_init.part.0+0x30>)
 80159b4:	4c0b      	ldr	r4, [pc, #44]	@ (80159e4 <global_stdio_init.part.0+0x34>)
 80159b6:	4a0c      	ldr	r2, [pc, #48]	@ (80159e8 <global_stdio_init.part.0+0x38>)
 80159b8:	601a      	str	r2, [r3, #0]
 80159ba:	4620      	mov	r0, r4
 80159bc:	2200      	movs	r2, #0
 80159be:	2104      	movs	r1, #4
 80159c0:	f7ff ff94 	bl	80158ec <std>
 80159c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159c8:	2201      	movs	r2, #1
 80159ca:	2109      	movs	r1, #9
 80159cc:	f7ff ff8e 	bl	80158ec <std>
 80159d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159d4:	2202      	movs	r2, #2
 80159d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159da:	2112      	movs	r1, #18
 80159dc:	f7ff bf86 	b.w	80158ec <std>
 80159e0:	200057c4 	.word	0x200057c4
 80159e4:	2000568c 	.word	0x2000568c
 80159e8:	08015959 	.word	0x08015959

080159ec <__sfp_lock_acquire>:
 80159ec:	4801      	ldr	r0, [pc, #4]	@ (80159f4 <__sfp_lock_acquire+0x8>)
 80159ee:	f000 b946 	b.w	8015c7e <__retarget_lock_acquire_recursive>
 80159f2:	bf00      	nop
 80159f4:	200057cd 	.word	0x200057cd

080159f8 <__sfp_lock_release>:
 80159f8:	4801      	ldr	r0, [pc, #4]	@ (8015a00 <__sfp_lock_release+0x8>)
 80159fa:	f000 b941 	b.w	8015c80 <__retarget_lock_release_recursive>
 80159fe:	bf00      	nop
 8015a00:	200057cd 	.word	0x200057cd

08015a04 <__sinit>:
 8015a04:	b510      	push	{r4, lr}
 8015a06:	4604      	mov	r4, r0
 8015a08:	f7ff fff0 	bl	80159ec <__sfp_lock_acquire>
 8015a0c:	6a23      	ldr	r3, [r4, #32]
 8015a0e:	b11b      	cbz	r3, 8015a18 <__sinit+0x14>
 8015a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a14:	f7ff bff0 	b.w	80159f8 <__sfp_lock_release>
 8015a18:	4b04      	ldr	r3, [pc, #16]	@ (8015a2c <__sinit+0x28>)
 8015a1a:	6223      	str	r3, [r4, #32]
 8015a1c:	4b04      	ldr	r3, [pc, #16]	@ (8015a30 <__sinit+0x2c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d1f5      	bne.n	8015a10 <__sinit+0xc>
 8015a24:	f7ff ffc4 	bl	80159b0 <global_stdio_init.part.0>
 8015a28:	e7f2      	b.n	8015a10 <__sinit+0xc>
 8015a2a:	bf00      	nop
 8015a2c:	08015971 	.word	0x08015971
 8015a30:	200057c4 	.word	0x200057c4

08015a34 <_fwalk_sglue>:
 8015a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a38:	4607      	mov	r7, r0
 8015a3a:	4688      	mov	r8, r1
 8015a3c:	4614      	mov	r4, r2
 8015a3e:	2600      	movs	r6, #0
 8015a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a44:	f1b9 0901 	subs.w	r9, r9, #1
 8015a48:	d505      	bpl.n	8015a56 <_fwalk_sglue+0x22>
 8015a4a:	6824      	ldr	r4, [r4, #0]
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	d1f7      	bne.n	8015a40 <_fwalk_sglue+0xc>
 8015a50:	4630      	mov	r0, r6
 8015a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a56:	89ab      	ldrh	r3, [r5, #12]
 8015a58:	2b01      	cmp	r3, #1
 8015a5a:	d907      	bls.n	8015a6c <_fwalk_sglue+0x38>
 8015a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a60:	3301      	adds	r3, #1
 8015a62:	d003      	beq.n	8015a6c <_fwalk_sglue+0x38>
 8015a64:	4629      	mov	r1, r5
 8015a66:	4638      	mov	r0, r7
 8015a68:	47c0      	blx	r8
 8015a6a:	4306      	orrs	r6, r0
 8015a6c:	3568      	adds	r5, #104	@ 0x68
 8015a6e:	e7e9      	b.n	8015a44 <_fwalk_sglue+0x10>

08015a70 <iprintf>:
 8015a70:	b40f      	push	{r0, r1, r2, r3}
 8015a72:	b507      	push	{r0, r1, r2, lr}
 8015a74:	4906      	ldr	r1, [pc, #24]	@ (8015a90 <iprintf+0x20>)
 8015a76:	ab04      	add	r3, sp, #16
 8015a78:	6808      	ldr	r0, [r1, #0]
 8015a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a7e:	6881      	ldr	r1, [r0, #8]
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	f000 f99f 	bl	8015dc4 <_vfiprintf_r>
 8015a86:	b003      	add	sp, #12
 8015a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a8c:	b004      	add	sp, #16
 8015a8e:	4770      	bx	lr
 8015a90:	20000134 	.word	0x20000134

08015a94 <__sread>:
 8015a94:	b510      	push	{r4, lr}
 8015a96:	460c      	mov	r4, r1
 8015a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a9c:	f000 f896 	bl	8015bcc <_read_r>
 8015aa0:	2800      	cmp	r0, #0
 8015aa2:	bfab      	itete	ge
 8015aa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8015aa8:	181b      	addge	r3, r3, r0
 8015aaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015aae:	bfac      	ite	ge
 8015ab0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015ab2:	81a3      	strhlt	r3, [r4, #12]
 8015ab4:	bd10      	pop	{r4, pc}

08015ab6 <__swrite>:
 8015ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aba:	461f      	mov	r7, r3
 8015abc:	898b      	ldrh	r3, [r1, #12]
 8015abe:	05db      	lsls	r3, r3, #23
 8015ac0:	4605      	mov	r5, r0
 8015ac2:	460c      	mov	r4, r1
 8015ac4:	4616      	mov	r6, r2
 8015ac6:	d505      	bpl.n	8015ad4 <__swrite+0x1e>
 8015ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015acc:	2302      	movs	r3, #2
 8015ace:	2200      	movs	r2, #0
 8015ad0:	f000 f86a 	bl	8015ba8 <_lseek_r>
 8015ad4:	89a3      	ldrh	r3, [r4, #12]
 8015ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015ade:	81a3      	strh	r3, [r4, #12]
 8015ae0:	4632      	mov	r2, r6
 8015ae2:	463b      	mov	r3, r7
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aea:	f000 b891 	b.w	8015c10 <_write_r>

08015aee <__sseek>:
 8015aee:	b510      	push	{r4, lr}
 8015af0:	460c      	mov	r4, r1
 8015af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af6:	f000 f857 	bl	8015ba8 <_lseek_r>
 8015afa:	1c43      	adds	r3, r0, #1
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	bf15      	itete	ne
 8015b00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015b0a:	81a3      	strheq	r3, [r4, #12]
 8015b0c:	bf18      	it	ne
 8015b0e:	81a3      	strhne	r3, [r4, #12]
 8015b10:	bd10      	pop	{r4, pc}

08015b12 <__sclose>:
 8015b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b16:	f000 b837 	b.w	8015b88 <_close_r>

08015b1a <memcmp>:
 8015b1a:	b510      	push	{r4, lr}
 8015b1c:	3901      	subs	r1, #1
 8015b1e:	4402      	add	r2, r0
 8015b20:	4290      	cmp	r0, r2
 8015b22:	d101      	bne.n	8015b28 <memcmp+0xe>
 8015b24:	2000      	movs	r0, #0
 8015b26:	e005      	b.n	8015b34 <memcmp+0x1a>
 8015b28:	7803      	ldrb	r3, [r0, #0]
 8015b2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015b2e:	42a3      	cmp	r3, r4
 8015b30:	d001      	beq.n	8015b36 <memcmp+0x1c>
 8015b32:	1b18      	subs	r0, r3, r4
 8015b34:	bd10      	pop	{r4, pc}
 8015b36:	3001      	adds	r0, #1
 8015b38:	e7f2      	b.n	8015b20 <memcmp+0x6>

08015b3a <memset>:
 8015b3a:	4402      	add	r2, r0
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	d100      	bne.n	8015b44 <memset+0xa>
 8015b42:	4770      	bx	lr
 8015b44:	f803 1b01 	strb.w	r1, [r3], #1
 8015b48:	e7f9      	b.n	8015b3e <memset+0x4>

08015b4a <strchr>:
 8015b4a:	b2c9      	uxtb	r1, r1
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b54:	b112      	cbz	r2, 8015b5c <strchr+0x12>
 8015b56:	428a      	cmp	r2, r1
 8015b58:	d1f9      	bne.n	8015b4e <strchr+0x4>
 8015b5a:	4770      	bx	lr
 8015b5c:	2900      	cmp	r1, #0
 8015b5e:	bf18      	it	ne
 8015b60:	2000      	movne	r0, #0
 8015b62:	4770      	bx	lr

08015b64 <strncmp>:
 8015b64:	b510      	push	{r4, lr}
 8015b66:	b16a      	cbz	r2, 8015b84 <strncmp+0x20>
 8015b68:	3901      	subs	r1, #1
 8015b6a:	1884      	adds	r4, r0, r2
 8015b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d103      	bne.n	8015b80 <strncmp+0x1c>
 8015b78:	42a0      	cmp	r0, r4
 8015b7a:	d001      	beq.n	8015b80 <strncmp+0x1c>
 8015b7c:	2a00      	cmp	r2, #0
 8015b7e:	d1f5      	bne.n	8015b6c <strncmp+0x8>
 8015b80:	1ad0      	subs	r0, r2, r3
 8015b82:	bd10      	pop	{r4, pc}
 8015b84:	4610      	mov	r0, r2
 8015b86:	e7fc      	b.n	8015b82 <strncmp+0x1e>

08015b88 <_close_r>:
 8015b88:	b538      	push	{r3, r4, r5, lr}
 8015b8a:	4d06      	ldr	r5, [pc, #24]	@ (8015ba4 <_close_r+0x1c>)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	4604      	mov	r4, r0
 8015b90:	4608      	mov	r0, r1
 8015b92:	602b      	str	r3, [r5, #0]
 8015b94:	f7ea fee8 	bl	8000968 <_close>
 8015b98:	1c43      	adds	r3, r0, #1
 8015b9a:	d102      	bne.n	8015ba2 <_close_r+0x1a>
 8015b9c:	682b      	ldr	r3, [r5, #0]
 8015b9e:	b103      	cbz	r3, 8015ba2 <_close_r+0x1a>
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	bd38      	pop	{r3, r4, r5, pc}
 8015ba4:	200057c8 	.word	0x200057c8

08015ba8 <_lseek_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	@ (8015bc8 <_lseek_r+0x20>)
 8015bac:	4604      	mov	r4, r0
 8015bae:	4608      	mov	r0, r1
 8015bb0:	4611      	mov	r1, r2
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	602a      	str	r2, [r5, #0]
 8015bb6:	461a      	mov	r2, r3
 8015bb8:	f7ea fefd 	bl	80009b6 <_lseek>
 8015bbc:	1c43      	adds	r3, r0, #1
 8015bbe:	d102      	bne.n	8015bc6 <_lseek_r+0x1e>
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	b103      	cbz	r3, 8015bc6 <_lseek_r+0x1e>
 8015bc4:	6023      	str	r3, [r4, #0]
 8015bc6:	bd38      	pop	{r3, r4, r5, pc}
 8015bc8:	200057c8 	.word	0x200057c8

08015bcc <_read_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d07      	ldr	r5, [pc, #28]	@ (8015bec <_read_r+0x20>)
 8015bd0:	4604      	mov	r4, r0
 8015bd2:	4608      	mov	r0, r1
 8015bd4:	4611      	mov	r1, r2
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	602a      	str	r2, [r5, #0]
 8015bda:	461a      	mov	r2, r3
 8015bdc:	f7ea fe8b 	bl	80008f6 <_read>
 8015be0:	1c43      	adds	r3, r0, #1
 8015be2:	d102      	bne.n	8015bea <_read_r+0x1e>
 8015be4:	682b      	ldr	r3, [r5, #0]
 8015be6:	b103      	cbz	r3, 8015bea <_read_r+0x1e>
 8015be8:	6023      	str	r3, [r4, #0]
 8015bea:	bd38      	pop	{r3, r4, r5, pc}
 8015bec:	200057c8 	.word	0x200057c8

08015bf0 <_sbrk_r>:
 8015bf0:	b538      	push	{r3, r4, r5, lr}
 8015bf2:	4d06      	ldr	r5, [pc, #24]	@ (8015c0c <_sbrk_r+0x1c>)
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	4608      	mov	r0, r1
 8015bfa:	602b      	str	r3, [r5, #0]
 8015bfc:	f7ea fee8 	bl	80009d0 <_sbrk>
 8015c00:	1c43      	adds	r3, r0, #1
 8015c02:	d102      	bne.n	8015c0a <_sbrk_r+0x1a>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	b103      	cbz	r3, 8015c0a <_sbrk_r+0x1a>
 8015c08:	6023      	str	r3, [r4, #0]
 8015c0a:	bd38      	pop	{r3, r4, r5, pc}
 8015c0c:	200057c8 	.word	0x200057c8

08015c10 <_write_r>:
 8015c10:	b538      	push	{r3, r4, r5, lr}
 8015c12:	4d07      	ldr	r5, [pc, #28]	@ (8015c30 <_write_r+0x20>)
 8015c14:	4604      	mov	r4, r0
 8015c16:	4608      	mov	r0, r1
 8015c18:	4611      	mov	r1, r2
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	602a      	str	r2, [r5, #0]
 8015c1e:	461a      	mov	r2, r3
 8015c20:	f7ea fe86 	bl	8000930 <_write>
 8015c24:	1c43      	adds	r3, r0, #1
 8015c26:	d102      	bne.n	8015c2e <_write_r+0x1e>
 8015c28:	682b      	ldr	r3, [r5, #0]
 8015c2a:	b103      	cbz	r3, 8015c2e <_write_r+0x1e>
 8015c2c:	6023      	str	r3, [r4, #0]
 8015c2e:	bd38      	pop	{r3, r4, r5, pc}
 8015c30:	200057c8 	.word	0x200057c8

08015c34 <__libc_init_array>:
 8015c34:	b570      	push	{r4, r5, r6, lr}
 8015c36:	4d0d      	ldr	r5, [pc, #52]	@ (8015c6c <__libc_init_array+0x38>)
 8015c38:	4c0d      	ldr	r4, [pc, #52]	@ (8015c70 <__libc_init_array+0x3c>)
 8015c3a:	1b64      	subs	r4, r4, r5
 8015c3c:	10a4      	asrs	r4, r4, #2
 8015c3e:	2600      	movs	r6, #0
 8015c40:	42a6      	cmp	r6, r4
 8015c42:	d109      	bne.n	8015c58 <__libc_init_array+0x24>
 8015c44:	4d0b      	ldr	r5, [pc, #44]	@ (8015c74 <__libc_init_array+0x40>)
 8015c46:	4c0c      	ldr	r4, [pc, #48]	@ (8015c78 <__libc_init_array+0x44>)
 8015c48:	f000 fd82 	bl	8016750 <_init>
 8015c4c:	1b64      	subs	r4, r4, r5
 8015c4e:	10a4      	asrs	r4, r4, #2
 8015c50:	2600      	movs	r6, #0
 8015c52:	42a6      	cmp	r6, r4
 8015c54:	d105      	bne.n	8015c62 <__libc_init_array+0x2e>
 8015c56:	bd70      	pop	{r4, r5, r6, pc}
 8015c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c5c:	4798      	blx	r3
 8015c5e:	3601      	adds	r6, #1
 8015c60:	e7ee      	b.n	8015c40 <__libc_init_array+0xc>
 8015c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c66:	4798      	blx	r3
 8015c68:	3601      	adds	r6, #1
 8015c6a:	e7f2      	b.n	8015c52 <__libc_init_array+0x1e>
 8015c6c:	08019980 	.word	0x08019980
 8015c70:	08019980 	.word	0x08019980
 8015c74:	08019980 	.word	0x08019980
 8015c78:	08019984 	.word	0x08019984

08015c7c <__retarget_lock_init_recursive>:
 8015c7c:	4770      	bx	lr

08015c7e <__retarget_lock_acquire_recursive>:
 8015c7e:	4770      	bx	lr

08015c80 <__retarget_lock_release_recursive>:
 8015c80:	4770      	bx	lr

08015c82 <memcpy>:
 8015c82:	440a      	add	r2, r1
 8015c84:	4291      	cmp	r1, r2
 8015c86:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015c8a:	d100      	bne.n	8015c8e <memcpy+0xc>
 8015c8c:	4770      	bx	lr
 8015c8e:	b510      	push	{r4, lr}
 8015c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c98:	4291      	cmp	r1, r2
 8015c9a:	d1f9      	bne.n	8015c90 <memcpy+0xe>
 8015c9c:	bd10      	pop	{r4, pc}
	...

08015ca0 <__assert_func>:
 8015ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ca2:	4614      	mov	r4, r2
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	4b09      	ldr	r3, [pc, #36]	@ (8015ccc <__assert_func+0x2c>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	4605      	mov	r5, r0
 8015cac:	68d8      	ldr	r0, [r3, #12]
 8015cae:	b14c      	cbz	r4, 8015cc4 <__assert_func+0x24>
 8015cb0:	4b07      	ldr	r3, [pc, #28]	@ (8015cd0 <__assert_func+0x30>)
 8015cb2:	9100      	str	r1, [sp, #0]
 8015cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015cb8:	4906      	ldr	r1, [pc, #24]	@ (8015cd4 <__assert_func+0x34>)
 8015cba:	462b      	mov	r3, r5
 8015cbc:	f000 fbd2 	bl	8016464 <fiprintf>
 8015cc0:	f000 fc76 	bl	80165b0 <abort>
 8015cc4:	4b04      	ldr	r3, [pc, #16]	@ (8015cd8 <__assert_func+0x38>)
 8015cc6:	461c      	mov	r4, r3
 8015cc8:	e7f3      	b.n	8015cb2 <__assert_func+0x12>
 8015cca:	bf00      	nop
 8015ccc:	20000134 	.word	0x20000134
 8015cd0:	08019909 	.word	0x08019909
 8015cd4:	08019916 	.word	0x08019916
 8015cd8:	08019944 	.word	0x08019944

08015cdc <_free_r>:
 8015cdc:	b538      	push	{r3, r4, r5, lr}
 8015cde:	4605      	mov	r5, r0
 8015ce0:	2900      	cmp	r1, #0
 8015ce2:	d041      	beq.n	8015d68 <_free_r+0x8c>
 8015ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ce8:	1f0c      	subs	r4, r1, #4
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	bfb8      	it	lt
 8015cee:	18e4      	addlt	r4, r4, r3
 8015cf0:	f7ff fdb2 	bl	8015858 <__malloc_lock>
 8015cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8015d6c <_free_r+0x90>)
 8015cf6:	6813      	ldr	r3, [r2, #0]
 8015cf8:	b933      	cbnz	r3, 8015d08 <_free_r+0x2c>
 8015cfa:	6063      	str	r3, [r4, #4]
 8015cfc:	6014      	str	r4, [r2, #0]
 8015cfe:	4628      	mov	r0, r5
 8015d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d04:	f7ff bdae 	b.w	8015864 <__malloc_unlock>
 8015d08:	42a3      	cmp	r3, r4
 8015d0a:	d908      	bls.n	8015d1e <_free_r+0x42>
 8015d0c:	6820      	ldr	r0, [r4, #0]
 8015d0e:	1821      	adds	r1, r4, r0
 8015d10:	428b      	cmp	r3, r1
 8015d12:	bf01      	itttt	eq
 8015d14:	6819      	ldreq	r1, [r3, #0]
 8015d16:	685b      	ldreq	r3, [r3, #4]
 8015d18:	1809      	addeq	r1, r1, r0
 8015d1a:	6021      	streq	r1, [r4, #0]
 8015d1c:	e7ed      	b.n	8015cfa <_free_r+0x1e>
 8015d1e:	461a      	mov	r2, r3
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	b10b      	cbz	r3, 8015d28 <_free_r+0x4c>
 8015d24:	42a3      	cmp	r3, r4
 8015d26:	d9fa      	bls.n	8015d1e <_free_r+0x42>
 8015d28:	6811      	ldr	r1, [r2, #0]
 8015d2a:	1850      	adds	r0, r2, r1
 8015d2c:	42a0      	cmp	r0, r4
 8015d2e:	d10b      	bne.n	8015d48 <_free_r+0x6c>
 8015d30:	6820      	ldr	r0, [r4, #0]
 8015d32:	4401      	add	r1, r0
 8015d34:	1850      	adds	r0, r2, r1
 8015d36:	4283      	cmp	r3, r0
 8015d38:	6011      	str	r1, [r2, #0]
 8015d3a:	d1e0      	bne.n	8015cfe <_free_r+0x22>
 8015d3c:	6818      	ldr	r0, [r3, #0]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	6053      	str	r3, [r2, #4]
 8015d42:	4408      	add	r0, r1
 8015d44:	6010      	str	r0, [r2, #0]
 8015d46:	e7da      	b.n	8015cfe <_free_r+0x22>
 8015d48:	d902      	bls.n	8015d50 <_free_r+0x74>
 8015d4a:	230c      	movs	r3, #12
 8015d4c:	602b      	str	r3, [r5, #0]
 8015d4e:	e7d6      	b.n	8015cfe <_free_r+0x22>
 8015d50:	6820      	ldr	r0, [r4, #0]
 8015d52:	1821      	adds	r1, r4, r0
 8015d54:	428b      	cmp	r3, r1
 8015d56:	bf04      	itt	eq
 8015d58:	6819      	ldreq	r1, [r3, #0]
 8015d5a:	685b      	ldreq	r3, [r3, #4]
 8015d5c:	6063      	str	r3, [r4, #4]
 8015d5e:	bf04      	itt	eq
 8015d60:	1809      	addeq	r1, r1, r0
 8015d62:	6021      	streq	r1, [r4, #0]
 8015d64:	6054      	str	r4, [r2, #4]
 8015d66:	e7ca      	b.n	8015cfe <_free_r+0x22>
 8015d68:	bd38      	pop	{r3, r4, r5, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20005688 	.word	0x20005688

08015d70 <__sfputc_r>:
 8015d70:	6893      	ldr	r3, [r2, #8]
 8015d72:	3b01      	subs	r3, #1
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	b410      	push	{r4}
 8015d78:	6093      	str	r3, [r2, #8]
 8015d7a:	da08      	bge.n	8015d8e <__sfputc_r+0x1e>
 8015d7c:	6994      	ldr	r4, [r2, #24]
 8015d7e:	42a3      	cmp	r3, r4
 8015d80:	db01      	blt.n	8015d86 <__sfputc_r+0x16>
 8015d82:	290a      	cmp	r1, #10
 8015d84:	d103      	bne.n	8015d8e <__sfputc_r+0x1e>
 8015d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d8a:	f000 bb7d 	b.w	8016488 <__swbuf_r>
 8015d8e:	6813      	ldr	r3, [r2, #0]
 8015d90:	1c58      	adds	r0, r3, #1
 8015d92:	6010      	str	r0, [r2, #0]
 8015d94:	7019      	strb	r1, [r3, #0]
 8015d96:	4608      	mov	r0, r1
 8015d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d9c:	4770      	bx	lr

08015d9e <__sfputs_r>:
 8015d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da0:	4606      	mov	r6, r0
 8015da2:	460f      	mov	r7, r1
 8015da4:	4614      	mov	r4, r2
 8015da6:	18d5      	adds	r5, r2, r3
 8015da8:	42ac      	cmp	r4, r5
 8015daa:	d101      	bne.n	8015db0 <__sfputs_r+0x12>
 8015dac:	2000      	movs	r0, #0
 8015dae:	e007      	b.n	8015dc0 <__sfputs_r+0x22>
 8015db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015db4:	463a      	mov	r2, r7
 8015db6:	4630      	mov	r0, r6
 8015db8:	f7ff ffda 	bl	8015d70 <__sfputc_r>
 8015dbc:	1c43      	adds	r3, r0, #1
 8015dbe:	d1f3      	bne.n	8015da8 <__sfputs_r+0xa>
 8015dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015dc4 <_vfiprintf_r>:
 8015dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dc8:	460d      	mov	r5, r1
 8015dca:	b09d      	sub	sp, #116	@ 0x74
 8015dcc:	4614      	mov	r4, r2
 8015dce:	4698      	mov	r8, r3
 8015dd0:	4606      	mov	r6, r0
 8015dd2:	b118      	cbz	r0, 8015ddc <_vfiprintf_r+0x18>
 8015dd4:	6a03      	ldr	r3, [r0, #32]
 8015dd6:	b90b      	cbnz	r3, 8015ddc <_vfiprintf_r+0x18>
 8015dd8:	f7ff fe14 	bl	8015a04 <__sinit>
 8015ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015dde:	07d9      	lsls	r1, r3, #31
 8015de0:	d405      	bmi.n	8015dee <_vfiprintf_r+0x2a>
 8015de2:	89ab      	ldrh	r3, [r5, #12]
 8015de4:	059a      	lsls	r2, r3, #22
 8015de6:	d402      	bmi.n	8015dee <_vfiprintf_r+0x2a>
 8015de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015dea:	f7ff ff48 	bl	8015c7e <__retarget_lock_acquire_recursive>
 8015dee:	89ab      	ldrh	r3, [r5, #12]
 8015df0:	071b      	lsls	r3, r3, #28
 8015df2:	d501      	bpl.n	8015df8 <_vfiprintf_r+0x34>
 8015df4:	692b      	ldr	r3, [r5, #16]
 8015df6:	b99b      	cbnz	r3, 8015e20 <_vfiprintf_r+0x5c>
 8015df8:	4629      	mov	r1, r5
 8015dfa:	4630      	mov	r0, r6
 8015dfc:	f000 fb82 	bl	8016504 <__swsetup_r>
 8015e00:	b170      	cbz	r0, 8015e20 <_vfiprintf_r+0x5c>
 8015e02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e04:	07dc      	lsls	r4, r3, #31
 8015e06:	d504      	bpl.n	8015e12 <_vfiprintf_r+0x4e>
 8015e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e0c:	b01d      	add	sp, #116	@ 0x74
 8015e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e12:	89ab      	ldrh	r3, [r5, #12]
 8015e14:	0598      	lsls	r0, r3, #22
 8015e16:	d4f7      	bmi.n	8015e08 <_vfiprintf_r+0x44>
 8015e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e1a:	f7ff ff31 	bl	8015c80 <__retarget_lock_release_recursive>
 8015e1e:	e7f3      	b.n	8015e08 <_vfiprintf_r+0x44>
 8015e20:	2300      	movs	r3, #0
 8015e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e24:	2320      	movs	r3, #32
 8015e26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e2e:	2330      	movs	r3, #48	@ 0x30
 8015e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015fe0 <_vfiprintf_r+0x21c>
 8015e34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e38:	f04f 0901 	mov.w	r9, #1
 8015e3c:	4623      	mov	r3, r4
 8015e3e:	469a      	mov	sl, r3
 8015e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e44:	b10a      	cbz	r2, 8015e4a <_vfiprintf_r+0x86>
 8015e46:	2a25      	cmp	r2, #37	@ 0x25
 8015e48:	d1f9      	bne.n	8015e3e <_vfiprintf_r+0x7a>
 8015e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8015e4e:	d00b      	beq.n	8015e68 <_vfiprintf_r+0xa4>
 8015e50:	465b      	mov	r3, fp
 8015e52:	4622      	mov	r2, r4
 8015e54:	4629      	mov	r1, r5
 8015e56:	4630      	mov	r0, r6
 8015e58:	f7ff ffa1 	bl	8015d9e <__sfputs_r>
 8015e5c:	3001      	adds	r0, #1
 8015e5e:	f000 80a7 	beq.w	8015fb0 <_vfiprintf_r+0x1ec>
 8015e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e64:	445a      	add	r2, fp
 8015e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e68:	f89a 3000 	ldrb.w	r3, [sl]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f000 809f 	beq.w	8015fb0 <_vfiprintf_r+0x1ec>
 8015e72:	2300      	movs	r3, #0
 8015e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e7c:	f10a 0a01 	add.w	sl, sl, #1
 8015e80:	9304      	str	r3, [sp, #16]
 8015e82:	9307      	str	r3, [sp, #28]
 8015e84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e88:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e8a:	4654      	mov	r4, sl
 8015e8c:	2205      	movs	r2, #5
 8015e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e92:	4853      	ldr	r0, [pc, #332]	@ (8015fe0 <_vfiprintf_r+0x21c>)
 8015e94:	f7ea f9b4 	bl	8000200 <memchr>
 8015e98:	9a04      	ldr	r2, [sp, #16]
 8015e9a:	b9d8      	cbnz	r0, 8015ed4 <_vfiprintf_r+0x110>
 8015e9c:	06d1      	lsls	r1, r2, #27
 8015e9e:	bf44      	itt	mi
 8015ea0:	2320      	movmi	r3, #32
 8015ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ea6:	0713      	lsls	r3, r2, #28
 8015ea8:	bf44      	itt	mi
 8015eaa:	232b      	movmi	r3, #43	@ 0x2b
 8015eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8015eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015eb6:	d015      	beq.n	8015ee4 <_vfiprintf_r+0x120>
 8015eb8:	9a07      	ldr	r2, [sp, #28]
 8015eba:	4654      	mov	r4, sl
 8015ebc:	2000      	movs	r0, #0
 8015ebe:	f04f 0c0a 	mov.w	ip, #10
 8015ec2:	4621      	mov	r1, r4
 8015ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ec8:	3b30      	subs	r3, #48	@ 0x30
 8015eca:	2b09      	cmp	r3, #9
 8015ecc:	d94b      	bls.n	8015f66 <_vfiprintf_r+0x1a2>
 8015ece:	b1b0      	cbz	r0, 8015efe <_vfiprintf_r+0x13a>
 8015ed0:	9207      	str	r2, [sp, #28]
 8015ed2:	e014      	b.n	8015efe <_vfiprintf_r+0x13a>
 8015ed4:	eba0 0308 	sub.w	r3, r0, r8
 8015ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8015edc:	4313      	orrs	r3, r2
 8015ede:	9304      	str	r3, [sp, #16]
 8015ee0:	46a2      	mov	sl, r4
 8015ee2:	e7d2      	b.n	8015e8a <_vfiprintf_r+0xc6>
 8015ee4:	9b03      	ldr	r3, [sp, #12]
 8015ee6:	1d19      	adds	r1, r3, #4
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	9103      	str	r1, [sp, #12]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	bfbb      	ittet	lt
 8015ef0:	425b      	neglt	r3, r3
 8015ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8015ef6:	9307      	strge	r3, [sp, #28]
 8015ef8:	9307      	strlt	r3, [sp, #28]
 8015efa:	bfb8      	it	lt
 8015efc:	9204      	strlt	r2, [sp, #16]
 8015efe:	7823      	ldrb	r3, [r4, #0]
 8015f00:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f02:	d10a      	bne.n	8015f1a <_vfiprintf_r+0x156>
 8015f04:	7863      	ldrb	r3, [r4, #1]
 8015f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f08:	d132      	bne.n	8015f70 <_vfiprintf_r+0x1ac>
 8015f0a:	9b03      	ldr	r3, [sp, #12]
 8015f0c:	1d1a      	adds	r2, r3, #4
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	9203      	str	r2, [sp, #12]
 8015f12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f16:	3402      	adds	r4, #2
 8015f18:	9305      	str	r3, [sp, #20]
 8015f1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015ff0 <_vfiprintf_r+0x22c>
 8015f1e:	7821      	ldrb	r1, [r4, #0]
 8015f20:	2203      	movs	r2, #3
 8015f22:	4650      	mov	r0, sl
 8015f24:	f7ea f96c 	bl	8000200 <memchr>
 8015f28:	b138      	cbz	r0, 8015f3a <_vfiprintf_r+0x176>
 8015f2a:	9b04      	ldr	r3, [sp, #16]
 8015f2c:	eba0 000a 	sub.w	r0, r0, sl
 8015f30:	2240      	movs	r2, #64	@ 0x40
 8015f32:	4082      	lsls	r2, r0
 8015f34:	4313      	orrs	r3, r2
 8015f36:	3401      	adds	r4, #1
 8015f38:	9304      	str	r3, [sp, #16]
 8015f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f3e:	4829      	ldr	r0, [pc, #164]	@ (8015fe4 <_vfiprintf_r+0x220>)
 8015f40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f44:	2206      	movs	r2, #6
 8015f46:	f7ea f95b 	bl	8000200 <memchr>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d03f      	beq.n	8015fce <_vfiprintf_r+0x20a>
 8015f4e:	4b26      	ldr	r3, [pc, #152]	@ (8015fe8 <_vfiprintf_r+0x224>)
 8015f50:	bb1b      	cbnz	r3, 8015f9a <_vfiprintf_r+0x1d6>
 8015f52:	9b03      	ldr	r3, [sp, #12]
 8015f54:	3307      	adds	r3, #7
 8015f56:	f023 0307 	bic.w	r3, r3, #7
 8015f5a:	3308      	adds	r3, #8
 8015f5c:	9303      	str	r3, [sp, #12]
 8015f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f60:	443b      	add	r3, r7
 8015f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f64:	e76a      	b.n	8015e3c <_vfiprintf_r+0x78>
 8015f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f6a:	460c      	mov	r4, r1
 8015f6c:	2001      	movs	r0, #1
 8015f6e:	e7a8      	b.n	8015ec2 <_vfiprintf_r+0xfe>
 8015f70:	2300      	movs	r3, #0
 8015f72:	3401      	adds	r4, #1
 8015f74:	9305      	str	r3, [sp, #20]
 8015f76:	4619      	mov	r1, r3
 8015f78:	f04f 0c0a 	mov.w	ip, #10
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f82:	3a30      	subs	r2, #48	@ 0x30
 8015f84:	2a09      	cmp	r2, #9
 8015f86:	d903      	bls.n	8015f90 <_vfiprintf_r+0x1cc>
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d0c6      	beq.n	8015f1a <_vfiprintf_r+0x156>
 8015f8c:	9105      	str	r1, [sp, #20]
 8015f8e:	e7c4      	b.n	8015f1a <_vfiprintf_r+0x156>
 8015f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f94:	4604      	mov	r4, r0
 8015f96:	2301      	movs	r3, #1
 8015f98:	e7f0      	b.n	8015f7c <_vfiprintf_r+0x1b8>
 8015f9a:	ab03      	add	r3, sp, #12
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	462a      	mov	r2, r5
 8015fa0:	4b12      	ldr	r3, [pc, #72]	@ (8015fec <_vfiprintf_r+0x228>)
 8015fa2:	a904      	add	r1, sp, #16
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	f3af 8000 	nop.w
 8015faa:	4607      	mov	r7, r0
 8015fac:	1c78      	adds	r0, r7, #1
 8015fae:	d1d6      	bne.n	8015f5e <_vfiprintf_r+0x19a>
 8015fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015fb2:	07d9      	lsls	r1, r3, #31
 8015fb4:	d405      	bmi.n	8015fc2 <_vfiprintf_r+0x1fe>
 8015fb6:	89ab      	ldrh	r3, [r5, #12]
 8015fb8:	059a      	lsls	r2, r3, #22
 8015fba:	d402      	bmi.n	8015fc2 <_vfiprintf_r+0x1fe>
 8015fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015fbe:	f7ff fe5f 	bl	8015c80 <__retarget_lock_release_recursive>
 8015fc2:	89ab      	ldrh	r3, [r5, #12]
 8015fc4:	065b      	lsls	r3, r3, #25
 8015fc6:	f53f af1f 	bmi.w	8015e08 <_vfiprintf_r+0x44>
 8015fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fcc:	e71e      	b.n	8015e0c <_vfiprintf_r+0x48>
 8015fce:	ab03      	add	r3, sp, #12
 8015fd0:	9300      	str	r3, [sp, #0]
 8015fd2:	462a      	mov	r2, r5
 8015fd4:	4b05      	ldr	r3, [pc, #20]	@ (8015fec <_vfiprintf_r+0x228>)
 8015fd6:	a904      	add	r1, sp, #16
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f000 f879 	bl	80160d0 <_printf_i>
 8015fde:	e7e4      	b.n	8015faa <_vfiprintf_r+0x1e6>
 8015fe0:	08019945 	.word	0x08019945
 8015fe4:	0801994f 	.word	0x0801994f
 8015fe8:	00000000 	.word	0x00000000
 8015fec:	08015d9f 	.word	0x08015d9f
 8015ff0:	0801994b 	.word	0x0801994b

08015ff4 <_printf_common>:
 8015ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ff8:	4616      	mov	r6, r2
 8015ffa:	4698      	mov	r8, r3
 8015ffc:	688a      	ldr	r2, [r1, #8]
 8015ffe:	690b      	ldr	r3, [r1, #16]
 8016000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016004:	4293      	cmp	r3, r2
 8016006:	bfb8      	it	lt
 8016008:	4613      	movlt	r3, r2
 801600a:	6033      	str	r3, [r6, #0]
 801600c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016010:	4607      	mov	r7, r0
 8016012:	460c      	mov	r4, r1
 8016014:	b10a      	cbz	r2, 801601a <_printf_common+0x26>
 8016016:	3301      	adds	r3, #1
 8016018:	6033      	str	r3, [r6, #0]
 801601a:	6823      	ldr	r3, [r4, #0]
 801601c:	0699      	lsls	r1, r3, #26
 801601e:	bf42      	ittt	mi
 8016020:	6833      	ldrmi	r3, [r6, #0]
 8016022:	3302      	addmi	r3, #2
 8016024:	6033      	strmi	r3, [r6, #0]
 8016026:	6825      	ldr	r5, [r4, #0]
 8016028:	f015 0506 	ands.w	r5, r5, #6
 801602c:	d106      	bne.n	801603c <_printf_common+0x48>
 801602e:	f104 0a19 	add.w	sl, r4, #25
 8016032:	68e3      	ldr	r3, [r4, #12]
 8016034:	6832      	ldr	r2, [r6, #0]
 8016036:	1a9b      	subs	r3, r3, r2
 8016038:	42ab      	cmp	r3, r5
 801603a:	dc26      	bgt.n	801608a <_printf_common+0x96>
 801603c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016040:	6822      	ldr	r2, [r4, #0]
 8016042:	3b00      	subs	r3, #0
 8016044:	bf18      	it	ne
 8016046:	2301      	movne	r3, #1
 8016048:	0692      	lsls	r2, r2, #26
 801604a:	d42b      	bmi.n	80160a4 <_printf_common+0xb0>
 801604c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016050:	4641      	mov	r1, r8
 8016052:	4638      	mov	r0, r7
 8016054:	47c8      	blx	r9
 8016056:	3001      	adds	r0, #1
 8016058:	d01e      	beq.n	8016098 <_printf_common+0xa4>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	6922      	ldr	r2, [r4, #16]
 801605e:	f003 0306 	and.w	r3, r3, #6
 8016062:	2b04      	cmp	r3, #4
 8016064:	bf02      	ittt	eq
 8016066:	68e5      	ldreq	r5, [r4, #12]
 8016068:	6833      	ldreq	r3, [r6, #0]
 801606a:	1aed      	subeq	r5, r5, r3
 801606c:	68a3      	ldr	r3, [r4, #8]
 801606e:	bf0c      	ite	eq
 8016070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016074:	2500      	movne	r5, #0
 8016076:	4293      	cmp	r3, r2
 8016078:	bfc4      	itt	gt
 801607a:	1a9b      	subgt	r3, r3, r2
 801607c:	18ed      	addgt	r5, r5, r3
 801607e:	2600      	movs	r6, #0
 8016080:	341a      	adds	r4, #26
 8016082:	42b5      	cmp	r5, r6
 8016084:	d11a      	bne.n	80160bc <_printf_common+0xc8>
 8016086:	2000      	movs	r0, #0
 8016088:	e008      	b.n	801609c <_printf_common+0xa8>
 801608a:	2301      	movs	r3, #1
 801608c:	4652      	mov	r2, sl
 801608e:	4641      	mov	r1, r8
 8016090:	4638      	mov	r0, r7
 8016092:	47c8      	blx	r9
 8016094:	3001      	adds	r0, #1
 8016096:	d103      	bne.n	80160a0 <_printf_common+0xac>
 8016098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801609c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160a0:	3501      	adds	r5, #1
 80160a2:	e7c6      	b.n	8016032 <_printf_common+0x3e>
 80160a4:	18e1      	adds	r1, r4, r3
 80160a6:	1c5a      	adds	r2, r3, #1
 80160a8:	2030      	movs	r0, #48	@ 0x30
 80160aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80160ae:	4422      	add	r2, r4
 80160b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80160b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80160b8:	3302      	adds	r3, #2
 80160ba:	e7c7      	b.n	801604c <_printf_common+0x58>
 80160bc:	2301      	movs	r3, #1
 80160be:	4622      	mov	r2, r4
 80160c0:	4641      	mov	r1, r8
 80160c2:	4638      	mov	r0, r7
 80160c4:	47c8      	blx	r9
 80160c6:	3001      	adds	r0, #1
 80160c8:	d0e6      	beq.n	8016098 <_printf_common+0xa4>
 80160ca:	3601      	adds	r6, #1
 80160cc:	e7d9      	b.n	8016082 <_printf_common+0x8e>
	...

080160d0 <_printf_i>:
 80160d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160d4:	7e0f      	ldrb	r7, [r1, #24]
 80160d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80160d8:	2f78      	cmp	r7, #120	@ 0x78
 80160da:	4691      	mov	r9, r2
 80160dc:	4680      	mov	r8, r0
 80160de:	460c      	mov	r4, r1
 80160e0:	469a      	mov	sl, r3
 80160e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80160e6:	d807      	bhi.n	80160f8 <_printf_i+0x28>
 80160e8:	2f62      	cmp	r7, #98	@ 0x62
 80160ea:	d80a      	bhi.n	8016102 <_printf_i+0x32>
 80160ec:	2f00      	cmp	r7, #0
 80160ee:	f000 80d1 	beq.w	8016294 <_printf_i+0x1c4>
 80160f2:	2f58      	cmp	r7, #88	@ 0x58
 80160f4:	f000 80b8 	beq.w	8016268 <_printf_i+0x198>
 80160f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80160fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016100:	e03a      	b.n	8016178 <_printf_i+0xa8>
 8016102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016106:	2b15      	cmp	r3, #21
 8016108:	d8f6      	bhi.n	80160f8 <_printf_i+0x28>
 801610a:	a101      	add	r1, pc, #4	@ (adr r1, 8016110 <_printf_i+0x40>)
 801610c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016110:	08016169 	.word	0x08016169
 8016114:	0801617d 	.word	0x0801617d
 8016118:	080160f9 	.word	0x080160f9
 801611c:	080160f9 	.word	0x080160f9
 8016120:	080160f9 	.word	0x080160f9
 8016124:	080160f9 	.word	0x080160f9
 8016128:	0801617d 	.word	0x0801617d
 801612c:	080160f9 	.word	0x080160f9
 8016130:	080160f9 	.word	0x080160f9
 8016134:	080160f9 	.word	0x080160f9
 8016138:	080160f9 	.word	0x080160f9
 801613c:	0801627b 	.word	0x0801627b
 8016140:	080161a7 	.word	0x080161a7
 8016144:	08016235 	.word	0x08016235
 8016148:	080160f9 	.word	0x080160f9
 801614c:	080160f9 	.word	0x080160f9
 8016150:	0801629d 	.word	0x0801629d
 8016154:	080160f9 	.word	0x080160f9
 8016158:	080161a7 	.word	0x080161a7
 801615c:	080160f9 	.word	0x080160f9
 8016160:	080160f9 	.word	0x080160f9
 8016164:	0801623d 	.word	0x0801623d
 8016168:	6833      	ldr	r3, [r6, #0]
 801616a:	1d1a      	adds	r2, r3, #4
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	6032      	str	r2, [r6, #0]
 8016170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016178:	2301      	movs	r3, #1
 801617a:	e09c      	b.n	80162b6 <_printf_i+0x1e6>
 801617c:	6833      	ldr	r3, [r6, #0]
 801617e:	6820      	ldr	r0, [r4, #0]
 8016180:	1d19      	adds	r1, r3, #4
 8016182:	6031      	str	r1, [r6, #0]
 8016184:	0606      	lsls	r6, r0, #24
 8016186:	d501      	bpl.n	801618c <_printf_i+0xbc>
 8016188:	681d      	ldr	r5, [r3, #0]
 801618a:	e003      	b.n	8016194 <_printf_i+0xc4>
 801618c:	0645      	lsls	r5, r0, #25
 801618e:	d5fb      	bpl.n	8016188 <_printf_i+0xb8>
 8016190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016194:	2d00      	cmp	r5, #0
 8016196:	da03      	bge.n	80161a0 <_printf_i+0xd0>
 8016198:	232d      	movs	r3, #45	@ 0x2d
 801619a:	426d      	negs	r5, r5
 801619c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161a0:	4858      	ldr	r0, [pc, #352]	@ (8016304 <_printf_i+0x234>)
 80161a2:	230a      	movs	r3, #10
 80161a4:	e011      	b.n	80161ca <_printf_i+0xfa>
 80161a6:	6821      	ldr	r1, [r4, #0]
 80161a8:	6833      	ldr	r3, [r6, #0]
 80161aa:	0608      	lsls	r0, r1, #24
 80161ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80161b0:	d402      	bmi.n	80161b8 <_printf_i+0xe8>
 80161b2:	0649      	lsls	r1, r1, #25
 80161b4:	bf48      	it	mi
 80161b6:	b2ad      	uxthmi	r5, r5
 80161b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80161ba:	4852      	ldr	r0, [pc, #328]	@ (8016304 <_printf_i+0x234>)
 80161bc:	6033      	str	r3, [r6, #0]
 80161be:	bf14      	ite	ne
 80161c0:	230a      	movne	r3, #10
 80161c2:	2308      	moveq	r3, #8
 80161c4:	2100      	movs	r1, #0
 80161c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80161ca:	6866      	ldr	r6, [r4, #4]
 80161cc:	60a6      	str	r6, [r4, #8]
 80161ce:	2e00      	cmp	r6, #0
 80161d0:	db05      	blt.n	80161de <_printf_i+0x10e>
 80161d2:	6821      	ldr	r1, [r4, #0]
 80161d4:	432e      	orrs	r6, r5
 80161d6:	f021 0104 	bic.w	r1, r1, #4
 80161da:	6021      	str	r1, [r4, #0]
 80161dc:	d04b      	beq.n	8016276 <_printf_i+0x1a6>
 80161de:	4616      	mov	r6, r2
 80161e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80161e4:	fb03 5711 	mls	r7, r3, r1, r5
 80161e8:	5dc7      	ldrb	r7, [r0, r7]
 80161ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161ee:	462f      	mov	r7, r5
 80161f0:	42bb      	cmp	r3, r7
 80161f2:	460d      	mov	r5, r1
 80161f4:	d9f4      	bls.n	80161e0 <_printf_i+0x110>
 80161f6:	2b08      	cmp	r3, #8
 80161f8:	d10b      	bne.n	8016212 <_printf_i+0x142>
 80161fa:	6823      	ldr	r3, [r4, #0]
 80161fc:	07df      	lsls	r7, r3, #31
 80161fe:	d508      	bpl.n	8016212 <_printf_i+0x142>
 8016200:	6923      	ldr	r3, [r4, #16]
 8016202:	6861      	ldr	r1, [r4, #4]
 8016204:	4299      	cmp	r1, r3
 8016206:	bfde      	ittt	le
 8016208:	2330      	movle	r3, #48	@ 0x30
 801620a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801620e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016212:	1b92      	subs	r2, r2, r6
 8016214:	6122      	str	r2, [r4, #16]
 8016216:	f8cd a000 	str.w	sl, [sp]
 801621a:	464b      	mov	r3, r9
 801621c:	aa03      	add	r2, sp, #12
 801621e:	4621      	mov	r1, r4
 8016220:	4640      	mov	r0, r8
 8016222:	f7ff fee7 	bl	8015ff4 <_printf_common>
 8016226:	3001      	adds	r0, #1
 8016228:	d14a      	bne.n	80162c0 <_printf_i+0x1f0>
 801622a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801622e:	b004      	add	sp, #16
 8016230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016234:	6823      	ldr	r3, [r4, #0]
 8016236:	f043 0320 	orr.w	r3, r3, #32
 801623a:	6023      	str	r3, [r4, #0]
 801623c:	4832      	ldr	r0, [pc, #200]	@ (8016308 <_printf_i+0x238>)
 801623e:	2778      	movs	r7, #120	@ 0x78
 8016240:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016244:	6823      	ldr	r3, [r4, #0]
 8016246:	6831      	ldr	r1, [r6, #0]
 8016248:	061f      	lsls	r7, r3, #24
 801624a:	f851 5b04 	ldr.w	r5, [r1], #4
 801624e:	d402      	bmi.n	8016256 <_printf_i+0x186>
 8016250:	065f      	lsls	r7, r3, #25
 8016252:	bf48      	it	mi
 8016254:	b2ad      	uxthmi	r5, r5
 8016256:	6031      	str	r1, [r6, #0]
 8016258:	07d9      	lsls	r1, r3, #31
 801625a:	bf44      	itt	mi
 801625c:	f043 0320 	orrmi.w	r3, r3, #32
 8016260:	6023      	strmi	r3, [r4, #0]
 8016262:	b11d      	cbz	r5, 801626c <_printf_i+0x19c>
 8016264:	2310      	movs	r3, #16
 8016266:	e7ad      	b.n	80161c4 <_printf_i+0xf4>
 8016268:	4826      	ldr	r0, [pc, #152]	@ (8016304 <_printf_i+0x234>)
 801626a:	e7e9      	b.n	8016240 <_printf_i+0x170>
 801626c:	6823      	ldr	r3, [r4, #0]
 801626e:	f023 0320 	bic.w	r3, r3, #32
 8016272:	6023      	str	r3, [r4, #0]
 8016274:	e7f6      	b.n	8016264 <_printf_i+0x194>
 8016276:	4616      	mov	r6, r2
 8016278:	e7bd      	b.n	80161f6 <_printf_i+0x126>
 801627a:	6833      	ldr	r3, [r6, #0]
 801627c:	6825      	ldr	r5, [r4, #0]
 801627e:	6961      	ldr	r1, [r4, #20]
 8016280:	1d18      	adds	r0, r3, #4
 8016282:	6030      	str	r0, [r6, #0]
 8016284:	062e      	lsls	r6, r5, #24
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	d501      	bpl.n	801628e <_printf_i+0x1be>
 801628a:	6019      	str	r1, [r3, #0]
 801628c:	e002      	b.n	8016294 <_printf_i+0x1c4>
 801628e:	0668      	lsls	r0, r5, #25
 8016290:	d5fb      	bpl.n	801628a <_printf_i+0x1ba>
 8016292:	8019      	strh	r1, [r3, #0]
 8016294:	2300      	movs	r3, #0
 8016296:	6123      	str	r3, [r4, #16]
 8016298:	4616      	mov	r6, r2
 801629a:	e7bc      	b.n	8016216 <_printf_i+0x146>
 801629c:	6833      	ldr	r3, [r6, #0]
 801629e:	1d1a      	adds	r2, r3, #4
 80162a0:	6032      	str	r2, [r6, #0]
 80162a2:	681e      	ldr	r6, [r3, #0]
 80162a4:	6862      	ldr	r2, [r4, #4]
 80162a6:	2100      	movs	r1, #0
 80162a8:	4630      	mov	r0, r6
 80162aa:	f7e9 ffa9 	bl	8000200 <memchr>
 80162ae:	b108      	cbz	r0, 80162b4 <_printf_i+0x1e4>
 80162b0:	1b80      	subs	r0, r0, r6
 80162b2:	6060      	str	r0, [r4, #4]
 80162b4:	6863      	ldr	r3, [r4, #4]
 80162b6:	6123      	str	r3, [r4, #16]
 80162b8:	2300      	movs	r3, #0
 80162ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162be:	e7aa      	b.n	8016216 <_printf_i+0x146>
 80162c0:	6923      	ldr	r3, [r4, #16]
 80162c2:	4632      	mov	r2, r6
 80162c4:	4649      	mov	r1, r9
 80162c6:	4640      	mov	r0, r8
 80162c8:	47d0      	blx	sl
 80162ca:	3001      	adds	r0, #1
 80162cc:	d0ad      	beq.n	801622a <_printf_i+0x15a>
 80162ce:	6823      	ldr	r3, [r4, #0]
 80162d0:	079b      	lsls	r3, r3, #30
 80162d2:	d413      	bmi.n	80162fc <_printf_i+0x22c>
 80162d4:	68e0      	ldr	r0, [r4, #12]
 80162d6:	9b03      	ldr	r3, [sp, #12]
 80162d8:	4298      	cmp	r0, r3
 80162da:	bfb8      	it	lt
 80162dc:	4618      	movlt	r0, r3
 80162de:	e7a6      	b.n	801622e <_printf_i+0x15e>
 80162e0:	2301      	movs	r3, #1
 80162e2:	4632      	mov	r2, r6
 80162e4:	4649      	mov	r1, r9
 80162e6:	4640      	mov	r0, r8
 80162e8:	47d0      	blx	sl
 80162ea:	3001      	adds	r0, #1
 80162ec:	d09d      	beq.n	801622a <_printf_i+0x15a>
 80162ee:	3501      	adds	r5, #1
 80162f0:	68e3      	ldr	r3, [r4, #12]
 80162f2:	9903      	ldr	r1, [sp, #12]
 80162f4:	1a5b      	subs	r3, r3, r1
 80162f6:	42ab      	cmp	r3, r5
 80162f8:	dcf2      	bgt.n	80162e0 <_printf_i+0x210>
 80162fa:	e7eb      	b.n	80162d4 <_printf_i+0x204>
 80162fc:	2500      	movs	r5, #0
 80162fe:	f104 0619 	add.w	r6, r4, #25
 8016302:	e7f5      	b.n	80162f0 <_printf_i+0x220>
 8016304:	08019956 	.word	0x08019956
 8016308:	08019967 	.word	0x08019967

0801630c <__sflush_r>:
 801630c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016314:	0716      	lsls	r6, r2, #28
 8016316:	4605      	mov	r5, r0
 8016318:	460c      	mov	r4, r1
 801631a:	d454      	bmi.n	80163c6 <__sflush_r+0xba>
 801631c:	684b      	ldr	r3, [r1, #4]
 801631e:	2b00      	cmp	r3, #0
 8016320:	dc02      	bgt.n	8016328 <__sflush_r+0x1c>
 8016322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016324:	2b00      	cmp	r3, #0
 8016326:	dd48      	ble.n	80163ba <__sflush_r+0xae>
 8016328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801632a:	2e00      	cmp	r6, #0
 801632c:	d045      	beq.n	80163ba <__sflush_r+0xae>
 801632e:	2300      	movs	r3, #0
 8016330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016334:	682f      	ldr	r7, [r5, #0]
 8016336:	6a21      	ldr	r1, [r4, #32]
 8016338:	602b      	str	r3, [r5, #0]
 801633a:	d030      	beq.n	801639e <__sflush_r+0x92>
 801633c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801633e:	89a3      	ldrh	r3, [r4, #12]
 8016340:	0759      	lsls	r1, r3, #29
 8016342:	d505      	bpl.n	8016350 <__sflush_r+0x44>
 8016344:	6863      	ldr	r3, [r4, #4]
 8016346:	1ad2      	subs	r2, r2, r3
 8016348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801634a:	b10b      	cbz	r3, 8016350 <__sflush_r+0x44>
 801634c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801634e:	1ad2      	subs	r2, r2, r3
 8016350:	2300      	movs	r3, #0
 8016352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016354:	6a21      	ldr	r1, [r4, #32]
 8016356:	4628      	mov	r0, r5
 8016358:	47b0      	blx	r6
 801635a:	1c43      	adds	r3, r0, #1
 801635c:	89a3      	ldrh	r3, [r4, #12]
 801635e:	d106      	bne.n	801636e <__sflush_r+0x62>
 8016360:	6829      	ldr	r1, [r5, #0]
 8016362:	291d      	cmp	r1, #29
 8016364:	d82b      	bhi.n	80163be <__sflush_r+0xb2>
 8016366:	4a2a      	ldr	r2, [pc, #168]	@ (8016410 <__sflush_r+0x104>)
 8016368:	40ca      	lsrs	r2, r1
 801636a:	07d6      	lsls	r6, r2, #31
 801636c:	d527      	bpl.n	80163be <__sflush_r+0xb2>
 801636e:	2200      	movs	r2, #0
 8016370:	6062      	str	r2, [r4, #4]
 8016372:	04d9      	lsls	r1, r3, #19
 8016374:	6922      	ldr	r2, [r4, #16]
 8016376:	6022      	str	r2, [r4, #0]
 8016378:	d504      	bpl.n	8016384 <__sflush_r+0x78>
 801637a:	1c42      	adds	r2, r0, #1
 801637c:	d101      	bne.n	8016382 <__sflush_r+0x76>
 801637e:	682b      	ldr	r3, [r5, #0]
 8016380:	b903      	cbnz	r3, 8016384 <__sflush_r+0x78>
 8016382:	6560      	str	r0, [r4, #84]	@ 0x54
 8016384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016386:	602f      	str	r7, [r5, #0]
 8016388:	b1b9      	cbz	r1, 80163ba <__sflush_r+0xae>
 801638a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801638e:	4299      	cmp	r1, r3
 8016390:	d002      	beq.n	8016398 <__sflush_r+0x8c>
 8016392:	4628      	mov	r0, r5
 8016394:	f7ff fca2 	bl	8015cdc <_free_r>
 8016398:	2300      	movs	r3, #0
 801639a:	6363      	str	r3, [r4, #52]	@ 0x34
 801639c:	e00d      	b.n	80163ba <__sflush_r+0xae>
 801639e:	2301      	movs	r3, #1
 80163a0:	4628      	mov	r0, r5
 80163a2:	47b0      	blx	r6
 80163a4:	4602      	mov	r2, r0
 80163a6:	1c50      	adds	r0, r2, #1
 80163a8:	d1c9      	bne.n	801633e <__sflush_r+0x32>
 80163aa:	682b      	ldr	r3, [r5, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d0c6      	beq.n	801633e <__sflush_r+0x32>
 80163b0:	2b1d      	cmp	r3, #29
 80163b2:	d001      	beq.n	80163b8 <__sflush_r+0xac>
 80163b4:	2b16      	cmp	r3, #22
 80163b6:	d11e      	bne.n	80163f6 <__sflush_r+0xea>
 80163b8:	602f      	str	r7, [r5, #0]
 80163ba:	2000      	movs	r0, #0
 80163bc:	e022      	b.n	8016404 <__sflush_r+0xf8>
 80163be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163c2:	b21b      	sxth	r3, r3
 80163c4:	e01b      	b.n	80163fe <__sflush_r+0xf2>
 80163c6:	690f      	ldr	r7, [r1, #16]
 80163c8:	2f00      	cmp	r7, #0
 80163ca:	d0f6      	beq.n	80163ba <__sflush_r+0xae>
 80163cc:	0793      	lsls	r3, r2, #30
 80163ce:	680e      	ldr	r6, [r1, #0]
 80163d0:	bf08      	it	eq
 80163d2:	694b      	ldreq	r3, [r1, #20]
 80163d4:	600f      	str	r7, [r1, #0]
 80163d6:	bf18      	it	ne
 80163d8:	2300      	movne	r3, #0
 80163da:	eba6 0807 	sub.w	r8, r6, r7
 80163de:	608b      	str	r3, [r1, #8]
 80163e0:	f1b8 0f00 	cmp.w	r8, #0
 80163e4:	dde9      	ble.n	80163ba <__sflush_r+0xae>
 80163e6:	6a21      	ldr	r1, [r4, #32]
 80163e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80163ea:	4643      	mov	r3, r8
 80163ec:	463a      	mov	r2, r7
 80163ee:	4628      	mov	r0, r5
 80163f0:	47b0      	blx	r6
 80163f2:	2800      	cmp	r0, #0
 80163f4:	dc08      	bgt.n	8016408 <__sflush_r+0xfc>
 80163f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163fe:	81a3      	strh	r3, [r4, #12]
 8016400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	4407      	add	r7, r0
 801640a:	eba8 0800 	sub.w	r8, r8, r0
 801640e:	e7e7      	b.n	80163e0 <__sflush_r+0xd4>
 8016410:	20400001 	.word	0x20400001

08016414 <_fflush_r>:
 8016414:	b538      	push	{r3, r4, r5, lr}
 8016416:	690b      	ldr	r3, [r1, #16]
 8016418:	4605      	mov	r5, r0
 801641a:	460c      	mov	r4, r1
 801641c:	b913      	cbnz	r3, 8016424 <_fflush_r+0x10>
 801641e:	2500      	movs	r5, #0
 8016420:	4628      	mov	r0, r5
 8016422:	bd38      	pop	{r3, r4, r5, pc}
 8016424:	b118      	cbz	r0, 801642e <_fflush_r+0x1a>
 8016426:	6a03      	ldr	r3, [r0, #32]
 8016428:	b90b      	cbnz	r3, 801642e <_fflush_r+0x1a>
 801642a:	f7ff faeb 	bl	8015a04 <__sinit>
 801642e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d0f3      	beq.n	801641e <_fflush_r+0xa>
 8016436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016438:	07d0      	lsls	r0, r2, #31
 801643a:	d404      	bmi.n	8016446 <_fflush_r+0x32>
 801643c:	0599      	lsls	r1, r3, #22
 801643e:	d402      	bmi.n	8016446 <_fflush_r+0x32>
 8016440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016442:	f7ff fc1c 	bl	8015c7e <__retarget_lock_acquire_recursive>
 8016446:	4628      	mov	r0, r5
 8016448:	4621      	mov	r1, r4
 801644a:	f7ff ff5f 	bl	801630c <__sflush_r>
 801644e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016450:	07da      	lsls	r2, r3, #31
 8016452:	4605      	mov	r5, r0
 8016454:	d4e4      	bmi.n	8016420 <_fflush_r+0xc>
 8016456:	89a3      	ldrh	r3, [r4, #12]
 8016458:	059b      	lsls	r3, r3, #22
 801645a:	d4e1      	bmi.n	8016420 <_fflush_r+0xc>
 801645c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801645e:	f7ff fc0f 	bl	8015c80 <__retarget_lock_release_recursive>
 8016462:	e7dd      	b.n	8016420 <_fflush_r+0xc>

08016464 <fiprintf>:
 8016464:	b40e      	push	{r1, r2, r3}
 8016466:	b503      	push	{r0, r1, lr}
 8016468:	4601      	mov	r1, r0
 801646a:	ab03      	add	r3, sp, #12
 801646c:	4805      	ldr	r0, [pc, #20]	@ (8016484 <fiprintf+0x20>)
 801646e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016472:	6800      	ldr	r0, [r0, #0]
 8016474:	9301      	str	r3, [sp, #4]
 8016476:	f7ff fca5 	bl	8015dc4 <_vfiprintf_r>
 801647a:	b002      	add	sp, #8
 801647c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016480:	b003      	add	sp, #12
 8016482:	4770      	bx	lr
 8016484:	20000134 	.word	0x20000134

08016488 <__swbuf_r>:
 8016488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801648a:	460e      	mov	r6, r1
 801648c:	4614      	mov	r4, r2
 801648e:	4605      	mov	r5, r0
 8016490:	b118      	cbz	r0, 801649a <__swbuf_r+0x12>
 8016492:	6a03      	ldr	r3, [r0, #32]
 8016494:	b90b      	cbnz	r3, 801649a <__swbuf_r+0x12>
 8016496:	f7ff fab5 	bl	8015a04 <__sinit>
 801649a:	69a3      	ldr	r3, [r4, #24]
 801649c:	60a3      	str	r3, [r4, #8]
 801649e:	89a3      	ldrh	r3, [r4, #12]
 80164a0:	071a      	lsls	r2, r3, #28
 80164a2:	d501      	bpl.n	80164a8 <__swbuf_r+0x20>
 80164a4:	6923      	ldr	r3, [r4, #16]
 80164a6:	b943      	cbnz	r3, 80164ba <__swbuf_r+0x32>
 80164a8:	4621      	mov	r1, r4
 80164aa:	4628      	mov	r0, r5
 80164ac:	f000 f82a 	bl	8016504 <__swsetup_r>
 80164b0:	b118      	cbz	r0, 80164ba <__swbuf_r+0x32>
 80164b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80164b6:	4638      	mov	r0, r7
 80164b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	6922      	ldr	r2, [r4, #16]
 80164be:	1a98      	subs	r0, r3, r2
 80164c0:	6963      	ldr	r3, [r4, #20]
 80164c2:	b2f6      	uxtb	r6, r6
 80164c4:	4283      	cmp	r3, r0
 80164c6:	4637      	mov	r7, r6
 80164c8:	dc05      	bgt.n	80164d6 <__swbuf_r+0x4e>
 80164ca:	4621      	mov	r1, r4
 80164cc:	4628      	mov	r0, r5
 80164ce:	f7ff ffa1 	bl	8016414 <_fflush_r>
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d1ed      	bne.n	80164b2 <__swbuf_r+0x2a>
 80164d6:	68a3      	ldr	r3, [r4, #8]
 80164d8:	3b01      	subs	r3, #1
 80164da:	60a3      	str	r3, [r4, #8]
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	1c5a      	adds	r2, r3, #1
 80164e0:	6022      	str	r2, [r4, #0]
 80164e2:	701e      	strb	r6, [r3, #0]
 80164e4:	6962      	ldr	r2, [r4, #20]
 80164e6:	1c43      	adds	r3, r0, #1
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d004      	beq.n	80164f6 <__swbuf_r+0x6e>
 80164ec:	89a3      	ldrh	r3, [r4, #12]
 80164ee:	07db      	lsls	r3, r3, #31
 80164f0:	d5e1      	bpl.n	80164b6 <__swbuf_r+0x2e>
 80164f2:	2e0a      	cmp	r6, #10
 80164f4:	d1df      	bne.n	80164b6 <__swbuf_r+0x2e>
 80164f6:	4621      	mov	r1, r4
 80164f8:	4628      	mov	r0, r5
 80164fa:	f7ff ff8b 	bl	8016414 <_fflush_r>
 80164fe:	2800      	cmp	r0, #0
 8016500:	d0d9      	beq.n	80164b6 <__swbuf_r+0x2e>
 8016502:	e7d6      	b.n	80164b2 <__swbuf_r+0x2a>

08016504 <__swsetup_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4b29      	ldr	r3, [pc, #164]	@ (80165ac <__swsetup_r+0xa8>)
 8016508:	4605      	mov	r5, r0
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	460c      	mov	r4, r1
 801650e:	b118      	cbz	r0, 8016518 <__swsetup_r+0x14>
 8016510:	6a03      	ldr	r3, [r0, #32]
 8016512:	b90b      	cbnz	r3, 8016518 <__swsetup_r+0x14>
 8016514:	f7ff fa76 	bl	8015a04 <__sinit>
 8016518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801651c:	0719      	lsls	r1, r3, #28
 801651e:	d422      	bmi.n	8016566 <__swsetup_r+0x62>
 8016520:	06da      	lsls	r2, r3, #27
 8016522:	d407      	bmi.n	8016534 <__swsetup_r+0x30>
 8016524:	2209      	movs	r2, #9
 8016526:	602a      	str	r2, [r5, #0]
 8016528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801652c:	81a3      	strh	r3, [r4, #12]
 801652e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016532:	e033      	b.n	801659c <__swsetup_r+0x98>
 8016534:	0758      	lsls	r0, r3, #29
 8016536:	d512      	bpl.n	801655e <__swsetup_r+0x5a>
 8016538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801653a:	b141      	cbz	r1, 801654e <__swsetup_r+0x4a>
 801653c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016540:	4299      	cmp	r1, r3
 8016542:	d002      	beq.n	801654a <__swsetup_r+0x46>
 8016544:	4628      	mov	r0, r5
 8016546:	f7ff fbc9 	bl	8015cdc <_free_r>
 801654a:	2300      	movs	r3, #0
 801654c:	6363      	str	r3, [r4, #52]	@ 0x34
 801654e:	89a3      	ldrh	r3, [r4, #12]
 8016550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016554:	81a3      	strh	r3, [r4, #12]
 8016556:	2300      	movs	r3, #0
 8016558:	6063      	str	r3, [r4, #4]
 801655a:	6923      	ldr	r3, [r4, #16]
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	89a3      	ldrh	r3, [r4, #12]
 8016560:	f043 0308 	orr.w	r3, r3, #8
 8016564:	81a3      	strh	r3, [r4, #12]
 8016566:	6923      	ldr	r3, [r4, #16]
 8016568:	b94b      	cbnz	r3, 801657e <__swsetup_r+0x7a>
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016574:	d003      	beq.n	801657e <__swsetup_r+0x7a>
 8016576:	4621      	mov	r1, r4
 8016578:	4628      	mov	r0, r5
 801657a:	f000 f846 	bl	801660a <__smakebuf_r>
 801657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016582:	f013 0201 	ands.w	r2, r3, #1
 8016586:	d00a      	beq.n	801659e <__swsetup_r+0x9a>
 8016588:	2200      	movs	r2, #0
 801658a:	60a2      	str	r2, [r4, #8]
 801658c:	6962      	ldr	r2, [r4, #20]
 801658e:	4252      	negs	r2, r2
 8016590:	61a2      	str	r2, [r4, #24]
 8016592:	6922      	ldr	r2, [r4, #16]
 8016594:	b942      	cbnz	r2, 80165a8 <__swsetup_r+0xa4>
 8016596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801659a:	d1c5      	bne.n	8016528 <__swsetup_r+0x24>
 801659c:	bd38      	pop	{r3, r4, r5, pc}
 801659e:	0799      	lsls	r1, r3, #30
 80165a0:	bf58      	it	pl
 80165a2:	6962      	ldrpl	r2, [r4, #20]
 80165a4:	60a2      	str	r2, [r4, #8]
 80165a6:	e7f4      	b.n	8016592 <__swsetup_r+0x8e>
 80165a8:	2000      	movs	r0, #0
 80165aa:	e7f7      	b.n	801659c <__swsetup_r+0x98>
 80165ac:	20000134 	.word	0x20000134

080165b0 <abort>:
 80165b0:	b508      	push	{r3, lr}
 80165b2:	2006      	movs	r0, #6
 80165b4:	f000 f88e 	bl	80166d4 <raise>
 80165b8:	2001      	movs	r0, #1
 80165ba:	f7ea f991 	bl	80008e0 <_exit>

080165be <__swhatbuf_r>:
 80165be:	b570      	push	{r4, r5, r6, lr}
 80165c0:	460c      	mov	r4, r1
 80165c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165c6:	2900      	cmp	r1, #0
 80165c8:	b096      	sub	sp, #88	@ 0x58
 80165ca:	4615      	mov	r5, r2
 80165cc:	461e      	mov	r6, r3
 80165ce:	da0d      	bge.n	80165ec <__swhatbuf_r+0x2e>
 80165d0:	89a3      	ldrh	r3, [r4, #12]
 80165d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165d6:	f04f 0100 	mov.w	r1, #0
 80165da:	bf14      	ite	ne
 80165dc:	2340      	movne	r3, #64	@ 0x40
 80165de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165e2:	2000      	movs	r0, #0
 80165e4:	6031      	str	r1, [r6, #0]
 80165e6:	602b      	str	r3, [r5, #0]
 80165e8:	b016      	add	sp, #88	@ 0x58
 80165ea:	bd70      	pop	{r4, r5, r6, pc}
 80165ec:	466a      	mov	r2, sp
 80165ee:	f000 f879 	bl	80166e4 <_fstat_r>
 80165f2:	2800      	cmp	r0, #0
 80165f4:	dbec      	blt.n	80165d0 <__swhatbuf_r+0x12>
 80165f6:	9901      	ldr	r1, [sp, #4]
 80165f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80165fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016600:	4259      	negs	r1, r3
 8016602:	4159      	adcs	r1, r3
 8016604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016608:	e7eb      	b.n	80165e2 <__swhatbuf_r+0x24>

0801660a <__smakebuf_r>:
 801660a:	898b      	ldrh	r3, [r1, #12]
 801660c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801660e:	079d      	lsls	r5, r3, #30
 8016610:	4606      	mov	r6, r0
 8016612:	460c      	mov	r4, r1
 8016614:	d507      	bpl.n	8016626 <__smakebuf_r+0x1c>
 8016616:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801661a:	6023      	str	r3, [r4, #0]
 801661c:	6123      	str	r3, [r4, #16]
 801661e:	2301      	movs	r3, #1
 8016620:	6163      	str	r3, [r4, #20]
 8016622:	b003      	add	sp, #12
 8016624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016626:	ab01      	add	r3, sp, #4
 8016628:	466a      	mov	r2, sp
 801662a:	f7ff ffc8 	bl	80165be <__swhatbuf_r>
 801662e:	9f00      	ldr	r7, [sp, #0]
 8016630:	4605      	mov	r5, r0
 8016632:	4639      	mov	r1, r7
 8016634:	4630      	mov	r0, r6
 8016636:	f7ff f88f 	bl	8015758 <_malloc_r>
 801663a:	b948      	cbnz	r0, 8016650 <__smakebuf_r+0x46>
 801663c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016640:	059a      	lsls	r2, r3, #22
 8016642:	d4ee      	bmi.n	8016622 <__smakebuf_r+0x18>
 8016644:	f023 0303 	bic.w	r3, r3, #3
 8016648:	f043 0302 	orr.w	r3, r3, #2
 801664c:	81a3      	strh	r3, [r4, #12]
 801664e:	e7e2      	b.n	8016616 <__smakebuf_r+0xc>
 8016650:	89a3      	ldrh	r3, [r4, #12]
 8016652:	6020      	str	r0, [r4, #0]
 8016654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016658:	81a3      	strh	r3, [r4, #12]
 801665a:	9b01      	ldr	r3, [sp, #4]
 801665c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016660:	b15b      	cbz	r3, 801667a <__smakebuf_r+0x70>
 8016662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016666:	4630      	mov	r0, r6
 8016668:	f000 f84e 	bl	8016708 <_isatty_r>
 801666c:	b128      	cbz	r0, 801667a <__smakebuf_r+0x70>
 801666e:	89a3      	ldrh	r3, [r4, #12]
 8016670:	f023 0303 	bic.w	r3, r3, #3
 8016674:	f043 0301 	orr.w	r3, r3, #1
 8016678:	81a3      	strh	r3, [r4, #12]
 801667a:	89a3      	ldrh	r3, [r4, #12]
 801667c:	431d      	orrs	r5, r3
 801667e:	81a5      	strh	r5, [r4, #12]
 8016680:	e7cf      	b.n	8016622 <__smakebuf_r+0x18>

08016682 <_raise_r>:
 8016682:	291f      	cmp	r1, #31
 8016684:	b538      	push	{r3, r4, r5, lr}
 8016686:	4605      	mov	r5, r0
 8016688:	460c      	mov	r4, r1
 801668a:	d904      	bls.n	8016696 <_raise_r+0x14>
 801668c:	2316      	movs	r3, #22
 801668e:	6003      	str	r3, [r0, #0]
 8016690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016694:	bd38      	pop	{r3, r4, r5, pc}
 8016696:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016698:	b112      	cbz	r2, 80166a0 <_raise_r+0x1e>
 801669a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801669e:	b94b      	cbnz	r3, 80166b4 <_raise_r+0x32>
 80166a0:	4628      	mov	r0, r5
 80166a2:	f000 f853 	bl	801674c <_getpid_r>
 80166a6:	4622      	mov	r2, r4
 80166a8:	4601      	mov	r1, r0
 80166aa:	4628      	mov	r0, r5
 80166ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166b0:	f000 b83a 	b.w	8016728 <_kill_r>
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	d00a      	beq.n	80166ce <_raise_r+0x4c>
 80166b8:	1c59      	adds	r1, r3, #1
 80166ba:	d103      	bne.n	80166c4 <_raise_r+0x42>
 80166bc:	2316      	movs	r3, #22
 80166be:	6003      	str	r3, [r0, #0]
 80166c0:	2001      	movs	r0, #1
 80166c2:	e7e7      	b.n	8016694 <_raise_r+0x12>
 80166c4:	2100      	movs	r1, #0
 80166c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80166ca:	4620      	mov	r0, r4
 80166cc:	4798      	blx	r3
 80166ce:	2000      	movs	r0, #0
 80166d0:	e7e0      	b.n	8016694 <_raise_r+0x12>
	...

080166d4 <raise>:
 80166d4:	4b02      	ldr	r3, [pc, #8]	@ (80166e0 <raise+0xc>)
 80166d6:	4601      	mov	r1, r0
 80166d8:	6818      	ldr	r0, [r3, #0]
 80166da:	f7ff bfd2 	b.w	8016682 <_raise_r>
 80166de:	bf00      	nop
 80166e0:	20000134 	.word	0x20000134

080166e4 <_fstat_r>:
 80166e4:	b538      	push	{r3, r4, r5, lr}
 80166e6:	4d07      	ldr	r5, [pc, #28]	@ (8016704 <_fstat_r+0x20>)
 80166e8:	2300      	movs	r3, #0
 80166ea:	4604      	mov	r4, r0
 80166ec:	4608      	mov	r0, r1
 80166ee:	4611      	mov	r1, r2
 80166f0:	602b      	str	r3, [r5, #0]
 80166f2:	f7ea f945 	bl	8000980 <_fstat>
 80166f6:	1c43      	adds	r3, r0, #1
 80166f8:	d102      	bne.n	8016700 <_fstat_r+0x1c>
 80166fa:	682b      	ldr	r3, [r5, #0]
 80166fc:	b103      	cbz	r3, 8016700 <_fstat_r+0x1c>
 80166fe:	6023      	str	r3, [r4, #0]
 8016700:	bd38      	pop	{r3, r4, r5, pc}
 8016702:	bf00      	nop
 8016704:	200057c8 	.word	0x200057c8

08016708 <_isatty_r>:
 8016708:	b538      	push	{r3, r4, r5, lr}
 801670a:	4d06      	ldr	r5, [pc, #24]	@ (8016724 <_isatty_r+0x1c>)
 801670c:	2300      	movs	r3, #0
 801670e:	4604      	mov	r4, r0
 8016710:	4608      	mov	r0, r1
 8016712:	602b      	str	r3, [r5, #0]
 8016714:	f7ea f944 	bl	80009a0 <_isatty>
 8016718:	1c43      	adds	r3, r0, #1
 801671a:	d102      	bne.n	8016722 <_isatty_r+0x1a>
 801671c:	682b      	ldr	r3, [r5, #0]
 801671e:	b103      	cbz	r3, 8016722 <_isatty_r+0x1a>
 8016720:	6023      	str	r3, [r4, #0]
 8016722:	bd38      	pop	{r3, r4, r5, pc}
 8016724:	200057c8 	.word	0x200057c8

08016728 <_kill_r>:
 8016728:	b538      	push	{r3, r4, r5, lr}
 801672a:	4d07      	ldr	r5, [pc, #28]	@ (8016748 <_kill_r+0x20>)
 801672c:	2300      	movs	r3, #0
 801672e:	4604      	mov	r4, r0
 8016730:	4608      	mov	r0, r1
 8016732:	4611      	mov	r1, r2
 8016734:	602b      	str	r3, [r5, #0]
 8016736:	f7ea f8c1 	bl	80008bc <_kill>
 801673a:	1c43      	adds	r3, r0, #1
 801673c:	d102      	bne.n	8016744 <_kill_r+0x1c>
 801673e:	682b      	ldr	r3, [r5, #0]
 8016740:	b103      	cbz	r3, 8016744 <_kill_r+0x1c>
 8016742:	6023      	str	r3, [r4, #0]
 8016744:	bd38      	pop	{r3, r4, r5, pc}
 8016746:	bf00      	nop
 8016748:	200057c8 	.word	0x200057c8

0801674c <_getpid_r>:
 801674c:	f7ea b8ae 	b.w	80008ac <_getpid>

08016750 <_init>:
 8016750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016752:	bf00      	nop
 8016754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016756:	bc08      	pop	{r3}
 8016758:	469e      	mov	lr, r3
 801675a:	4770      	bx	lr

0801675c <_fini>:
 801675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675e:	bf00      	nop
 8016760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016762:	bc08      	pop	{r3}
 8016764:	469e      	mov	lr, r3
 8016766:	4770      	bx	lr
